
20250325_sagi1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800a018  0800a018  0000b018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a798  0800a798  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a798  0800a798  0000b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a0  0800a7a0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a0  0800a7a0  0000b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7a4  0800a7a4  0000b7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a7a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001d4  0800a97c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800a97c  0000c498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa95  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002632  00000000  00000000  0001bc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b14  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023840  00000000  00000000  0001fc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011de3  00000000  00000000  00043464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d82  00000000  00000000  00055247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005170  00000000  00000000  0012900c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0012e17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a000 	.word	0x0800a000

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800a000 	.word	0x0800a000

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <STprintf+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fe41 	bl	8005bec <setbuf>
	Huart = huart;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <STprintf+0x28>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	200001f0 	.word	0x200001f0

08000f80 <_write>:

int _write(int file,char *ptr,int len){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <_write+0x28>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	f003 f8f8 	bl	800418c <HAL_UART_Transmit>
	return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	FAF = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <getDataIT+0x20>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	@ (8000fd0 <getDataIT+0x24>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f003 f96f 	bl	80042a2 <HAL_UART_Receive_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000201 	.word	0x20000201
 8000fd0:	200001ff 	.word	0x200001ff

08000fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	FAF = 1;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <HAL_UART_RxCpltCallback+0x94>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2baf      	cmp	r3, #175	@ 0xaf
 8000fe8:	d106      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 8000ff0:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001000:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b09      	cmp	r3, #9
 8001008:	dd02      	ble.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 8001022:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800102c:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	d10f      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800103e:	f000 f821 	bl	8001084 <ChSUM>
 8001042:	4603      	mov	r3, r0
 8001044:	2bed      	cmp	r3, #237	@ 0xed
 8001046:	d103      	bne.n	8001050 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <HAL_UART_RxCpltCallback+0xac>)
 800104c:	f000 f846 	bl	80010dc <AddStruct>
			}
			GIcount = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f003 f921 	bl	80042a2 <HAL_UART_Receive_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000201 	.word	0x20000201
 800106c:	200001ff 	.word	0x200001ff
 8001070:	20000200 	.word	0x20000200
 8001074:	2000021c 	.word	0x2000021c
 8001078:	20000220 	.word	0x20000220
 800107c:	200001f4 	.word	0x200001f4
 8001080:	20000204 	.word	0x20000204

08001084 <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	330a      	adds	r3, #10
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2bed      	cmp	r3, #237	@ 0xed
 8001094:	d11b      	bne.n	80010ce <ChSUM+0x4a>
		uint8_t revsum = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e009      	b.n	80010b4 <ChSUM+0x30>
			revsum += (int)Adata[i];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4413      	add	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	ddf2      	ble.n	80010a0 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3309      	adds	r3, #9
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d101      	bne.n	80010ca <ChSUM+0x46>
			return 0xed;
 80010c6:	23ed      	movs	r3, #237	@ 0xed
 80010c8:	e002      	b.n	80010d0 <ChSUM+0x4c>
		}else{
			return 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 80010ce:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8bb 	bl	8001262 <StructInit>
	Udata->LX = Adata[1];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	789a      	ldrb	r2, [r3, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	795a      	ldrb	r2, [r3, #5]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	78da      	ldrb	r2, [r3, #3]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	791a      	ldrb	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	799a      	ldrb	r2, [r3, #6]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3307      	adds	r3, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <AddStruct+0x54>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <AddStruct+0x68>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3307      	adds	r3, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <AddStruct+0x7c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3307      	adds	r3, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <AddStruct+0x90>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3307      	adds	r3, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <AddStruct+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3307      	adds	r3, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <AddStruct+0xb8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3307      	adds	r3, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <AddStruct+0xcc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3307      	adds	r3, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da02      	bge.n	80011ba <AddStruct+0xde>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3308      	adds	r3, #8
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <AddStruct+0xf2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3308      	adds	r3, #8
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <AddStruct+0x106>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <AddStruct+0x11a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3308      	adds	r3, #8
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <AddStruct+0x12e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <AddStruct+0x142>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <AddStruct+0x156>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3308      	adds	r3, #8
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <AddStruct+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3308      	adds	r3, #8
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <AddStruct+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	755a      	strb	r2, [r3, #21]

	return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <StructInit>:

void StructInit(getdata* Udata){
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	755a      	strb	r2, [r3, #21]

	return;
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <AllShow>:

void AllShow(getdata Udata){
 80012fc:	b084      	sub	sp, #16
 80012fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001302:	b0a0      	sub	sp, #128	@ 0x80
 8001304:	af14      	add	r7, sp, #80	@ 0x50
 8001306:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"SHARE:%d "
			"OPTIONS:%d "
			"PS:%d "
			"TOUCHPAD:%d"
			"\r\n"
			,Udata.LX
 800130e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
	printf("LX:%3d "
 8001312:	469c      	mov	ip, r3
			,Udata.LY
 8001314:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
	printf("LX:%3d "
 8001318:	469e      	mov	lr, r3
			,Udata.L2
 800131a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
	printf("LX:%3d "
 800131e:	4698      	mov	r8, r3
			,Udata.RX
 8001320:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
	printf("LX:%3d "
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
			,Udata.RY
 8001326:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
	printf("LX:%3d "
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
			,Udata.R2
 800132c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
	printf("LX:%3d "
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
			,Udata.TRIANGLE
 8001332:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
	printf("LX:%3d "
 8001336:	623b      	str	r3, [r7, #32]
			,Udata.CIRCLE
 8001338:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
	printf("LX:%3d "
 800133c:	61fb      	str	r3, [r7, #28]
			,Udata.CROSS
 800133e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	printf("LX:%3d "
 8001342:	61bb      	str	r3, [r7, #24]
			,Udata.SQUARE
 8001344:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	printf("LX:%3d "
 8001348:	617b      	str	r3, [r7, #20]
			,Udata.UP
 800134a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	printf("LX:%3d "
 800134e:	613b      	str	r3, [r7, #16]
			,Udata.RIGHT
 8001350:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
	printf("LX:%3d "
 8001354:	60fb      	str	r3, [r7, #12]
			,Udata.DOWN
 8001356:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
	printf("LX:%3d "
 800135a:	60bb      	str	r3, [r7, #8]
			,Udata.LEFT
 800135c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
	printf("LX:%3d "
 8001360:	607b      	str	r3, [r7, #4]
			,Udata.L1
 8001362:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
	printf("LX:%3d "
 8001366:	603b      	str	r3, [r7, #0]
			,Udata.L3
 8001368:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
	printf("LX:%3d "
 800136c:	461e      	mov	r6, r3
			,Udata.R1
 800136e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
	printf("LX:%3d "
 8001372:	461d      	mov	r5, r3
			,Udata.R3
 8001374:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
	printf("LX:%3d "
 8001378:	461c      	mov	r4, r3
			,Udata.SHARE
 800137a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
	printf("LX:%3d "
 800137e:	4618      	mov	r0, r3
			,Udata.OPTIONS
 8001380:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
	printf("LX:%3d "
 8001384:	4619      	mov	r1, r3
			,Udata.PS
 8001386:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
	printf("LX:%3d "
 800138a:	461a      	mov	r2, r3
			,Udata.TOUCHPAD
 800138c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
	printf("LX:%3d "
 8001390:	9312      	str	r3, [sp, #72]	@ 0x48
 8001392:	9211      	str	r2, [sp, #68]	@ 0x44
 8001394:	9110      	str	r1, [sp, #64]	@ 0x40
 8001396:	900f      	str	r0, [sp, #60]	@ 0x3c
 8001398:	940e      	str	r4, [sp, #56]	@ 0x38
 800139a:	950d      	str	r5, [sp, #52]	@ 0x34
 800139c:	960c      	str	r6, [sp, #48]	@ 0x30
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	9208      	str	r2, [sp, #32]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	9207      	str	r2, [sp, #28]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	9206      	str	r2, [sp, #24]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	9205      	str	r2, [sp, #20]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	9204      	str	r2, [sp, #16]
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	9203      	str	r2, [sp, #12]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c4:	9202      	str	r2, [sp, #8]
 80013c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4643      	mov	r3, r8
 80013d0:	4672      	mov	r2, lr
 80013d2:	4661      	mov	r1, ip
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <AllShow+0xec>)
 80013d6:	f004 fbf7 	bl	8005bc8 <iprintf>
			);

	return;
 80013da:	bf00      	nop
}
 80013dc:	3730      	adds	r7, #48	@ 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013e4:	b004      	add	sp, #16
 80013e6:	4770      	bx	lr
 80013e8:	0800a018 	.word	0x0800a018

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f001 f82b 	bl	800244c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f8d9 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 fabb 	bl	8001974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013fe:	f000 fa8f 	bl	8001920 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001402:	f000 f933 	bl	800166c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001406:	f000 f9e3 	bl	80017d0 <MX_TIM2_Init>
  MX_UART5_Init();
 800140a:	f000 fa5f 	bl	80018cc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 800140e:	485f      	ldr	r0, [pc, #380]	@ (800158c <main+0x1a0>)
 8001410:	f7ff fda0 	bl	8000f54 <STprintf>
  uint8_t Out[8] = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_PWM_Start(&htim1, TIMCH_1);
 800141c:	2100      	movs	r1, #0
 800141e:	485c      	ldr	r0, [pc, #368]	@ (8001590 <main+0x1a4>)
 8001420:	f002 f98a 	bl	8003738 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIMCH_2);
 8001424:	2104      	movs	r1, #4
 8001426:	485a      	ldr	r0, [pc, #360]	@ (8001590 <main+0x1a4>)
 8001428:	f002 f986 	bl	8003738 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIMCH_2);
 800142c:	2104      	movs	r1, #4
 800142e:	4859      	ldr	r0, [pc, #356]	@ (8001594 <main+0x1a8>)
 8001430:	f002 f982 	bl	8003738 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIMCH_1);
 8001434:	2100      	movs	r1, #0
 8001436:	4857      	ldr	r0, [pc, #348]	@ (8001594 <main+0x1a8>)
 8001438:	f002 f97e 	bl	8003738 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIMCH_3);
 800143c:	2108      	movs	r1, #8
 800143e:	4854      	ldr	r0, [pc, #336]	@ (8001590 <main+0x1a4>)
 8001440:	f002 f97a 	bl	8003738 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIMCH_3);
 8001444:	2108      	movs	r1, #8
 8001446:	4853      	ldr	r0, [pc, #332]	@ (8001594 <main+0x1a8>)
 8001448:	f002 f976 	bl	8003738 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart5);
 800144c:	4852      	ldr	r0, [pc, #328]	@ (8001598 <main+0x1ac>)
 800144e:	f7ff fdad 	bl	8000fac <getDataIT>
//	  }
//	  printf("%d ",FAF);
//	  printf("LX:%+4d LY:%+4d RX:%+4d RY:%+4d \r\n",halfX(data.LX),halfY(data.LY),halfX(data.RX),halfY(data.RY));
//	  HAL_Delay(250);
//	  MoveST(Out,data.LX,data.LY,data.RY);
	  MoveBT(Out,data.LX,data.LY,data.R1,data.L1);
 8001452:	4b52      	ldr	r3, [pc, #328]	@ (800159c <main+0x1b0>)
 8001454:	7819      	ldrb	r1, [r3, #0]
 8001456:	4b51      	ldr	r3, [pc, #324]	@ (800159c <main+0x1b0>)
 8001458:	785a      	ldrb	r2, [r3, #1]
 800145a:	4b50      	ldr	r3, [pc, #320]	@ (800159c <main+0x1b0>)
 800145c:	7c1c      	ldrb	r4, [r3, #16]
 800145e:	4b4f      	ldr	r3, [pc, #316]	@ (800159c <main+0x1b0>)
 8001460:	7b9b      	ldrb	r3, [r3, #14]
 8001462:	4638      	mov	r0, r7
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4623      	mov	r3, r4
 8001468:	f000 fb52 	bl	8001b10 <MoveBT>
	  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_14, Out[LUD]);
 800146c:	783b      	ldrb	r3, [r7, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001474:	484a      	ldr	r0, [pc, #296]	@ (80015a0 <main+0x1b4>)
 8001476:	f001 fb93 	bl	8002ba0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_Pin_7,	Out[RUD]);
 800147a:	787b      	ldrb	r3, [r7, #1]
 800147c:	461a      	mov	r2, r3
 800147e:	2180      	movs	r1, #128	@ 0x80
 8001480:	4848      	ldr	r0, [pc, #288]	@ (80015a4 <main+0x1b8>)
 8001482:	f001 fb8d 	bl	8002ba0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_Pin_4, 	Out[LDD]);
 8001486:	78bb      	ldrb	r3, [r7, #2]
 8001488:	461a      	mov	r2, r3
 800148a:	2110      	movs	r1, #16
 800148c:	4845      	ldr	r0, [pc, #276]	@ (80015a4 <main+0x1b8>)
 800148e:	f001 fb87 	bl	8002ba0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_7, 	Out[RDD]);
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	461a      	mov	r2, r3
 8001496:	2180      	movs	r1, #128	@ 0x80
 8001498:	4841      	ldr	r0, [pc, #260]	@ (80015a0 <main+0x1b4>)
 800149a:	f001 fb81 	bl	8002ba0 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_1,0xff - Out[LUP]);
 800149e:	793b      	ldrb	r3, [r7, #4]
 80014a0:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80014a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <main+0x1a4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_2,0xff - Out[RUP]);
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80014b0:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <main+0x1a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_2,0xff - Out[LDP]);
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80014bc:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <main+0x1a8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_1,0xff - Out[RDP]);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <main+0x1a8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34

	  AllShow(data);
 80014ce:	4b33      	ldr	r3, [pc, #204]	@ (800159c <main+0x1b0>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4616      	mov	r6, r2
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4611      	mov	r1, r2
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	4615      	mov	r5, r2
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4614      	mov	r4, r2
 80014e0:	466a      	mov	r2, sp
 80014e2:	3310      	adds	r3, #16
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	6010      	str	r0, [r2, #0]
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	8093      	strh	r3, [r2, #4]
 80014ec:	4630      	mov	r0, r6
 80014ee:	462a      	mov	r2, r5
 80014f0:	4623      	mov	r3, r4
 80014f2:	f7ff ff03 	bl	80012fc <AllShow>
	  printf("左上 %d %2X 右上 %d %2X 左下 %d %2X 右下 %d %2X\r\n",Out[LUD],Out[LUP],Out[RUD],Out[RUP],Out[LDD],Out[LDP],Out[RDD],Out[RDP]);
#endif
#define P 50
#define O 50

	  if(data.UP == 1){
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <main+0x1b0>)
 80014f8:	7a9b      	ldrb	r3, [r3, #10]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <main+0x126>

//		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 0);
//		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,255 - O);
		  HAL_GPIO_WritePin(GPIOC, GPIO_Pin_4, 1);
 80014fe:	2201      	movs	r2, #1
 8001500:	2110      	movs	r1, #16
 8001502:	4829      	ldr	r0, [pc, #164]	@ (80015a8 <main+0x1bc>)
 8001504:	f001 fb4c 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_3,P);
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <main+0x1a4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2232      	movs	r2, #50	@ 0x32
 800150e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001510:	e016      	b.n	8001540 <main+0x154>
	  }else if(data.DOWN == 1){
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <main+0x1b0>)
 8001514:	7b1b      	ldrb	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <main+0x142>

//		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 1);
//		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,O);
		  HAL_GPIO_WritePin(GPIOC, GPIO_Pin_4, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2110      	movs	r1, #16
 800151e:	4822      	ldr	r0, [pc, #136]	@ (80015a8 <main+0x1bc>)
 8001520:	f001 fb3e 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_3,255 - P);
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <main+0x1a4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	22cd      	movs	r2, #205	@ 0xcd
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800152c:	e008      	b.n	8001540 <main+0x154>
	  }else {

//		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 1);
//		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,0);
		  HAL_GPIO_WritePin(GPIOC, GPIO_Pin_4, 1);
 800152e:	2201      	movs	r2, #1
 8001530:	2110      	movs	r1, #16
 8001532:	481d      	ldr	r0, [pc, #116]	@ (80015a8 <main+0x1bc>)
 8001534:	f001 fb34 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_3,0);
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <main+0x1a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }

	  if(data.CIRCLE == 1){
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <main+0x1b0>)
 8001542:	79db      	ldrb	r3, [r3, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d009      	beq.n	800155c <main+0x170>
		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	4814      	ldr	r0, [pc, #80]	@ (80015a0 <main+0x1b4>)
 800154e:	f001 fb27 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,255 - O);
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <main+0x1a8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	22cd      	movs	r2, #205	@ 0xcd
 8001558:	63da      	str	r2, [r3, #60]	@ 0x3c
 800155a:	e75f      	b.n	800141c <main+0x30>
	  }else if(data.SQUARE == 1){
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <main+0x1b0>)
 800155e:	7a5b      	ldrb	r3, [r3, #9]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <main+0x18c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	2110      	movs	r1, #16
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <main+0x1b4>)
 800156a:	f001 fb19 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,O);
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <main+0x1a8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2232      	movs	r2, #50	@ 0x32
 8001574:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001576:	e751      	b.n	800141c <main+0x30>
	  }else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_4, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <main+0x1b4>)
 800157e:	f001 fb0f 	bl	8002ba0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_3,0);
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <main+0x1a8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim1, TIMCH_1);
 800158a:	e747      	b.n	800141c <main+0x30>
 800158c:	200002fc 	.word	0x200002fc
 8001590:	20000224 	.word	0x20000224
 8001594:	2000026c 	.word	0x2000026c
 8001598:	200002b4 	.word	0x200002b4
 800159c:	20000204 	.word	0x20000204
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	@ 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2234      	movs	r2, #52	@ 0x34
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fcaa 	bl	8005f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <SystemClock_Config+0xb8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a22      	ldr	r2, [pc, #136]	@ (8001664 <SystemClock_Config+0xb8>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e0:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <SystemClock_Config+0xb8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <SystemClock_Config+0xbc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <SystemClock_Config+0xbc>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <SystemClock_Config+0xbc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001614:	2310      	movs	r3, #16
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fd9b 	bl	800315c <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800162c:	f000 fa2c 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fac2 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001656:	f000 fa17 	bl	8001a88 <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	@ 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b092      	sub	sp, #72	@ 0x48
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001672:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2220      	movs	r2, #32
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc3c 	bl	8005f14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800169c:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 800169e:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <MX_TIM1_Init+0x160>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80016ae:	4b46      	ldr	r3, [pc, #280]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016b0:	22ff      	movs	r2, #255	@ 0xff
 80016b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ba:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c6:	4840      	ldr	r0, [pc, #256]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016c8:	f001 ffe6 	bl	8003698 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 f9d9 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	4838      	ldr	r0, [pc, #224]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80016e6:	f002 fc33 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80016f0:	f000 f9ca 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	@ 0x60
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	482b      	ldr	r0, [pc, #172]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 800171a:	f002 f8d5 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001724:	f000 f9b0 	bl	8001a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	2204      	movs	r2, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4821      	ldr	r0, [pc, #132]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 8001742:	f002 f8c1 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 800174c:	f000 f99c 	bl	8001a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	2208      	movs	r2, #8
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 800176a:	f002 f8ad 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001774:	f000 f988 	bl	8001a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80017ac:	f002 fc4c 	bl	8004048 <HAL_TIMEx_ConfigBreakDeadTime>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80017b6:	f000 f967 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ba:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <MX_TIM1_Init+0x15c>)
 80017bc:	f000 fc00 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 80017c0:	bf00      	nop
 80017c2:	3748      	adds	r7, #72	@ 0x48
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000224 	.word	0x20000224
 80017cc:	40010000 	.word	0x40010000

080017d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80017fa:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001806:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001808:	22ff      	movs	r2, #255	@ 0xff
 800180a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001818:	482b      	ldr	r0, [pc, #172]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 800181a:	f001 ff3d 	bl	8003698 <HAL_TIM_PWM_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f930 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	4619      	mov	r1, r3
 8001836:	4824      	ldr	r0, [pc, #144]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001838:	f002 fb8a 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001842:	f000 f921 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001846:	2360      	movs	r3, #96	@ 0x60
 8001848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	481a      	ldr	r0, [pc, #104]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 800185e:	f002 f833 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001868:	f000 f90e 	bl	8001a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0208 	bic.w	r2, r2, #8
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2204      	movs	r2, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001884:	f002 f820 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800188e:	f000 f8fb 	bl	8001a88 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2208      	movs	r2, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 80018aa:	f002 f80d 	bl	80038c8 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80018b4:	f000 f8e8 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <MX_TIM2_Init+0xf8>)
 80018ba:	f000 fb81 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	@ 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000026c 	.word	0x2000026c

080018cc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_UART5_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018d8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80018dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_UART5_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_UART5_Init+0x4c>)
 8001904:	f002 fbf2 	bl	80040ec <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800190e:	f000 f8bb 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002b4 	.word	0x200002b4
 800191c:	40005000 	.word	0x40005000

08001920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <MX_USART2_UART_Init+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 800192c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_USART2_UART_Init+0x4c>)
 8001958:	f002 fbc8 	bl	80040ec <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001962:	f000 f891 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200002fc 	.word	0x200002fc
 8001970:	40004400 	.word	0x40004400

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <MX_GPIO_Init+0x104>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a39      	ldr	r2, [pc, #228]	@ (8001a78 <MX_GPIO_Init+0x104>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <MX_GPIO_Init+0x104>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a32      	ldr	r2, [pc, #200]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_GPIO_Init+0x104>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2190      	movs	r1, #144	@ 0x90
 80019fe:	481f      	ldr	r0, [pc, #124]	@ (8001a7c <MX_GPIO_Init+0x108>)
 8001a00:	f001 f8ce 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2110      	movs	r1, #16
 8001a08:	481d      	ldr	r0, [pc, #116]	@ (8001a80 <MX_GPIO_Init+0x10c>)
 8001a0a:	f001 f8c9 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f244 0190 	movw	r1, #16528	@ 0x4090
 8001a14:	481b      	ldr	r0, [pc, #108]	@ (8001a84 <MX_GPIO_Init+0x110>)
 8001a16:	f001 f8c3 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001a1a:	2390      	movs	r3, #144	@ 0x90
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4812      	ldr	r0, [pc, #72]	@ (8001a7c <MX_GPIO_Init+0x108>)
 8001a32:	f000 ff21 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a36:	2310      	movs	r3, #16
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <MX_GPIO_Init+0x10c>)
 8001a4e:	f000 ff13 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_7;
 8001a52:	f244 0390 	movw	r3, #16528	@ 0x4090
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <MX_GPIO_Init+0x110>)
 8001a6c:	f000 ff04 	bl	8002878 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	@ 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020400 	.word	0x40020400

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <Error_Handler+0x8>

08001a94 <halfX>:
 */

#include <mekanamu.h>
#include <stdio.h>

signed char halfX(uint8_t X){
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if(X > 0x7f - TOLE_VALUE && X < 0x7f + TOLE_VALUE){
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b75      	cmp	r3, #117	@ 0x75
 8001aa2:	d904      	bls.n	8001aae <halfX+0x1a>
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b88      	cmp	r3, #136	@ 0x88
 8001aa8:	d801      	bhi.n	8001aae <halfX+0x1a>
		return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e008      	b.n	8001ac0 <halfX+0x2c>
	}else {
		if(X - 0x7f < -0x7f){
			return -0x7f;
		}else if(X - 0x7f > 0x7f){
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2bff      	cmp	r3, #255	@ 0xff
 8001ab2:	d101      	bne.n	8001ab8 <halfX+0x24>
			return 0x7f;
 8001ab4:	237f      	movs	r3, #127	@ 0x7f
 8001ab6:	e003      	b.n	8001ac0 <halfX+0x2c>
		}else {
			return X - 0x7f;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	3b7f      	subs	r3, #127	@ 0x7f
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b25b      	sxtb	r3, r3
		}
	}
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <halfY>:

signed char halfY(uint8_t Y){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	if(Y > 0x7f - TOLE_VALUE && Y < 0x7f + TOLE_VALUE){
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b75      	cmp	r3, #117	@ 0x75
 8001ada:	d904      	bls.n	8001ae6 <halfY+0x1a>
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b88      	cmp	r3, #136	@ 0x88
 8001ae0:	d801      	bhi.n	8001ae6 <halfY+0x1a>
		return 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e00d      	b.n	8001b02 <halfY+0x36>
	}else {
		if(0x7f - Y < -0x7f){
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001aec:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001af0:	da02      	bge.n	8001af8 <halfY+0x2c>
			return -0x7f;
 8001af2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001af6:	e004      	b.n	8001b02 <halfY+0x36>
		}else if(0x7f - Y > 0x7f){
			return 0x7f;
		}else {
			return 0x7f - Y;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b25b      	sxtb	r3, r3
		}
	}
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <MoveBT>:
		}
	}
}


void MoveBT(uint8_t *Udata,uint8_t stX,uint8_t stY,bool R,bool L){
 8001b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b14:	b0a6      	sub	sp, #152	@ 0x98
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	72fb      	strb	r3, [r7, #11]
 8001b24:	460b      	mov	r3, r1
 8001b26:	72bb      	strb	r3, [r7, #10]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	727b      	strb	r3, [r7, #9]
	double COS;
	double SIN;
	double theta;
	double theta_plus;
	double Adata[8];
	PosX = halfX(stX);
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb0 	bl	8001a94 <halfX>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd14 	bl	8000564 <__aeabi_i2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	PosY = halfY(stY);
 8001b44:	7abb      	ldrb	r3, [r7, #10]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffc0 	bl	8001acc <halfY>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd08 	bl	8000564 <__aeabi_i2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Vroll = (R | L) * 0x7f * RAITO;
 8001b5c:	7a7a      	ldrb	r2, [r7, #9]
 8001b5e:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4613      	mov	r3, r2
 8001b6a:	01db      	lsls	r3, r3, #7
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcf8 	bl	8000564 <__aeabi_i2d>
 8001b74:	a3cd      	add	r3, pc, #820	@ (adr r3, 8001eac <MoveBT+0x39c>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fd5d 	bl	8000638 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	if(R == 1){
 8001b86:	7a7b      	ldrb	r3, [r7, #9]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <MoveBT+0x94>
		Vroll = Vroll;
	}else if(L == 1){
 8001b8c:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <MoveBT+0x94>
		Vroll = - Vroll;
 8001b94:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8001b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b9c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ba0:	e9c7 4524 	strd	r4, r5, [r7, #144]	@ 0x90
	}
	Z = sqrt(pow(PosX,2) + pow(PosY,2));
 8001ba4:	ed9f 1bba 	vldr	d1, [pc, #744]	@ 8001e90 <MoveBT+0x380>
 8001ba8:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001bac:	f006 f848 	bl	8007c40 <pow>
 8001bb0:	ec55 4b10 	vmov	r4, r5, d0
 8001bb4:	ed9f 1bb6 	vldr	d1, [pc, #728]	@ 8001e90 <MoveBT+0x380>
 8001bb8:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8001bbc:	f006 f840 	bl	8007c40 <pow>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb80 	bl	80002cc <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	ec43 2b17 	vmov	d7, r2, r3
 8001bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd8:	eef0 0a67 	vmov.f32	s1, s15
 8001bdc:	f006 f8a0 	bl	8007d20 <sqrt>
 8001be0:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	theta = atan2(PosY,PosX);
 8001be4:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8001be8:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8001bec:	f006 f826 	bl	8007c3c <atan2>
 8001bf0:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	theta_plus = rad(PLUS);
 8001bf4:	ed9f 0ba8 	vldr	d0, [pc, #672]	@ 8001e98 <MoveBT+0x388>
 8001bf8:	f000 f95e 	bl	8001eb8 <rad>
 8001bfc:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

	COS = (Z * cos(theta)) / 2;
 8001c00:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001c04:	f006 f8b8 	bl	8007d78 <cos>
 8001c08:	ec51 0b10 	vmov	r0, r1, d0
 8001c0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c10:	f7fe fd12 	bl	8000638 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c24:	f7fe fe32 	bl	800088c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	SIN = (Z * sin(theta)) / (2 * sin(theta_plus) * cos(theta_plus));
 8001c30:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001c34:	f006 f8f4 	bl	8007e20 <sin>
 8001c38:	ec51 0b10 	vmov	r0, r1, d0
 8001c3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c40:	f7fe fcfa 	bl	8000638 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c50:	f006 f8e6 	bl	8007e20 <sin>
 8001c54:	ec51 0b10 	vmov	r0, r1, d0
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f7fe fb36 	bl	80002cc <__adddf3>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4690      	mov	r8, r2
 8001c66:	4699      	mov	r9, r3
 8001c68:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001c6c:	f006 f884 	bl	8007d78 <cos>
 8001c70:	ec53 2b10 	vmov	r2, r3, d0
 8001c74:	4640      	mov	r0, r8
 8001c76:	4649      	mov	r1, r9
 8001c78:	f7fe fcde 	bl	8000638 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fe02 	bl	800088c <__aeabi_ddiv>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	Adata[LUP] = - COS - SIN - Vroll;
 8001c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c96:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca4:	f7fe fb10 	bl	80002c8 <__aeabi_dsub>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001cb4:	f7fe fb08 	bl	80002c8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	Adata[RUP] =   COS + SIN - Vroll;
 8001cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cc4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cc8:	f7fe fb00 	bl	80002cc <__adddf3>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001cd8:	f7fe faf6 	bl	80002c8 <__aeabi_dsub>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	Adata[LDP] =   COS - SIN - Vroll;
 8001ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ce8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cec:	f7fe faec 	bl	80002c8 <__aeabi_dsub>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001cfc:	f7fe fae4 	bl	80002c8 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	Adata[RDP] = - COS + SIN - Vroll;
 8001d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001d10:	f7fe fada 	bl	80002c8 <__aeabi_dsub>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001d20:	f7fe fad2 	bl	80002c8 <__aeabi_dsub>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
#ifdef PRI
	printf("SIN %f COS %f ",SIN,COS);
#endif

	for(int i = 0;i < 4;i++){
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001d32:	e0a2      	b.n	8001e7a <MoveBT+0x36a>
		if(Adata[i + 4] < 0){
 8001d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d38:	3304      	adds	r3, #4
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	3390      	adds	r3, #144	@ 0x90
 8001d3e:	f107 0208 	add.w	r2, r7, #8
 8001d42:	4413      	add	r3, r2
 8001d44:	3b88      	subs	r3, #136	@ 0x88
 8001d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	f7fe fee3 	bl	8000b1c <__aeabi_dcmplt>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d048      	beq.n	8001dee <MoveBT+0x2de>
			if(Adata[i + 4] < -0x7f){
 8001d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d60:	3304      	adds	r3, #4
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	3390      	adds	r3, #144	@ 0x90
 8001d66:	f107 0208 	add.w	r2, r7, #8
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b88      	subs	r3, #136	@ 0x88
 8001d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea8 <MoveBT+0x398>)
 8001d78:	f7fe fed0 	bl	8000b1c <__aeabi_dcmplt>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00e      	beq.n	8001da0 <MoveBT+0x290>
				Adata[i + 4] = -0x7f;
 8001d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d86:	3304      	adds	r3, #4
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	3390      	adds	r3, #144	@ 0x90
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	4413      	add	r3, r2
 8001d92:	f1a3 0188 	sub.w	r1, r3, #136	@ 0x88
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <MoveBT+0x398>)
 8001d9c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			Udata[i] = 1;
 8001da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
			Udata[i + 4] = (uint8_t)(0x7f + Adata[i + 4]) * 2;
 8001dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001db0:	3304      	adds	r3, #4
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	3390      	adds	r3, #144	@ 0x90
 8001db6:	f107 0208 	add.w	r2, r7, #8
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b88      	subs	r3, #136	@ 0x88
 8001dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc2:	a337      	add	r3, pc, #220	@ (adr r3, 8001ea0 <MoveBT+0x390>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fa80 	bl	80002cc <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe ff08 	bl	8000be8 <__aeabi_d2uiz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de0:	3304      	adds	r3, #4
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	440b      	add	r3, r1
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e040      	b.n	8001e70 <MoveBT+0x360>
#ifdef PRI
			printf("nega ");
#endif
		}else{
			if(Adata[i + 4] > 0x7f){
 8001dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001df2:	3304      	adds	r3, #4
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	3390      	adds	r3, #144	@ 0x90
 8001df8:	f107 0208 	add.w	r2, r7, #8
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b88      	subs	r3, #136	@ 0x88
 8001e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e04:	a326      	add	r3, pc, #152	@ (adr r3, 8001ea0 <MoveBT+0x390>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fea5 	bl	8000b58 <__aeabi_dcmpgt>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <MoveBT+0x322>
				Adata[i + 4] = 0x7f;
 8001e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e18:	3304      	adds	r3, #4
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	3390      	adds	r3, #144	@ 0x90
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	4413      	add	r3, r2
 8001e24:	f1a3 0188 	sub.w	r1, r3, #136	@ 0x88
 8001e28:	a31d      	add	r3, pc, #116	@ (adr r3, 8001ea0 <MoveBT+0x390>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	e9c1 2300 	strd	r2, r3, [r1]
			}
			Udata[i] = 0;
 8001e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
			Udata[i + 4] = (uint8_t)(Adata[i + 4]) * 2;
 8001e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e42:	3304      	adds	r3, #4
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	3390      	adds	r3, #144	@ 0x90
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b88      	subs	r3, #136	@ 0x88
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe fec6 	bl	8000be8 <__aeabi_d2uiz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e64:	3304      	adds	r3, #4
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	440b      	add	r3, r1
 8001e6a:	0052      	lsls	r2, r2, #1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < 4;i++){
 8001e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e74:	3301      	adds	r3, #1
 8001e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f77f af58 	ble.w	8001d34 <MoveBT+0x224>
#ifdef PRI
			printf("posi ");
#endif
		}
	}
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3798      	adds	r7, #152	@ 0x98
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40000000 	.word	0x40000000
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40468000 	.word	0x40468000
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	405fc000 	.word	0x405fc000
 8001ea8:	c05fc000 	.word	0xc05fc000
 8001eac:	66666666 	.word	0x66666666
 8001eb0:	3fe66666 	.word	0x3fe66666
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <rad>:

double deg(double rad){
	return (rad * 180) / M_PI;
}

double rad(double deg){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	ed87 0b00 	vstr	d0, [r7]
	return (deg * M_PI) / 180;
 8001ec2:	a30e      	add	r3, pc, #56	@ (adr r3, 8001efc <rad+0x44>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ecc:	f7fe fbb4 	bl	8000638 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <rad+0x40>)
 8001ede:	f7fe fcd5 	bl	800088c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40668000 	.word	0x40668000
 8001efc:	54442d18 	.word	0x54442d18
 8001f00:	400921fb 	.word	0x400921fb

08001f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <HAL_TIM_PWM_MspInit+0x64>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a13      	ldr	r2, [pc, #76]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f82:	e012      	b.n	8001faa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8c:	d10d      	bne.n	8001faa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x68>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_TIM_MspPostInit+0xf0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d11f      	bne.n	8002022 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ffe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002010:	2301      	movs	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4827      	ldr	r0, [pc, #156]	@ (80020b8 <HAL_TIM_MspPostInit+0xf8>)
 800201c:	f000 fc2c 	bl	8002878 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002020:	e042      	b.n	80020a8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202a:	d13d      	bne.n	80020a8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a1f      	ldr	r2, [pc, #124]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <HAL_TIM_MspPostInit+0xf4>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002064:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002076:	2301      	movs	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <HAL_TIM_MspPostInit+0xf8>)
 8002082:	f000 fbf9 	bl	8002878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002098:	2301      	movs	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	@ (80020bc <HAL_TIM_MspPostInit+0xfc>)
 80020a4:	f000 fbe8 	bl	8002878 <HAL_GPIO_Init>
}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	@ 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400

080020c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <HAL_UART_MspInit+0x134>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d153      	bne.n	800218a <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	4a43      	ldr	r2, [pc, #268]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80020ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a3c      	ldr	r2, [pc, #240]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b3a      	ldr	r3, [pc, #232]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002148:	2308      	movs	r3, #8
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	482a      	ldr	r0, [pc, #168]	@ (80021fc <HAL_UART_MspInit+0x13c>)
 8002154:	f000 fb90 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002158:	2304      	movs	r3, #4
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002168:	2308      	movs	r3, #8
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	4619      	mov	r1, r3
 8002172:	4823      	ldr	r0, [pc, #140]	@ (8002200 <HAL_UART_MspInit+0x140>)
 8002174:	f000 fb80 	bl	8002878 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2035      	movs	r0, #53	@ 0x35
 800217e:	f000 fab2 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002182:	2035      	movs	r0, #53	@ 0x35
 8002184:	f000 facb 	bl	800271e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002188:	e030      	b.n	80021ec <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <HAL_UART_MspInit+0x144>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d12b      	bne.n	80021ec <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 800219e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	4a0f      	ldr	r2, [pc, #60]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_UART_MspInit+0x138>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021cc:	230c      	movs	r3, #12
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021dc:	2307      	movs	r3, #7
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4808      	ldr	r0, [pc, #32]	@ (8002208 <HAL_UART_MspInit+0x148>)
 80021e8:	f000 fb46 	bl	8002878 <HAL_GPIO_Init>
}
 80021ec:	bf00      	nop
 80021ee:	3730      	adds	r7, #48	@ 0x30
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40005000 	.word	0x40005000
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40004400 	.word	0x40004400
 8002208:	40020000 	.word	0x40020000

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <NMI_Handler+0x4>

08002214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <MemManage_Handler+0x4>

08002224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <UsageFault_Handler+0x4>

08002234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f945 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <UART5_IRQHandler+0x10>)
 8002272:	f002 f83b 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002b4 	.word	0x200002b4

08002280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return 1;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_kill>:

int _kill(int pid, int sig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229a:	f003 fe8d 	bl	8005fb8 <__errno>
 800229e:	4603      	mov	r3, r0
 80022a0:	2216      	movs	r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
  return -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_exit>:

void _exit (int status)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe7 	bl	8002290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c2:	bf00      	nop
 80022c4:	e7fd      	b.n	80022c2 <_exit+0x12>

080022c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e00a      	b.n	80022ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d8:	f3af 8000 	nop.w
 80022dc:	4601      	mov	r1, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	60ba      	str	r2, [r7, #8]
 80022e4:	b2ca      	uxtb	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	dbf0      	blt.n	80022d8 <_read+0x12>
  }

  return len;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002328:	605a      	str	r2, [r3, #4]
  return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_isatty>:

int _isatty(int file)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f003 fe0e 	bl	8005fb8 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20020000 	.word	0x20020000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	20000344 	.word	0x20000344
 80023d0:	20000498 	.word	0x20000498

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002430 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023fc:	f7ff ffea 	bl	80023d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002418:	4c0a      	ldr	r4, [pc, #40]	@ (8002444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002426:	f003 fdcd 	bl	8005fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7fe ffdf 	bl	80013ec <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800243c:	0800a7a8 	.word	0x0800a7a8
  ldr r2, =_sbss
 8002440:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002444:	20000498 	.word	0x20000498

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 f92b 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fd40 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f943 	bl	800273a <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f90b 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	20000348 	.word	0x20000348

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000348 	.word	0x20000348

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	@ (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	@ (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	@ (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff feda 	bl	8002518 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d008      	beq.n	8002784 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2280      	movs	r2, #128	@ 0x80
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e052      	b.n	800282a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0216 	bic.w	r2, r2, #22
 8002792:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_DMA_Abort+0x62>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0208 	bic.w	r2, r2, #8
 80027c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d4:	e013      	b.n	80027fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d6:	f7ff fe9f 	bl	8002518 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d90c      	bls.n	80027fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e015      	b.n	800282a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e4      	bne.n	80027d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d004      	beq.n	8002850 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e00c      	b.n	800286a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e165      	b.n	8002b60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8154 	bne.w	8002b5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80ae 	beq.w	8002b5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b5d      	ldr	r3, [pc, #372]	@ (8002b78 <HAL_GPIO_Init+0x300>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	4a5c      	ldr	r2, [pc, #368]	@ (8002b78 <HAL_GPIO_Init+0x300>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b78 <HAL_GPIO_Init+0x300>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_GPIO_Init+0x304>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	@ (8002b80 <HAL_GPIO_Init+0x308>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d025      	beq.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	@ (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x216>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4d      	ldr	r2, [pc, #308]	@ (8002b88 <HAL_GPIO_Init+0x310>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x212>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4c      	ldr	r2, [pc, #304]	@ (8002b8c <HAL_GPIO_Init+0x314>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	@ (8002b90 <HAL_GPIO_Init+0x318>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x20a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4a      	ldr	r2, [pc, #296]	@ (8002b94 <HAL_GPIO_Init+0x31c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x206>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a49      	ldr	r2, [pc, #292]	@ (8002b98 <HAL_GPIO_Init+0x320>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x202>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e00c      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e00a      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e008      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x21c>
 8002a92:	2300      	movs	r3, #0
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa4:	4935      	ldr	r1, [pc, #212]	@ (8002b7c <HAL_GPIO_Init+0x304>)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a31      	ldr	r2, [pc, #196]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a26      	ldr	r2, [pc, #152]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b06:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b54:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	f67f ae96 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40021400 	.word	0x40021400
 8002b98:	40021800 	.word	0x40021800
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7ff fc28 	bl	8002518 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7ff fc24 	bl	8002518 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f855 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fb88 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	0800a180 	.word	0x0800a180
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	0800a190 	.word	0x0800a190

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffdc 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	0800a190 	.word	0x0800a190

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b0a6      	sub	sp, #152	@ 0x98
 8002e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2e:	4bc8      	ldr	r3, [pc, #800]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	f200 817e 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x330>
 8002e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08003139 	.word	0x08003139
 8002e4c:	08003139 	.word	0x08003139
 8002e50:	08003139 	.word	0x08003139
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08003139 	.word	0x08003139
 8002e5c:	08003139 	.word	0x08003139
 8002e60:	08003139 	.word	0x08003139
 8002e64:	08002e89 	.word	0x08002e89
 8002e68:	08003139 	.word	0x08003139
 8002e6c:	08003139 	.word	0x08003139
 8002e70:	08003139 	.word	0x08003139
 8002e74:	08002ff3 	.word	0x08002ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4bb6      	ldr	r3, [pc, #728]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e7e:	e15f      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4bb5      	ldr	r3, [pc, #724]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e86:	e15b      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e88:	4bb1      	ldr	r3, [pc, #708]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e94:	4bae      	ldr	r3, [pc, #696]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea0:	4bab      	ldr	r3, [pc, #684]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002eac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eb8:	4ba7      	ldr	r3, [pc, #668]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	fb03 f202 	mul.w	r2, r3, r2
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	4aa2      	ldr	r2, [pc, #648]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	fba1 1202 	umull	r1, r2, r1, r2
 8002ed6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ed8:	460a      	mov	r2, r1
 8002eda:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002edc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ede:	4413      	add	r3, r2
 8002ee0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ef0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ef4:	f7fd fe98 	bl	8000c28 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f02:	e064      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b92      	ldr	r3, [pc, #584]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f0e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f32:	0150      	lsls	r0, r2, #5
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4621      	mov	r1, r4
 8002f3a:	1a51      	subs	r1, r2, r1
 8002f3c:	6139      	str	r1, [r7, #16]
 8002f3e:	4629      	mov	r1, r5
 8002f40:	eb63 0301 	sbc.w	r3, r3, r1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f52:	4659      	mov	r1, fp
 8002f54:	018b      	lsls	r3, r1, #6
 8002f56:	4651      	mov	r1, sl
 8002f58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	018a      	lsls	r2, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ebb2 0801 	subs.w	r8, r2, r1
 8002f66:	4659      	mov	r1, fp
 8002f68:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	eb18 0303 	adds.w	r3, r8, r3
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	eb49 0303 	adc.w	r3, r9, r3
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	028b      	lsls	r3, r1, #10
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002faa:	4621      	mov	r1, r4
 8002fac:	028a      	lsls	r2, r1, #10
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fc0:	f7fd fe32 	bl	8000c28 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fce:	4b60      	ldr	r3, [pc, #384]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002fe0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ff0:	e0a6      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff2:	4b57      	ldr	r3, [pc, #348]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffe:	4b54      	ldr	r3, [pc, #336]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02a      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b51      	ldr	r3, [pc, #324]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003014:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800301c:	2100      	movs	r1, #0
 800301e:	4b4e      	ldr	r3, [pc, #312]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x350>)
 8003020:	fb03 f201 	mul.w	r2, r3, r1
 8003024:	2300      	movs	r3, #0
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	4413      	add	r3, r2
 800302c:	4a4a      	ldr	r2, [pc, #296]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x350>)
 800302e:	fba0 1202 	umull	r1, r2, r0, r2
 8003032:	677a      	str	r2, [r7, #116]	@ 0x74
 8003034:	460a      	mov	r2, r1
 8003036:	673a      	str	r2, [r7, #112]	@ 0x70
 8003038:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800303a:	4413      	add	r3, r2
 800303c:	677b      	str	r3, [r7, #116]	@ 0x74
 800303e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003042:	2200      	movs	r2, #0
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
 8003046:	637a      	str	r2, [r7, #52]	@ 0x34
 8003048:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800304c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003050:	f7fd fdea 	bl	8000c28 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800305e:	e05b      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003060:	4b3b      	ldr	r3, [pc, #236]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	2200      	movs	r2, #0
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800306a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
 8003078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	f04f 0000 	mov.w	r0, #0
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	0159      	lsls	r1, r3, #5
 800308a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308e:	0150      	lsls	r0, r2, #5
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4641      	mov	r1, r8
 8003096:	ebb2 0a01 	subs.w	sl, r2, r1
 800309a:	4649      	mov	r1, r9
 800309c:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030b4:	ebb2 040a 	subs.w	r4, r2, sl
 80030b8:	eb63 050b 	sbc.w	r5, r3, fp
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	00eb      	lsls	r3, r5, #3
 80030c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ca:	00e2      	lsls	r2, r4, #3
 80030cc:	4614      	mov	r4, r2
 80030ce:	461d      	mov	r5, r3
 80030d0:	4643      	mov	r3, r8
 80030d2:	18e3      	adds	r3, r4, r3
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	464b      	mov	r3, r9
 80030d8:	eb45 0303 	adc.w	r3, r5, r3
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003100:	2200      	movs	r2, #0
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	61fa      	str	r2, [r7, #28]
 8003106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310a:	f7fd fd8d 	bl	8000c28 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4613      	mov	r3, r2
 8003114:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x348>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0f1b      	lsrs	r3, r3, #28
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800312a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003136:	e003      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x34c>)
 800313a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800313e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003140:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003144:	4618      	mov	r0, r3
 8003146:	3798      	adds	r7, #152	@ 0x98
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	017d7840 	.word	0x017d7840

0800315c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e28d      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8083 	beq.w	8003282 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800317c:	4b94      	ldr	r3, [pc, #592]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b04      	cmp	r3, #4
 8003186:	d019      	beq.n	80031bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003188:	4b91      	ldr	r3, [pc, #580]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003190:	2b08      	cmp	r3, #8
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003194:	4b8e      	ldr	r3, [pc, #568]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a0:	d00c      	beq.n	80031bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4b8b      	ldr	r3, [pc, #556]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d112      	bne.n	80031d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b88      	ldr	r3, [pc, #544]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b84      	ldr	r3, [pc, #528]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05b      	beq.n	8003280 <HAL_RCC_OscConfig+0x124>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d157      	bne.n	8003280 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e25a      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x90>
 80031de:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7b      	ldr	r2, [pc, #492]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xcc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0xb4>
 80031f6:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a75      	ldr	r2, [pc, #468]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b73      	ldr	r3, [pc, #460]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a72      	ldr	r2, [pc, #456]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xcc>
 8003210:	4b6f      	ldr	r3, [pc, #444]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6e      	ldr	r2, [pc, #440]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b6c      	ldr	r3, [pc, #432]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6b      	ldr	r2, [pc, #428]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7ff f972 	bl	8002518 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7ff f96e 	bl	8002518 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e21f      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b61      	ldr	r3, [pc, #388]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xdc>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7ff f95e 	bl	8002518 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f95a 	bl	8002518 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e20b      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x104>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d06f      	beq.n	800336e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800328e:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d017      	beq.n	80032ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800329a:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
        || \
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x186>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1d3      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4937      	ldr	r1, [pc, #220]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b34      	ldr	r3, [pc, #208]	@ (80033d4 <HAL_RCC_OscConfig+0x278>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7ff f907 	bl	8002518 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7ff f903 	bl	8002518 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1b4      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4925      	ldr	r1, [pc, #148]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <HAL_RCC_OscConfig+0x278>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7ff f8e6 	bl	8002518 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7ff f8e2 	bl	8002518 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e193      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d036      	beq.n	80033e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7ff f8c6 	bl	8002518 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7ff f8c2 	bl	8002518 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e173      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x234>
 80033ae:	e01b      	b.n	80033e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b0:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7ff f8af 	bl	8002518 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	e00e      	b.n	80033dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033be:	f7ff f8ab 	bl	8002518 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d907      	bls.n	80033dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e15c      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	42470000 	.word	0x42470000
 80033d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80033de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ea      	bne.n	80033be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8097 	beq.w	8003524 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b83      	ldr	r3, [pc, #524]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	4b7f      	ldr	r3, [pc, #508]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	4a7e      	ldr	r2, [pc, #504]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	@ 0x40
 8003416:	4b7c      	ldr	r3, [pc, #496]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b79      	ldr	r3, [pc, #484]	@ (800360c <HAL_RCC_OscConfig+0x4b0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b76      	ldr	r3, [pc, #472]	@ (800360c <HAL_RCC_OscConfig+0x4b0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x4b0>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7ff f86b 	bl	8002518 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7ff f867 	bl	8002518 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e118      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b6c      	ldr	r3, [pc, #432]	@ (800360c <HAL_RCC_OscConfig+0x4b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x31e>
 800346c:	4b66      	ldr	r3, [pc, #408]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	4a65      	ldr	r2, [pc, #404]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	@ 0x70
 8003478:	e01c      	b.n	80034b4 <HAL_RCC_OscConfig+0x358>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x340>
 8003482:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	@ 0x70
 800348e:	4b5e      	ldr	r3, [pc, #376]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	4a5d      	ldr	r2, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	@ 0x70
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0x358>
 800349c:	4b5a      	ldr	r3, [pc, #360]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a59      	ldr	r2, [pc, #356]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a8:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ac:	4a56      	ldr	r2, [pc, #344]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80034ae:	f023 0304 	bic.w	r3, r3, #4
 80034b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7ff f82c 	bl	8002518 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7ff f828 	bl	8002518 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0d7      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ee      	beq.n	80034c4 <HAL_RCC_OscConfig+0x368>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7ff f816 	bl	8002518 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7ff f812 	bl	8002518 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0c1      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ee      	bne.n	80034f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	4a3a      	ldr	r2, [pc, #232]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80ad 	beq.w	8003688 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352e:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b08      	cmp	r3, #8
 8003538:	d060      	beq.n	80035fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d145      	bne.n	80035ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <HAL_RCC_OscConfig+0x4b4>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe ffe6 	bl	8002518 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe ffe2 	bl	8002518 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e093      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	071b      	lsls	r3, r3, #28
 800359a:	491b      	ldr	r1, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x4b4>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe ffb7 	bl	8002518 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fe ffb3 	bl	8002518 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e064      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x452>
 80035cc:	e05c      	b.n	8003688 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_RCC_OscConfig+0x4b4>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe ffa0 	bl	8002518 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe ff9c 	bl	8002518 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04d      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x480>
 80035fa:	e045      	b.n	8003688 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e040      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000
 8003610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003614:	4b1f      	ldr	r3, [pc, #124]	@ (8003694 <HAL_RCC_OscConfig+0x538>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d030      	beq.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d129      	bne.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d122      	bne.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800364a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	4293      	cmp	r3, r2
 800364e:	d119      	bne.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	3b01      	subs	r3, #1
 800365e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d10f      	bne.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fc48 	bl	8001f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 f9b8 	bl	8003a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_TIM_PWM_Start+0x24>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e022      	b.n	80037a2 <HAL_TIM_PWM_Start+0x6a>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d109      	bne.n	8003776 <HAL_TIM_PWM_Start+0x3e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	e015      	b.n	80037a2 <HAL_TIM_PWM_Start+0x6a>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d109      	bne.n	8003790 <HAL_TIM_PWM_Start+0x58>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <HAL_TIM_PWM_Start+0x6a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07c      	b.n	80038a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_PWM_Start+0x82>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b8:	e013      	b.n	80037e2 <HAL_TIM_PWM_Start+0xaa>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d104      	bne.n	80037ca <HAL_TIM_PWM_Start+0x92>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c8:	e00b      	b.n	80037e2 <HAL_TIM_PWM_Start+0xaa>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d104      	bne.n	80037da <HAL_TIM_PWM_Start+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d8:	e003      	b.n	80037e2 <HAL_TIM_PWM_Start+0xaa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	6839      	ldr	r1, [r7, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fb8a 	bl	8003f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <HAL_TIM_PWM_Start+0x174>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_PWM_Start+0xcc>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <HAL_TIM_PWM_Start+0x178>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_TIM_PWM_Start+0xd0>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_TIM_PWM_Start+0xd2>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	@ (80038ac <HAL_TIM_PWM_Start+0x174>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003830:	d01d      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1f      	ldr	r2, [pc, #124]	@ (80038b4 <HAL_TIM_PWM_Start+0x17c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <HAL_TIM_PWM_Start+0x180>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <HAL_TIM_PWM_Start+0x184>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a16      	ldr	r2, [pc, #88]	@ (80038b0 <HAL_TIM_PWM_Start+0x178>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_TIM_PWM_Start+0x188>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIM_PWM_Start+0x136>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <HAL_TIM_PWM_Start+0x18c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d010      	beq.n	80038a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	e007      	b.n	80038a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40010400 	.word	0x40010400
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40001800 	.word	0x40001800

080038c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0ae      	b.n	8003a44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	f200 809f 	bhi.w	8003a34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003a35 	.word	0x08003a35
 8003904:	08003a35 	.word	0x08003a35
 8003908:	08003a35 	.word	0x08003a35
 800390c:	08003971 	.word	0x08003971
 8003910:	08003a35 	.word	0x08003a35
 8003914:	08003a35 	.word	0x08003a35
 8003918:	08003a35 	.word	0x08003a35
 800391c:	080039b3 	.word	0x080039b3
 8003920:	08003a35 	.word	0x08003a35
 8003924:	08003a35 	.word	0x08003a35
 8003928:	08003a35 	.word	0x08003a35
 800392c:	080039f3 	.word	0x080039f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f934 	bl	8003ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0208 	orr.w	r2, r2, #8
 800394a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6999      	ldr	r1, [r3, #24]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	619a      	str	r2, [r3, #24]
      break;
 800396e:	e064      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f984 	bl	8003c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800398a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6999      	ldr	r1, [r3, #24]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	619a      	str	r2, [r3, #24]
      break;
 80039b0:	e043      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f9d9 	bl	8003d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0208 	orr.w	r2, r2, #8
 80039cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0204 	bic.w	r2, r2, #4
 80039dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69d9      	ldr	r1, [r3, #28]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	61da      	str	r2, [r3, #28]
      break;
 80039f0:	e023      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fa2d 	bl	8003e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	021a      	lsls	r2, r3, #8
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	61da      	str	r2, [r3, #28]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
      break;
 8003a38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6a:	d00f      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a43      	ldr	r2, [pc, #268]	@ (8003b7c <TIM_Base_SetConfig+0x130>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a42      	ldr	r2, [pc, #264]	@ (8003b80 <TIM_Base_SetConfig+0x134>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <TIM_Base_SetConfig+0x138>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aac:	d027      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a32      	ldr	r2, [pc, #200]	@ (8003b7c <TIM_Base_SetConfig+0x130>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d023      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <TIM_Base_SetConfig+0x134>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <TIM_Base_SetConfig+0x138>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d017      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b8c <TIM_Base_SetConfig+0x140>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <TIM_Base_SetConfig+0x144>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <TIM_Base_SetConfig+0x148>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b98 <TIM_Base_SetConfig+0x14c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <TIM_Base_SetConfig+0x150>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <TIM_Base_SetConfig+0x154>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <TIM_Base_SetConfig+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0xf8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <TIM_Base_SetConfig+0x13c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40010400 	.word	0x40010400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	40001800 	.word	0x40001800
 8003b9c:	40001c00 	.word	0x40001c00
 8003ba0:	40002000 	.word	0x40002000

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 0201 	bic.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 0302 	bic.w	r3, r3, #2
 8003bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a20      	ldr	r2, [pc, #128]	@ (8003c7c <TIM_OC1_SetConfig+0xd8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC1_SetConfig+0x64>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <TIM_OC1_SetConfig+0xdc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10c      	bne.n	8003c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0308 	bic.w	r3, r3, #8
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <TIM_OC1_SetConfig+0xd8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC1_SetConfig+0x8e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <TIM_OC1_SetConfig+0xdc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010400 	.word	0x40010400

08003c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 0210 	bic.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0320 	bic.w	r3, r3, #32
 8003cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <TIM_OC2_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0x68>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10d      	bne.n	8003d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <TIM_OC2_SetConfig+0xe4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC2_SetConfig+0x94>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <TIM_OC2_SetConfig+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d113      	bne.n	8003d40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40010400 	.word	0x40010400

08003d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <TIM_OC3_SetConfig+0xe0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC3_SetConfig+0x66>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10d      	bne.n	8003df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <TIM_OC3_SetConfig+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_OC3_SetConfig+0x92>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	@ (8003e54 <TIM_OC3_SetConfig+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d113      	bne.n	8003e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400

08003e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <TIM_OC4_SetConfig+0xa4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC4_SetConfig+0x68>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <TIM_OC4_SetConfig+0xa8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	401a      	ands	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e05a      	b.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a21      	ldr	r2, [pc, #132]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1a      	ldr	r2, [pc, #104]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a18      	ldr	r2, [pc, #96]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10c      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40001800 	.word	0x40001800

08004048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e03d      	b.n	80040e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e042      	b.n	8004184 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd ffd4 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	@ 0x24
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800412e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fdbd 	bl	8004cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d175      	bne.n	8004298 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Transmit+0x2c>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e06e      	b.n	800429a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2221      	movs	r2, #33	@ 0x21
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ca:	f7fe f9a5 	bl	8002518 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d108      	bne.n	80041f8 <HAL_UART_Transmit+0x6c>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e003      	b.n	8004200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004200:	e02e      	b.n	8004260 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fb1f 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e03a      	b.n	800429a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3302      	adds	r3, #2
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e007      	b.n	8004252 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3301      	adds	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1cb      	bne.n	8004202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	@ 0x40
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 faeb 	bl	8004850 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e006      	b.n	800429a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d112      	bne.n	80042e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Receive_IT+0x26>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e00b      	b.n	80042e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fb12 	bl	8004902 <UART_Start_Receive_IT>
 80042de:	4603      	mov	r3, r0
 80042e0:	e000      	b.n	80042e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b0ba      	sub	sp, #232	@ 0xe8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fbf2 	bl	8004b34 <UART_Receive_IT>
      return;
 8004350:	e25b      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80de 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
 800435c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80d1 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 81f2 	beq.w	8004800 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb7d 	bl	8004b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <HAL_UART_IRQHandler+0x17a>
 800445e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04f      	beq.n	8004506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa85 	bl	8004976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d141      	bne.n	80044fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1d9      	bne.n	800447a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	4a7e      	ldr	r2, [pc, #504]	@ (80046cc <HAL_UART_IRQHandler+0x3e0>)
 80044d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe f9a9 	bl	8002832 <HAL_DMA_Abort_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044f0:	4610      	mov	r0, r2
 80044f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e00e      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f994 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	e00a      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f990 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	e006      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f98c 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004512:	e175      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	bf00      	nop
    return;
 8004516:	e173      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 814f 	bne.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8148 	beq.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8141 	beq.w	80047c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	f040 80b6 	bne.w	80046d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8145 	beq.w	8004804 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800457e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004582:	429a      	cmp	r2, r3
 8004584:	f080 813e 	bcs.w	8004804 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800458e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459a:	f000 8088 	beq.w	80046ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1d9      	bne.n	800459e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800460e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e1      	bne.n	80045ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800464a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800467c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467e:	f023 0310 	bic.w	r3, r3, #16
 8004682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004690:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004692:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004696:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800469e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe f852 	bl	8002752 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8b7 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046ca:	e09b      	b.n	8004804 <HAL_UART_IRQHandler+0x518>
 80046cc:	08004a3d 	.word	0x08004a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808e 	beq.w	8004808 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8089 	beq.w	8004808 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800471a:	647a      	str	r2, [r7, #68]	@ 0x44
 800471c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	623b      	str	r3, [r7, #32]
   return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004752:	633a      	str	r2, [r7, #48]	@ 0x30
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f83d 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047be:	e023      	b.n	8004808 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_UART_IRQHandler+0x4f4>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f943 	bl	8004a64 <UART_Transmit_IT>
    return;
 80047de:	e014      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_UART_IRQHandler+0x51e>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f983 	bl	8004b04 <UART_EndTransmit_IT>
    return;
 80047fe:	e004      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
    return;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
      return;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_UART_IRQHandler+0x51e>
      return;
 8004808:	bf00      	nop
  }
}
 800480a:	37e8      	adds	r7, #232	@ 0xe8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	e03b      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d037      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fd fe55 	bl	8002518 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <UART_WaitOnFlagUntilTimeout+0x30>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03a      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d023      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b80      	cmp	r3, #128	@ 0x80
 8004896:	d020      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d01d      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d116      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f857 	bl	8004976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2208      	movs	r2, #8
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00f      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d0b4      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2222      	movs	r2, #34	@ 0x22
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004946:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b095      	sub	sp, #84	@ 0x54
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499e:	643a      	str	r2, [r7, #64]	@ 0x40
 80049a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d119      	bne.n	8004a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0310 	bic.w	r3, r3, #16
 8004a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a0e:	61ba      	str	r2, [r7, #24]
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a30:	bf00      	nop
 8004a32:	3754      	adds	r7, #84	@ 0x54
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fee4 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b21      	cmp	r3, #33	@ 0x21
 8004a76:	d13e      	bne.n	8004af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a80:	d114      	bne.n	8004aac <UART_Transmit_IT+0x48>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d110      	bne.n	8004aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]
 8004aaa:	e008      	b.n	8004abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6211      	str	r1, [r2, #32]
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe73 	bl	8004810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	@ 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b22      	cmp	r3, #34	@ 0x22
 8004b46:	f040 80ae 	bne.w	8004ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b52:	d117      	bne.n	8004b84 <UART_Receive_IT+0x50>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b82:	e026      	b.n	8004bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d007      	beq.n	8004ba8 <UART_Receive_IT+0x74>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <UART_Receive_IT+0x82>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e008      	b.n	8004bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4619      	mov	r1, r3
 8004be0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15d      	bne.n	8004ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0220 	bic.w	r2, r2, #32
 8004bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d135      	bne.n	8004c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	613b      	str	r3, [r7, #16]
   return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c52:	623a      	str	r2, [r7, #32]
 8004c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d10a      	bne.n	8004c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fdd1 	bl	8004838 <HAL_UARTEx_RxEventCallback>
 8004c96:	e002      	b.n	8004c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc f99b 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e002      	b.n	8004ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	@ 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0c0      	sub	sp, #256	@ 0x100
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d08:	f021 010c 	bic.w	r1, r1, #12
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d16:	430b      	orrs	r3, r1
 8004d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	ea40 0301 	orr.w	r3, r0, r1
 8004d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f7c <UART_SetConfig+0x2cc>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d005      	beq.n	8004d50 <UART_SetConfig+0xa0>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <UART_SetConfig+0x2d0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d104      	bne.n	8004d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe f846 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d58:	e003      	b.n	8004d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7fe f82d 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6c:	f040 810c 	bne.w	8004f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0801 	adds.w	r8, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0901 	adc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de4:	4613      	mov	r3, r2
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004df4:	f7fb ff18 	bl	8000c28 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e20:	415b      	adcs	r3, r3
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e28:	4641      	mov	r1, r8
 8004e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0b01 	adc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	4692      	mov	sl, r2
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb4b 0303 	adc.w	r3, fp, r3
 8004e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e8a:	f7fb fecd 	bl	8000c28 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	@ 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f46:	f7fb fe6f 	bl	8000c28 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	@ 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3332      	adds	r3, #50	@ 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0207 	and.w	r2, r3, #7
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f78:	e106      	b.n	8005188 <UART_SetConfig+0x4d8>
 8004f7a:	bf00      	nop
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40011400 	.word	0x40011400
 8004f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6239      	str	r1, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	4641      	mov	r1, r8
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0501 	adc.w	r5, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4621      	mov	r1, r4
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005008:	f7fb fe0e 	bl	8000c28 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b60      	ldr	r3, [pc, #384]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011c      	lsls	r4, r3, #4
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	61b9      	str	r1, [r7, #24]
 8005034:	415b      	adcs	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050a6:	f7fb fdbf 	bl	8000c28 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b38      	ldr	r3, [pc, #224]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	@ 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	3332      	adds	r3, #50	@ 0x32
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050da:	677a      	str	r2, [r7, #116]	@ 0x74
 80050dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	415b      	adcs	r3, r3
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f0:	4641      	mov	r1, r8
 80050f2:	1851      	adds	r1, r2, r1
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	4649      	mov	r1, r9
 80050f8:	414b      	adcs	r3, r1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005108:	4659      	mov	r1, fp
 800510a:	00cb      	lsls	r3, r1, #3
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005112:	4651      	mov	r1, sl
 8005114:	00ca      	lsls	r2, r1, #3
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	4603      	mov	r3, r0
 800511c:	4642      	mov	r2, r8
 800511e:	189b      	adds	r3, r3, r2
 8005120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005122:	464b      	mov	r3, r9
 8005124:	460a      	mov	r2, r1
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	663b      	str	r3, [r7, #96]	@ 0x60
 8005136:	667a      	str	r2, [r7, #100]	@ 0x64
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005156:	f7fb fd67 	bl	8000c28 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005160:	fba3 1302 	umull	r1, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	2164      	movs	r1, #100	@ 0x64
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	3332      	adds	r3, #50	@ 0x32
 8005172:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4422      	add	r2, r4
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005194:	51eb851f 	.word	0x51eb851f

08005198 <__cvt>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	ec57 6b10 	vmov	r6, r7, d0
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	460c      	mov	r4, r1
 80051a4:	4619      	mov	r1, r3
 80051a6:	463b      	mov	r3, r7
 80051a8:	bfbb      	ittet	lt
 80051aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80051ae:	461f      	movlt	r7, r3
 80051b0:	2300      	movge	r3, #0
 80051b2:	232d      	movlt	r3, #45	@ 0x2d
 80051b4:	700b      	strb	r3, [r1, #0]
 80051b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80051bc:	4691      	mov	r9, r2
 80051be:	f023 0820 	bic.w	r8, r3, #32
 80051c2:	bfbc      	itt	lt
 80051c4:	4632      	movlt	r2, r6
 80051c6:	4616      	movlt	r6, r2
 80051c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051cc:	d005      	beq.n	80051da <__cvt+0x42>
 80051ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051d2:	d100      	bne.n	80051d6 <__cvt+0x3e>
 80051d4:	3401      	adds	r4, #1
 80051d6:	2102      	movs	r1, #2
 80051d8:	e000      	b.n	80051dc <__cvt+0x44>
 80051da:	2103      	movs	r1, #3
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	ab02      	add	r3, sp, #8
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	ec47 6b10 	vmov	d0, r6, r7
 80051e8:	4653      	mov	r3, sl
 80051ea:	4622      	mov	r2, r4
 80051ec:	f000 ff9c 	bl	8006128 <_dtoa_r>
 80051f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80051f4:	4605      	mov	r5, r0
 80051f6:	d119      	bne.n	800522c <__cvt+0x94>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d00e      	beq.n	800521c <__cvt+0x84>
 80051fe:	eb00 0904 	add.w	r9, r0, r4
 8005202:	2200      	movs	r2, #0
 8005204:	2300      	movs	r3, #0
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800520e:	b108      	cbz	r0, 8005214 <__cvt+0x7c>
 8005210:	f8cd 900c 	str.w	r9, [sp, #12]
 8005214:	2230      	movs	r2, #48	@ 0x30
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	454b      	cmp	r3, r9
 800521a:	d31e      	bcc.n	800525a <__cvt+0xc2>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005220:	1b5b      	subs	r3, r3, r5
 8005222:	4628      	mov	r0, r5
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	b004      	add	sp, #16
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005230:	eb00 0904 	add.w	r9, r0, r4
 8005234:	d1e5      	bne.n	8005202 <__cvt+0x6a>
 8005236:	7803      	ldrb	r3, [r0, #0]
 8005238:	2b30      	cmp	r3, #48	@ 0x30
 800523a:	d10a      	bne.n	8005252 <__cvt+0xba>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb fc60 	bl	8000b08 <__aeabi_dcmpeq>
 8005248:	b918      	cbnz	r0, 8005252 <__cvt+0xba>
 800524a:	f1c4 0401 	rsb	r4, r4, #1
 800524e:	f8ca 4000 	str.w	r4, [sl]
 8005252:	f8da 3000 	ldr.w	r3, [sl]
 8005256:	4499      	add	r9, r3
 8005258:	e7d3      	b.n	8005202 <__cvt+0x6a>
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	9103      	str	r1, [sp, #12]
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e7d9      	b.n	8005216 <__cvt+0x7e>

08005262 <__exponent>:
 8005262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005264:	2900      	cmp	r1, #0
 8005266:	bfba      	itte	lt
 8005268:	4249      	neglt	r1, r1
 800526a:	232d      	movlt	r3, #45	@ 0x2d
 800526c:	232b      	movge	r3, #43	@ 0x2b
 800526e:	2909      	cmp	r1, #9
 8005270:	7002      	strb	r2, [r0, #0]
 8005272:	7043      	strb	r3, [r0, #1]
 8005274:	dd29      	ble.n	80052ca <__exponent+0x68>
 8005276:	f10d 0307 	add.w	r3, sp, #7
 800527a:	461d      	mov	r5, r3
 800527c:	270a      	movs	r7, #10
 800527e:	461a      	mov	r2, r3
 8005280:	fbb1 f6f7 	udiv	r6, r1, r7
 8005284:	fb07 1416 	mls	r4, r7, r6, r1
 8005288:	3430      	adds	r4, #48	@ 0x30
 800528a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800528e:	460c      	mov	r4, r1
 8005290:	2c63      	cmp	r4, #99	@ 0x63
 8005292:	f103 33ff 	add.w	r3, r3, #4294967295
 8005296:	4631      	mov	r1, r6
 8005298:	dcf1      	bgt.n	800527e <__exponent+0x1c>
 800529a:	3130      	adds	r1, #48	@ 0x30
 800529c:	1e94      	subs	r4, r2, #2
 800529e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052a2:	1c41      	adds	r1, r0, #1
 80052a4:	4623      	mov	r3, r4
 80052a6:	42ab      	cmp	r3, r5
 80052a8:	d30a      	bcc.n	80052c0 <__exponent+0x5e>
 80052aa:	f10d 0309 	add.w	r3, sp, #9
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	42ac      	cmp	r4, r5
 80052b2:	bf88      	it	hi
 80052b4:	2300      	movhi	r3, #0
 80052b6:	3302      	adds	r3, #2
 80052b8:	4403      	add	r3, r0
 80052ba:	1a18      	subs	r0, r3, r0
 80052bc:	b003      	add	sp, #12
 80052be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052c8:	e7ed      	b.n	80052a6 <__exponent+0x44>
 80052ca:	2330      	movs	r3, #48	@ 0x30
 80052cc:	3130      	adds	r1, #48	@ 0x30
 80052ce:	7083      	strb	r3, [r0, #2]
 80052d0:	70c1      	strb	r1, [r0, #3]
 80052d2:	1d03      	adds	r3, r0, #4
 80052d4:	e7f1      	b.n	80052ba <__exponent+0x58>
	...

080052d8 <_printf_float>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	b08d      	sub	sp, #52	@ 0x34
 80052de:	460c      	mov	r4, r1
 80052e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052e4:	4616      	mov	r6, r2
 80052e6:	461f      	mov	r7, r3
 80052e8:	4605      	mov	r5, r0
 80052ea:	f000 fe1b 	bl	8005f24 <_localeconv_r>
 80052ee:	6803      	ldr	r3, [r0, #0]
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fa ffdc 	bl	80002b0 <strlen>
 80052f8:	2300      	movs	r3, #0
 80052fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80052fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005300:	9005      	str	r0, [sp, #20]
 8005302:	3307      	adds	r3, #7
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	f103 0208 	add.w	r2, r3, #8
 800530c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005310:	f8d4 b000 	ldr.w	fp, [r4]
 8005314:	f8c8 2000 	str.w	r2, [r8]
 8005318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800531c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005320:	9307      	str	r3, [sp, #28]
 8005322:	f8cd 8018 	str.w	r8, [sp, #24]
 8005326:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800532a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800532e:	4b9c      	ldr	r3, [pc, #624]	@ (80055a0 <_printf_float+0x2c8>)
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	f7fb fc1a 	bl	8000b6c <__aeabi_dcmpun>
 8005338:	bb70      	cbnz	r0, 8005398 <_printf_float+0xc0>
 800533a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800533e:	4b98      	ldr	r3, [pc, #608]	@ (80055a0 <_printf_float+0x2c8>)
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	f7fb fbf4 	bl	8000b30 <__aeabi_dcmple>
 8005348:	bb30      	cbnz	r0, 8005398 <_printf_float+0xc0>
 800534a:	2200      	movs	r2, #0
 800534c:	2300      	movs	r3, #0
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fb fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8005356:	b110      	cbz	r0, 800535e <_printf_float+0x86>
 8005358:	232d      	movs	r3, #45	@ 0x2d
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535e:	4a91      	ldr	r2, [pc, #580]	@ (80055a4 <_printf_float+0x2cc>)
 8005360:	4b91      	ldr	r3, [pc, #580]	@ (80055a8 <_printf_float+0x2d0>)
 8005362:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005366:	bf8c      	ite	hi
 8005368:	4690      	movhi	r8, r2
 800536a:	4698      	movls	r8, r3
 800536c:	2303      	movs	r3, #3
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	f02b 0304 	bic.w	r3, fp, #4
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	f04f 0900 	mov.w	r9, #0
 800537a:	9700      	str	r7, [sp, #0]
 800537c:	4633      	mov	r3, r6
 800537e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f9d2 	bl	800572c <_printf_common>
 8005388:	3001      	adds	r0, #1
 800538a:	f040 808d 	bne.w	80054a8 <_printf_float+0x1d0>
 800538e:	f04f 30ff 	mov.w	r0, #4294967295
 8005392:	b00d      	add	sp, #52	@ 0x34
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	4640      	mov	r0, r8
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fbe4 	bl	8000b6c <__aeabi_dcmpun>
 80053a4:	b140      	cbz	r0, 80053b8 <_printf_float+0xe0>
 80053a6:	464b      	mov	r3, r9
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bfbc      	itt	lt
 80053ac:	232d      	movlt	r3, #45	@ 0x2d
 80053ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <_printf_float+0x2d4>)
 80053b4:	4b7e      	ldr	r3, [pc, #504]	@ (80055b0 <_printf_float+0x2d8>)
 80053b6:	e7d4      	b.n	8005362 <_printf_float+0x8a>
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80053be:	9206      	str	r2, [sp, #24]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	d13b      	bne.n	800543c <_printf_float+0x164>
 80053c4:	2306      	movs	r3, #6
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053cc:	2300      	movs	r3, #0
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	9303      	str	r3, [sp, #12]
 80053d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80053d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053d8:	ab09      	add	r3, sp, #36	@ 0x24
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	6861      	ldr	r1, [r4, #4]
 80053de:	ec49 8b10 	vmov	d0, r8, r9
 80053e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7ff fed6 	bl	8005198 <__cvt>
 80053ec:	9b06      	ldr	r3, [sp, #24]
 80053ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053f0:	2b47      	cmp	r3, #71	@ 0x47
 80053f2:	4680      	mov	r8, r0
 80053f4:	d129      	bne.n	800544a <_printf_float+0x172>
 80053f6:	1cc8      	adds	r0, r1, #3
 80053f8:	db02      	blt.n	8005400 <_printf_float+0x128>
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	4299      	cmp	r1, r3
 80053fe:	dd41      	ble.n	8005484 <_printf_float+0x1ac>
 8005400:	f1aa 0a02 	sub.w	sl, sl, #2
 8005404:	fa5f fa8a 	uxtb.w	sl, sl
 8005408:	3901      	subs	r1, #1
 800540a:	4652      	mov	r2, sl
 800540c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005410:	9109      	str	r1, [sp, #36]	@ 0x24
 8005412:	f7ff ff26 	bl	8005262 <__exponent>
 8005416:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005418:	1813      	adds	r3, r2, r0
 800541a:	2a01      	cmp	r2, #1
 800541c:	4681      	mov	r9, r0
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	dc02      	bgt.n	8005428 <_printf_float+0x150>
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	07d2      	lsls	r2, r2, #31
 8005426:	d501      	bpl.n	800542c <_printf_float+0x154>
 8005428:	3301      	adds	r3, #1
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0a2      	beq.n	800537a <_printf_float+0xa2>
 8005434:	232d      	movs	r3, #45	@ 0x2d
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800543a:	e79e      	b.n	800537a <_printf_float+0xa2>
 800543c:	9a06      	ldr	r2, [sp, #24]
 800543e:	2a47      	cmp	r2, #71	@ 0x47
 8005440:	d1c2      	bne.n	80053c8 <_printf_float+0xf0>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1c0      	bne.n	80053c8 <_printf_float+0xf0>
 8005446:	2301      	movs	r3, #1
 8005448:	e7bd      	b.n	80053c6 <_printf_float+0xee>
 800544a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800544e:	d9db      	bls.n	8005408 <_printf_float+0x130>
 8005450:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005454:	d118      	bne.n	8005488 <_printf_float+0x1b0>
 8005456:	2900      	cmp	r1, #0
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	dd0b      	ble.n	8005474 <_printf_float+0x19c>
 800545c:	6121      	str	r1, [r4, #16]
 800545e:	b913      	cbnz	r3, 8005466 <_printf_float+0x18e>
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	07d0      	lsls	r0, r2, #31
 8005464:	d502      	bpl.n	800546c <_printf_float+0x194>
 8005466:	3301      	adds	r3, #1
 8005468:	440b      	add	r3, r1
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800546e:	f04f 0900 	mov.w	r9, #0
 8005472:	e7db      	b.n	800542c <_printf_float+0x154>
 8005474:	b913      	cbnz	r3, 800547c <_printf_float+0x1a4>
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	07d2      	lsls	r2, r2, #31
 800547a:	d501      	bpl.n	8005480 <_printf_float+0x1a8>
 800547c:	3302      	adds	r3, #2
 800547e:	e7f4      	b.n	800546a <_printf_float+0x192>
 8005480:	2301      	movs	r3, #1
 8005482:	e7f2      	b.n	800546a <_printf_float+0x192>
 8005484:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800548a:	4299      	cmp	r1, r3
 800548c:	db05      	blt.n	800549a <_printf_float+0x1c2>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6121      	str	r1, [r4, #16]
 8005492:	07d8      	lsls	r0, r3, #31
 8005494:	d5ea      	bpl.n	800546c <_printf_float+0x194>
 8005496:	1c4b      	adds	r3, r1, #1
 8005498:	e7e7      	b.n	800546a <_printf_float+0x192>
 800549a:	2900      	cmp	r1, #0
 800549c:	bfd4      	ite	le
 800549e:	f1c1 0202 	rsble	r2, r1, #2
 80054a2:	2201      	movgt	r2, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	e7e0      	b.n	800546a <_printf_float+0x192>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	055a      	lsls	r2, r3, #21
 80054ac:	d407      	bmi.n	80054be <_printf_float+0x1e6>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	4642      	mov	r2, r8
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	d12b      	bne.n	8005514 <_printf_float+0x23c>
 80054bc:	e767      	b.n	800538e <_printf_float+0xb6>
 80054be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054c2:	f240 80dd 	bls.w	8005680 <_printf_float+0x3a8>
 80054c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054ca:	2200      	movs	r2, #0
 80054cc:	2300      	movs	r3, #0
 80054ce:	f7fb fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d033      	beq.n	800553e <_printf_float+0x266>
 80054d6:	4a37      	ldr	r2, [pc, #220]	@ (80055b4 <_printf_float+0x2dc>)
 80054d8:	2301      	movs	r3, #1
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	f43f af54 	beq.w	800538e <_printf_float+0xb6>
 80054e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80054ea:	4543      	cmp	r3, r8
 80054ec:	db02      	blt.n	80054f4 <_printf_float+0x21c>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	07d8      	lsls	r0, r3, #31
 80054f2:	d50f      	bpl.n	8005514 <_printf_float+0x23c>
 80054f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f af45 	beq.w	800538e <_printf_float+0xb6>
 8005504:	f04f 0900 	mov.w	r9, #0
 8005508:	f108 38ff 	add.w	r8, r8, #4294967295
 800550c:	f104 0a1a 	add.w	sl, r4, #26
 8005510:	45c8      	cmp	r8, r9
 8005512:	dc09      	bgt.n	8005528 <_printf_float+0x250>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	079b      	lsls	r3, r3, #30
 8005518:	f100 8103 	bmi.w	8005722 <_printf_float+0x44a>
 800551c:	68e0      	ldr	r0, [r4, #12]
 800551e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005520:	4298      	cmp	r0, r3
 8005522:	bfb8      	it	lt
 8005524:	4618      	movlt	r0, r3
 8005526:	e734      	b.n	8005392 <_printf_float+0xba>
 8005528:	2301      	movs	r3, #1
 800552a:	4652      	mov	r2, sl
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	f43f af2b 	beq.w	800538e <_printf_float+0xb6>
 8005538:	f109 0901 	add.w	r9, r9, #1
 800553c:	e7e8      	b.n	8005510 <_printf_float+0x238>
 800553e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	dc39      	bgt.n	80055b8 <_printf_float+0x2e0>
 8005544:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <_printf_float+0x2dc>)
 8005546:	2301      	movs	r3, #1
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f af1d 	beq.w	800538e <_printf_float+0xb6>
 8005554:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005558:	ea59 0303 	orrs.w	r3, r9, r3
 800555c:	d102      	bne.n	8005564 <_printf_float+0x28c>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	07d9      	lsls	r1, r3, #31
 8005562:	d5d7      	bpl.n	8005514 <_printf_float+0x23c>
 8005564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af0d 	beq.w	800538e <_printf_float+0xb6>
 8005574:	f04f 0a00 	mov.w	sl, #0
 8005578:	f104 0b1a 	add.w	fp, r4, #26
 800557c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800557e:	425b      	negs	r3, r3
 8005580:	4553      	cmp	r3, sl
 8005582:	dc01      	bgt.n	8005588 <_printf_float+0x2b0>
 8005584:	464b      	mov	r3, r9
 8005586:	e793      	b.n	80054b0 <_printf_float+0x1d8>
 8005588:	2301      	movs	r3, #1
 800558a:	465a      	mov	r2, fp
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	f43f aefb 	beq.w	800538e <_printf_float+0xb6>
 8005598:	f10a 0a01 	add.w	sl, sl, #1
 800559c:	e7ee      	b.n	800557c <_printf_float+0x2a4>
 800559e:	bf00      	nop
 80055a0:	7fefffff 	.word	0x7fefffff
 80055a4:	0800a19c 	.word	0x0800a19c
 80055a8:	0800a198 	.word	0x0800a198
 80055ac:	0800a1a4 	.word	0x0800a1a4
 80055b0:	0800a1a0 	.word	0x0800a1a0
 80055b4:	0800a1a8 	.word	0x0800a1a8
 80055b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055be:	4553      	cmp	r3, sl
 80055c0:	bfa8      	it	ge
 80055c2:	4653      	movge	r3, sl
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	4699      	mov	r9, r3
 80055c8:	dc36      	bgt.n	8005638 <_printf_float+0x360>
 80055ca:	f04f 0b00 	mov.w	fp, #0
 80055ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055d2:	f104 021a 	add.w	r2, r4, #26
 80055d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055d8:	9306      	str	r3, [sp, #24]
 80055da:	eba3 0309 	sub.w	r3, r3, r9
 80055de:	455b      	cmp	r3, fp
 80055e0:	dc31      	bgt.n	8005646 <_printf_float+0x36e>
 80055e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e4:	459a      	cmp	sl, r3
 80055e6:	dc3a      	bgt.n	800565e <_printf_float+0x386>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	07da      	lsls	r2, r3, #31
 80055ec:	d437      	bmi.n	800565e <_printf_float+0x386>
 80055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f0:	ebaa 0903 	sub.w	r9, sl, r3
 80055f4:	9b06      	ldr	r3, [sp, #24]
 80055f6:	ebaa 0303 	sub.w	r3, sl, r3
 80055fa:	4599      	cmp	r9, r3
 80055fc:	bfa8      	it	ge
 80055fe:	4699      	movge	r9, r3
 8005600:	f1b9 0f00 	cmp.w	r9, #0
 8005604:	dc33      	bgt.n	800566e <_printf_float+0x396>
 8005606:	f04f 0800 	mov.w	r8, #0
 800560a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800560e:	f104 0b1a 	add.w	fp, r4, #26
 8005612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005614:	ebaa 0303 	sub.w	r3, sl, r3
 8005618:	eba3 0309 	sub.w	r3, r3, r9
 800561c:	4543      	cmp	r3, r8
 800561e:	f77f af79 	ble.w	8005514 <_printf_float+0x23c>
 8005622:	2301      	movs	r3, #1
 8005624:	465a      	mov	r2, fp
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f aeae 	beq.w	800538e <_printf_float+0xb6>
 8005632:	f108 0801 	add.w	r8, r8, #1
 8005636:	e7ec      	b.n	8005612 <_printf_float+0x33a>
 8005638:	4642      	mov	r2, r8
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	d1c2      	bne.n	80055ca <_printf_float+0x2f2>
 8005644:	e6a3      	b.n	800538e <_printf_float+0xb6>
 8005646:	2301      	movs	r3, #1
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	9206      	str	r2, [sp, #24]
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f ae9c 	beq.w	800538e <_printf_float+0xb6>
 8005656:	9a06      	ldr	r2, [sp, #24]
 8005658:	f10b 0b01 	add.w	fp, fp, #1
 800565c:	e7bb      	b.n	80055d6 <_printf_float+0x2fe>
 800565e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	d1c0      	bne.n	80055ee <_printf_float+0x316>
 800566c:	e68f      	b.n	800538e <_printf_float+0xb6>
 800566e:	9a06      	ldr	r2, [sp, #24]
 8005670:	464b      	mov	r3, r9
 8005672:	4442      	add	r2, r8
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d1c3      	bne.n	8005606 <_printf_float+0x32e>
 800567e:	e686      	b.n	800538e <_printf_float+0xb6>
 8005680:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005684:	f1ba 0f01 	cmp.w	sl, #1
 8005688:	dc01      	bgt.n	800568e <_printf_float+0x3b6>
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d536      	bpl.n	80056fc <_printf_float+0x424>
 800568e:	2301      	movs	r3, #1
 8005690:	4642      	mov	r2, r8
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	f43f ae78 	beq.w	800538e <_printf_float+0xb6>
 800569e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f ae70 	beq.w	800538e <_printf_float+0xb6>
 80056ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ba:	f7fb fa25 	bl	8000b08 <__aeabi_dcmpeq>
 80056be:	b9c0      	cbnz	r0, 80056f2 <_printf_float+0x41a>
 80056c0:	4653      	mov	r3, sl
 80056c2:	f108 0201 	add.w	r2, r8, #1
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	d10c      	bne.n	80056ea <_printf_float+0x412>
 80056d0:	e65d      	b.n	800538e <_printf_float+0xb6>
 80056d2:	2301      	movs	r3, #1
 80056d4:	465a      	mov	r2, fp
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f ae56 	beq.w	800538e <_printf_float+0xb6>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	45d0      	cmp	r8, sl
 80056e8:	dbf3      	blt.n	80056d2 <_printf_float+0x3fa>
 80056ea:	464b      	mov	r3, r9
 80056ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80056f0:	e6df      	b.n	80054b2 <_printf_float+0x1da>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	f104 0b1a 	add.w	fp, r4, #26
 80056fa:	e7f4      	b.n	80056e6 <_printf_float+0x40e>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4642      	mov	r2, r8
 8005700:	e7e1      	b.n	80056c6 <_printf_float+0x3ee>
 8005702:	2301      	movs	r3, #1
 8005704:	464a      	mov	r2, r9
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae3e 	beq.w	800538e <_printf_float+0xb6>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800571a:	1a5b      	subs	r3, r3, r1
 800571c:	4543      	cmp	r3, r8
 800571e:	dcf0      	bgt.n	8005702 <_printf_float+0x42a>
 8005720:	e6fc      	b.n	800551c <_printf_float+0x244>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	f104 0919 	add.w	r9, r4, #25
 800572a:	e7f4      	b.n	8005716 <_printf_float+0x43e>

0800572c <_printf_common>:
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	4616      	mov	r6, r2
 8005732:	4698      	mov	r8, r3
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	690b      	ldr	r3, [r1, #16]
 8005738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800573c:	4293      	cmp	r3, r2
 800573e:	bfb8      	it	lt
 8005740:	4613      	movlt	r3, r2
 8005742:	6033      	str	r3, [r6, #0]
 8005744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005748:	4607      	mov	r7, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b10a      	cbz	r2, 8005752 <_printf_common+0x26>
 800574e:	3301      	adds	r3, #1
 8005750:	6033      	str	r3, [r6, #0]
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	0699      	lsls	r1, r3, #26
 8005756:	bf42      	ittt	mi
 8005758:	6833      	ldrmi	r3, [r6, #0]
 800575a:	3302      	addmi	r3, #2
 800575c:	6033      	strmi	r3, [r6, #0]
 800575e:	6825      	ldr	r5, [r4, #0]
 8005760:	f015 0506 	ands.w	r5, r5, #6
 8005764:	d106      	bne.n	8005774 <_printf_common+0x48>
 8005766:	f104 0a19 	add.w	sl, r4, #25
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	6832      	ldr	r2, [r6, #0]
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	42ab      	cmp	r3, r5
 8005772:	dc26      	bgt.n	80057c2 <_printf_common+0x96>
 8005774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	3b00      	subs	r3, #0
 800577c:	bf18      	it	ne
 800577e:	2301      	movne	r3, #1
 8005780:	0692      	lsls	r2, r2, #26
 8005782:	d42b      	bmi.n	80057dc <_printf_common+0xb0>
 8005784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005788:	4641      	mov	r1, r8
 800578a:	4638      	mov	r0, r7
 800578c:	47c8      	blx	r9
 800578e:	3001      	adds	r0, #1
 8005790:	d01e      	beq.n	80057d0 <_printf_common+0xa4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	f003 0306 	and.w	r3, r3, #6
 800579a:	2b04      	cmp	r3, #4
 800579c:	bf02      	ittt	eq
 800579e:	68e5      	ldreq	r5, [r4, #12]
 80057a0:	6833      	ldreq	r3, [r6, #0]
 80057a2:	1aed      	subeq	r5, r5, r3
 80057a4:	68a3      	ldr	r3, [r4, #8]
 80057a6:	bf0c      	ite	eq
 80057a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ac:	2500      	movne	r5, #0
 80057ae:	4293      	cmp	r3, r2
 80057b0:	bfc4      	itt	gt
 80057b2:	1a9b      	subgt	r3, r3, r2
 80057b4:	18ed      	addgt	r5, r5, r3
 80057b6:	2600      	movs	r6, #0
 80057b8:	341a      	adds	r4, #26
 80057ba:	42b5      	cmp	r5, r6
 80057bc:	d11a      	bne.n	80057f4 <_printf_common+0xc8>
 80057be:	2000      	movs	r0, #0
 80057c0:	e008      	b.n	80057d4 <_printf_common+0xa8>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4652      	mov	r2, sl
 80057c6:	4641      	mov	r1, r8
 80057c8:	4638      	mov	r0, r7
 80057ca:	47c8      	blx	r9
 80057cc:	3001      	adds	r0, #1
 80057ce:	d103      	bne.n	80057d8 <_printf_common+0xac>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	3501      	adds	r5, #1
 80057da:	e7c6      	b.n	800576a <_printf_common+0x3e>
 80057dc:	18e1      	adds	r1, r4, r3
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	2030      	movs	r0, #48	@ 0x30
 80057e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057e6:	4422      	add	r2, r4
 80057e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057f0:	3302      	adds	r3, #2
 80057f2:	e7c7      	b.n	8005784 <_printf_common+0x58>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4622      	mov	r2, r4
 80057f8:	4641      	mov	r1, r8
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c8      	blx	r9
 80057fe:	3001      	adds	r0, #1
 8005800:	d0e6      	beq.n	80057d0 <_printf_common+0xa4>
 8005802:	3601      	adds	r6, #1
 8005804:	e7d9      	b.n	80057ba <_printf_common+0x8e>
	...

08005808 <_printf_i>:
 8005808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	7e0f      	ldrb	r7, [r1, #24]
 800580e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005810:	2f78      	cmp	r7, #120	@ 0x78
 8005812:	4691      	mov	r9, r2
 8005814:	4680      	mov	r8, r0
 8005816:	460c      	mov	r4, r1
 8005818:	469a      	mov	sl, r3
 800581a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800581e:	d807      	bhi.n	8005830 <_printf_i+0x28>
 8005820:	2f62      	cmp	r7, #98	@ 0x62
 8005822:	d80a      	bhi.n	800583a <_printf_i+0x32>
 8005824:	2f00      	cmp	r7, #0
 8005826:	f000 80d1 	beq.w	80059cc <_printf_i+0x1c4>
 800582a:	2f58      	cmp	r7, #88	@ 0x58
 800582c:	f000 80b8 	beq.w	80059a0 <_printf_i+0x198>
 8005830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005838:	e03a      	b.n	80058b0 <_printf_i+0xa8>
 800583a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800583e:	2b15      	cmp	r3, #21
 8005840:	d8f6      	bhi.n	8005830 <_printf_i+0x28>
 8005842:	a101      	add	r1, pc, #4	@ (adr r1, 8005848 <_printf_i+0x40>)
 8005844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005848:	080058a1 	.word	0x080058a1
 800584c:	080058b5 	.word	0x080058b5
 8005850:	08005831 	.word	0x08005831
 8005854:	08005831 	.word	0x08005831
 8005858:	08005831 	.word	0x08005831
 800585c:	08005831 	.word	0x08005831
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005831 	.word	0x08005831
 8005868:	08005831 	.word	0x08005831
 800586c:	08005831 	.word	0x08005831
 8005870:	08005831 	.word	0x08005831
 8005874:	080059b3 	.word	0x080059b3
 8005878:	080058df 	.word	0x080058df
 800587c:	0800596d 	.word	0x0800596d
 8005880:	08005831 	.word	0x08005831
 8005884:	08005831 	.word	0x08005831
 8005888:	080059d5 	.word	0x080059d5
 800588c:	08005831 	.word	0x08005831
 8005890:	080058df 	.word	0x080058df
 8005894:	08005831 	.word	0x08005831
 8005898:	08005831 	.word	0x08005831
 800589c:	08005975 	.word	0x08005975
 80058a0:	6833      	ldr	r3, [r6, #0]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6032      	str	r2, [r6, #0]
 80058a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058b0:	2301      	movs	r3, #1
 80058b2:	e09c      	b.n	80059ee <_printf_i+0x1e6>
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	1d19      	adds	r1, r3, #4
 80058ba:	6031      	str	r1, [r6, #0]
 80058bc:	0606      	lsls	r6, r0, #24
 80058be:	d501      	bpl.n	80058c4 <_printf_i+0xbc>
 80058c0:	681d      	ldr	r5, [r3, #0]
 80058c2:	e003      	b.n	80058cc <_printf_i+0xc4>
 80058c4:	0645      	lsls	r5, r0, #25
 80058c6:	d5fb      	bpl.n	80058c0 <_printf_i+0xb8>
 80058c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	da03      	bge.n	80058d8 <_printf_i+0xd0>
 80058d0:	232d      	movs	r3, #45	@ 0x2d
 80058d2:	426d      	negs	r5, r5
 80058d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058d8:	4858      	ldr	r0, [pc, #352]	@ (8005a3c <_printf_i+0x234>)
 80058da:	230a      	movs	r3, #10
 80058dc:	e011      	b.n	8005902 <_printf_i+0xfa>
 80058de:	6821      	ldr	r1, [r4, #0]
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	0608      	lsls	r0, r1, #24
 80058e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80058e8:	d402      	bmi.n	80058f0 <_printf_i+0xe8>
 80058ea:	0649      	lsls	r1, r1, #25
 80058ec:	bf48      	it	mi
 80058ee:	b2ad      	uxthmi	r5, r5
 80058f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80058f2:	4852      	ldr	r0, [pc, #328]	@ (8005a3c <_printf_i+0x234>)
 80058f4:	6033      	str	r3, [r6, #0]
 80058f6:	bf14      	ite	ne
 80058f8:	230a      	movne	r3, #10
 80058fa:	2308      	moveq	r3, #8
 80058fc:	2100      	movs	r1, #0
 80058fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005902:	6866      	ldr	r6, [r4, #4]
 8005904:	60a6      	str	r6, [r4, #8]
 8005906:	2e00      	cmp	r6, #0
 8005908:	db05      	blt.n	8005916 <_printf_i+0x10e>
 800590a:	6821      	ldr	r1, [r4, #0]
 800590c:	432e      	orrs	r6, r5
 800590e:	f021 0104 	bic.w	r1, r1, #4
 8005912:	6021      	str	r1, [r4, #0]
 8005914:	d04b      	beq.n	80059ae <_printf_i+0x1a6>
 8005916:	4616      	mov	r6, r2
 8005918:	fbb5 f1f3 	udiv	r1, r5, r3
 800591c:	fb03 5711 	mls	r7, r3, r1, r5
 8005920:	5dc7      	ldrb	r7, [r0, r7]
 8005922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005926:	462f      	mov	r7, r5
 8005928:	42bb      	cmp	r3, r7
 800592a:	460d      	mov	r5, r1
 800592c:	d9f4      	bls.n	8005918 <_printf_i+0x110>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d10b      	bne.n	800594a <_printf_i+0x142>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	07df      	lsls	r7, r3, #31
 8005936:	d508      	bpl.n	800594a <_printf_i+0x142>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	6861      	ldr	r1, [r4, #4]
 800593c:	4299      	cmp	r1, r3
 800593e:	bfde      	ittt	le
 8005940:	2330      	movle	r3, #48	@ 0x30
 8005942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800594a:	1b92      	subs	r2, r2, r6
 800594c:	6122      	str	r2, [r4, #16]
 800594e:	f8cd a000 	str.w	sl, [sp]
 8005952:	464b      	mov	r3, r9
 8005954:	aa03      	add	r2, sp, #12
 8005956:	4621      	mov	r1, r4
 8005958:	4640      	mov	r0, r8
 800595a:	f7ff fee7 	bl	800572c <_printf_common>
 800595e:	3001      	adds	r0, #1
 8005960:	d14a      	bne.n	80059f8 <_printf_i+0x1f0>
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	b004      	add	sp, #16
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	f043 0320 	orr.w	r3, r3, #32
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	4832      	ldr	r0, [pc, #200]	@ (8005a40 <_printf_i+0x238>)
 8005976:	2778      	movs	r7, #120	@ 0x78
 8005978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	6831      	ldr	r1, [r6, #0]
 8005980:	061f      	lsls	r7, r3, #24
 8005982:	f851 5b04 	ldr.w	r5, [r1], #4
 8005986:	d402      	bmi.n	800598e <_printf_i+0x186>
 8005988:	065f      	lsls	r7, r3, #25
 800598a:	bf48      	it	mi
 800598c:	b2ad      	uxthmi	r5, r5
 800598e:	6031      	str	r1, [r6, #0]
 8005990:	07d9      	lsls	r1, r3, #31
 8005992:	bf44      	itt	mi
 8005994:	f043 0320 	orrmi.w	r3, r3, #32
 8005998:	6023      	strmi	r3, [r4, #0]
 800599a:	b11d      	cbz	r5, 80059a4 <_printf_i+0x19c>
 800599c:	2310      	movs	r3, #16
 800599e:	e7ad      	b.n	80058fc <_printf_i+0xf4>
 80059a0:	4826      	ldr	r0, [pc, #152]	@ (8005a3c <_printf_i+0x234>)
 80059a2:	e7e9      	b.n	8005978 <_printf_i+0x170>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	f023 0320 	bic.w	r3, r3, #32
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	e7f6      	b.n	800599c <_printf_i+0x194>
 80059ae:	4616      	mov	r6, r2
 80059b0:	e7bd      	b.n	800592e <_printf_i+0x126>
 80059b2:	6833      	ldr	r3, [r6, #0]
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	6961      	ldr	r1, [r4, #20]
 80059b8:	1d18      	adds	r0, r3, #4
 80059ba:	6030      	str	r0, [r6, #0]
 80059bc:	062e      	lsls	r6, r5, #24
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	d501      	bpl.n	80059c6 <_printf_i+0x1be>
 80059c2:	6019      	str	r1, [r3, #0]
 80059c4:	e002      	b.n	80059cc <_printf_i+0x1c4>
 80059c6:	0668      	lsls	r0, r5, #25
 80059c8:	d5fb      	bpl.n	80059c2 <_printf_i+0x1ba>
 80059ca:	8019      	strh	r1, [r3, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	4616      	mov	r6, r2
 80059d2:	e7bc      	b.n	800594e <_printf_i+0x146>
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	6032      	str	r2, [r6, #0]
 80059da:	681e      	ldr	r6, [r3, #0]
 80059dc:	6862      	ldr	r2, [r4, #4]
 80059de:	2100      	movs	r1, #0
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7fa fc15 	bl	8000210 <memchr>
 80059e6:	b108      	cbz	r0, 80059ec <_printf_i+0x1e4>
 80059e8:	1b80      	subs	r0, r0, r6
 80059ea:	6060      	str	r0, [r4, #4]
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	2300      	movs	r3, #0
 80059f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f6:	e7aa      	b.n	800594e <_printf_i+0x146>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	4632      	mov	r2, r6
 80059fc:	4649      	mov	r1, r9
 80059fe:	4640      	mov	r0, r8
 8005a00:	47d0      	blx	sl
 8005a02:	3001      	adds	r0, #1
 8005a04:	d0ad      	beq.n	8005962 <_printf_i+0x15a>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	079b      	lsls	r3, r3, #30
 8005a0a:	d413      	bmi.n	8005a34 <_printf_i+0x22c>
 8005a0c:	68e0      	ldr	r0, [r4, #12]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	4298      	cmp	r0, r3
 8005a12:	bfb8      	it	lt
 8005a14:	4618      	movlt	r0, r3
 8005a16:	e7a6      	b.n	8005966 <_printf_i+0x15e>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4640      	mov	r0, r8
 8005a20:	47d0      	blx	sl
 8005a22:	3001      	adds	r0, #1
 8005a24:	d09d      	beq.n	8005962 <_printf_i+0x15a>
 8005a26:	3501      	adds	r5, #1
 8005a28:	68e3      	ldr	r3, [r4, #12]
 8005a2a:	9903      	ldr	r1, [sp, #12]
 8005a2c:	1a5b      	subs	r3, r3, r1
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	dcf2      	bgt.n	8005a18 <_printf_i+0x210>
 8005a32:	e7eb      	b.n	8005a0c <_printf_i+0x204>
 8005a34:	2500      	movs	r5, #0
 8005a36:	f104 0619 	add.w	r6, r4, #25
 8005a3a:	e7f5      	b.n	8005a28 <_printf_i+0x220>
 8005a3c:	0800a1aa 	.word	0x0800a1aa
 8005a40:	0800a1bb 	.word	0x0800a1bb

08005a44 <std>:
 8005a44:	2300      	movs	r3, #0
 8005a46:	b510      	push	{r4, lr}
 8005a48:	4604      	mov	r4, r0
 8005a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a52:	6083      	str	r3, [r0, #8]
 8005a54:	8181      	strh	r1, [r0, #12]
 8005a56:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a58:	81c2      	strh	r2, [r0, #14]
 8005a5a:	6183      	str	r3, [r0, #24]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	2208      	movs	r2, #8
 8005a60:	305c      	adds	r0, #92	@ 0x5c
 8005a62:	f000 fa57 	bl	8005f14 <memset>
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <std+0x58>)
 8005a68:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <std+0x5c>)
 8005a6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <std+0x60>)
 8005a70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <std+0x64>)
 8005a74:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a76:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <std+0x68>)
 8005a78:	6224      	str	r4, [r4, #32]
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	d006      	beq.n	8005a8c <std+0x48>
 8005a7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a82:	4294      	cmp	r4, r2
 8005a84:	d002      	beq.n	8005a8c <std+0x48>
 8005a86:	33d0      	adds	r3, #208	@ 0xd0
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	d105      	bne.n	8005a98 <std+0x54>
 8005a8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a94:	f000 baba 	b.w	800600c <__retarget_lock_init_recursive>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08005d65 	.word	0x08005d65
 8005aa0:	08005d87 	.word	0x08005d87
 8005aa4:	08005dbf 	.word	0x08005dbf
 8005aa8:	08005de3 	.word	0x08005de3
 8005aac:	2000034c 	.word	0x2000034c

08005ab0 <stdio_exit_handler>:
 8005ab0:	4a02      	ldr	r2, [pc, #8]	@ (8005abc <stdio_exit_handler+0xc>)
 8005ab2:	4903      	ldr	r1, [pc, #12]	@ (8005ac0 <stdio_exit_handler+0x10>)
 8005ab4:	4803      	ldr	r0, [pc, #12]	@ (8005ac4 <stdio_exit_handler+0x14>)
 8005ab6:	f000 b869 	b.w	8005b8c <_fwalk_sglue>
 8005aba:	bf00      	nop
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	08007949 	.word	0x08007949
 8005ac4:	2000001c 	.word	0x2000001c

08005ac8 <cleanup_stdio>:
 8005ac8:	6841      	ldr	r1, [r0, #4]
 8005aca:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <cleanup_stdio+0x34>)
 8005acc:	4299      	cmp	r1, r3
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	d001      	beq.n	8005ad8 <cleanup_stdio+0x10>
 8005ad4:	f001 ff38 	bl	8007948 <_fflush_r>
 8005ad8:	68a1      	ldr	r1, [r4, #8]
 8005ada:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <cleanup_stdio+0x38>)
 8005adc:	4299      	cmp	r1, r3
 8005ade:	d002      	beq.n	8005ae6 <cleanup_stdio+0x1e>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 ff31 	bl	8007948 <_fflush_r>
 8005ae6:	68e1      	ldr	r1, [r4, #12]
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <cleanup_stdio+0x3c>)
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d004      	beq.n	8005af8 <cleanup_stdio+0x30>
 8005aee:	4620      	mov	r0, r4
 8005af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af4:	f001 bf28 	b.w	8007948 <_fflush_r>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	bf00      	nop
 8005afc:	2000034c 	.word	0x2000034c
 8005b00:	200003b4 	.word	0x200003b4
 8005b04:	2000041c 	.word	0x2000041c

08005b08 <global_stdio_init.part.0>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <global_stdio_init.part.0+0x30>)
 8005b0c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b3c <global_stdio_init.part.0+0x34>)
 8005b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b40 <global_stdio_init.part.0+0x38>)
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	4620      	mov	r0, r4
 8005b14:	2200      	movs	r2, #0
 8005b16:	2104      	movs	r1, #4
 8005b18:	f7ff ff94 	bl	8005a44 <std>
 8005b1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b20:	2201      	movs	r2, #1
 8005b22:	2109      	movs	r1, #9
 8005b24:	f7ff ff8e 	bl	8005a44 <std>
 8005b28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b32:	2112      	movs	r1, #18
 8005b34:	f7ff bf86 	b.w	8005a44 <std>
 8005b38:	20000484 	.word	0x20000484
 8005b3c:	2000034c 	.word	0x2000034c
 8005b40:	08005ab1 	.word	0x08005ab1

08005b44 <__sfp_lock_acquire>:
 8005b44:	4801      	ldr	r0, [pc, #4]	@ (8005b4c <__sfp_lock_acquire+0x8>)
 8005b46:	f000 ba62 	b.w	800600e <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	2000048d 	.word	0x2000048d

08005b50 <__sfp_lock_release>:
 8005b50:	4801      	ldr	r0, [pc, #4]	@ (8005b58 <__sfp_lock_release+0x8>)
 8005b52:	f000 ba5d 	b.w	8006010 <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	2000048d 	.word	0x2000048d

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	f7ff fff0 	bl	8005b44 <__sfp_lock_acquire>
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	b11b      	cbz	r3, 8005b70 <__sinit+0x14>
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f7ff bff0 	b.w	8005b50 <__sfp_lock_release>
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <__sinit+0x28>)
 8005b72:	6223      	str	r3, [r4, #32]
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <__sinit+0x2c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f5      	bne.n	8005b68 <__sinit+0xc>
 8005b7c:	f7ff ffc4 	bl	8005b08 <global_stdio_init.part.0>
 8005b80:	e7f2      	b.n	8005b68 <__sinit+0xc>
 8005b82:	bf00      	nop
 8005b84:	08005ac9 	.word	0x08005ac9
 8005b88:	20000484 	.word	0x20000484

08005b8c <_fwalk_sglue>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4607      	mov	r7, r0
 8005b92:	4688      	mov	r8, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	2600      	movs	r6, #0
 8005b98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba0:	d505      	bpl.n	8005bae <_fwalk_sglue+0x22>
 8005ba2:	6824      	ldr	r4, [r4, #0]
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	d1f7      	bne.n	8005b98 <_fwalk_sglue+0xc>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d907      	bls.n	8005bc4 <_fwalk_sglue+0x38>
 8005bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	d003      	beq.n	8005bc4 <_fwalk_sglue+0x38>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	4306      	orrs	r6, r0
 8005bc4:	3568      	adds	r5, #104	@ 0x68
 8005bc6:	e7e9      	b.n	8005b9c <_fwalk_sglue+0x10>

08005bc8 <iprintf>:
 8005bc8:	b40f      	push	{r0, r1, r2, r3}
 8005bca:	b507      	push	{r0, r1, r2, lr}
 8005bcc:	4906      	ldr	r1, [pc, #24]	@ (8005be8 <iprintf+0x20>)
 8005bce:	ab04      	add	r3, sp, #16
 8005bd0:	6808      	ldr	r0, [r1, #0]
 8005bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd6:	6881      	ldr	r1, [r0, #8]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	f001 fd19 	bl	8007610 <_vfiprintf_r>
 8005bde:	b003      	add	sp, #12
 8005be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005be4:	b004      	add	sp, #16
 8005be6:	4770      	bx	lr
 8005be8:	20000018 	.word	0x20000018

08005bec <setbuf>:
 8005bec:	fab1 f281 	clz	r2, r1
 8005bf0:	0952      	lsrs	r2, r2, #5
 8005bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf6:	0052      	lsls	r2, r2, #1
 8005bf8:	f000 b800 	b.w	8005bfc <setvbuf>

08005bfc <setvbuf>:
 8005bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	461d      	mov	r5, r3
 8005c02:	4b57      	ldr	r3, [pc, #348]	@ (8005d60 <setvbuf+0x164>)
 8005c04:	681f      	ldr	r7, [r3, #0]
 8005c06:	4604      	mov	r4, r0
 8005c08:	460e      	mov	r6, r1
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	b127      	cbz	r7, 8005c18 <setvbuf+0x1c>
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	b913      	cbnz	r3, 8005c18 <setvbuf+0x1c>
 8005c12:	4638      	mov	r0, r7
 8005c14:	f7ff ffa2 	bl	8005b5c <__sinit>
 8005c18:	f1b8 0f02 	cmp.w	r8, #2
 8005c1c:	d006      	beq.n	8005c2c <setvbuf+0x30>
 8005c1e:	f1b8 0f01 	cmp.w	r8, #1
 8005c22:	f200 809a 	bhi.w	8005d5a <setvbuf+0x15e>
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	f2c0 8097 	blt.w	8005d5a <setvbuf+0x15e>
 8005c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	d405      	bmi.n	8005c3e <setvbuf+0x42>
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	059a      	lsls	r2, r3, #22
 8005c36:	d402      	bmi.n	8005c3e <setvbuf+0x42>
 8005c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c3a:	f000 f9e8 	bl	800600e <__retarget_lock_acquire_recursive>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4638      	mov	r0, r7
 8005c42:	f001 fe81 	bl	8007948 <_fflush_r>
 8005c46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c48:	b141      	cbz	r1, 8005c5c <setvbuf+0x60>
 8005c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	d002      	beq.n	8005c58 <setvbuf+0x5c>
 8005c52:	4638      	mov	r0, r7
 8005c54:	f001 f838 	bl	8006cc8 <_free_r>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61a3      	str	r3, [r4, #24]
 8005c60:	6063      	str	r3, [r4, #4]
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	061b      	lsls	r3, r3, #24
 8005c66:	d503      	bpl.n	8005c70 <setvbuf+0x74>
 8005c68:	6921      	ldr	r1, [r4, #16]
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f001 f82c 	bl	8006cc8 <_free_r>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	f1b8 0f02 	cmp.w	r8, #2
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	d061      	beq.n	8005d46 <setvbuf+0x14a>
 8005c82:	ab01      	add	r3, sp, #4
 8005c84:	466a      	mov	r2, sp
 8005c86:	4621      	mov	r1, r4
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f001 fe85 	bl	8007998 <__swhatbuf_r>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	4318      	orrs	r0, r3
 8005c92:	81a0      	strh	r0, [r4, #12]
 8005c94:	bb2d      	cbnz	r5, 8005ce2 <setvbuf+0xe6>
 8005c96:	9d00      	ldr	r5, [sp, #0]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f001 f85f 	bl	8006d5c <malloc>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d152      	bne.n	8005d4a <setvbuf+0x14e>
 8005ca4:	f8dd 9000 	ldr.w	r9, [sp]
 8005ca8:	45a9      	cmp	r9, r5
 8005caa:	d140      	bne.n	8005d2e <setvbuf+0x132>
 8005cac:	f04f 35ff 	mov.w	r5, #4294967295
 8005cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb4:	f043 0202 	orr.w	r2, r3, #2
 8005cb8:	81a2      	strh	r2, [r4, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	60a2      	str	r2, [r4, #8]
 8005cbe:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	6122      	str	r2, [r4, #16]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	6162      	str	r2, [r4, #20]
 8005cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ccc:	07d6      	lsls	r6, r2, #31
 8005cce:	d404      	bmi.n	8005cda <setvbuf+0xde>
 8005cd0:	0598      	lsls	r0, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <setvbuf+0xde>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd6:	f000 f99b 	bl	8006010 <__retarget_lock_release_recursive>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	b003      	add	sp, #12
 8005cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d0d8      	beq.n	8005c98 <setvbuf+0x9c>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b913      	cbnz	r3, 8005cf0 <setvbuf+0xf4>
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff36 	bl	8005b5c <__sinit>
 8005cf0:	f1b8 0f01 	cmp.w	r8, #1
 8005cf4:	bf08      	it	eq
 8005cf6:	89a3      	ldrheq	r3, [r4, #12]
 8005cf8:	6026      	str	r6, [r4, #0]
 8005cfa:	bf04      	itt	eq
 8005cfc:	f043 0301 	orreq.w	r3, r3, #1
 8005d00:	81a3      	strheq	r3, [r4, #12]
 8005d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d06:	f013 0208 	ands.w	r2, r3, #8
 8005d0a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005d0e:	d01e      	beq.n	8005d4e <setvbuf+0x152>
 8005d10:	07d9      	lsls	r1, r3, #31
 8005d12:	bf41      	itttt	mi
 8005d14:	2200      	movmi	r2, #0
 8005d16:	426d      	negmi	r5, r5
 8005d18:	60a2      	strmi	r2, [r4, #8]
 8005d1a:	61a5      	strmi	r5, [r4, #24]
 8005d1c:	bf58      	it	pl
 8005d1e:	60a5      	strpl	r5, [r4, #8]
 8005d20:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d22:	07d2      	lsls	r2, r2, #31
 8005d24:	d401      	bmi.n	8005d2a <setvbuf+0x12e>
 8005d26:	059b      	lsls	r3, r3, #22
 8005d28:	d513      	bpl.n	8005d52 <setvbuf+0x156>
 8005d2a:	2500      	movs	r5, #0
 8005d2c:	e7d5      	b.n	8005cda <setvbuf+0xde>
 8005d2e:	4648      	mov	r0, r9
 8005d30:	f001 f814 	bl	8006d5c <malloc>
 8005d34:	4606      	mov	r6, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0b8      	beq.n	8005cac <setvbuf+0xb0>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	464d      	mov	r5, r9
 8005d44:	e7cf      	b.n	8005ce6 <setvbuf+0xea>
 8005d46:	2500      	movs	r5, #0
 8005d48:	e7b2      	b.n	8005cb0 <setvbuf+0xb4>
 8005d4a:	46a9      	mov	r9, r5
 8005d4c:	e7f5      	b.n	8005d3a <setvbuf+0x13e>
 8005d4e:	60a2      	str	r2, [r4, #8]
 8005d50:	e7e6      	b.n	8005d20 <setvbuf+0x124>
 8005d52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d54:	f000 f95c 	bl	8006010 <__retarget_lock_release_recursive>
 8005d58:	e7e7      	b.n	8005d2a <setvbuf+0x12e>
 8005d5a:	f04f 35ff 	mov.w	r5, #4294967295
 8005d5e:	e7bc      	b.n	8005cda <setvbuf+0xde>
 8005d60:	20000018 	.word	0x20000018

08005d64 <__sread>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	460c      	mov	r4, r1
 8005d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6c:	f000 f900 	bl	8005f70 <_read_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	bfab      	itete	ge
 8005d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d76:	89a3      	ldrhlt	r3, [r4, #12]
 8005d78:	181b      	addge	r3, r3, r0
 8005d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d7e:	bfac      	ite	ge
 8005d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d82:	81a3      	strhlt	r3, [r4, #12]
 8005d84:	bd10      	pop	{r4, pc}

08005d86 <__swrite>:
 8005d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	898b      	ldrh	r3, [r1, #12]
 8005d8e:	05db      	lsls	r3, r3, #23
 8005d90:	4605      	mov	r5, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4616      	mov	r6, r2
 8005d96:	d505      	bpl.n	8005da4 <__swrite+0x1e>
 8005d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f000 f8d4 	bl	8005f4c <_lseek_r>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	4632      	mov	r2, r6
 8005db2:	463b      	mov	r3, r7
 8005db4:	4628      	mov	r0, r5
 8005db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dba:	f000 b8eb 	b.w	8005f94 <_write_r>

08005dbe <__sseek>:
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc6:	f000 f8c1 	bl	8005f4c <_lseek_r>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	bf15      	itete	ne
 8005dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dda:	81a3      	strheq	r3, [r4, #12]
 8005ddc:	bf18      	it	ne
 8005dde:	81a3      	strhne	r3, [r4, #12]
 8005de0:	bd10      	pop	{r4, pc}

08005de2 <__sclose>:
 8005de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de6:	f000 b8a1 	b.w	8005f2c <_close_r>

08005dea <__swbuf_r>:
 8005dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dec:	460e      	mov	r6, r1
 8005dee:	4614      	mov	r4, r2
 8005df0:	4605      	mov	r5, r0
 8005df2:	b118      	cbz	r0, 8005dfc <__swbuf_r+0x12>
 8005df4:	6a03      	ldr	r3, [r0, #32]
 8005df6:	b90b      	cbnz	r3, 8005dfc <__swbuf_r+0x12>
 8005df8:	f7ff feb0 	bl	8005b5c <__sinit>
 8005dfc:	69a3      	ldr	r3, [r4, #24]
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	071a      	lsls	r2, r3, #28
 8005e04:	d501      	bpl.n	8005e0a <__swbuf_r+0x20>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	b943      	cbnz	r3, 8005e1c <__swbuf_r+0x32>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 f82b 	bl	8005e68 <__swsetup_r>
 8005e12:	b118      	cbz	r0, 8005e1c <__swbuf_r+0x32>
 8005e14:	f04f 37ff 	mov.w	r7, #4294967295
 8005e18:	4638      	mov	r0, r7
 8005e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	6922      	ldr	r2, [r4, #16]
 8005e20:	1a98      	subs	r0, r3, r2
 8005e22:	6963      	ldr	r3, [r4, #20]
 8005e24:	b2f6      	uxtb	r6, r6
 8005e26:	4283      	cmp	r3, r0
 8005e28:	4637      	mov	r7, r6
 8005e2a:	dc05      	bgt.n	8005e38 <__swbuf_r+0x4e>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f001 fd8a 	bl	8007948 <_fflush_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d1ed      	bne.n	8005e14 <__swbuf_r+0x2a>
 8005e38:	68a3      	ldr	r3, [r4, #8]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	60a3      	str	r3, [r4, #8]
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	701e      	strb	r6, [r3, #0]
 8005e46:	6962      	ldr	r2, [r4, #20]
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d004      	beq.n	8005e58 <__swbuf_r+0x6e>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	07db      	lsls	r3, r3, #31
 8005e52:	d5e1      	bpl.n	8005e18 <__swbuf_r+0x2e>
 8005e54:	2e0a      	cmp	r6, #10
 8005e56:	d1df      	bne.n	8005e18 <__swbuf_r+0x2e>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f001 fd74 	bl	8007948 <_fflush_r>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d0d9      	beq.n	8005e18 <__swbuf_r+0x2e>
 8005e64:	e7d6      	b.n	8005e14 <__swbuf_r+0x2a>
	...

08005e68 <__swsetup_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4b29      	ldr	r3, [pc, #164]	@ (8005f10 <__swsetup_r+0xa8>)
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	460c      	mov	r4, r1
 8005e72:	b118      	cbz	r0, 8005e7c <__swsetup_r+0x14>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <__swsetup_r+0x14>
 8005e78:	f7ff fe70 	bl	8005b5c <__sinit>
 8005e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e80:	0719      	lsls	r1, r3, #28
 8005e82:	d422      	bmi.n	8005eca <__swsetup_r+0x62>
 8005e84:	06da      	lsls	r2, r3, #27
 8005e86:	d407      	bmi.n	8005e98 <__swsetup_r+0x30>
 8005e88:	2209      	movs	r2, #9
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295
 8005e96:	e033      	b.n	8005f00 <__swsetup_r+0x98>
 8005e98:	0758      	lsls	r0, r3, #29
 8005e9a:	d512      	bpl.n	8005ec2 <__swsetup_r+0x5a>
 8005e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e9e:	b141      	cbz	r1, 8005eb2 <__swsetup_r+0x4a>
 8005ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d002      	beq.n	8005eae <__swsetup_r+0x46>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 ff0d 	bl	8006cc8 <_free_r>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6063      	str	r3, [r4, #4]
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	b94b      	cbnz	r3, 8005ee2 <__swsetup_r+0x7a>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed8:	d003      	beq.n	8005ee2 <__swsetup_r+0x7a>
 8005eda:	4621      	mov	r1, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f001 fd81 	bl	80079e4 <__smakebuf_r>
 8005ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee6:	f013 0201 	ands.w	r2, r3, #1
 8005eea:	d00a      	beq.n	8005f02 <__swsetup_r+0x9a>
 8005eec:	2200      	movs	r2, #0
 8005eee:	60a2      	str	r2, [r4, #8]
 8005ef0:	6962      	ldr	r2, [r4, #20]
 8005ef2:	4252      	negs	r2, r2
 8005ef4:	61a2      	str	r2, [r4, #24]
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	b942      	cbnz	r2, 8005f0c <__swsetup_r+0xa4>
 8005efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005efe:	d1c5      	bne.n	8005e8c <__swsetup_r+0x24>
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	0799      	lsls	r1, r3, #30
 8005f04:	bf58      	it	pl
 8005f06:	6962      	ldrpl	r2, [r4, #20]
 8005f08:	60a2      	str	r2, [r4, #8]
 8005f0a:	e7f4      	b.n	8005ef6 <__swsetup_r+0x8e>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e7f7      	b.n	8005f00 <__swsetup_r+0x98>
 8005f10:	20000018 	.word	0x20000018

08005f14 <memset>:
 8005f14:	4402      	add	r2, r0
 8005f16:	4603      	mov	r3, r0
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d100      	bne.n	8005f1e <memset+0xa>
 8005f1c:	4770      	bx	lr
 8005f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f22:	e7f9      	b.n	8005f18 <memset+0x4>

08005f24 <_localeconv_r>:
 8005f24:	4800      	ldr	r0, [pc, #0]	@ (8005f28 <_localeconv_r+0x4>)
 8005f26:	4770      	bx	lr
 8005f28:	20000158 	.word	0x20000158

08005f2c <_close_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d06      	ldr	r5, [pc, #24]	@ (8005f48 <_close_r+0x1c>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fc f9e2 	bl	8002300 <_close>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_close_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_close_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20000488 	.word	0x20000488

08005f4c <_lseek_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	@ (8005f6c <_lseek_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fc f9f7 	bl	800234e <_lseek>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_lseek_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_lseek_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20000488 	.word	0x20000488

08005f70 <_read_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d07      	ldr	r5, [pc, #28]	@ (8005f90 <_read_r+0x20>)
 8005f74:	4604      	mov	r4, r0
 8005f76:	4608      	mov	r0, r1
 8005f78:	4611      	mov	r1, r2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f7fc f9a1 	bl	80022c6 <_read>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_read_r+0x1e>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_read_r+0x1e>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20000488 	.word	0x20000488

08005f94 <_write_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	@ (8005fb4 <_write_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fa ffec 	bl	8000f80 <_write>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_write_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_write_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000488 	.word	0x20000488

08005fb8 <__errno>:
 8005fb8:	4b01      	ldr	r3, [pc, #4]	@ (8005fc0 <__errno+0x8>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000018 	.word	0x20000018

08005fc4 <__libc_init_array>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005ffc <__libc_init_array+0x38>)
 8005fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006000 <__libc_init_array+0x3c>)
 8005fca:	1b64      	subs	r4, r4, r5
 8005fcc:	10a4      	asrs	r4, r4, #2
 8005fce:	2600      	movs	r6, #0
 8005fd0:	42a6      	cmp	r6, r4
 8005fd2:	d109      	bne.n	8005fe8 <__libc_init_array+0x24>
 8005fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006004 <__libc_init_array+0x40>)
 8005fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006008 <__libc_init_array+0x44>)
 8005fd8:	f004 f812 	bl	800a000 <_init>
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	42a6      	cmp	r6, r4
 8005fe4:	d105      	bne.n	8005ff2 <__libc_init_array+0x2e>
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fec:	4798      	blx	r3
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7ee      	b.n	8005fd0 <__libc_init_array+0xc>
 8005ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff6:	4798      	blx	r3
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	e7f2      	b.n	8005fe2 <__libc_init_array+0x1e>
 8005ffc:	0800a7a0 	.word	0x0800a7a0
 8006000:	0800a7a0 	.word	0x0800a7a0
 8006004:	0800a7a0 	.word	0x0800a7a0
 8006008:	0800a7a4 	.word	0x0800a7a4

0800600c <__retarget_lock_init_recursive>:
 800600c:	4770      	bx	lr

0800600e <__retarget_lock_acquire_recursive>:
 800600e:	4770      	bx	lr

08006010 <__retarget_lock_release_recursive>:
 8006010:	4770      	bx	lr

08006012 <quorem>:
 8006012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006016:	6903      	ldr	r3, [r0, #16]
 8006018:	690c      	ldr	r4, [r1, #16]
 800601a:	42a3      	cmp	r3, r4
 800601c:	4607      	mov	r7, r0
 800601e:	db7e      	blt.n	800611e <quorem+0x10c>
 8006020:	3c01      	subs	r4, #1
 8006022:	f101 0814 	add.w	r8, r1, #20
 8006026:	00a3      	lsls	r3, r4, #2
 8006028:	f100 0514 	add.w	r5, r0, #20
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800603c:	3301      	adds	r3, #1
 800603e:	429a      	cmp	r2, r3
 8006040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006044:	fbb2 f6f3 	udiv	r6, r2, r3
 8006048:	d32e      	bcc.n	80060a8 <quorem+0x96>
 800604a:	f04f 0a00 	mov.w	sl, #0
 800604e:	46c4      	mov	ip, r8
 8006050:	46ae      	mov	lr, r5
 8006052:	46d3      	mov	fp, sl
 8006054:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006058:	b298      	uxth	r0, r3
 800605a:	fb06 a000 	mla	r0, r6, r0, sl
 800605e:	0c02      	lsrs	r2, r0, #16
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	fb06 2303 	mla	r3, r6, r3, r2
 8006066:	f8de 2000 	ldr.w	r2, [lr]
 800606a:	b280      	uxth	r0, r0
 800606c:	b292      	uxth	r2, r2
 800606e:	1a12      	subs	r2, r2, r0
 8006070:	445a      	add	r2, fp
 8006072:	f8de 0000 	ldr.w	r0, [lr]
 8006076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006080:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006084:	b292      	uxth	r2, r2
 8006086:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800608a:	45e1      	cmp	r9, ip
 800608c:	f84e 2b04 	str.w	r2, [lr], #4
 8006090:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006094:	d2de      	bcs.n	8006054 <quorem+0x42>
 8006096:	9b00      	ldr	r3, [sp, #0]
 8006098:	58eb      	ldr	r3, [r5, r3]
 800609a:	b92b      	cbnz	r3, 80060a8 <quorem+0x96>
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	3b04      	subs	r3, #4
 80060a0:	429d      	cmp	r5, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	d32f      	bcc.n	8006106 <quorem+0xf4>
 80060a6:	613c      	str	r4, [r7, #16]
 80060a8:	4638      	mov	r0, r7
 80060aa:	f001 f97f 	bl	80073ac <__mcmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	db25      	blt.n	80060fe <quorem+0xec>
 80060b2:	4629      	mov	r1, r5
 80060b4:	2000      	movs	r0, #0
 80060b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ba:	f8d1 c000 	ldr.w	ip, [r1]
 80060be:	fa1f fe82 	uxth.w	lr, r2
 80060c2:	fa1f f38c 	uxth.w	r3, ip
 80060c6:	eba3 030e 	sub.w	r3, r3, lr
 80060ca:	4403      	add	r3, r0
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060dc:	45c1      	cmp	r9, r8
 80060de:	f841 3b04 	str.w	r3, [r1], #4
 80060e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060e6:	d2e6      	bcs.n	80060b6 <quorem+0xa4>
 80060e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f0:	b922      	cbnz	r2, 80060fc <quorem+0xea>
 80060f2:	3b04      	subs	r3, #4
 80060f4:	429d      	cmp	r5, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	d30b      	bcc.n	8006112 <quorem+0x100>
 80060fa:	613c      	str	r4, [r7, #16]
 80060fc:	3601      	adds	r6, #1
 80060fe:	4630      	mov	r0, r6
 8006100:	b003      	add	sp, #12
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	3b04      	subs	r3, #4
 800610a:	2a00      	cmp	r2, #0
 800610c:	d1cb      	bne.n	80060a6 <quorem+0x94>
 800610e:	3c01      	subs	r4, #1
 8006110:	e7c6      	b.n	80060a0 <quorem+0x8e>
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	3b04      	subs	r3, #4
 8006116:	2a00      	cmp	r2, #0
 8006118:	d1ef      	bne.n	80060fa <quorem+0xe8>
 800611a:	3c01      	subs	r4, #1
 800611c:	e7ea      	b.n	80060f4 <quorem+0xe2>
 800611e:	2000      	movs	r0, #0
 8006120:	e7ee      	b.n	8006100 <quorem+0xee>
 8006122:	0000      	movs	r0, r0
 8006124:	0000      	movs	r0, r0
	...

08006128 <_dtoa_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	69c7      	ldr	r7, [r0, #28]
 800612e:	b097      	sub	sp, #92	@ 0x5c
 8006130:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006134:	ec55 4b10 	vmov	r4, r5, d0
 8006138:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800613a:	9107      	str	r1, [sp, #28]
 800613c:	4681      	mov	r9, r0
 800613e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006140:	9311      	str	r3, [sp, #68]	@ 0x44
 8006142:	b97f      	cbnz	r7, 8006164 <_dtoa_r+0x3c>
 8006144:	2010      	movs	r0, #16
 8006146:	f000 fe09 	bl	8006d5c <malloc>
 800614a:	4602      	mov	r2, r0
 800614c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006150:	b920      	cbnz	r0, 800615c <_dtoa_r+0x34>
 8006152:	4ba9      	ldr	r3, [pc, #676]	@ (80063f8 <_dtoa_r+0x2d0>)
 8006154:	21ef      	movs	r1, #239	@ 0xef
 8006156:	48a9      	ldr	r0, [pc, #676]	@ (80063fc <_dtoa_r+0x2d4>)
 8006158:	f001 fcc0 	bl	8007adc <__assert_func>
 800615c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006160:	6007      	str	r7, [r0, #0]
 8006162:	60c7      	str	r7, [r0, #12]
 8006164:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006168:	6819      	ldr	r1, [r3, #0]
 800616a:	b159      	cbz	r1, 8006184 <_dtoa_r+0x5c>
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	604a      	str	r2, [r1, #4]
 8006170:	2301      	movs	r3, #1
 8006172:	4093      	lsls	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
 8006176:	4648      	mov	r0, r9
 8006178:	f000 fee6 	bl	8006f48 <_Bfree>
 800617c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	1e2b      	subs	r3, r5, #0
 8006186:	bfb9      	ittee	lt
 8006188:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800618c:	9305      	strlt	r3, [sp, #20]
 800618e:	2300      	movge	r3, #0
 8006190:	6033      	strge	r3, [r6, #0]
 8006192:	9f05      	ldr	r7, [sp, #20]
 8006194:	4b9a      	ldr	r3, [pc, #616]	@ (8006400 <_dtoa_r+0x2d8>)
 8006196:	bfbc      	itt	lt
 8006198:	2201      	movlt	r2, #1
 800619a:	6032      	strlt	r2, [r6, #0]
 800619c:	43bb      	bics	r3, r7
 800619e:	d112      	bne.n	80061c6 <_dtoa_r+0x9e>
 80061a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80061a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061ac:	4323      	orrs	r3, r4
 80061ae:	f000 855a 	beq.w	8006c66 <_dtoa_r+0xb3e>
 80061b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006414 <_dtoa_r+0x2ec>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 855c 	beq.w	8006c76 <_dtoa_r+0xb4e>
 80061be:	f10a 0303 	add.w	r3, sl, #3
 80061c2:	f000 bd56 	b.w	8006c72 <_dtoa_r+0xb4a>
 80061c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80061ca:	2200      	movs	r2, #0
 80061cc:	ec51 0b17 	vmov	r0, r1, d7
 80061d0:	2300      	movs	r3, #0
 80061d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80061d6:	f7fa fc97 	bl	8000b08 <__aeabi_dcmpeq>
 80061da:	4680      	mov	r8, r0
 80061dc:	b158      	cbz	r0, 80061f6 <_dtoa_r+0xce>
 80061de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80061e0:	2301      	movs	r3, #1
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061e6:	b113      	cbz	r3, 80061ee <_dtoa_r+0xc6>
 80061e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80061ea:	4b86      	ldr	r3, [pc, #536]	@ (8006404 <_dtoa_r+0x2dc>)
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006418 <_dtoa_r+0x2f0>
 80061f2:	f000 bd40 	b.w	8006c76 <_dtoa_r+0xb4e>
 80061f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80061fa:	aa14      	add	r2, sp, #80	@ 0x50
 80061fc:	a915      	add	r1, sp, #84	@ 0x54
 80061fe:	4648      	mov	r0, r9
 8006200:	f001 f984 	bl	800750c <__d2b>
 8006204:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006208:	9002      	str	r0, [sp, #8]
 800620a:	2e00      	cmp	r6, #0
 800620c:	d078      	beq.n	8006300 <_dtoa_r+0x1d8>
 800620e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006210:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800621c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006220:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006224:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006228:	4619      	mov	r1, r3
 800622a:	2200      	movs	r2, #0
 800622c:	4b76      	ldr	r3, [pc, #472]	@ (8006408 <_dtoa_r+0x2e0>)
 800622e:	f7fa f84b 	bl	80002c8 <__aeabi_dsub>
 8006232:	a36b      	add	r3, pc, #428	@ (adr r3, 80063e0 <_dtoa_r+0x2b8>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f9fe 	bl	8000638 <__aeabi_dmul>
 800623c:	a36a      	add	r3, pc, #424	@ (adr r3, 80063e8 <_dtoa_r+0x2c0>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7fa f843 	bl	80002cc <__adddf3>
 8006246:	4604      	mov	r4, r0
 8006248:	4630      	mov	r0, r6
 800624a:	460d      	mov	r5, r1
 800624c:	f7fa f98a 	bl	8000564 <__aeabi_i2d>
 8006250:	a367      	add	r3, pc, #412	@ (adr r3, 80063f0 <_dtoa_r+0x2c8>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7fa f9ef 	bl	8000638 <__aeabi_dmul>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa f833 	bl	80002cc <__adddf3>
 8006266:	4604      	mov	r4, r0
 8006268:	460d      	mov	r5, r1
 800626a:	f7fa fc95 	bl	8000b98 <__aeabi_d2iz>
 800626e:	2200      	movs	r2, #0
 8006270:	4607      	mov	r7, r0
 8006272:	2300      	movs	r3, #0
 8006274:	4620      	mov	r0, r4
 8006276:	4629      	mov	r1, r5
 8006278:	f7fa fc50 	bl	8000b1c <__aeabi_dcmplt>
 800627c:	b140      	cbz	r0, 8006290 <_dtoa_r+0x168>
 800627e:	4638      	mov	r0, r7
 8006280:	f7fa f970 	bl	8000564 <__aeabi_i2d>
 8006284:	4622      	mov	r2, r4
 8006286:	462b      	mov	r3, r5
 8006288:	f7fa fc3e 	bl	8000b08 <__aeabi_dcmpeq>
 800628c:	b900      	cbnz	r0, 8006290 <_dtoa_r+0x168>
 800628e:	3f01      	subs	r7, #1
 8006290:	2f16      	cmp	r7, #22
 8006292:	d852      	bhi.n	800633a <_dtoa_r+0x212>
 8006294:	4b5d      	ldr	r3, [pc, #372]	@ (800640c <_dtoa_r+0x2e4>)
 8006296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062a2:	f7fa fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d049      	beq.n	800633e <_dtoa_r+0x216>
 80062aa:	3f01      	subs	r7, #1
 80062ac:	2300      	movs	r3, #0
 80062ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80062b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062b2:	1b9b      	subs	r3, r3, r6
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	bf45      	ittet	mi
 80062b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80062bc:	9300      	strmi	r3, [sp, #0]
 80062be:	2300      	movpl	r3, #0
 80062c0:	2300      	movmi	r3, #0
 80062c2:	9206      	str	r2, [sp, #24]
 80062c4:	bf54      	ite	pl
 80062c6:	9300      	strpl	r3, [sp, #0]
 80062c8:	9306      	strmi	r3, [sp, #24]
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	db39      	blt.n	8006342 <_dtoa_r+0x21a>
 80062ce:	9b06      	ldr	r3, [sp, #24]
 80062d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80062d2:	443b      	add	r3, r7
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	2300      	movs	r3, #0
 80062d8:	9308      	str	r3, [sp, #32]
 80062da:	9b07      	ldr	r3, [sp, #28]
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d863      	bhi.n	80063a8 <_dtoa_r+0x280>
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	bfc4      	itt	gt
 80062e4:	3b04      	subgt	r3, #4
 80062e6:	9307      	strgt	r3, [sp, #28]
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	f1a3 0302 	sub.w	r3, r3, #2
 80062ee:	bfcc      	ite	gt
 80062f0:	2400      	movgt	r4, #0
 80062f2:	2401      	movle	r4, #1
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d863      	bhi.n	80063c0 <_dtoa_r+0x298>
 80062f8:	e8df f003 	tbb	[pc, r3]
 80062fc:	2b375452 	.word	0x2b375452
 8006300:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006304:	441e      	add	r6, r3
 8006306:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800630a:	2b20      	cmp	r3, #32
 800630c:	bfc1      	itttt	gt
 800630e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006312:	409f      	lslgt	r7, r3
 8006314:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006318:	fa24 f303 	lsrgt.w	r3, r4, r3
 800631c:	bfd6      	itet	le
 800631e:	f1c3 0320 	rsble	r3, r3, #32
 8006322:	ea47 0003 	orrgt.w	r0, r7, r3
 8006326:	fa04 f003 	lslle.w	r0, r4, r3
 800632a:	f7fa f90b 	bl	8000544 <__aeabi_ui2d>
 800632e:	2201      	movs	r2, #1
 8006330:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006334:	3e01      	subs	r6, #1
 8006336:	9212      	str	r2, [sp, #72]	@ 0x48
 8006338:	e776      	b.n	8006228 <_dtoa_r+0x100>
 800633a:	2301      	movs	r3, #1
 800633c:	e7b7      	b.n	80062ae <_dtoa_r+0x186>
 800633e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006340:	e7b6      	b.n	80062b0 <_dtoa_r+0x188>
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	1bdb      	subs	r3, r3, r7
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	427b      	negs	r3, r7
 800634a:	9308      	str	r3, [sp, #32]
 800634c:	2300      	movs	r3, #0
 800634e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006350:	e7c3      	b.n	80062da <_dtoa_r+0x1b2>
 8006352:	2301      	movs	r3, #1
 8006354:	9309      	str	r3, [sp, #36]	@ 0x24
 8006356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006358:	eb07 0b03 	add.w	fp, r7, r3
 800635c:	f10b 0301 	add.w	r3, fp, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	9303      	str	r3, [sp, #12]
 8006364:	bfb8      	it	lt
 8006366:	2301      	movlt	r3, #1
 8006368:	e006      	b.n	8006378 <_dtoa_r+0x250>
 800636a:	2301      	movs	r3, #1
 800636c:	9309      	str	r3, [sp, #36]	@ 0x24
 800636e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	dd28      	ble.n	80063c6 <_dtoa_r+0x29e>
 8006374:	469b      	mov	fp, r3
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800637c:	2100      	movs	r1, #0
 800637e:	2204      	movs	r2, #4
 8006380:	f102 0514 	add.w	r5, r2, #20
 8006384:	429d      	cmp	r5, r3
 8006386:	d926      	bls.n	80063d6 <_dtoa_r+0x2ae>
 8006388:	6041      	str	r1, [r0, #4]
 800638a:	4648      	mov	r0, r9
 800638c:	f000 fd9c 	bl	8006ec8 <_Balloc>
 8006390:	4682      	mov	sl, r0
 8006392:	2800      	cmp	r0, #0
 8006394:	d142      	bne.n	800641c <_dtoa_r+0x2f4>
 8006396:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <_dtoa_r+0x2e8>)
 8006398:	4602      	mov	r2, r0
 800639a:	f240 11af 	movw	r1, #431	@ 0x1af
 800639e:	e6da      	b.n	8006156 <_dtoa_r+0x2e>
 80063a0:	2300      	movs	r3, #0
 80063a2:	e7e3      	b.n	800636c <_dtoa_r+0x244>
 80063a4:	2300      	movs	r3, #0
 80063a6:	e7d5      	b.n	8006354 <_dtoa_r+0x22c>
 80063a8:	2401      	movs	r4, #1
 80063aa:	2300      	movs	r3, #0
 80063ac:	9307      	str	r3, [sp, #28]
 80063ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80063b0:	f04f 3bff 	mov.w	fp, #4294967295
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80063ba:	2312      	movs	r3, #18
 80063bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80063be:	e7db      	b.n	8006378 <_dtoa_r+0x250>
 80063c0:	2301      	movs	r3, #1
 80063c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c4:	e7f4      	b.n	80063b0 <_dtoa_r+0x288>
 80063c6:	f04f 0b01 	mov.w	fp, #1
 80063ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80063ce:	465b      	mov	r3, fp
 80063d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80063d4:	e7d0      	b.n	8006378 <_dtoa_r+0x250>
 80063d6:	3101      	adds	r1, #1
 80063d8:	0052      	lsls	r2, r2, #1
 80063da:	e7d1      	b.n	8006380 <_dtoa_r+0x258>
 80063dc:	f3af 8000 	nop.w
 80063e0:	636f4361 	.word	0x636f4361
 80063e4:	3fd287a7 	.word	0x3fd287a7
 80063e8:	8b60c8b3 	.word	0x8b60c8b3
 80063ec:	3fc68a28 	.word	0x3fc68a28
 80063f0:	509f79fb 	.word	0x509f79fb
 80063f4:	3fd34413 	.word	0x3fd34413
 80063f8:	0800a1d9 	.word	0x0800a1d9
 80063fc:	0800a1f0 	.word	0x0800a1f0
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	0800a1a9 	.word	0x0800a1a9
 8006408:	3ff80000 	.word	0x3ff80000
 800640c:	0800a340 	.word	0x0800a340
 8006410:	0800a248 	.word	0x0800a248
 8006414:	0800a1d5 	.word	0x0800a1d5
 8006418:	0800a1a8 	.word	0x0800a1a8
 800641c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006420:	6018      	str	r0, [r3, #0]
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	2b0e      	cmp	r3, #14
 8006426:	f200 80a1 	bhi.w	800656c <_dtoa_r+0x444>
 800642a:	2c00      	cmp	r4, #0
 800642c:	f000 809e 	beq.w	800656c <_dtoa_r+0x444>
 8006430:	2f00      	cmp	r7, #0
 8006432:	dd33      	ble.n	800649c <_dtoa_r+0x374>
 8006434:	4b9c      	ldr	r3, [pc, #624]	@ (80066a8 <_dtoa_r+0x580>)
 8006436:	f007 020f 	and.w	r2, r7, #15
 800643a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800643e:	ed93 7b00 	vldr	d7, [r3]
 8006442:	05f8      	lsls	r0, r7, #23
 8006444:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006448:	ea4f 1427 	mov.w	r4, r7, asr #4
 800644c:	d516      	bpl.n	800647c <_dtoa_r+0x354>
 800644e:	4b97      	ldr	r3, [pc, #604]	@ (80066ac <_dtoa_r+0x584>)
 8006450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006458:	f7fa fa18 	bl	800088c <__aeabi_ddiv>
 800645c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006460:	f004 040f 	and.w	r4, r4, #15
 8006464:	2603      	movs	r6, #3
 8006466:	4d91      	ldr	r5, [pc, #580]	@ (80066ac <_dtoa_r+0x584>)
 8006468:	b954      	cbnz	r4, 8006480 <_dtoa_r+0x358>
 800646a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800646e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006472:	f7fa fa0b 	bl	800088c <__aeabi_ddiv>
 8006476:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800647a:	e028      	b.n	80064ce <_dtoa_r+0x3a6>
 800647c:	2602      	movs	r6, #2
 800647e:	e7f2      	b.n	8006466 <_dtoa_r+0x33e>
 8006480:	07e1      	lsls	r1, r4, #31
 8006482:	d508      	bpl.n	8006496 <_dtoa_r+0x36e>
 8006484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800648c:	f7fa f8d4 	bl	8000638 <__aeabi_dmul>
 8006490:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006494:	3601      	adds	r6, #1
 8006496:	1064      	asrs	r4, r4, #1
 8006498:	3508      	adds	r5, #8
 800649a:	e7e5      	b.n	8006468 <_dtoa_r+0x340>
 800649c:	f000 80af 	beq.w	80065fe <_dtoa_r+0x4d6>
 80064a0:	427c      	negs	r4, r7
 80064a2:	4b81      	ldr	r3, [pc, #516]	@ (80066a8 <_dtoa_r+0x580>)
 80064a4:	4d81      	ldr	r5, [pc, #516]	@ (80066ac <_dtoa_r+0x584>)
 80064a6:	f004 020f 	and.w	r2, r4, #15
 80064aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064b6:	f7fa f8bf 	bl	8000638 <__aeabi_dmul>
 80064ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064be:	1124      	asrs	r4, r4, #4
 80064c0:	2300      	movs	r3, #0
 80064c2:	2602      	movs	r6, #2
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	f040 808f 	bne.w	80065e8 <_dtoa_r+0x4c0>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1d3      	bne.n	8006476 <_dtoa_r+0x34e>
 80064ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8094 	beq.w	8006602 <_dtoa_r+0x4da>
 80064da:	4b75      	ldr	r3, [pc, #468]	@ (80066b0 <_dtoa_r+0x588>)
 80064dc:	2200      	movs	r2, #0
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa fb1b 	bl	8000b1c <__aeabi_dcmplt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f000 808b 	beq.w	8006602 <_dtoa_r+0x4da>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8087 	beq.w	8006602 <_dtoa_r+0x4da>
 80064f4:	f1bb 0f00 	cmp.w	fp, #0
 80064f8:	dd34      	ble.n	8006564 <_dtoa_r+0x43c>
 80064fa:	4620      	mov	r0, r4
 80064fc:	4b6d      	ldr	r3, [pc, #436]	@ (80066b4 <_dtoa_r+0x58c>)
 80064fe:	2200      	movs	r2, #0
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa f899 	bl	8000638 <__aeabi_dmul>
 8006506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800650a:	f107 38ff 	add.w	r8, r7, #4294967295
 800650e:	3601      	adds	r6, #1
 8006510:	465c      	mov	r4, fp
 8006512:	4630      	mov	r0, r6
 8006514:	f7fa f826 	bl	8000564 <__aeabi_i2d>
 8006518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651c:	f7fa f88c 	bl	8000638 <__aeabi_dmul>
 8006520:	4b65      	ldr	r3, [pc, #404]	@ (80066b8 <_dtoa_r+0x590>)
 8006522:	2200      	movs	r2, #0
 8006524:	f7f9 fed2 	bl	80002cc <__adddf3>
 8006528:	4605      	mov	r5, r0
 800652a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800652e:	2c00      	cmp	r4, #0
 8006530:	d16a      	bne.n	8006608 <_dtoa_r+0x4e0>
 8006532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006536:	4b61      	ldr	r3, [pc, #388]	@ (80066bc <_dtoa_r+0x594>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7f9 fec5 	bl	80002c8 <__aeabi_dsub>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006546:	462a      	mov	r2, r5
 8006548:	4633      	mov	r3, r6
 800654a:	f7fa fb05 	bl	8000b58 <__aeabi_dcmpgt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f040 8298 	bne.w	8006a84 <_dtoa_r+0x95c>
 8006554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006558:	462a      	mov	r2, r5
 800655a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800655e:	f7fa fadd 	bl	8000b1c <__aeabi_dcmplt>
 8006562:	bb38      	cbnz	r0, 80065b4 <_dtoa_r+0x48c>
 8006564:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006568:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800656c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800656e:	2b00      	cmp	r3, #0
 8006570:	f2c0 8157 	blt.w	8006822 <_dtoa_r+0x6fa>
 8006574:	2f0e      	cmp	r7, #14
 8006576:	f300 8154 	bgt.w	8006822 <_dtoa_r+0x6fa>
 800657a:	4b4b      	ldr	r3, [pc, #300]	@ (80066a8 <_dtoa_r+0x580>)
 800657c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006580:	ed93 7b00 	vldr	d7, [r3]
 8006584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	ed8d 7b00 	vstr	d7, [sp]
 800658c:	f280 80e5 	bge.w	800675a <_dtoa_r+0x632>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f300 80e1 	bgt.w	800675a <_dtoa_r+0x632>
 8006598:	d10c      	bne.n	80065b4 <_dtoa_r+0x48c>
 800659a:	4b48      	ldr	r3, [pc, #288]	@ (80066bc <_dtoa_r+0x594>)
 800659c:	2200      	movs	r2, #0
 800659e:	ec51 0b17 	vmov	r0, r1, d7
 80065a2:	f7fa f849 	bl	8000638 <__aeabi_dmul>
 80065a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065aa:	f7fa facb 	bl	8000b44 <__aeabi_dcmpge>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f000 8266 	beq.w	8006a80 <_dtoa_r+0x958>
 80065b4:	2400      	movs	r4, #0
 80065b6:	4625      	mov	r5, r4
 80065b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065ba:	4656      	mov	r6, sl
 80065bc:	ea6f 0803 	mvn.w	r8, r3
 80065c0:	2700      	movs	r7, #0
 80065c2:	4621      	mov	r1, r4
 80065c4:	4648      	mov	r0, r9
 80065c6:	f000 fcbf 	bl	8006f48 <_Bfree>
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	f000 80bd 	beq.w	800674a <_dtoa_r+0x622>
 80065d0:	b12f      	cbz	r7, 80065de <_dtoa_r+0x4b6>
 80065d2:	42af      	cmp	r7, r5
 80065d4:	d003      	beq.n	80065de <_dtoa_r+0x4b6>
 80065d6:	4639      	mov	r1, r7
 80065d8:	4648      	mov	r0, r9
 80065da:	f000 fcb5 	bl	8006f48 <_Bfree>
 80065de:	4629      	mov	r1, r5
 80065e0:	4648      	mov	r0, r9
 80065e2:	f000 fcb1 	bl	8006f48 <_Bfree>
 80065e6:	e0b0      	b.n	800674a <_dtoa_r+0x622>
 80065e8:	07e2      	lsls	r2, r4, #31
 80065ea:	d505      	bpl.n	80065f8 <_dtoa_r+0x4d0>
 80065ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065f0:	f7fa f822 	bl	8000638 <__aeabi_dmul>
 80065f4:	3601      	adds	r6, #1
 80065f6:	2301      	movs	r3, #1
 80065f8:	1064      	asrs	r4, r4, #1
 80065fa:	3508      	adds	r5, #8
 80065fc:	e762      	b.n	80064c4 <_dtoa_r+0x39c>
 80065fe:	2602      	movs	r6, #2
 8006600:	e765      	b.n	80064ce <_dtoa_r+0x3a6>
 8006602:	9c03      	ldr	r4, [sp, #12]
 8006604:	46b8      	mov	r8, r7
 8006606:	e784      	b.n	8006512 <_dtoa_r+0x3ea>
 8006608:	4b27      	ldr	r3, [pc, #156]	@ (80066a8 <_dtoa_r+0x580>)
 800660a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800660c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006614:	4454      	add	r4, sl
 8006616:	2900      	cmp	r1, #0
 8006618:	d054      	beq.n	80066c4 <_dtoa_r+0x59c>
 800661a:	4929      	ldr	r1, [pc, #164]	@ (80066c0 <_dtoa_r+0x598>)
 800661c:	2000      	movs	r0, #0
 800661e:	f7fa f935 	bl	800088c <__aeabi_ddiv>
 8006622:	4633      	mov	r3, r6
 8006624:	462a      	mov	r2, r5
 8006626:	f7f9 fe4f 	bl	80002c8 <__aeabi_dsub>
 800662a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800662e:	4656      	mov	r6, sl
 8006630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006634:	f7fa fab0 	bl	8000b98 <__aeabi_d2iz>
 8006638:	4605      	mov	r5, r0
 800663a:	f7f9 ff93 	bl	8000564 <__aeabi_i2d>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006646:	f7f9 fe3f 	bl	80002c8 <__aeabi_dsub>
 800664a:	3530      	adds	r5, #48	@ 0x30
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006654:	f806 5b01 	strb.w	r5, [r6], #1
 8006658:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800665c:	f7fa fa5e 	bl	8000b1c <__aeabi_dcmplt>
 8006660:	2800      	cmp	r0, #0
 8006662:	d172      	bne.n	800674a <_dtoa_r+0x622>
 8006664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006668:	4911      	ldr	r1, [pc, #68]	@ (80066b0 <_dtoa_r+0x588>)
 800666a:	2000      	movs	r0, #0
 800666c:	f7f9 fe2c 	bl	80002c8 <__aeabi_dsub>
 8006670:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006674:	f7fa fa52 	bl	8000b1c <__aeabi_dcmplt>
 8006678:	2800      	cmp	r0, #0
 800667a:	f040 80b4 	bne.w	80067e6 <_dtoa_r+0x6be>
 800667e:	42a6      	cmp	r6, r4
 8006680:	f43f af70 	beq.w	8006564 <_dtoa_r+0x43c>
 8006684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <_dtoa_r+0x58c>)
 800668a:	2200      	movs	r2, #0
 800668c:	f7f9 ffd4 	bl	8000638 <__aeabi_dmul>
 8006690:	4b08      	ldr	r3, [pc, #32]	@ (80066b4 <_dtoa_r+0x58c>)
 8006692:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006696:	2200      	movs	r2, #0
 8006698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669c:	f7f9 ffcc 	bl	8000638 <__aeabi_dmul>
 80066a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066a4:	e7c4      	b.n	8006630 <_dtoa_r+0x508>
 80066a6:	bf00      	nop
 80066a8:	0800a340 	.word	0x0800a340
 80066ac:	0800a318 	.word	0x0800a318
 80066b0:	3ff00000 	.word	0x3ff00000
 80066b4:	40240000 	.word	0x40240000
 80066b8:	401c0000 	.word	0x401c0000
 80066bc:	40140000 	.word	0x40140000
 80066c0:	3fe00000 	.word	0x3fe00000
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7f9 ffb6 	bl	8000638 <__aeabi_dmul>
 80066cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80066d2:	4656      	mov	r6, sl
 80066d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d8:	f7fa fa5e 	bl	8000b98 <__aeabi_d2iz>
 80066dc:	4605      	mov	r5, r0
 80066de:	f7f9 ff41 	bl	8000564 <__aeabi_i2d>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ea:	f7f9 fded 	bl	80002c8 <__aeabi_dsub>
 80066ee:	3530      	adds	r5, #48	@ 0x30
 80066f0:	f806 5b01 	strb.w	r5, [r6], #1
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	42a6      	cmp	r6, r4
 80066fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	d124      	bne.n	800674e <_dtoa_r+0x626>
 8006704:	4baf      	ldr	r3, [pc, #700]	@ (80069c4 <_dtoa_r+0x89c>)
 8006706:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800670a:	f7f9 fddf 	bl	80002cc <__adddf3>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006716:	f7fa fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800671a:	2800      	cmp	r0, #0
 800671c:	d163      	bne.n	80067e6 <_dtoa_r+0x6be>
 800671e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006722:	49a8      	ldr	r1, [pc, #672]	@ (80069c4 <_dtoa_r+0x89c>)
 8006724:	2000      	movs	r0, #0
 8006726:	f7f9 fdcf 	bl	80002c8 <__aeabi_dsub>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006732:	f7fa f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f af14 	beq.w	8006564 <_dtoa_r+0x43c>
 800673c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800673e:	1e73      	subs	r3, r6, #1
 8006740:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006742:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006746:	2b30      	cmp	r3, #48	@ 0x30
 8006748:	d0f8      	beq.n	800673c <_dtoa_r+0x614>
 800674a:	4647      	mov	r7, r8
 800674c:	e03b      	b.n	80067c6 <_dtoa_r+0x69e>
 800674e:	4b9e      	ldr	r3, [pc, #632]	@ (80069c8 <_dtoa_r+0x8a0>)
 8006750:	f7f9 ff72 	bl	8000638 <__aeabi_dmul>
 8006754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006758:	e7bc      	b.n	80066d4 <_dtoa_r+0x5ac>
 800675a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800675e:	4656      	mov	r6, sl
 8006760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7fa f890 	bl	800088c <__aeabi_ddiv>
 800676c:	f7fa fa14 	bl	8000b98 <__aeabi_d2iz>
 8006770:	4680      	mov	r8, r0
 8006772:	f7f9 fef7 	bl	8000564 <__aeabi_i2d>
 8006776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800677a:	f7f9 ff5d 	bl	8000638 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4620      	mov	r0, r4
 8006784:	4629      	mov	r1, r5
 8006786:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800678a:	f7f9 fd9d 	bl	80002c8 <__aeabi_dsub>
 800678e:	f806 4b01 	strb.w	r4, [r6], #1
 8006792:	9d03      	ldr	r5, [sp, #12]
 8006794:	eba6 040a 	sub.w	r4, r6, sl
 8006798:	42a5      	cmp	r5, r4
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	d133      	bne.n	8006808 <_dtoa_r+0x6e0>
 80067a0:	f7f9 fd94 	bl	80002cc <__adddf3>
 80067a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067a8:	4604      	mov	r4, r0
 80067aa:	460d      	mov	r5, r1
 80067ac:	f7fa f9d4 	bl	8000b58 <__aeabi_dcmpgt>
 80067b0:	b9c0      	cbnz	r0, 80067e4 <_dtoa_r+0x6bc>
 80067b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b6:	4620      	mov	r0, r4
 80067b8:	4629      	mov	r1, r5
 80067ba:	f7fa f9a5 	bl	8000b08 <__aeabi_dcmpeq>
 80067be:	b110      	cbz	r0, 80067c6 <_dtoa_r+0x69e>
 80067c0:	f018 0f01 	tst.w	r8, #1
 80067c4:	d10e      	bne.n	80067e4 <_dtoa_r+0x6bc>
 80067c6:	9902      	ldr	r1, [sp, #8]
 80067c8:	4648      	mov	r0, r9
 80067ca:	f000 fbbd 	bl	8006f48 <_Bfree>
 80067ce:	2300      	movs	r3, #0
 80067d0:	7033      	strb	r3, [r6, #0]
 80067d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80067d4:	3701      	adds	r7, #1
 80067d6:	601f      	str	r7, [r3, #0]
 80067d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 824b 	beq.w	8006c76 <_dtoa_r+0xb4e>
 80067e0:	601e      	str	r6, [r3, #0]
 80067e2:	e248      	b.n	8006c76 <_dtoa_r+0xb4e>
 80067e4:	46b8      	mov	r8, r7
 80067e6:	4633      	mov	r3, r6
 80067e8:	461e      	mov	r6, r3
 80067ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ee:	2a39      	cmp	r2, #57	@ 0x39
 80067f0:	d106      	bne.n	8006800 <_dtoa_r+0x6d8>
 80067f2:	459a      	cmp	sl, r3
 80067f4:	d1f8      	bne.n	80067e8 <_dtoa_r+0x6c0>
 80067f6:	2230      	movs	r2, #48	@ 0x30
 80067f8:	f108 0801 	add.w	r8, r8, #1
 80067fc:	f88a 2000 	strb.w	r2, [sl]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	3201      	adds	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e7a0      	b.n	800674a <_dtoa_r+0x622>
 8006808:	4b6f      	ldr	r3, [pc, #444]	@ (80069c8 <_dtoa_r+0x8a0>)
 800680a:	2200      	movs	r2, #0
 800680c:	f7f9 ff14 	bl	8000638 <__aeabi_dmul>
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	f7fa f976 	bl	8000b08 <__aeabi_dcmpeq>
 800681c:	2800      	cmp	r0, #0
 800681e:	d09f      	beq.n	8006760 <_dtoa_r+0x638>
 8006820:	e7d1      	b.n	80067c6 <_dtoa_r+0x69e>
 8006822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006824:	2a00      	cmp	r2, #0
 8006826:	f000 80ea 	beq.w	80069fe <_dtoa_r+0x8d6>
 800682a:	9a07      	ldr	r2, [sp, #28]
 800682c:	2a01      	cmp	r2, #1
 800682e:	f300 80cd 	bgt.w	80069cc <_dtoa_r+0x8a4>
 8006832:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006834:	2a00      	cmp	r2, #0
 8006836:	f000 80c1 	beq.w	80069bc <_dtoa_r+0x894>
 800683a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800683e:	9c08      	ldr	r4, [sp, #32]
 8006840:	9e00      	ldr	r6, [sp, #0]
 8006842:	9a00      	ldr	r2, [sp, #0]
 8006844:	441a      	add	r2, r3
 8006846:	9200      	str	r2, [sp, #0]
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2101      	movs	r1, #1
 800684c:	441a      	add	r2, r3
 800684e:	4648      	mov	r0, r9
 8006850:	9206      	str	r2, [sp, #24]
 8006852:	f000 fc2d 	bl	80070b0 <__i2b>
 8006856:	4605      	mov	r5, r0
 8006858:	b166      	cbz	r6, 8006874 <_dtoa_r+0x74c>
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd09      	ble.n	8006874 <_dtoa_r+0x74c>
 8006860:	42b3      	cmp	r3, r6
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	bfa8      	it	ge
 8006866:	4633      	movge	r3, r6
 8006868:	1ad2      	subs	r2, r2, r3
 800686a:	9200      	str	r2, [sp, #0]
 800686c:	9a06      	ldr	r2, [sp, #24]
 800686e:	1af6      	subs	r6, r6, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	b30b      	cbz	r3, 80068bc <_dtoa_r+0x794>
 8006878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80c6 	beq.w	8006a0c <_dtoa_r+0x8e4>
 8006880:	2c00      	cmp	r4, #0
 8006882:	f000 80c0 	beq.w	8006a06 <_dtoa_r+0x8de>
 8006886:	4629      	mov	r1, r5
 8006888:	4622      	mov	r2, r4
 800688a:	4648      	mov	r0, r9
 800688c:	f000 fcc8 	bl	8007220 <__pow5mult>
 8006890:	9a02      	ldr	r2, [sp, #8]
 8006892:	4601      	mov	r1, r0
 8006894:	4605      	mov	r5, r0
 8006896:	4648      	mov	r0, r9
 8006898:	f000 fc20 	bl	80070dc <__multiply>
 800689c:	9902      	ldr	r1, [sp, #8]
 800689e:	4680      	mov	r8, r0
 80068a0:	4648      	mov	r0, r9
 80068a2:	f000 fb51 	bl	8006f48 <_Bfree>
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	1b1b      	subs	r3, r3, r4
 80068aa:	9308      	str	r3, [sp, #32]
 80068ac:	f000 80b1 	beq.w	8006a12 <_dtoa_r+0x8ea>
 80068b0:	9a08      	ldr	r2, [sp, #32]
 80068b2:	4641      	mov	r1, r8
 80068b4:	4648      	mov	r0, r9
 80068b6:	f000 fcb3 	bl	8007220 <__pow5mult>
 80068ba:	9002      	str	r0, [sp, #8]
 80068bc:	2101      	movs	r1, #1
 80068be:	4648      	mov	r0, r9
 80068c0:	f000 fbf6 	bl	80070b0 <__i2b>
 80068c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068c6:	4604      	mov	r4, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 81d8 	beq.w	8006c7e <_dtoa_r+0xb56>
 80068ce:	461a      	mov	r2, r3
 80068d0:	4601      	mov	r1, r0
 80068d2:	4648      	mov	r0, r9
 80068d4:	f000 fca4 	bl	8007220 <__pow5mult>
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	4604      	mov	r4, r0
 80068de:	f300 809f 	bgt.w	8006a20 <_dtoa_r+0x8f8>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 8097 	bne.w	8006a18 <_dtoa_r+0x8f0>
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f040 8093 	bne.w	8006a1c <_dtoa_r+0x8f4>
 80068f6:	9b05      	ldr	r3, [sp, #20]
 80068f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068fc:	0d1b      	lsrs	r3, r3, #20
 80068fe:	051b      	lsls	r3, r3, #20
 8006900:	b133      	cbz	r3, 8006910 <_dtoa_r+0x7e8>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	3301      	adds	r3, #1
 800690c:	9306      	str	r3, [sp, #24]
 800690e:	2301      	movs	r3, #1
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 81b8 	beq.w	8006c8a <_dtoa_r+0xb62>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006920:	6918      	ldr	r0, [r3, #16]
 8006922:	f000 fb79 	bl	8007018 <__hi0bits>
 8006926:	f1c0 0020 	rsb	r0, r0, #32
 800692a:	9b06      	ldr	r3, [sp, #24]
 800692c:	4418      	add	r0, r3
 800692e:	f010 001f 	ands.w	r0, r0, #31
 8006932:	f000 8082 	beq.w	8006a3a <_dtoa_r+0x912>
 8006936:	f1c0 0320 	rsb	r3, r0, #32
 800693a:	2b04      	cmp	r3, #4
 800693c:	dd73      	ble.n	8006a26 <_dtoa_r+0x8fe>
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	f1c0 001c 	rsb	r0, r0, #28
 8006944:	4403      	add	r3, r0
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	4403      	add	r3, r0
 800694c:	4406      	add	r6, r0
 800694e:	9306      	str	r3, [sp, #24]
 8006950:	9b00      	ldr	r3, [sp, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	dd05      	ble.n	8006962 <_dtoa_r+0x83a>
 8006956:	9902      	ldr	r1, [sp, #8]
 8006958:	461a      	mov	r2, r3
 800695a:	4648      	mov	r0, r9
 800695c:	f000 fcba 	bl	80072d4 <__lshift>
 8006960:	9002      	str	r0, [sp, #8]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd05      	ble.n	8006974 <_dtoa_r+0x84c>
 8006968:	4621      	mov	r1, r4
 800696a:	461a      	mov	r2, r3
 800696c:	4648      	mov	r0, r9
 800696e:	f000 fcb1 	bl	80072d4 <__lshift>
 8006972:	4604      	mov	r4, r0
 8006974:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d061      	beq.n	8006a3e <_dtoa_r+0x916>
 800697a:	9802      	ldr	r0, [sp, #8]
 800697c:	4621      	mov	r1, r4
 800697e:	f000 fd15 	bl	80073ac <__mcmp>
 8006982:	2800      	cmp	r0, #0
 8006984:	da5b      	bge.n	8006a3e <_dtoa_r+0x916>
 8006986:	2300      	movs	r3, #0
 8006988:	9902      	ldr	r1, [sp, #8]
 800698a:	220a      	movs	r2, #10
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fafd 	bl	8006f8c <__multadd>
 8006992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006994:	9002      	str	r0, [sp, #8]
 8006996:	f107 38ff 	add.w	r8, r7, #4294967295
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8177 	beq.w	8006c8e <_dtoa_r+0xb66>
 80069a0:	4629      	mov	r1, r5
 80069a2:	2300      	movs	r3, #0
 80069a4:	220a      	movs	r2, #10
 80069a6:	4648      	mov	r0, r9
 80069a8:	f000 faf0 	bl	8006f8c <__multadd>
 80069ac:	f1bb 0f00 	cmp.w	fp, #0
 80069b0:	4605      	mov	r5, r0
 80069b2:	dc6f      	bgt.n	8006a94 <_dtoa_r+0x96c>
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	dc49      	bgt.n	8006a4e <_dtoa_r+0x926>
 80069ba:	e06b      	b.n	8006a94 <_dtoa_r+0x96c>
 80069bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069c2:	e73c      	b.n	800683e <_dtoa_r+0x716>
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	40240000 	.word	0x40240000
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1e5c      	subs	r4, r3, #1
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	db09      	blt.n	80069ea <_dtoa_r+0x8c2>
 80069d6:	1b1c      	subs	r4, r3, r4
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f6bf af30 	bge.w	8006840 <_dtoa_r+0x718>
 80069e0:	9b00      	ldr	r3, [sp, #0]
 80069e2:	9a03      	ldr	r2, [sp, #12]
 80069e4:	1a9e      	subs	r6, r3, r2
 80069e6:	2300      	movs	r3, #0
 80069e8:	e72b      	b.n	8006842 <_dtoa_r+0x71a>
 80069ea:	9b08      	ldr	r3, [sp, #32]
 80069ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80069ee:	9408      	str	r4, [sp, #32]
 80069f0:	1ae3      	subs	r3, r4, r3
 80069f2:	441a      	add	r2, r3
 80069f4:	9e00      	ldr	r6, [sp, #0]
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80069fa:	2400      	movs	r4, #0
 80069fc:	e721      	b.n	8006842 <_dtoa_r+0x71a>
 80069fe:	9c08      	ldr	r4, [sp, #32]
 8006a00:	9e00      	ldr	r6, [sp, #0]
 8006a02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006a04:	e728      	b.n	8006858 <_dtoa_r+0x730>
 8006a06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a0a:	e751      	b.n	80068b0 <_dtoa_r+0x788>
 8006a0c:	9a08      	ldr	r2, [sp, #32]
 8006a0e:	9902      	ldr	r1, [sp, #8]
 8006a10:	e750      	b.n	80068b4 <_dtoa_r+0x78c>
 8006a12:	f8cd 8008 	str.w	r8, [sp, #8]
 8006a16:	e751      	b.n	80068bc <_dtoa_r+0x794>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e779      	b.n	8006910 <_dtoa_r+0x7e8>
 8006a1c:	9b04      	ldr	r3, [sp, #16]
 8006a1e:	e777      	b.n	8006910 <_dtoa_r+0x7e8>
 8006a20:	2300      	movs	r3, #0
 8006a22:	9308      	str	r3, [sp, #32]
 8006a24:	e779      	b.n	800691a <_dtoa_r+0x7f2>
 8006a26:	d093      	beq.n	8006950 <_dtoa_r+0x828>
 8006a28:	9a00      	ldr	r2, [sp, #0]
 8006a2a:	331c      	adds	r3, #28
 8006a2c:	441a      	add	r2, r3
 8006a2e:	9200      	str	r2, [sp, #0]
 8006a30:	9a06      	ldr	r2, [sp, #24]
 8006a32:	441a      	add	r2, r3
 8006a34:	441e      	add	r6, r3
 8006a36:	9206      	str	r2, [sp, #24]
 8006a38:	e78a      	b.n	8006950 <_dtoa_r+0x828>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	e7f4      	b.n	8006a28 <_dtoa_r+0x900>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	46b8      	mov	r8, r7
 8006a44:	dc20      	bgt.n	8006a88 <_dtoa_r+0x960>
 8006a46:	469b      	mov	fp, r3
 8006a48:	9b07      	ldr	r3, [sp, #28]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	dd1e      	ble.n	8006a8c <_dtoa_r+0x964>
 8006a4e:	f1bb 0f00 	cmp.w	fp, #0
 8006a52:	f47f adb1 	bne.w	80065b8 <_dtoa_r+0x490>
 8006a56:	4621      	mov	r1, r4
 8006a58:	465b      	mov	r3, fp
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	4648      	mov	r0, r9
 8006a5e:	f000 fa95 	bl	8006f8c <__multadd>
 8006a62:	4601      	mov	r1, r0
 8006a64:	4604      	mov	r4, r0
 8006a66:	9802      	ldr	r0, [sp, #8]
 8006a68:	f000 fca0 	bl	80073ac <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f77f ada3 	ble.w	80065b8 <_dtoa_r+0x490>
 8006a72:	4656      	mov	r6, sl
 8006a74:	2331      	movs	r3, #49	@ 0x31
 8006a76:	f806 3b01 	strb.w	r3, [r6], #1
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	e59f      	b.n	80065c0 <_dtoa_r+0x498>
 8006a80:	9c03      	ldr	r4, [sp, #12]
 8006a82:	46b8      	mov	r8, r7
 8006a84:	4625      	mov	r5, r4
 8006a86:	e7f4      	b.n	8006a72 <_dtoa_r+0x94a>
 8006a88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8101 	beq.w	8006c96 <_dtoa_r+0xb6e>
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	dd05      	ble.n	8006aa4 <_dtoa_r+0x97c>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	4648      	mov	r0, r9
 8006a9e:	f000 fc19 	bl	80072d4 <__lshift>
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d05c      	beq.n	8006b64 <_dtoa_r+0xa3c>
 8006aaa:	6869      	ldr	r1, [r5, #4]
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 fa0b 	bl	8006ec8 <_Balloc>
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	b928      	cbnz	r0, 8006ac2 <_dtoa_r+0x99a>
 8006ab6:	4b82      	ldr	r3, [pc, #520]	@ (8006cc0 <_dtoa_r+0xb98>)
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006abe:	f7ff bb4a 	b.w	8006156 <_dtoa_r+0x2e>
 8006ac2:	692a      	ldr	r2, [r5, #16]
 8006ac4:	3202      	adds	r2, #2
 8006ac6:	0092      	lsls	r2, r2, #2
 8006ac8:	f105 010c 	add.w	r1, r5, #12
 8006acc:	300c      	adds	r0, #12
 8006ace:	f000 fff7 	bl	8007ac0 <memcpy>
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4648      	mov	r0, r9
 8006ad8:	f000 fbfc 	bl	80072d4 <__lshift>
 8006adc:	f10a 0301 	add.w	r3, sl, #1
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	eb0a 030b 	add.w	r3, sl, fp
 8006ae6:	9308      	str	r3, [sp, #32]
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	462f      	mov	r7, r5
 8006af0:	9306      	str	r3, [sp, #24]
 8006af2:	4605      	mov	r5, r0
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	9802      	ldr	r0, [sp, #8]
 8006af8:	4621      	mov	r1, r4
 8006afa:	f103 3bff 	add.w	fp, r3, #4294967295
 8006afe:	f7ff fa88 	bl	8006012 <quorem>
 8006b02:	4603      	mov	r3, r0
 8006b04:	3330      	adds	r3, #48	@ 0x30
 8006b06:	9003      	str	r0, [sp, #12]
 8006b08:	4639      	mov	r1, r7
 8006b0a:	9802      	ldr	r0, [sp, #8]
 8006b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b0e:	f000 fc4d 	bl	80073ac <__mcmp>
 8006b12:	462a      	mov	r2, r5
 8006b14:	9004      	str	r0, [sp, #16]
 8006b16:	4621      	mov	r1, r4
 8006b18:	4648      	mov	r0, r9
 8006b1a:	f000 fc63 	bl	80073e4 <__mdiff>
 8006b1e:	68c2      	ldr	r2, [r0, #12]
 8006b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b22:	4606      	mov	r6, r0
 8006b24:	bb02      	cbnz	r2, 8006b68 <_dtoa_r+0xa40>
 8006b26:	4601      	mov	r1, r0
 8006b28:	9802      	ldr	r0, [sp, #8]
 8006b2a:	f000 fc3f 	bl	80073ac <__mcmp>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	4602      	mov	r2, r0
 8006b32:	4631      	mov	r1, r6
 8006b34:	4648      	mov	r0, r9
 8006b36:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b3a:	f000 fa05 	bl	8006f48 <_Bfree>
 8006b3e:	9b07      	ldr	r3, [sp, #28]
 8006b40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b42:	9e00      	ldr	r6, [sp, #0]
 8006b44:	ea42 0103 	orr.w	r1, r2, r3
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	4319      	orrs	r1, r3
 8006b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4e:	d10d      	bne.n	8006b6c <_dtoa_r+0xa44>
 8006b50:	2b39      	cmp	r3, #57	@ 0x39
 8006b52:	d027      	beq.n	8006ba4 <_dtoa_r+0xa7c>
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	dd01      	ble.n	8006b5e <_dtoa_r+0xa36>
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	3331      	adds	r3, #49	@ 0x31
 8006b5e:	f88b 3000 	strb.w	r3, [fp]
 8006b62:	e52e      	b.n	80065c2 <_dtoa_r+0x49a>
 8006b64:	4628      	mov	r0, r5
 8006b66:	e7b9      	b.n	8006adc <_dtoa_r+0x9b4>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	e7e2      	b.n	8006b32 <_dtoa_r+0xa0a>
 8006b6c:	9904      	ldr	r1, [sp, #16]
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	db04      	blt.n	8006b7c <_dtoa_r+0xa54>
 8006b72:	9807      	ldr	r0, [sp, #28]
 8006b74:	4301      	orrs	r1, r0
 8006b76:	9806      	ldr	r0, [sp, #24]
 8006b78:	4301      	orrs	r1, r0
 8006b7a:	d120      	bne.n	8006bbe <_dtoa_r+0xa96>
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	ddee      	ble.n	8006b5e <_dtoa_r+0xa36>
 8006b80:	9902      	ldr	r1, [sp, #8]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2201      	movs	r2, #1
 8006b86:	4648      	mov	r0, r9
 8006b88:	f000 fba4 	bl	80072d4 <__lshift>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	9002      	str	r0, [sp, #8]
 8006b90:	f000 fc0c 	bl	80073ac <__mcmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	dc02      	bgt.n	8006ba0 <_dtoa_r+0xa78>
 8006b9a:	d1e0      	bne.n	8006b5e <_dtoa_r+0xa36>
 8006b9c:	07da      	lsls	r2, r3, #31
 8006b9e:	d5de      	bpl.n	8006b5e <_dtoa_r+0xa36>
 8006ba0:	2b39      	cmp	r3, #57	@ 0x39
 8006ba2:	d1da      	bne.n	8006b5a <_dtoa_r+0xa32>
 8006ba4:	2339      	movs	r3, #57	@ 0x39
 8006ba6:	f88b 3000 	strb.w	r3, [fp]
 8006baa:	4633      	mov	r3, r6
 8006bac:	461e      	mov	r6, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006bb4:	2a39      	cmp	r2, #57	@ 0x39
 8006bb6:	d04e      	beq.n	8006c56 <_dtoa_r+0xb2e>
 8006bb8:	3201      	adds	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e501      	b.n	80065c2 <_dtoa_r+0x49a>
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	dd03      	ble.n	8006bca <_dtoa_r+0xaa2>
 8006bc2:	2b39      	cmp	r3, #57	@ 0x39
 8006bc4:	d0ee      	beq.n	8006ba4 <_dtoa_r+0xa7c>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	e7c9      	b.n	8006b5e <_dtoa_r+0xa36>
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	9908      	ldr	r1, [sp, #32]
 8006bce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bd2:	428a      	cmp	r2, r1
 8006bd4:	d028      	beq.n	8006c28 <_dtoa_r+0xb00>
 8006bd6:	9902      	ldr	r1, [sp, #8]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	220a      	movs	r2, #10
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f000 f9d5 	bl	8006f8c <__multadd>
 8006be2:	42af      	cmp	r7, r5
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f04f 020a 	mov.w	r2, #10
 8006bee:	4639      	mov	r1, r7
 8006bf0:	4648      	mov	r0, r9
 8006bf2:	d107      	bne.n	8006c04 <_dtoa_r+0xadc>
 8006bf4:	f000 f9ca 	bl	8006f8c <__multadd>
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	9b00      	ldr	r3, [sp, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	e777      	b.n	8006af4 <_dtoa_r+0x9cc>
 8006c04:	f000 f9c2 	bl	8006f8c <__multadd>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	220a      	movs	r2, #10
 8006c10:	4648      	mov	r0, r9
 8006c12:	f000 f9bb 	bl	8006f8c <__multadd>
 8006c16:	4605      	mov	r5, r0
 8006c18:	e7f0      	b.n	8006bfc <_dtoa_r+0xad4>
 8006c1a:	f1bb 0f00 	cmp.w	fp, #0
 8006c1e:	bfcc      	ite	gt
 8006c20:	465e      	movgt	r6, fp
 8006c22:	2601      	movle	r6, #1
 8006c24:	4456      	add	r6, sl
 8006c26:	2700      	movs	r7, #0
 8006c28:	9902      	ldr	r1, [sp, #8]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4648      	mov	r0, r9
 8006c30:	f000 fb50 	bl	80072d4 <__lshift>
 8006c34:	4621      	mov	r1, r4
 8006c36:	9002      	str	r0, [sp, #8]
 8006c38:	f000 fbb8 	bl	80073ac <__mcmp>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	dcb4      	bgt.n	8006baa <_dtoa_r+0xa82>
 8006c40:	d102      	bne.n	8006c48 <_dtoa_r+0xb20>
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	07db      	lsls	r3, r3, #31
 8006c46:	d4b0      	bmi.n	8006baa <_dtoa_r+0xa82>
 8006c48:	4633      	mov	r3, r6
 8006c4a:	461e      	mov	r6, r3
 8006c4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c50:	2a30      	cmp	r2, #48	@ 0x30
 8006c52:	d0fa      	beq.n	8006c4a <_dtoa_r+0xb22>
 8006c54:	e4b5      	b.n	80065c2 <_dtoa_r+0x49a>
 8006c56:	459a      	cmp	sl, r3
 8006c58:	d1a8      	bne.n	8006bac <_dtoa_r+0xa84>
 8006c5a:	2331      	movs	r3, #49	@ 0x31
 8006c5c:	f108 0801 	add.w	r8, r8, #1
 8006c60:	f88a 3000 	strb.w	r3, [sl]
 8006c64:	e4ad      	b.n	80065c2 <_dtoa_r+0x49a>
 8006c66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006cc4 <_dtoa_r+0xb9c>
 8006c6c:	b11b      	cbz	r3, 8006c76 <_dtoa_r+0xb4e>
 8006c6e:	f10a 0308 	add.w	r3, sl, #8
 8006c72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	4650      	mov	r0, sl
 8006c78:	b017      	add	sp, #92	@ 0x5c
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	9b07      	ldr	r3, [sp, #28]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	f77f ae2e 	ble.w	80068e2 <_dtoa_r+0x7ba>
 8006c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e64d      	b.n	800692a <_dtoa_r+0x802>
 8006c8e:	f1bb 0f00 	cmp.w	fp, #0
 8006c92:	f77f aed9 	ble.w	8006a48 <_dtoa_r+0x920>
 8006c96:	4656      	mov	r6, sl
 8006c98:	9802      	ldr	r0, [sp, #8]
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	f7ff f9b9 	bl	8006012 <quorem>
 8006ca0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ca8:	eba6 020a 	sub.w	r2, r6, sl
 8006cac:	4593      	cmp	fp, r2
 8006cae:	ddb4      	ble.n	8006c1a <_dtoa_r+0xaf2>
 8006cb0:	9902      	ldr	r1, [sp, #8]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	f000 f968 	bl	8006f8c <__multadd>
 8006cbc:	9002      	str	r0, [sp, #8]
 8006cbe:	e7eb      	b.n	8006c98 <_dtoa_r+0xb70>
 8006cc0:	0800a248 	.word	0x0800a248
 8006cc4:	0800a1cc 	.word	0x0800a1cc

08006cc8 <_free_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4605      	mov	r5, r0
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d041      	beq.n	8006d54 <_free_r+0x8c>
 8006cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd4:	1f0c      	subs	r4, r1, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfb8      	it	lt
 8006cda:	18e4      	addlt	r4, r4, r3
 8006cdc:	f000 f8e8 	bl	8006eb0 <__malloc_lock>
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d58 <_free_r+0x90>)
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	b933      	cbnz	r3, 8006cf4 <_free_r+0x2c>
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	6014      	str	r4, [r2, #0]
 8006cea:	4628      	mov	r0, r5
 8006cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf0:	f000 b8e4 	b.w	8006ebc <__malloc_unlock>
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	d908      	bls.n	8006d0a <_free_r+0x42>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	1821      	adds	r1, r4, r0
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf01      	itttt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	1809      	addeq	r1, r1, r0
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	e7ed      	b.n	8006ce6 <_free_r+0x1e>
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b10b      	cbz	r3, 8006d14 <_free_r+0x4c>
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d9fa      	bls.n	8006d0a <_free_r+0x42>
 8006d14:	6811      	ldr	r1, [r2, #0]
 8006d16:	1850      	adds	r0, r2, r1
 8006d18:	42a0      	cmp	r0, r4
 8006d1a:	d10b      	bne.n	8006d34 <_free_r+0x6c>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	4401      	add	r1, r0
 8006d20:	1850      	adds	r0, r2, r1
 8006d22:	4283      	cmp	r3, r0
 8006d24:	6011      	str	r1, [r2, #0]
 8006d26:	d1e0      	bne.n	8006cea <_free_r+0x22>
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	6053      	str	r3, [r2, #4]
 8006d2e:	4408      	add	r0, r1
 8006d30:	6010      	str	r0, [r2, #0]
 8006d32:	e7da      	b.n	8006cea <_free_r+0x22>
 8006d34:	d902      	bls.n	8006d3c <_free_r+0x74>
 8006d36:	230c      	movs	r3, #12
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	e7d6      	b.n	8006cea <_free_r+0x22>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	1821      	adds	r1, r4, r0
 8006d40:	428b      	cmp	r3, r1
 8006d42:	bf04      	itt	eq
 8006d44:	6819      	ldreq	r1, [r3, #0]
 8006d46:	685b      	ldreq	r3, [r3, #4]
 8006d48:	6063      	str	r3, [r4, #4]
 8006d4a:	bf04      	itt	eq
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	6054      	str	r4, [r2, #4]
 8006d52:	e7ca      	b.n	8006cea <_free_r+0x22>
 8006d54:	bd38      	pop	{r3, r4, r5, pc}
 8006d56:	bf00      	nop
 8006d58:	20000494 	.word	0x20000494

08006d5c <malloc>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	@ (8006d68 <malloc+0xc>)
 8006d5e:	4601      	mov	r1, r0
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f000 b825 	b.w	8006db0 <_malloc_r>
 8006d66:	bf00      	nop
 8006d68:	20000018 	.word	0x20000018

08006d6c <sbrk_aligned>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006dac <sbrk_aligned+0x40>)
 8006d70:	460c      	mov	r4, r1
 8006d72:	6831      	ldr	r1, [r6, #0]
 8006d74:	4605      	mov	r5, r0
 8006d76:	b911      	cbnz	r1, 8006d7e <sbrk_aligned+0x12>
 8006d78:	f000 fe92 	bl	8007aa0 <_sbrk_r>
 8006d7c:	6030      	str	r0, [r6, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 fe8d 	bl	8007aa0 <_sbrk_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d103      	bne.n	8006d92 <sbrk_aligned+0x26>
 8006d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d8e:	4620      	mov	r0, r4
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	1cc4      	adds	r4, r0, #3
 8006d94:	f024 0403 	bic.w	r4, r4, #3
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	d0f8      	beq.n	8006d8e <sbrk_aligned+0x22>
 8006d9c:	1a21      	subs	r1, r4, r0
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fe7e 	bl	8007aa0 <_sbrk_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d1f2      	bne.n	8006d8e <sbrk_aligned+0x22>
 8006da8:	e7ef      	b.n	8006d8a <sbrk_aligned+0x1e>
 8006daa:	bf00      	nop
 8006dac:	20000490 	.word	0x20000490

08006db0 <_malloc_r>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	1ccd      	adds	r5, r1, #3
 8006db6:	f025 0503 	bic.w	r5, r5, #3
 8006dba:	3508      	adds	r5, #8
 8006dbc:	2d0c      	cmp	r5, #12
 8006dbe:	bf38      	it	cc
 8006dc0:	250c      	movcc	r5, #12
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	db01      	blt.n	8006dcc <_malloc_r+0x1c>
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d904      	bls.n	8006dd6 <_malloc_r+0x26>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006eac <_malloc_r+0xfc>
 8006dda:	f000 f869 	bl	8006eb0 <__malloc_lock>
 8006dde:	f8d8 3000 	ldr.w	r3, [r8]
 8006de2:	461c      	mov	r4, r3
 8006de4:	bb44      	cbnz	r4, 8006e38 <_malloc_r+0x88>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff ffbf 	bl	8006d6c <sbrk_aligned>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	4604      	mov	r4, r0
 8006df2:	d158      	bne.n	8006ea6 <_malloc_r+0xf6>
 8006df4:	f8d8 4000 	ldr.w	r4, [r8]
 8006df8:	4627      	mov	r7, r4
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	d143      	bne.n	8006e86 <_malloc_r+0xd6>
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	d04b      	beq.n	8006e9a <_malloc_r+0xea>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	4639      	mov	r1, r7
 8006e06:	4630      	mov	r0, r6
 8006e08:	eb04 0903 	add.w	r9, r4, r3
 8006e0c:	f000 fe48 	bl	8007aa0 <_sbrk_r>
 8006e10:	4581      	cmp	r9, r0
 8006e12:	d142      	bne.n	8006e9a <_malloc_r+0xea>
 8006e14:	6821      	ldr	r1, [r4, #0]
 8006e16:	1a6d      	subs	r5, r5, r1
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff ffa6 	bl	8006d6c <sbrk_aligned>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d03a      	beq.n	8006e9a <_malloc_r+0xea>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	442b      	add	r3, r5
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	bb62      	cbnz	r2, 8006e8c <_malloc_r+0xdc>
 8006e32:	f8c8 7000 	str.w	r7, [r8]
 8006e36:	e00f      	b.n	8006e58 <_malloc_r+0xa8>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	1b52      	subs	r2, r2, r5
 8006e3c:	d420      	bmi.n	8006e80 <_malloc_r+0xd0>
 8006e3e:	2a0b      	cmp	r2, #11
 8006e40:	d917      	bls.n	8006e72 <_malloc_r+0xc2>
 8006e42:	1961      	adds	r1, r4, r5
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	6025      	str	r5, [r4, #0]
 8006e48:	bf18      	it	ne
 8006e4a:	6059      	strne	r1, [r3, #4]
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	bf08      	it	eq
 8006e50:	f8c8 1000 	streq.w	r1, [r8]
 8006e54:	5162      	str	r2, [r4, r5]
 8006e56:	604b      	str	r3, [r1, #4]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f000 f82f 	bl	8006ebc <__malloc_unlock>
 8006e5e:	f104 000b 	add.w	r0, r4, #11
 8006e62:	1d23      	adds	r3, r4, #4
 8006e64:	f020 0007 	bic.w	r0, r0, #7
 8006e68:	1ac2      	subs	r2, r0, r3
 8006e6a:	bf1c      	itt	ne
 8006e6c:	1a1b      	subne	r3, r3, r0
 8006e6e:	50a3      	strne	r3, [r4, r2]
 8006e70:	e7af      	b.n	8006dd2 <_malloc_r+0x22>
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	bf0c      	ite	eq
 8006e78:	f8c8 2000 	streq.w	r2, [r8]
 8006e7c:	605a      	strne	r2, [r3, #4]
 8006e7e:	e7eb      	b.n	8006e58 <_malloc_r+0xa8>
 8006e80:	4623      	mov	r3, r4
 8006e82:	6864      	ldr	r4, [r4, #4]
 8006e84:	e7ae      	b.n	8006de4 <_malloc_r+0x34>
 8006e86:	463c      	mov	r4, r7
 8006e88:	687f      	ldr	r7, [r7, #4]
 8006e8a:	e7b6      	b.n	8006dfa <_malloc_r+0x4a>
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	d1fb      	bne.n	8006e8c <_malloc_r+0xdc>
 8006e94:	2300      	movs	r3, #0
 8006e96:	6053      	str	r3, [r2, #4]
 8006e98:	e7de      	b.n	8006e58 <_malloc_r+0xa8>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f80c 	bl	8006ebc <__malloc_unlock>
 8006ea4:	e794      	b.n	8006dd0 <_malloc_r+0x20>
 8006ea6:	6005      	str	r5, [r0, #0]
 8006ea8:	e7d6      	b.n	8006e58 <_malloc_r+0xa8>
 8006eaa:	bf00      	nop
 8006eac:	20000494 	.word	0x20000494

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	@ (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f7ff b8ac 	b.w	800600e <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	2000048c 	.word	0x2000048c

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f7ff b8a7 	b.w	8006010 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	2000048c 	.word	0x2000048c

08006ec8 <_Balloc>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	69c6      	ldr	r6, [r0, #28]
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	b976      	cbnz	r6, 8006ef0 <_Balloc+0x28>
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	f7ff ff42 	bl	8006d5c <malloc>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	61e0      	str	r0, [r4, #28]
 8006edc:	b920      	cbnz	r0, 8006ee8 <_Balloc+0x20>
 8006ede:	4b18      	ldr	r3, [pc, #96]	@ (8006f40 <_Balloc+0x78>)
 8006ee0:	4818      	ldr	r0, [pc, #96]	@ (8006f44 <_Balloc+0x7c>)
 8006ee2:	216b      	movs	r1, #107	@ 0x6b
 8006ee4:	f000 fdfa 	bl	8007adc <__assert_func>
 8006ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eec:	6006      	str	r6, [r0, #0]
 8006eee:	60c6      	str	r6, [r0, #12]
 8006ef0:	69e6      	ldr	r6, [r4, #28]
 8006ef2:	68f3      	ldr	r3, [r6, #12]
 8006ef4:	b183      	cbz	r3, 8006f18 <_Balloc+0x50>
 8006ef6:	69e3      	ldr	r3, [r4, #28]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006efe:	b9b8      	cbnz	r0, 8006f30 <_Balloc+0x68>
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f605 	lsl.w	r6, r1, r5
 8006f06:	1d72      	adds	r2, r6, #5
 8006f08:	0092      	lsls	r2, r2, #2
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fe04 	bl	8007b18 <_calloc_r>
 8006f10:	b160      	cbz	r0, 8006f2c <_Balloc+0x64>
 8006f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f16:	e00e      	b.n	8006f36 <_Balloc+0x6e>
 8006f18:	2221      	movs	r2, #33	@ 0x21
 8006f1a:	2104      	movs	r1, #4
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 fdfb 	bl	8007b18 <_calloc_r>
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	60f0      	str	r0, [r6, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e4      	bne.n	8006ef6 <_Balloc+0x2e>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	6802      	ldr	r2, [r0, #0]
 8006f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f36:	2300      	movs	r3, #0
 8006f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f3c:	e7f7      	b.n	8006f2e <_Balloc+0x66>
 8006f3e:	bf00      	nop
 8006f40:	0800a1d9 	.word	0x0800a1d9
 8006f44:	0800a259 	.word	0x0800a259

08006f48 <_Bfree>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	69c6      	ldr	r6, [r0, #28]
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	b976      	cbnz	r6, 8006f70 <_Bfree+0x28>
 8006f52:	2010      	movs	r0, #16
 8006f54:	f7ff ff02 	bl	8006d5c <malloc>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	61e8      	str	r0, [r5, #28]
 8006f5c:	b920      	cbnz	r0, 8006f68 <_Bfree+0x20>
 8006f5e:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <_Bfree+0x3c>)
 8006f60:	4809      	ldr	r0, [pc, #36]	@ (8006f88 <_Bfree+0x40>)
 8006f62:	218f      	movs	r1, #143	@ 0x8f
 8006f64:	f000 fdba 	bl	8007adc <__assert_func>
 8006f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f6c:	6006      	str	r6, [r0, #0]
 8006f6e:	60c6      	str	r6, [r0, #12]
 8006f70:	b13c      	cbz	r4, 8006f82 <_Bfree+0x3a>
 8006f72:	69eb      	ldr	r3, [r5, #28]
 8006f74:	6862      	ldr	r2, [r4, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f7c:	6021      	str	r1, [r4, #0]
 8006f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	0800a1d9 	.word	0x0800a1d9
 8006f88:	0800a259 	.word	0x0800a259

08006f8c <__multadd>:
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	690d      	ldr	r5, [r1, #16]
 8006f92:	4607      	mov	r7, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	461e      	mov	r6, r3
 8006f98:	f101 0c14 	add.w	ip, r1, #20
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006fa2:	b299      	uxth	r1, r3
 8006fa4:	fb02 6101 	mla	r1, r2, r1, r6
 8006fa8:	0c1e      	lsrs	r6, r3, #16
 8006faa:	0c0b      	lsrs	r3, r1, #16
 8006fac:	fb02 3306 	mla	r3, r2, r6, r3
 8006fb0:	b289      	uxth	r1, r1
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fb8:	4285      	cmp	r5, r0
 8006fba:	f84c 1b04 	str.w	r1, [ip], #4
 8006fbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fc2:	dcec      	bgt.n	8006f9e <__multadd+0x12>
 8006fc4:	b30e      	cbz	r6, 800700a <__multadd+0x7e>
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dc19      	bgt.n	8007000 <__multadd+0x74>
 8006fcc:	6861      	ldr	r1, [r4, #4]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	f7ff ff79 	bl	8006ec8 <_Balloc>
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	b928      	cbnz	r0, 8006fe6 <__multadd+0x5a>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <__multadd+0x84>)
 8006fde:	480d      	ldr	r0, [pc, #52]	@ (8007014 <__multadd+0x88>)
 8006fe0:	21ba      	movs	r1, #186	@ 0xba
 8006fe2:	f000 fd7b 	bl	8007adc <__assert_func>
 8006fe6:	6922      	ldr	r2, [r4, #16]
 8006fe8:	3202      	adds	r2, #2
 8006fea:	f104 010c 	add.w	r1, r4, #12
 8006fee:	0092      	lsls	r2, r2, #2
 8006ff0:	300c      	adds	r0, #12
 8006ff2:	f000 fd65 	bl	8007ac0 <memcpy>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff ffa5 	bl	8006f48 <_Bfree>
 8006ffe:	4644      	mov	r4, r8
 8007000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007004:	3501      	adds	r5, #1
 8007006:	615e      	str	r6, [r3, #20]
 8007008:	6125      	str	r5, [r4, #16]
 800700a:	4620      	mov	r0, r4
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007010:	0800a248 	.word	0x0800a248
 8007014:	0800a259 	.word	0x0800a259

08007018 <__hi0bits>:
 8007018:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800701c:	4603      	mov	r3, r0
 800701e:	bf36      	itet	cc
 8007020:	0403      	lslcc	r3, r0, #16
 8007022:	2000      	movcs	r0, #0
 8007024:	2010      	movcc	r0, #16
 8007026:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800702a:	bf3c      	itt	cc
 800702c:	021b      	lslcc	r3, r3, #8
 800702e:	3008      	addcc	r0, #8
 8007030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007034:	bf3c      	itt	cc
 8007036:	011b      	lslcc	r3, r3, #4
 8007038:	3004      	addcc	r0, #4
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	bf3c      	itt	cc
 8007040:	009b      	lslcc	r3, r3, #2
 8007042:	3002      	addcc	r0, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	db05      	blt.n	8007054 <__hi0bits+0x3c>
 8007048:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800704c:	f100 0001 	add.w	r0, r0, #1
 8007050:	bf08      	it	eq
 8007052:	2020      	moveq	r0, #32
 8007054:	4770      	bx	lr

08007056 <__lo0bits>:
 8007056:	6803      	ldr	r3, [r0, #0]
 8007058:	4602      	mov	r2, r0
 800705a:	f013 0007 	ands.w	r0, r3, #7
 800705e:	d00b      	beq.n	8007078 <__lo0bits+0x22>
 8007060:	07d9      	lsls	r1, r3, #31
 8007062:	d421      	bmi.n	80070a8 <__lo0bits+0x52>
 8007064:	0798      	lsls	r0, r3, #30
 8007066:	bf49      	itett	mi
 8007068:	085b      	lsrmi	r3, r3, #1
 800706a:	089b      	lsrpl	r3, r3, #2
 800706c:	2001      	movmi	r0, #1
 800706e:	6013      	strmi	r3, [r2, #0]
 8007070:	bf5c      	itt	pl
 8007072:	6013      	strpl	r3, [r2, #0]
 8007074:	2002      	movpl	r0, #2
 8007076:	4770      	bx	lr
 8007078:	b299      	uxth	r1, r3
 800707a:	b909      	cbnz	r1, 8007080 <__lo0bits+0x2a>
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	2010      	movs	r0, #16
 8007080:	b2d9      	uxtb	r1, r3
 8007082:	b909      	cbnz	r1, 8007088 <__lo0bits+0x32>
 8007084:	3008      	adds	r0, #8
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	0719      	lsls	r1, r3, #28
 800708a:	bf04      	itt	eq
 800708c:	091b      	lsreq	r3, r3, #4
 800708e:	3004      	addeq	r0, #4
 8007090:	0799      	lsls	r1, r3, #30
 8007092:	bf04      	itt	eq
 8007094:	089b      	lsreq	r3, r3, #2
 8007096:	3002      	addeq	r0, #2
 8007098:	07d9      	lsls	r1, r3, #31
 800709a:	d403      	bmi.n	80070a4 <__lo0bits+0x4e>
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	f100 0001 	add.w	r0, r0, #1
 80070a2:	d003      	beq.n	80070ac <__lo0bits+0x56>
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	4770      	bx	lr
 80070a8:	2000      	movs	r0, #0
 80070aa:	4770      	bx	lr
 80070ac:	2020      	movs	r0, #32
 80070ae:	4770      	bx	lr

080070b0 <__i2b>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	460c      	mov	r4, r1
 80070b4:	2101      	movs	r1, #1
 80070b6:	f7ff ff07 	bl	8006ec8 <_Balloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	b928      	cbnz	r0, 80070ca <__i2b+0x1a>
 80070be:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <__i2b+0x24>)
 80070c0:	4805      	ldr	r0, [pc, #20]	@ (80070d8 <__i2b+0x28>)
 80070c2:	f240 1145 	movw	r1, #325	@ 0x145
 80070c6:	f000 fd09 	bl	8007adc <__assert_func>
 80070ca:	2301      	movs	r3, #1
 80070cc:	6144      	str	r4, [r0, #20]
 80070ce:	6103      	str	r3, [r0, #16]
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	0800a248 	.word	0x0800a248
 80070d8:	0800a259 	.word	0x0800a259

080070dc <__multiply>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	4617      	mov	r7, r2
 80070e2:	690a      	ldr	r2, [r1, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	bfa8      	it	ge
 80070ea:	463b      	movge	r3, r7
 80070ec:	4689      	mov	r9, r1
 80070ee:	bfa4      	itt	ge
 80070f0:	460f      	movge	r7, r1
 80070f2:	4699      	movge	r9, r3
 80070f4:	693d      	ldr	r5, [r7, #16]
 80070f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	eb05 060a 	add.w	r6, r5, sl
 8007102:	42b3      	cmp	r3, r6
 8007104:	b085      	sub	sp, #20
 8007106:	bfb8      	it	lt
 8007108:	3101      	addlt	r1, #1
 800710a:	f7ff fedd 	bl	8006ec8 <_Balloc>
 800710e:	b930      	cbnz	r0, 800711e <__multiply+0x42>
 8007110:	4602      	mov	r2, r0
 8007112:	4b41      	ldr	r3, [pc, #260]	@ (8007218 <__multiply+0x13c>)
 8007114:	4841      	ldr	r0, [pc, #260]	@ (800721c <__multiply+0x140>)
 8007116:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800711a:	f000 fcdf 	bl	8007adc <__assert_func>
 800711e:	f100 0414 	add.w	r4, r0, #20
 8007122:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007126:	4623      	mov	r3, r4
 8007128:	2200      	movs	r2, #0
 800712a:	4573      	cmp	r3, lr
 800712c:	d320      	bcc.n	8007170 <__multiply+0x94>
 800712e:	f107 0814 	add.w	r8, r7, #20
 8007132:	f109 0114 	add.w	r1, r9, #20
 8007136:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800713a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	1beb      	subs	r3, r5, r7
 8007142:	3b15      	subs	r3, #21
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	3304      	adds	r3, #4
 800714a:	3715      	adds	r7, #21
 800714c:	42bd      	cmp	r5, r7
 800714e:	bf38      	it	cc
 8007150:	2304      	movcc	r3, #4
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	9b02      	ldr	r3, [sp, #8]
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	428b      	cmp	r3, r1
 800715a:	d80c      	bhi.n	8007176 <__multiply+0x9a>
 800715c:	2e00      	cmp	r6, #0
 800715e:	dd03      	ble.n	8007168 <__multiply+0x8c>
 8007160:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007164:	2b00      	cmp	r3, #0
 8007166:	d055      	beq.n	8007214 <__multiply+0x138>
 8007168:	6106      	str	r6, [r0, #16]
 800716a:	b005      	add	sp, #20
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	f843 2b04 	str.w	r2, [r3], #4
 8007174:	e7d9      	b.n	800712a <__multiply+0x4e>
 8007176:	f8b1 a000 	ldrh.w	sl, [r1]
 800717a:	f1ba 0f00 	cmp.w	sl, #0
 800717e:	d01f      	beq.n	80071c0 <__multiply+0xe4>
 8007180:	46c4      	mov	ip, r8
 8007182:	46a1      	mov	r9, r4
 8007184:	2700      	movs	r7, #0
 8007186:	f85c 2b04 	ldr.w	r2, [ip], #4
 800718a:	f8d9 3000 	ldr.w	r3, [r9]
 800718e:	fa1f fb82 	uxth.w	fp, r2
 8007192:	b29b      	uxth	r3, r3
 8007194:	fb0a 330b 	mla	r3, sl, fp, r3
 8007198:	443b      	add	r3, r7
 800719a:	f8d9 7000 	ldr.w	r7, [r9]
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	0c3f      	lsrs	r7, r7, #16
 80071a2:	fb0a 7202 	mla	r2, sl, r2, r7
 80071a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b0:	4565      	cmp	r5, ip
 80071b2:	f849 3b04 	str.w	r3, [r9], #4
 80071b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80071ba:	d8e4      	bhi.n	8007186 <__multiply+0xaa>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	50e7      	str	r7, [r4, r3]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071c6:	3104      	adds	r1, #4
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	d020      	beq.n	8007210 <__multiply+0x134>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	4647      	mov	r7, r8
 80071d2:	46a4      	mov	ip, r4
 80071d4:	f04f 0a00 	mov.w	sl, #0
 80071d8:	f8b7 b000 	ldrh.w	fp, [r7]
 80071dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80071e0:	fb09 220b 	mla	r2, r9, fp, r2
 80071e4:	4452      	add	r2, sl
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ec:	f84c 3b04 	str.w	r3, [ip], #4
 80071f0:	f857 3b04 	ldr.w	r3, [r7], #4
 80071f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f8:	f8bc 3000 	ldrh.w	r3, [ip]
 80071fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007200:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007204:	42bd      	cmp	r5, r7
 8007206:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800720a:	d8e5      	bhi.n	80071d8 <__multiply+0xfc>
 800720c:	9a01      	ldr	r2, [sp, #4]
 800720e:	50a3      	str	r3, [r4, r2]
 8007210:	3404      	adds	r4, #4
 8007212:	e79f      	b.n	8007154 <__multiply+0x78>
 8007214:	3e01      	subs	r6, #1
 8007216:	e7a1      	b.n	800715c <__multiply+0x80>
 8007218:	0800a248 	.word	0x0800a248
 800721c:	0800a259 	.word	0x0800a259

08007220 <__pow5mult>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	4615      	mov	r5, r2
 8007226:	f012 0203 	ands.w	r2, r2, #3
 800722a:	4607      	mov	r7, r0
 800722c:	460e      	mov	r6, r1
 800722e:	d007      	beq.n	8007240 <__pow5mult+0x20>
 8007230:	4c25      	ldr	r4, [pc, #148]	@ (80072c8 <__pow5mult+0xa8>)
 8007232:	3a01      	subs	r2, #1
 8007234:	2300      	movs	r3, #0
 8007236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800723a:	f7ff fea7 	bl	8006f8c <__multadd>
 800723e:	4606      	mov	r6, r0
 8007240:	10ad      	asrs	r5, r5, #2
 8007242:	d03d      	beq.n	80072c0 <__pow5mult+0xa0>
 8007244:	69fc      	ldr	r4, [r7, #28]
 8007246:	b97c      	cbnz	r4, 8007268 <__pow5mult+0x48>
 8007248:	2010      	movs	r0, #16
 800724a:	f7ff fd87 	bl	8006d5c <malloc>
 800724e:	4602      	mov	r2, r0
 8007250:	61f8      	str	r0, [r7, #28]
 8007252:	b928      	cbnz	r0, 8007260 <__pow5mult+0x40>
 8007254:	4b1d      	ldr	r3, [pc, #116]	@ (80072cc <__pow5mult+0xac>)
 8007256:	481e      	ldr	r0, [pc, #120]	@ (80072d0 <__pow5mult+0xb0>)
 8007258:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800725c:	f000 fc3e 	bl	8007adc <__assert_func>
 8007260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007264:	6004      	str	r4, [r0, #0]
 8007266:	60c4      	str	r4, [r0, #12]
 8007268:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800726c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007270:	b94c      	cbnz	r4, 8007286 <__pow5mult+0x66>
 8007272:	f240 2171 	movw	r1, #625	@ 0x271
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff1a 	bl	80070b0 <__i2b>
 800727c:	2300      	movs	r3, #0
 800727e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007282:	4604      	mov	r4, r0
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	f04f 0900 	mov.w	r9, #0
 800728a:	07eb      	lsls	r3, r5, #31
 800728c:	d50a      	bpl.n	80072a4 <__pow5mult+0x84>
 800728e:	4631      	mov	r1, r6
 8007290:	4622      	mov	r2, r4
 8007292:	4638      	mov	r0, r7
 8007294:	f7ff ff22 	bl	80070dc <__multiply>
 8007298:	4631      	mov	r1, r6
 800729a:	4680      	mov	r8, r0
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff fe53 	bl	8006f48 <_Bfree>
 80072a2:	4646      	mov	r6, r8
 80072a4:	106d      	asrs	r5, r5, #1
 80072a6:	d00b      	beq.n	80072c0 <__pow5mult+0xa0>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	b938      	cbnz	r0, 80072bc <__pow5mult+0x9c>
 80072ac:	4622      	mov	r2, r4
 80072ae:	4621      	mov	r1, r4
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ff13 	bl	80070dc <__multiply>
 80072b6:	6020      	str	r0, [r4, #0]
 80072b8:	f8c0 9000 	str.w	r9, [r0]
 80072bc:	4604      	mov	r4, r0
 80072be:	e7e4      	b.n	800728a <__pow5mult+0x6a>
 80072c0:	4630      	mov	r0, r6
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	bf00      	nop
 80072c8:	0800a30c 	.word	0x0800a30c
 80072cc:	0800a1d9 	.word	0x0800a1d9
 80072d0:	0800a259 	.word	0x0800a259

080072d4 <__lshift>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	6849      	ldr	r1, [r1, #4]
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	4607      	mov	r7, r0
 80072e6:	4691      	mov	r9, r2
 80072e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072ec:	f108 0601 	add.w	r6, r8, #1
 80072f0:	42b3      	cmp	r3, r6
 80072f2:	db0b      	blt.n	800730c <__lshift+0x38>
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff fde7 	bl	8006ec8 <_Balloc>
 80072fa:	4605      	mov	r5, r0
 80072fc:	b948      	cbnz	r0, 8007312 <__lshift+0x3e>
 80072fe:	4602      	mov	r2, r0
 8007300:	4b28      	ldr	r3, [pc, #160]	@ (80073a4 <__lshift+0xd0>)
 8007302:	4829      	ldr	r0, [pc, #164]	@ (80073a8 <__lshift+0xd4>)
 8007304:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007308:	f000 fbe8 	bl	8007adc <__assert_func>
 800730c:	3101      	adds	r1, #1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	e7ee      	b.n	80072f0 <__lshift+0x1c>
 8007312:	2300      	movs	r3, #0
 8007314:	f100 0114 	add.w	r1, r0, #20
 8007318:	f100 0210 	add.w	r2, r0, #16
 800731c:	4618      	mov	r0, r3
 800731e:	4553      	cmp	r3, sl
 8007320:	db33      	blt.n	800738a <__lshift+0xb6>
 8007322:	6920      	ldr	r0, [r4, #16]
 8007324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	f019 091f 	ands.w	r9, r9, #31
 8007330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007334:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007338:	d02b      	beq.n	8007392 <__lshift+0xbe>
 800733a:	f1c9 0e20 	rsb	lr, r9, #32
 800733e:	468a      	mov	sl, r1
 8007340:	2200      	movs	r2, #0
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	fa00 f009 	lsl.w	r0, r0, r9
 8007348:	4310      	orrs	r0, r2
 800734a:	f84a 0b04 	str.w	r0, [sl], #4
 800734e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007352:	459c      	cmp	ip, r3
 8007354:	fa22 f20e 	lsr.w	r2, r2, lr
 8007358:	d8f3      	bhi.n	8007342 <__lshift+0x6e>
 800735a:	ebac 0304 	sub.w	r3, ip, r4
 800735e:	3b15      	subs	r3, #21
 8007360:	f023 0303 	bic.w	r3, r3, #3
 8007364:	3304      	adds	r3, #4
 8007366:	f104 0015 	add.w	r0, r4, #21
 800736a:	4560      	cmp	r0, ip
 800736c:	bf88      	it	hi
 800736e:	2304      	movhi	r3, #4
 8007370:	50ca      	str	r2, [r1, r3]
 8007372:	b10a      	cbz	r2, 8007378 <__lshift+0xa4>
 8007374:	f108 0602 	add.w	r6, r8, #2
 8007378:	3e01      	subs	r6, #1
 800737a:	4638      	mov	r0, r7
 800737c:	612e      	str	r6, [r5, #16]
 800737e:	4621      	mov	r1, r4
 8007380:	f7ff fde2 	bl	8006f48 <_Bfree>
 8007384:	4628      	mov	r0, r5
 8007386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738a:	f842 0f04 	str.w	r0, [r2, #4]!
 800738e:	3301      	adds	r3, #1
 8007390:	e7c5      	b.n	800731e <__lshift+0x4a>
 8007392:	3904      	subs	r1, #4
 8007394:	f853 2b04 	ldr.w	r2, [r3], #4
 8007398:	f841 2f04 	str.w	r2, [r1, #4]!
 800739c:	459c      	cmp	ip, r3
 800739e:	d8f9      	bhi.n	8007394 <__lshift+0xc0>
 80073a0:	e7ea      	b.n	8007378 <__lshift+0xa4>
 80073a2:	bf00      	nop
 80073a4:	0800a248 	.word	0x0800a248
 80073a8:	0800a259 	.word	0x0800a259

080073ac <__mcmp>:
 80073ac:	690a      	ldr	r2, [r1, #16]
 80073ae:	4603      	mov	r3, r0
 80073b0:	6900      	ldr	r0, [r0, #16]
 80073b2:	1a80      	subs	r0, r0, r2
 80073b4:	b530      	push	{r4, r5, lr}
 80073b6:	d10e      	bne.n	80073d6 <__mcmp+0x2a>
 80073b8:	3314      	adds	r3, #20
 80073ba:	3114      	adds	r1, #20
 80073bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073cc:	4295      	cmp	r5, r2
 80073ce:	d003      	beq.n	80073d8 <__mcmp+0x2c>
 80073d0:	d205      	bcs.n	80073de <__mcmp+0x32>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	bd30      	pop	{r4, r5, pc}
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d3f3      	bcc.n	80073c4 <__mcmp+0x18>
 80073dc:	e7fb      	b.n	80073d6 <__mcmp+0x2a>
 80073de:	2001      	movs	r0, #1
 80073e0:	e7f9      	b.n	80073d6 <__mcmp+0x2a>
	...

080073e4 <__mdiff>:
 80073e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	4689      	mov	r9, r1
 80073ea:	4606      	mov	r6, r0
 80073ec:	4611      	mov	r1, r2
 80073ee:	4648      	mov	r0, r9
 80073f0:	4614      	mov	r4, r2
 80073f2:	f7ff ffdb 	bl	80073ac <__mcmp>
 80073f6:	1e05      	subs	r5, r0, #0
 80073f8:	d112      	bne.n	8007420 <__mdiff+0x3c>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff fd63 	bl	8006ec8 <_Balloc>
 8007402:	4602      	mov	r2, r0
 8007404:	b928      	cbnz	r0, 8007412 <__mdiff+0x2e>
 8007406:	4b3f      	ldr	r3, [pc, #252]	@ (8007504 <__mdiff+0x120>)
 8007408:	f240 2137 	movw	r1, #567	@ 0x237
 800740c:	483e      	ldr	r0, [pc, #248]	@ (8007508 <__mdiff+0x124>)
 800740e:	f000 fb65 	bl	8007adc <__assert_func>
 8007412:	2301      	movs	r3, #1
 8007414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007418:	4610      	mov	r0, r2
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	bfbc      	itt	lt
 8007422:	464b      	movlt	r3, r9
 8007424:	46a1      	movlt	r9, r4
 8007426:	4630      	mov	r0, r6
 8007428:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800742c:	bfba      	itte	lt
 800742e:	461c      	movlt	r4, r3
 8007430:	2501      	movlt	r5, #1
 8007432:	2500      	movge	r5, #0
 8007434:	f7ff fd48 	bl	8006ec8 <_Balloc>
 8007438:	4602      	mov	r2, r0
 800743a:	b918      	cbnz	r0, 8007444 <__mdiff+0x60>
 800743c:	4b31      	ldr	r3, [pc, #196]	@ (8007504 <__mdiff+0x120>)
 800743e:	f240 2145 	movw	r1, #581	@ 0x245
 8007442:	e7e3      	b.n	800740c <__mdiff+0x28>
 8007444:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007448:	6926      	ldr	r6, [r4, #16]
 800744a:	60c5      	str	r5, [r0, #12]
 800744c:	f109 0310 	add.w	r3, r9, #16
 8007450:	f109 0514 	add.w	r5, r9, #20
 8007454:	f104 0e14 	add.w	lr, r4, #20
 8007458:	f100 0b14 	add.w	fp, r0, #20
 800745c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007460:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	46d9      	mov	r9, fp
 8007468:	f04f 0c00 	mov.w	ip, #0
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007472:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	fa1f f38a 	uxth.w	r3, sl
 800747c:	4619      	mov	r1, r3
 800747e:	b283      	uxth	r3, r0
 8007480:	1acb      	subs	r3, r1, r3
 8007482:	0c00      	lsrs	r0, r0, #16
 8007484:	4463      	add	r3, ip
 8007486:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800748a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800748e:	b29b      	uxth	r3, r3
 8007490:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007494:	4576      	cmp	r6, lr
 8007496:	f849 3b04 	str.w	r3, [r9], #4
 800749a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800749e:	d8e5      	bhi.n	800746c <__mdiff+0x88>
 80074a0:	1b33      	subs	r3, r6, r4
 80074a2:	3b15      	subs	r3, #21
 80074a4:	f023 0303 	bic.w	r3, r3, #3
 80074a8:	3415      	adds	r4, #21
 80074aa:	3304      	adds	r3, #4
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	bf38      	it	cc
 80074b0:	2304      	movcc	r3, #4
 80074b2:	441d      	add	r5, r3
 80074b4:	445b      	add	r3, fp
 80074b6:	461e      	mov	r6, r3
 80074b8:	462c      	mov	r4, r5
 80074ba:	4544      	cmp	r4, r8
 80074bc:	d30e      	bcc.n	80074dc <__mdiff+0xf8>
 80074be:	f108 0103 	add.w	r1, r8, #3
 80074c2:	1b49      	subs	r1, r1, r5
 80074c4:	f021 0103 	bic.w	r1, r1, #3
 80074c8:	3d03      	subs	r5, #3
 80074ca:	45a8      	cmp	r8, r5
 80074cc:	bf38      	it	cc
 80074ce:	2100      	movcc	r1, #0
 80074d0:	440b      	add	r3, r1
 80074d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074d6:	b191      	cbz	r1, 80074fe <__mdiff+0x11a>
 80074d8:	6117      	str	r7, [r2, #16]
 80074da:	e79d      	b.n	8007418 <__mdiff+0x34>
 80074dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80074e0:	46e6      	mov	lr, ip
 80074e2:	0c08      	lsrs	r0, r1, #16
 80074e4:	fa1c fc81 	uxtah	ip, ip, r1
 80074e8:	4471      	add	r1, lr
 80074ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074ee:	b289      	uxth	r1, r1
 80074f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074f4:	f846 1b04 	str.w	r1, [r6], #4
 80074f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074fc:	e7dd      	b.n	80074ba <__mdiff+0xd6>
 80074fe:	3f01      	subs	r7, #1
 8007500:	e7e7      	b.n	80074d2 <__mdiff+0xee>
 8007502:	bf00      	nop
 8007504:	0800a248 	.word	0x0800a248
 8007508:	0800a259 	.word	0x0800a259

0800750c <__d2b>:
 800750c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007510:	460f      	mov	r7, r1
 8007512:	2101      	movs	r1, #1
 8007514:	ec59 8b10 	vmov	r8, r9, d0
 8007518:	4616      	mov	r6, r2
 800751a:	f7ff fcd5 	bl	8006ec8 <_Balloc>
 800751e:	4604      	mov	r4, r0
 8007520:	b930      	cbnz	r0, 8007530 <__d2b+0x24>
 8007522:	4602      	mov	r2, r0
 8007524:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <__d2b+0xa8>)
 8007526:	4824      	ldr	r0, [pc, #144]	@ (80075b8 <__d2b+0xac>)
 8007528:	f240 310f 	movw	r1, #783	@ 0x30f
 800752c:	f000 fad6 	bl	8007adc <__assert_func>
 8007530:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007534:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007538:	b10d      	cbz	r5, 800753e <__d2b+0x32>
 800753a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	f1b8 0300 	subs.w	r3, r8, #0
 8007544:	d023      	beq.n	800758e <__d2b+0x82>
 8007546:	4668      	mov	r0, sp
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	f7ff fd84 	bl	8007056 <__lo0bits>
 800754e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007552:	b1d0      	cbz	r0, 800758a <__d2b+0x7e>
 8007554:	f1c0 0320 	rsb	r3, r0, #32
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	430b      	orrs	r3, r1
 800755e:	40c2      	lsrs	r2, r0
 8007560:	6163      	str	r3, [r4, #20]
 8007562:	9201      	str	r2, [sp, #4]
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	61a3      	str	r3, [r4, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf0c      	ite	eq
 800756c:	2201      	moveq	r2, #1
 800756e:	2202      	movne	r2, #2
 8007570:	6122      	str	r2, [r4, #16]
 8007572:	b1a5      	cbz	r5, 800759e <__d2b+0x92>
 8007574:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007578:	4405      	add	r5, r0
 800757a:	603d      	str	r5, [r7, #0]
 800757c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4620      	mov	r0, r4
 8007584:	b003      	add	sp, #12
 8007586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800758a:	6161      	str	r1, [r4, #20]
 800758c:	e7ea      	b.n	8007564 <__d2b+0x58>
 800758e:	a801      	add	r0, sp, #4
 8007590:	f7ff fd61 	bl	8007056 <__lo0bits>
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	6163      	str	r3, [r4, #20]
 8007598:	3020      	adds	r0, #32
 800759a:	2201      	movs	r2, #1
 800759c:	e7e8      	b.n	8007570 <__d2b+0x64>
 800759e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075a6:	6038      	str	r0, [r7, #0]
 80075a8:	6918      	ldr	r0, [r3, #16]
 80075aa:	f7ff fd35 	bl	8007018 <__hi0bits>
 80075ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075b2:	e7e5      	b.n	8007580 <__d2b+0x74>
 80075b4:	0800a248 	.word	0x0800a248
 80075b8:	0800a259 	.word	0x0800a259

080075bc <__sfputc_r>:
 80075bc:	6893      	ldr	r3, [r2, #8]
 80075be:	3b01      	subs	r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	b410      	push	{r4}
 80075c4:	6093      	str	r3, [r2, #8]
 80075c6:	da08      	bge.n	80075da <__sfputc_r+0x1e>
 80075c8:	6994      	ldr	r4, [r2, #24]
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	db01      	blt.n	80075d2 <__sfputc_r+0x16>
 80075ce:	290a      	cmp	r1, #10
 80075d0:	d103      	bne.n	80075da <__sfputc_r+0x1e>
 80075d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d6:	f7fe bc08 	b.w	8005dea <__swbuf_r>
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	1c58      	adds	r0, r3, #1
 80075de:	6010      	str	r0, [r2, #0]
 80075e0:	7019      	strb	r1, [r3, #0]
 80075e2:	4608      	mov	r0, r1
 80075e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <__sfputs_r>:
 80075ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ec:	4606      	mov	r6, r0
 80075ee:	460f      	mov	r7, r1
 80075f0:	4614      	mov	r4, r2
 80075f2:	18d5      	adds	r5, r2, r3
 80075f4:	42ac      	cmp	r4, r5
 80075f6:	d101      	bne.n	80075fc <__sfputs_r+0x12>
 80075f8:	2000      	movs	r0, #0
 80075fa:	e007      	b.n	800760c <__sfputs_r+0x22>
 80075fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007600:	463a      	mov	r2, r7
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ffda 	bl	80075bc <__sfputc_r>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d1f3      	bne.n	80075f4 <__sfputs_r+0xa>
 800760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007610 <_vfiprintf_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	460d      	mov	r5, r1
 8007616:	b09d      	sub	sp, #116	@ 0x74
 8007618:	4614      	mov	r4, r2
 800761a:	4698      	mov	r8, r3
 800761c:	4606      	mov	r6, r0
 800761e:	b118      	cbz	r0, 8007628 <_vfiprintf_r+0x18>
 8007620:	6a03      	ldr	r3, [r0, #32]
 8007622:	b90b      	cbnz	r3, 8007628 <_vfiprintf_r+0x18>
 8007624:	f7fe fa9a 	bl	8005b5c <__sinit>
 8007628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762a:	07d9      	lsls	r1, r3, #31
 800762c:	d405      	bmi.n	800763a <_vfiprintf_r+0x2a>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	059a      	lsls	r2, r3, #22
 8007632:	d402      	bmi.n	800763a <_vfiprintf_r+0x2a>
 8007634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007636:	f7fe fcea 	bl	800600e <__retarget_lock_acquire_recursive>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	071b      	lsls	r3, r3, #28
 800763e:	d501      	bpl.n	8007644 <_vfiprintf_r+0x34>
 8007640:	692b      	ldr	r3, [r5, #16]
 8007642:	b99b      	cbnz	r3, 800766c <_vfiprintf_r+0x5c>
 8007644:	4629      	mov	r1, r5
 8007646:	4630      	mov	r0, r6
 8007648:	f7fe fc0e 	bl	8005e68 <__swsetup_r>
 800764c:	b170      	cbz	r0, 800766c <_vfiprintf_r+0x5c>
 800764e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007650:	07dc      	lsls	r4, r3, #31
 8007652:	d504      	bpl.n	800765e <_vfiprintf_r+0x4e>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b01d      	add	sp, #116	@ 0x74
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	0598      	lsls	r0, r3, #22
 8007662:	d4f7      	bmi.n	8007654 <_vfiprintf_r+0x44>
 8007664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007666:	f7fe fcd3 	bl	8006010 <__retarget_lock_release_recursive>
 800766a:	e7f3      	b.n	8007654 <_vfiprintf_r+0x44>
 800766c:	2300      	movs	r3, #0
 800766e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007670:	2320      	movs	r3, #32
 8007672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007676:	f8cd 800c 	str.w	r8, [sp, #12]
 800767a:	2330      	movs	r3, #48	@ 0x30
 800767c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800782c <_vfiprintf_r+0x21c>
 8007680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007684:	f04f 0901 	mov.w	r9, #1
 8007688:	4623      	mov	r3, r4
 800768a:	469a      	mov	sl, r3
 800768c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007690:	b10a      	cbz	r2, 8007696 <_vfiprintf_r+0x86>
 8007692:	2a25      	cmp	r2, #37	@ 0x25
 8007694:	d1f9      	bne.n	800768a <_vfiprintf_r+0x7a>
 8007696:	ebba 0b04 	subs.w	fp, sl, r4
 800769a:	d00b      	beq.n	80076b4 <_vfiprintf_r+0xa4>
 800769c:	465b      	mov	r3, fp
 800769e:	4622      	mov	r2, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ffa1 	bl	80075ea <__sfputs_r>
 80076a8:	3001      	adds	r0, #1
 80076aa:	f000 80a7 	beq.w	80077fc <_vfiprintf_r+0x1ec>
 80076ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b0:	445a      	add	r2, fp
 80076b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b4:	f89a 3000 	ldrb.w	r3, [sl]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 809f 	beq.w	80077fc <_vfiprintf_r+0x1ec>
 80076be:	2300      	movs	r3, #0
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c8:	f10a 0a01 	add.w	sl, sl, #1
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	9307      	str	r3, [sp, #28]
 80076d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80076d6:	4654      	mov	r4, sl
 80076d8:	2205      	movs	r2, #5
 80076da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076de:	4853      	ldr	r0, [pc, #332]	@ (800782c <_vfiprintf_r+0x21c>)
 80076e0:	f7f8 fd96 	bl	8000210 <memchr>
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	b9d8      	cbnz	r0, 8007720 <_vfiprintf_r+0x110>
 80076e8:	06d1      	lsls	r1, r2, #27
 80076ea:	bf44      	itt	mi
 80076ec:	2320      	movmi	r3, #32
 80076ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f2:	0713      	lsls	r3, r2, #28
 80076f4:	bf44      	itt	mi
 80076f6:	232b      	movmi	r3, #43	@ 0x2b
 80076f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b2a      	cmp	r3, #42	@ 0x2a
 8007702:	d015      	beq.n	8007730 <_vfiprintf_r+0x120>
 8007704:	9a07      	ldr	r2, [sp, #28]
 8007706:	4654      	mov	r4, sl
 8007708:	2000      	movs	r0, #0
 800770a:	f04f 0c0a 	mov.w	ip, #10
 800770e:	4621      	mov	r1, r4
 8007710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007714:	3b30      	subs	r3, #48	@ 0x30
 8007716:	2b09      	cmp	r3, #9
 8007718:	d94b      	bls.n	80077b2 <_vfiprintf_r+0x1a2>
 800771a:	b1b0      	cbz	r0, 800774a <_vfiprintf_r+0x13a>
 800771c:	9207      	str	r2, [sp, #28]
 800771e:	e014      	b.n	800774a <_vfiprintf_r+0x13a>
 8007720:	eba0 0308 	sub.w	r3, r0, r8
 8007724:	fa09 f303 	lsl.w	r3, r9, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	46a2      	mov	sl, r4
 800772e:	e7d2      	b.n	80076d6 <_vfiprintf_r+0xc6>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	1d19      	adds	r1, r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	9103      	str	r1, [sp, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfbb      	ittet	lt
 800773c:	425b      	neglt	r3, r3
 800773e:	f042 0202 	orrlt.w	r2, r2, #2
 8007742:	9307      	strge	r3, [sp, #28]
 8007744:	9307      	strlt	r3, [sp, #28]
 8007746:	bfb8      	it	lt
 8007748:	9204      	strlt	r2, [sp, #16]
 800774a:	7823      	ldrb	r3, [r4, #0]
 800774c:	2b2e      	cmp	r3, #46	@ 0x2e
 800774e:	d10a      	bne.n	8007766 <_vfiprintf_r+0x156>
 8007750:	7863      	ldrb	r3, [r4, #1]
 8007752:	2b2a      	cmp	r3, #42	@ 0x2a
 8007754:	d132      	bne.n	80077bc <_vfiprintf_r+0x1ac>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9203      	str	r2, [sp, #12]
 800775e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007762:	3402      	adds	r4, #2
 8007764:	9305      	str	r3, [sp, #20]
 8007766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800783c <_vfiprintf_r+0x22c>
 800776a:	7821      	ldrb	r1, [r4, #0]
 800776c:	2203      	movs	r2, #3
 800776e:	4650      	mov	r0, sl
 8007770:	f7f8 fd4e 	bl	8000210 <memchr>
 8007774:	b138      	cbz	r0, 8007786 <_vfiprintf_r+0x176>
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	eba0 000a 	sub.w	r0, r0, sl
 800777c:	2240      	movs	r2, #64	@ 0x40
 800777e:	4082      	lsls	r2, r0
 8007780:	4313      	orrs	r3, r2
 8007782:	3401      	adds	r4, #1
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778a:	4829      	ldr	r0, [pc, #164]	@ (8007830 <_vfiprintf_r+0x220>)
 800778c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007790:	2206      	movs	r2, #6
 8007792:	f7f8 fd3d 	bl	8000210 <memchr>
 8007796:	2800      	cmp	r0, #0
 8007798:	d03f      	beq.n	800781a <_vfiprintf_r+0x20a>
 800779a:	4b26      	ldr	r3, [pc, #152]	@ (8007834 <_vfiprintf_r+0x224>)
 800779c:	bb1b      	cbnz	r3, 80077e6 <_vfiprintf_r+0x1d6>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	3307      	adds	r3, #7
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	3308      	adds	r3, #8
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ac:	443b      	add	r3, r7
 80077ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b0:	e76a      	b.n	8007688 <_vfiprintf_r+0x78>
 80077b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b6:	460c      	mov	r4, r1
 80077b8:	2001      	movs	r0, #1
 80077ba:	e7a8      	b.n	800770e <_vfiprintf_r+0xfe>
 80077bc:	2300      	movs	r3, #0
 80077be:	3401      	adds	r4, #1
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	4619      	mov	r1, r3
 80077c4:	f04f 0c0a 	mov.w	ip, #10
 80077c8:	4620      	mov	r0, r4
 80077ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ce:	3a30      	subs	r2, #48	@ 0x30
 80077d0:	2a09      	cmp	r2, #9
 80077d2:	d903      	bls.n	80077dc <_vfiprintf_r+0x1cc>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0c6      	beq.n	8007766 <_vfiprintf_r+0x156>
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	e7c4      	b.n	8007766 <_vfiprintf_r+0x156>
 80077dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e0:	4604      	mov	r4, r0
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f0      	b.n	80077c8 <_vfiprintf_r+0x1b8>
 80077e6:	ab03      	add	r3, sp, #12
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	462a      	mov	r2, r5
 80077ec:	4b12      	ldr	r3, [pc, #72]	@ (8007838 <_vfiprintf_r+0x228>)
 80077ee:	a904      	add	r1, sp, #16
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7fd fd71 	bl	80052d8 <_printf_float>
 80077f6:	4607      	mov	r7, r0
 80077f8:	1c78      	adds	r0, r7, #1
 80077fa:	d1d6      	bne.n	80077aa <_vfiprintf_r+0x19a>
 80077fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077fe:	07d9      	lsls	r1, r3, #31
 8007800:	d405      	bmi.n	800780e <_vfiprintf_r+0x1fe>
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	059a      	lsls	r2, r3, #22
 8007806:	d402      	bmi.n	800780e <_vfiprintf_r+0x1fe>
 8007808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800780a:	f7fe fc01 	bl	8006010 <__retarget_lock_release_recursive>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	065b      	lsls	r3, r3, #25
 8007812:	f53f af1f 	bmi.w	8007654 <_vfiprintf_r+0x44>
 8007816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007818:	e71e      	b.n	8007658 <_vfiprintf_r+0x48>
 800781a:	ab03      	add	r3, sp, #12
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	462a      	mov	r2, r5
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <_vfiprintf_r+0x228>)
 8007822:	a904      	add	r1, sp, #16
 8007824:	4630      	mov	r0, r6
 8007826:	f7fd ffef 	bl	8005808 <_printf_i>
 800782a:	e7e4      	b.n	80077f6 <_vfiprintf_r+0x1e6>
 800782c:	0800a2b2 	.word	0x0800a2b2
 8007830:	0800a2bc 	.word	0x0800a2bc
 8007834:	080052d9 	.word	0x080052d9
 8007838:	080075eb 	.word	0x080075eb
 800783c:	0800a2b8 	.word	0x0800a2b8

08007840 <__sflush_r>:
 8007840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	0716      	lsls	r6, r2, #28
 800784a:	4605      	mov	r5, r0
 800784c:	460c      	mov	r4, r1
 800784e:	d454      	bmi.n	80078fa <__sflush_r+0xba>
 8007850:	684b      	ldr	r3, [r1, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dc02      	bgt.n	800785c <__sflush_r+0x1c>
 8007856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	dd48      	ble.n	80078ee <__sflush_r+0xae>
 800785c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800785e:	2e00      	cmp	r6, #0
 8007860:	d045      	beq.n	80078ee <__sflush_r+0xae>
 8007862:	2300      	movs	r3, #0
 8007864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007868:	682f      	ldr	r7, [r5, #0]
 800786a:	6a21      	ldr	r1, [r4, #32]
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	d030      	beq.n	80078d2 <__sflush_r+0x92>
 8007870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	0759      	lsls	r1, r3, #29
 8007876:	d505      	bpl.n	8007884 <__sflush_r+0x44>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800787e:	b10b      	cbz	r3, 8007884 <__sflush_r+0x44>
 8007880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007882:	1ad2      	subs	r2, r2, r3
 8007884:	2300      	movs	r3, #0
 8007886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007888:	6a21      	ldr	r1, [r4, #32]
 800788a:	4628      	mov	r0, r5
 800788c:	47b0      	blx	r6
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	d106      	bne.n	80078a2 <__sflush_r+0x62>
 8007894:	6829      	ldr	r1, [r5, #0]
 8007896:	291d      	cmp	r1, #29
 8007898:	d82b      	bhi.n	80078f2 <__sflush_r+0xb2>
 800789a:	4a2a      	ldr	r2, [pc, #168]	@ (8007944 <__sflush_r+0x104>)
 800789c:	40ca      	lsrs	r2, r1
 800789e:	07d6      	lsls	r6, r2, #31
 80078a0:	d527      	bpl.n	80078f2 <__sflush_r+0xb2>
 80078a2:	2200      	movs	r2, #0
 80078a4:	6062      	str	r2, [r4, #4]
 80078a6:	04d9      	lsls	r1, r3, #19
 80078a8:	6922      	ldr	r2, [r4, #16]
 80078aa:	6022      	str	r2, [r4, #0]
 80078ac:	d504      	bpl.n	80078b8 <__sflush_r+0x78>
 80078ae:	1c42      	adds	r2, r0, #1
 80078b0:	d101      	bne.n	80078b6 <__sflush_r+0x76>
 80078b2:	682b      	ldr	r3, [r5, #0]
 80078b4:	b903      	cbnz	r3, 80078b8 <__sflush_r+0x78>
 80078b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80078b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ba:	602f      	str	r7, [r5, #0]
 80078bc:	b1b9      	cbz	r1, 80078ee <__sflush_r+0xae>
 80078be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078c2:	4299      	cmp	r1, r3
 80078c4:	d002      	beq.n	80078cc <__sflush_r+0x8c>
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7ff f9fe 	bl	8006cc8 <_free_r>
 80078cc:	2300      	movs	r3, #0
 80078ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d0:	e00d      	b.n	80078ee <__sflush_r+0xae>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b0      	blx	r6
 80078d8:	4602      	mov	r2, r0
 80078da:	1c50      	adds	r0, r2, #1
 80078dc:	d1c9      	bne.n	8007872 <__sflush_r+0x32>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0c6      	beq.n	8007872 <__sflush_r+0x32>
 80078e4:	2b1d      	cmp	r3, #29
 80078e6:	d001      	beq.n	80078ec <__sflush_r+0xac>
 80078e8:	2b16      	cmp	r3, #22
 80078ea:	d11e      	bne.n	800792a <__sflush_r+0xea>
 80078ec:	602f      	str	r7, [r5, #0]
 80078ee:	2000      	movs	r0, #0
 80078f0:	e022      	b.n	8007938 <__sflush_r+0xf8>
 80078f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	e01b      	b.n	8007932 <__sflush_r+0xf2>
 80078fa:	690f      	ldr	r7, [r1, #16]
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	d0f6      	beq.n	80078ee <__sflush_r+0xae>
 8007900:	0793      	lsls	r3, r2, #30
 8007902:	680e      	ldr	r6, [r1, #0]
 8007904:	bf08      	it	eq
 8007906:	694b      	ldreq	r3, [r1, #20]
 8007908:	600f      	str	r7, [r1, #0]
 800790a:	bf18      	it	ne
 800790c:	2300      	movne	r3, #0
 800790e:	eba6 0807 	sub.w	r8, r6, r7
 8007912:	608b      	str	r3, [r1, #8]
 8007914:	f1b8 0f00 	cmp.w	r8, #0
 8007918:	dde9      	ble.n	80078ee <__sflush_r+0xae>
 800791a:	6a21      	ldr	r1, [r4, #32]
 800791c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800791e:	4643      	mov	r3, r8
 8007920:	463a      	mov	r2, r7
 8007922:	4628      	mov	r0, r5
 8007924:	47b0      	blx	r6
 8007926:	2800      	cmp	r0, #0
 8007928:	dc08      	bgt.n	800793c <__sflush_r+0xfc>
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	4407      	add	r7, r0
 800793e:	eba8 0800 	sub.w	r8, r8, r0
 8007942:	e7e7      	b.n	8007914 <__sflush_r+0xd4>
 8007944:	20400001 	.word	0x20400001

08007948 <_fflush_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	690b      	ldr	r3, [r1, #16]
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b913      	cbnz	r3, 8007958 <_fflush_r+0x10>
 8007952:	2500      	movs	r5, #0
 8007954:	4628      	mov	r0, r5
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	b118      	cbz	r0, 8007962 <_fflush_r+0x1a>
 800795a:	6a03      	ldr	r3, [r0, #32]
 800795c:	b90b      	cbnz	r3, 8007962 <_fflush_r+0x1a>
 800795e:	f7fe f8fd 	bl	8005b5c <__sinit>
 8007962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f3      	beq.n	8007952 <_fflush_r+0xa>
 800796a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800796c:	07d0      	lsls	r0, r2, #31
 800796e:	d404      	bmi.n	800797a <_fflush_r+0x32>
 8007970:	0599      	lsls	r1, r3, #22
 8007972:	d402      	bmi.n	800797a <_fflush_r+0x32>
 8007974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007976:	f7fe fb4a 	bl	800600e <__retarget_lock_acquire_recursive>
 800797a:	4628      	mov	r0, r5
 800797c:	4621      	mov	r1, r4
 800797e:	f7ff ff5f 	bl	8007840 <__sflush_r>
 8007982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007984:	07da      	lsls	r2, r3, #31
 8007986:	4605      	mov	r5, r0
 8007988:	d4e4      	bmi.n	8007954 <_fflush_r+0xc>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	059b      	lsls	r3, r3, #22
 800798e:	d4e1      	bmi.n	8007954 <_fflush_r+0xc>
 8007990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007992:	f7fe fb3d 	bl	8006010 <__retarget_lock_release_recursive>
 8007996:	e7dd      	b.n	8007954 <_fflush_r+0xc>

08007998 <__swhatbuf_r>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	460c      	mov	r4, r1
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	b096      	sub	sp, #88	@ 0x58
 80079a4:	4615      	mov	r5, r2
 80079a6:	461e      	mov	r6, r3
 80079a8:	da0d      	bge.n	80079c6 <__swhatbuf_r+0x2e>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079b0:	f04f 0100 	mov.w	r1, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2340      	movne	r3, #64	@ 0x40
 80079b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079bc:	2000      	movs	r0, #0
 80079be:	6031      	str	r1, [r6, #0]
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	b016      	add	sp, #88	@ 0x58
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
 80079c6:	466a      	mov	r2, sp
 80079c8:	f000 f848 	bl	8007a5c <_fstat_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	dbec      	blt.n	80079aa <__swhatbuf_r+0x12>
 80079d0:	9901      	ldr	r1, [sp, #4]
 80079d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079da:	4259      	negs	r1, r3
 80079dc:	4159      	adcs	r1, r3
 80079de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079e2:	e7eb      	b.n	80079bc <__swhatbuf_r+0x24>

080079e4 <__smakebuf_r>:
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079e8:	079d      	lsls	r5, r3, #30
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	d507      	bpl.n	8007a00 <__smakebuf_r+0x1c>
 80079f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	2301      	movs	r3, #1
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	b003      	add	sp, #12
 80079fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a00:	ab01      	add	r3, sp, #4
 8007a02:	466a      	mov	r2, sp
 8007a04:	f7ff ffc8 	bl	8007998 <__swhatbuf_r>
 8007a08:	9f00      	ldr	r7, [sp, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7ff f9ce 	bl	8006db0 <_malloc_r>
 8007a14:	b948      	cbnz	r0, 8007a2a <__smakebuf_r+0x46>
 8007a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1a:	059a      	lsls	r2, r3, #22
 8007a1c:	d4ee      	bmi.n	80079fc <__smakebuf_r+0x18>
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	f043 0302 	orr.w	r3, r3, #2
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	e7e2      	b.n	80079f0 <__smakebuf_r+0xc>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	6020      	str	r0, [r4, #0]
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a3a:	b15b      	cbz	r3, 8007a54 <__smakebuf_r+0x70>
 8007a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f81d 	bl	8007a80 <_isatty_r>
 8007a46:	b128      	cbz	r0, 8007a54 <__smakebuf_r+0x70>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	431d      	orrs	r5, r3
 8007a58:	81a5      	strh	r5, [r4, #12]
 8007a5a:	e7cf      	b.n	80079fc <__smakebuf_r+0x18>

08007a5c <_fstat_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	@ (8007a7c <_fstat_r+0x20>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7fa fc55 	bl	8002318 <_fstat>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_fstat_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_fstat_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000488 	.word	0x20000488

08007a80 <_isatty_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	@ (8007a9c <_isatty_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fa fc54 	bl	8002338 <_isatty>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_isatty_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_isatty_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000488 	.word	0x20000488

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fa fc5c 	bl	8002368 <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20000488 	.word	0x20000488

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <__assert_func>:
 8007adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <__assert_func+0x2c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	68d8      	ldr	r0, [r3, #12]
 8007aea:	b14c      	cbz	r4, 8007b00 <__assert_func+0x24>
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <__assert_func+0x30>)
 8007aee:	9100      	str	r1, [sp, #0]
 8007af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af4:	4906      	ldr	r1, [pc, #24]	@ (8007b10 <__assert_func+0x34>)
 8007af6:	462b      	mov	r3, r5
 8007af8:	f000 f842 	bl	8007b80 <fiprintf>
 8007afc:	f000 f852 	bl	8007ba4 <abort>
 8007b00:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__assert_func+0x38>)
 8007b02:	461c      	mov	r4, r3
 8007b04:	e7f3      	b.n	8007aee <__assert_func+0x12>
 8007b06:	bf00      	nop
 8007b08:	20000018 	.word	0x20000018
 8007b0c:	0800a2cd 	.word	0x0800a2cd
 8007b10:	0800a2da 	.word	0x0800a2da
 8007b14:	0800a308 	.word	0x0800a308

08007b18 <_calloc_r>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b1e:	b934      	cbnz	r4, 8007b2e <_calloc_r+0x16>
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7ff f945 	bl	8006db0 <_malloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <_calloc_r+0x1e>
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	220c      	movs	r2, #12
 8007b30:	6002      	str	r2, [r0, #0]
 8007b32:	2600      	movs	r6, #0
 8007b34:	e7f9      	b.n	8007b2a <_calloc_r+0x12>
 8007b36:	462a      	mov	r2, r5
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f7fe f9eb 	bl	8005f14 <memset>
 8007b3e:	e7f4      	b.n	8007b2a <_calloc_r+0x12>

08007b40 <__ascii_mbtowc>:
 8007b40:	b082      	sub	sp, #8
 8007b42:	b901      	cbnz	r1, 8007b46 <__ascii_mbtowc+0x6>
 8007b44:	a901      	add	r1, sp, #4
 8007b46:	b142      	cbz	r2, 8007b5a <__ascii_mbtowc+0x1a>
 8007b48:	b14b      	cbz	r3, 8007b5e <__ascii_mbtowc+0x1e>
 8007b4a:	7813      	ldrb	r3, [r2, #0]
 8007b4c:	600b      	str	r3, [r1, #0]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	1e10      	subs	r0, r2, #0
 8007b52:	bf18      	it	ne
 8007b54:	2001      	movne	r0, #1
 8007b56:	b002      	add	sp, #8
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7fb      	b.n	8007b56 <__ascii_mbtowc+0x16>
 8007b5e:	f06f 0001 	mvn.w	r0, #1
 8007b62:	e7f8      	b.n	8007b56 <__ascii_mbtowc+0x16>

08007b64 <__ascii_wctomb>:
 8007b64:	4603      	mov	r3, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	b141      	cbz	r1, 8007b7c <__ascii_wctomb+0x18>
 8007b6a:	2aff      	cmp	r2, #255	@ 0xff
 8007b6c:	d904      	bls.n	8007b78 <__ascii_wctomb+0x14>
 8007b6e:	228a      	movs	r2, #138	@ 0x8a
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	4770      	bx	lr
 8007b78:	700a      	strb	r2, [r1, #0]
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	4770      	bx	lr
	...

08007b80 <fiprintf>:
 8007b80:	b40e      	push	{r1, r2, r3}
 8007b82:	b503      	push	{r0, r1, lr}
 8007b84:	4601      	mov	r1, r0
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	4805      	ldr	r0, [pc, #20]	@ (8007ba0 <fiprintf+0x20>)
 8007b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f7ff fd3d 	bl	8007610 <_vfiprintf_r>
 8007b96:	b002      	add	sp, #8
 8007b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b9c:	b003      	add	sp, #12
 8007b9e:	4770      	bx	lr
 8007ba0:	20000018 	.word	0x20000018

08007ba4 <abort>:
 8007ba4:	b508      	push	{r3, lr}
 8007ba6:	2006      	movs	r0, #6
 8007ba8:	f000 f82c 	bl	8007c04 <raise>
 8007bac:	2001      	movs	r0, #1
 8007bae:	f7fa fb7f 	bl	80022b0 <_exit>

08007bb2 <_raise_r>:
 8007bb2:	291f      	cmp	r1, #31
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	d904      	bls.n	8007bc6 <_raise_r+0x14>
 8007bbc:	2316      	movs	r3, #22
 8007bbe:	6003      	str	r3, [r0, #0]
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bc8:	b112      	cbz	r2, 8007bd0 <_raise_r+0x1e>
 8007bca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bce:	b94b      	cbnz	r3, 8007be4 <_raise_r+0x32>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f831 	bl	8007c38 <_getpid_r>
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	4601      	mov	r1, r0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be0:	f000 b818 	b.w	8007c14 <_kill_r>
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d00a      	beq.n	8007bfe <_raise_r+0x4c>
 8007be8:	1c59      	adds	r1, r3, #1
 8007bea:	d103      	bne.n	8007bf4 <_raise_r+0x42>
 8007bec:	2316      	movs	r3, #22
 8007bee:	6003      	str	r3, [r0, #0]
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	e7e7      	b.n	8007bc4 <_raise_r+0x12>
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4798      	blx	r3
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e7e0      	b.n	8007bc4 <_raise_r+0x12>
	...

08007c04 <raise>:
 8007c04:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <raise+0xc>)
 8007c06:	4601      	mov	r1, r0
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f7ff bfd2 	b.w	8007bb2 <_raise_r>
 8007c0e:	bf00      	nop
 8007c10:	20000018 	.word	0x20000018

08007c14 <_kill_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	@ (8007c34 <_kill_r+0x20>)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	602b      	str	r3, [r5, #0]
 8007c22:	f7fa fb35 	bl	8002290 <_kill>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d102      	bne.n	8007c30 <_kill_r+0x1c>
 8007c2a:	682b      	ldr	r3, [r5, #0]
 8007c2c:	b103      	cbz	r3, 8007c30 <_kill_r+0x1c>
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	bd38      	pop	{r3, r4, r5, pc}
 8007c32:	bf00      	nop
 8007c34:	20000488 	.word	0x20000488

08007c38 <_getpid_r>:
 8007c38:	f7fa bb22 	b.w	8002280 <_getpid>

08007c3c <atan2>:
 8007c3c:	f000 bbac 	b.w	8008398 <__ieee754_atan2>

08007c40 <pow>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	ed2d 8b02 	vpush	{d8}
 8007c46:	eeb0 8a40 	vmov.f32	s16, s0
 8007c4a:	eef0 8a60 	vmov.f32	s17, s1
 8007c4e:	ec55 4b11 	vmov	r4, r5, d1
 8007c52:	f000 fc69 	bl	8008528 <__ieee754_pow>
 8007c56:	4622      	mov	r2, r4
 8007c58:	462b      	mov	r3, r5
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	ec57 6b10 	vmov	r6, r7, d0
 8007c62:	f7f8 ff83 	bl	8000b6c <__aeabi_dcmpun>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d13b      	bne.n	8007ce2 <pow+0xa2>
 8007c6a:	ec51 0b18 	vmov	r0, r1, d8
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	f7f8 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8007c76:	b1b8      	cbz	r0, 8007ca8 <pow+0x68>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d146      	bne.n	8007d16 <pow+0xd6>
 8007c88:	ec45 4b10 	vmov	d0, r4, r5
 8007c8c:	f000 f91c 	bl	8007ec8 <finite>
 8007c90:	b338      	cbz	r0, 8007ce2 <pow+0xa2>
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8007c9e:	b300      	cbz	r0, 8007ce2 <pow+0xa2>
 8007ca0:	f7fe f98a 	bl	8005fb8 <__errno>
 8007ca4:	2322      	movs	r3, #34	@ 0x22
 8007ca6:	e01b      	b.n	8007ce0 <pow+0xa0>
 8007ca8:	ec47 6b10 	vmov	d0, r6, r7
 8007cac:	f000 f90c 	bl	8007ec8 <finite>
 8007cb0:	b9e0      	cbnz	r0, 8007cec <pow+0xac>
 8007cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8007cb6:	eef0 0a68 	vmov.f32	s1, s17
 8007cba:	f000 f905 	bl	8007ec8 <finite>
 8007cbe:	b1a8      	cbz	r0, 8007cec <pow+0xac>
 8007cc0:	ec45 4b10 	vmov	d0, r4, r5
 8007cc4:	f000 f900 	bl	8007ec8 <finite>
 8007cc8:	b180      	cbz	r0, 8007cec <pow+0xac>
 8007cca:	4632      	mov	r2, r6
 8007ccc:	463b      	mov	r3, r7
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 ff4b 	bl	8000b6c <__aeabi_dcmpun>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0e2      	beq.n	8007ca0 <pow+0x60>
 8007cda:	f7fe f96d 	bl	8005fb8 <__errno>
 8007cde:	2321      	movs	r3, #33	@ 0x21
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	ecbd 8b02 	vpop	{d8}
 8007ce6:	ec47 6b10 	vmov	d0, r6, r7
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	2200      	movs	r2, #0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0f2      	beq.n	8007ce2 <pow+0xa2>
 8007cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8007d00:	eef0 0a68 	vmov.f32	s1, s17
 8007d04:	f000 f8e0 	bl	8007ec8 <finite>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d0ea      	beq.n	8007ce2 <pow+0xa2>
 8007d0c:	ec45 4b10 	vmov	d0, r4, r5
 8007d10:	f000 f8da 	bl	8007ec8 <finite>
 8007d14:	e7c3      	b.n	8007c9e <pow+0x5e>
 8007d16:	4f01      	ldr	r7, [pc, #4]	@ (8007d1c <pow+0xdc>)
 8007d18:	2600      	movs	r6, #0
 8007d1a:	e7e2      	b.n	8007ce2 <pow+0xa2>
 8007d1c:	3ff00000 	.word	0x3ff00000

08007d20 <sqrt>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	ed2d 8b02 	vpush	{d8}
 8007d26:	ec55 4b10 	vmov	r4, r5, d0
 8007d2a:	f000 f8d9 	bl	8007ee0 <__ieee754_sqrt>
 8007d2e:	4622      	mov	r2, r4
 8007d30:	462b      	mov	r3, r5
 8007d32:	4620      	mov	r0, r4
 8007d34:	4629      	mov	r1, r5
 8007d36:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3a:	eef0 8a60 	vmov.f32	s17, s1
 8007d3e:	f7f8 ff15 	bl	8000b6c <__aeabi_dcmpun>
 8007d42:	b990      	cbnz	r0, 8007d6a <sqrt+0x4a>
 8007d44:	2200      	movs	r2, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fee6 	bl	8000b1c <__aeabi_dcmplt>
 8007d50:	b158      	cbz	r0, 8007d6a <sqrt+0x4a>
 8007d52:	f7fe f931 	bl	8005fb8 <__errno>
 8007d56:	2321      	movs	r3, #33	@ 0x21
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7f8 fd93 	bl	800088c <__aeabi_ddiv>
 8007d66:	ec41 0b18 	vmov	d8, r0, r1
 8007d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6e:	eef0 0a68 	vmov.f32	s1, s17
 8007d72:	ecbd 8b02 	vpop	{d8}
 8007d76:	bd38      	pop	{r3, r4, r5, pc}

08007d78 <cos>:
 8007d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7a:	ec53 2b10 	vmov	r2, r3, d0
 8007d7e:	4826      	ldr	r0, [pc, #152]	@ (8007e18 <cos+0xa0>)
 8007d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d84:	4281      	cmp	r1, r0
 8007d86:	d806      	bhi.n	8007d96 <cos+0x1e>
 8007d88:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007e10 <cos+0x98>
 8007d8c:	b005      	add	sp, #20
 8007d8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d92:	f000 b97d 	b.w	8008090 <__kernel_cos>
 8007d96:	4821      	ldr	r0, [pc, #132]	@ (8007e1c <cos+0xa4>)
 8007d98:	4281      	cmp	r1, r0
 8007d9a:	d908      	bls.n	8007dae <cos+0x36>
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f7f8 fa92 	bl	80002c8 <__aeabi_dsub>
 8007da4:	ec41 0b10 	vmov	d0, r0, r1
 8007da8:	b005      	add	sp, #20
 8007daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dae:	4668      	mov	r0, sp
 8007db0:	f001 f906 	bl	8008fc0 <__ieee754_rem_pio2>
 8007db4:	f000 0003 	and.w	r0, r0, #3
 8007db8:	2801      	cmp	r0, #1
 8007dba:	d00b      	beq.n	8007dd4 <cos+0x5c>
 8007dbc:	2802      	cmp	r0, #2
 8007dbe:	d015      	beq.n	8007dec <cos+0x74>
 8007dc0:	b9d8      	cbnz	r0, 8007dfa <cos+0x82>
 8007dc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dc6:	ed9d 0b00 	vldr	d0, [sp]
 8007dca:	f000 f961 	bl	8008090 <__kernel_cos>
 8007dce:	ec51 0b10 	vmov	r0, r1, d0
 8007dd2:	e7e7      	b.n	8007da4 <cos+0x2c>
 8007dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dd8:	ed9d 0b00 	vldr	d0, [sp]
 8007ddc:	f000 fa20 	bl	8008220 <__kernel_sin>
 8007de0:	ec53 2b10 	vmov	r2, r3, d0
 8007de4:	4610      	mov	r0, r2
 8007de6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007dea:	e7db      	b.n	8007da4 <cos+0x2c>
 8007dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007df0:	ed9d 0b00 	vldr	d0, [sp]
 8007df4:	f000 f94c 	bl	8008090 <__kernel_cos>
 8007df8:	e7f2      	b.n	8007de0 <cos+0x68>
 8007dfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dfe:	ed9d 0b00 	vldr	d0, [sp]
 8007e02:	2001      	movs	r0, #1
 8007e04:	f000 fa0c 	bl	8008220 <__kernel_sin>
 8007e08:	e7e1      	b.n	8007dce <cos+0x56>
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w
	...
 8007e18:	3fe921fb 	.word	0x3fe921fb
 8007e1c:	7fefffff 	.word	0x7fefffff

08007e20 <sin>:
 8007e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e22:	ec53 2b10 	vmov	r2, r3, d0
 8007e26:	4826      	ldr	r0, [pc, #152]	@ (8007ec0 <sin+0xa0>)
 8007e28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e2c:	4281      	cmp	r1, r0
 8007e2e:	d807      	bhi.n	8007e40 <sin+0x20>
 8007e30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007eb8 <sin+0x98>
 8007e34:	2000      	movs	r0, #0
 8007e36:	b005      	add	sp, #20
 8007e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3c:	f000 b9f0 	b.w	8008220 <__kernel_sin>
 8007e40:	4820      	ldr	r0, [pc, #128]	@ (8007ec4 <sin+0xa4>)
 8007e42:	4281      	cmp	r1, r0
 8007e44:	d908      	bls.n	8007e58 <sin+0x38>
 8007e46:	4610      	mov	r0, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7f8 fa3d 	bl	80002c8 <__aeabi_dsub>
 8007e4e:	ec41 0b10 	vmov	d0, r0, r1
 8007e52:	b005      	add	sp, #20
 8007e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e58:	4668      	mov	r0, sp
 8007e5a:	f001 f8b1 	bl	8008fc0 <__ieee754_rem_pio2>
 8007e5e:	f000 0003 	and.w	r0, r0, #3
 8007e62:	2801      	cmp	r0, #1
 8007e64:	d00c      	beq.n	8007e80 <sin+0x60>
 8007e66:	2802      	cmp	r0, #2
 8007e68:	d011      	beq.n	8007e8e <sin+0x6e>
 8007e6a:	b9e8      	cbnz	r0, 8007ea8 <sin+0x88>
 8007e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e70:	ed9d 0b00 	vldr	d0, [sp]
 8007e74:	2001      	movs	r0, #1
 8007e76:	f000 f9d3 	bl	8008220 <__kernel_sin>
 8007e7a:	ec51 0b10 	vmov	r0, r1, d0
 8007e7e:	e7e6      	b.n	8007e4e <sin+0x2e>
 8007e80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e84:	ed9d 0b00 	vldr	d0, [sp]
 8007e88:	f000 f902 	bl	8008090 <__kernel_cos>
 8007e8c:	e7f5      	b.n	8007e7a <sin+0x5a>
 8007e8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e92:	ed9d 0b00 	vldr	d0, [sp]
 8007e96:	2001      	movs	r0, #1
 8007e98:	f000 f9c2 	bl	8008220 <__kernel_sin>
 8007e9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007ea6:	e7d2      	b.n	8007e4e <sin+0x2e>
 8007ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eac:	ed9d 0b00 	vldr	d0, [sp]
 8007eb0:	f000 f8ee 	bl	8008090 <__kernel_cos>
 8007eb4:	e7f2      	b.n	8007e9c <sin+0x7c>
 8007eb6:	bf00      	nop
	...
 8007ec0:	3fe921fb 	.word	0x3fe921fb
 8007ec4:	7fefffff 	.word	0x7fefffff

08007ec8 <finite>:
 8007ec8:	b082      	sub	sp, #8
 8007eca:	ed8d 0b00 	vstr	d0, [sp]
 8007ece:	9801      	ldr	r0, [sp, #4]
 8007ed0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007ed4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007ed8:	0fc0      	lsrs	r0, r0, #31
 8007eda:	b002      	add	sp, #8
 8007edc:	4770      	bx	lr
	...

08007ee0 <__ieee754_sqrt>:
 8007ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	4a66      	ldr	r2, [pc, #408]	@ (8008080 <__ieee754_sqrt+0x1a0>)
 8007ee6:	ec55 4b10 	vmov	r4, r5, d0
 8007eea:	43aa      	bics	r2, r5
 8007eec:	462b      	mov	r3, r5
 8007eee:	4621      	mov	r1, r4
 8007ef0:	d110      	bne.n	8007f14 <__ieee754_sqrt+0x34>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7f8 fb9e 	bl	8000638 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f9e2 	bl	80002cc <__adddf3>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	ec45 4b10 	vmov	d0, r4, r5
 8007f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	dc0e      	bgt.n	8007f36 <__ieee754_sqrt+0x56>
 8007f18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007f1c:	4322      	orrs	r2, r4
 8007f1e:	d0f5      	beq.n	8007f0c <__ieee754_sqrt+0x2c>
 8007f20:	b19d      	cbz	r5, 8007f4a <__ieee754_sqrt+0x6a>
 8007f22:	4622      	mov	r2, r4
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 f9ce 	bl	80002c8 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f7f8 fcac 	bl	800088c <__aeabi_ddiv>
 8007f34:	e7e8      	b.n	8007f08 <__ieee754_sqrt+0x28>
 8007f36:	152a      	asrs	r2, r5, #20
 8007f38:	d115      	bne.n	8007f66 <__ieee754_sqrt+0x86>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e009      	b.n	8007f52 <__ieee754_sqrt+0x72>
 8007f3e:	0acb      	lsrs	r3, r1, #11
 8007f40:	3a15      	subs	r2, #21
 8007f42:	0549      	lsls	r1, r1, #21
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0fa      	beq.n	8007f3e <__ieee754_sqrt+0x5e>
 8007f48:	e7f7      	b.n	8007f3a <__ieee754_sqrt+0x5a>
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	e7fa      	b.n	8007f44 <__ieee754_sqrt+0x64>
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	3001      	adds	r0, #1
 8007f52:	02dc      	lsls	r4, r3, #11
 8007f54:	d5fb      	bpl.n	8007f4e <__ieee754_sqrt+0x6e>
 8007f56:	1e44      	subs	r4, r0, #1
 8007f58:	1b12      	subs	r2, r2, r4
 8007f5a:	f1c0 0420 	rsb	r4, r0, #32
 8007f5e:	fa21 f404 	lsr.w	r4, r1, r4
 8007f62:	4323      	orrs	r3, r4
 8007f64:	4081      	lsls	r1, r0
 8007f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f72:	07d2      	lsls	r2, r2, #31
 8007f74:	bf5c      	itt	pl
 8007f76:	005b      	lslpl	r3, r3, #1
 8007f78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007f7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f80:	bf58      	it	pl
 8007f82:	0049      	lslpl	r1, r1, #1
 8007f84:	2600      	movs	r6, #0
 8007f86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007f8a:	107f      	asrs	r7, r7, #1
 8007f8c:	0049      	lsls	r1, r1, #1
 8007f8e:	2016      	movs	r0, #22
 8007f90:	4632      	mov	r2, r6
 8007f92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007f96:	1915      	adds	r5, r2, r4
 8007f98:	429d      	cmp	r5, r3
 8007f9a:	bfde      	ittt	le
 8007f9c:	192a      	addle	r2, r5, r4
 8007f9e:	1b5b      	suble	r3, r3, r5
 8007fa0:	1936      	addle	r6, r6, r4
 8007fa2:	0fcd      	lsrs	r5, r1, #31
 8007fa4:	3801      	subs	r0, #1
 8007fa6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007faa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007fae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007fb2:	d1f0      	bne.n	8007f96 <__ieee754_sqrt+0xb6>
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	2420      	movs	r4, #32
 8007fb8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	eb0c 0e00 	add.w	lr, ip, r0
 8007fc2:	dc02      	bgt.n	8007fca <__ieee754_sqrt+0xea>
 8007fc4:	d113      	bne.n	8007fee <__ieee754_sqrt+0x10e>
 8007fc6:	458e      	cmp	lr, r1
 8007fc8:	d811      	bhi.n	8007fee <__ieee754_sqrt+0x10e>
 8007fca:	f1be 0f00 	cmp.w	lr, #0
 8007fce:	eb0e 000c 	add.w	r0, lr, ip
 8007fd2:	da3f      	bge.n	8008054 <__ieee754_sqrt+0x174>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	db3d      	blt.n	8008054 <__ieee754_sqrt+0x174>
 8007fd8:	f102 0801 	add.w	r8, r2, #1
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	458e      	cmp	lr, r1
 8007fe0:	bf88      	it	hi
 8007fe2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007fe6:	eba1 010e 	sub.w	r1, r1, lr
 8007fea:	4465      	add	r5, ip
 8007fec:	4642      	mov	r2, r8
 8007fee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007ff2:	3c01      	subs	r4, #1
 8007ff4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007ff8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ffc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008000:	d1dc      	bne.n	8007fbc <__ieee754_sqrt+0xdc>
 8008002:	4319      	orrs	r1, r3
 8008004:	d01b      	beq.n	800803e <__ieee754_sqrt+0x15e>
 8008006:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008084 <__ieee754_sqrt+0x1a4>
 800800a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008088 <__ieee754_sqrt+0x1a8>
 800800e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008012:	e9db 2300 	ldrd	r2, r3, [fp]
 8008016:	f7f8 f957 	bl	80002c8 <__aeabi_dsub>
 800801a:	e9da 8900 	ldrd	r8, r9, [sl]
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4640      	mov	r0, r8
 8008024:	4649      	mov	r1, r9
 8008026:	f7f8 fd83 	bl	8000b30 <__aeabi_dcmple>
 800802a:	b140      	cbz	r0, 800803e <__ieee754_sqrt+0x15e>
 800802c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008030:	e9da 0100 	ldrd	r0, r1, [sl]
 8008034:	e9db 2300 	ldrd	r2, r3, [fp]
 8008038:	d10e      	bne.n	8008058 <__ieee754_sqrt+0x178>
 800803a:	3601      	adds	r6, #1
 800803c:	4625      	mov	r5, r4
 800803e:	1073      	asrs	r3, r6, #1
 8008040:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008044:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008048:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800804c:	086b      	lsrs	r3, r5, #1
 800804e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008052:	e759      	b.n	8007f08 <__ieee754_sqrt+0x28>
 8008054:	4690      	mov	r8, r2
 8008056:	e7c1      	b.n	8007fdc <__ieee754_sqrt+0xfc>
 8008058:	f7f8 f938 	bl	80002cc <__adddf3>
 800805c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800806c:	b120      	cbz	r0, 8008078 <__ieee754_sqrt+0x198>
 800806e:	1cab      	adds	r3, r5, #2
 8008070:	bf08      	it	eq
 8008072:	3601      	addeq	r6, #1
 8008074:	3502      	adds	r5, #2
 8008076:	e7e2      	b.n	800803e <__ieee754_sqrt+0x15e>
 8008078:	1c6b      	adds	r3, r5, #1
 800807a:	f023 0501 	bic.w	r5, r3, #1
 800807e:	e7de      	b.n	800803e <__ieee754_sqrt+0x15e>
 8008080:	7ff00000 	.word	0x7ff00000
 8008084:	0800a518 	.word	0x0800a518
 8008088:	0800a510 	.word	0x0800a510
 800808c:	00000000 	.word	0x00000000

08008090 <__kernel_cos>:
 8008090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ec57 6b10 	vmov	r6, r7, d0
 8008098:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800809c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80080a0:	ed8d 1b00 	vstr	d1, [sp]
 80080a4:	d206      	bcs.n	80080b4 <__kernel_cos+0x24>
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fd75 	bl	8000b98 <__aeabi_d2iz>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f000 8088 	beq.w	80081c4 <__kernel_cos+0x134>
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fabc 	bl	8000638 <__aeabi_dmul>
 80080c0:	4b51      	ldr	r3, [pc, #324]	@ (8008208 <__kernel_cos+0x178>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	a340      	add	r3, pc, #256	@ (adr r3, 80081d0 <__kernel_cos+0x140>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	4682      	mov	sl, r0
 80080d4:	468b      	mov	fp, r1
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 faad 	bl	8000638 <__aeabi_dmul>
 80080de:	a33e      	add	r3, pc, #248	@ (adr r3, 80081d8 <__kernel_cos+0x148>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 f8f2 	bl	80002cc <__adddf3>
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	f7f8 faa4 	bl	8000638 <__aeabi_dmul>
 80080f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80081e0 <__kernel_cos+0x150>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 f8e7 	bl	80002c8 <__aeabi_dsub>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 fa9b 	bl	8000638 <__aeabi_dmul>
 8008102:	a339      	add	r3, pc, #228	@ (adr r3, 80081e8 <__kernel_cos+0x158>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f8e0 	bl	80002cc <__adddf3>
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f7f8 fa92 	bl	8000638 <__aeabi_dmul>
 8008114:	a336      	add	r3, pc, #216	@ (adr r3, 80081f0 <__kernel_cos+0x160>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f8d5 	bl	80002c8 <__aeabi_dsub>
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	f7f8 fa89 	bl	8000638 <__aeabi_dmul>
 8008126:	a334      	add	r3, pc, #208	@ (adr r3, 80081f8 <__kernel_cos+0x168>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f8ce 	bl	80002cc <__adddf3>
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	f7f8 fa80 	bl	8000638 <__aeabi_dmul>
 8008138:	4622      	mov	r2, r4
 800813a:	462b      	mov	r3, r5
 800813c:	f7f8 fa7c 	bl	8000638 <__aeabi_dmul>
 8008140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fa74 	bl	8000638 <__aeabi_dmul>
 8008150:	460b      	mov	r3, r1
 8008152:	4602      	mov	r2, r0
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	f7f8 f8b6 	bl	80002c8 <__aeabi_dsub>
 800815c:	4b2b      	ldr	r3, [pc, #172]	@ (800820c <__kernel_cos+0x17c>)
 800815e:	4598      	cmp	r8, r3
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	d810      	bhi.n	8008188 <__kernel_cos+0xf8>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 f8ab 	bl	80002c8 <__aeabi_dsub>
 8008172:	460b      	mov	r3, r1
 8008174:	4926      	ldr	r1, [pc, #152]	@ (8008210 <__kernel_cos+0x180>)
 8008176:	4602      	mov	r2, r0
 8008178:	2000      	movs	r0, #0
 800817a:	f7f8 f8a5 	bl	80002c8 <__aeabi_dsub>
 800817e:	ec41 0b10 	vmov	d0, r0, r1
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	4b22      	ldr	r3, [pc, #136]	@ (8008214 <__kernel_cos+0x184>)
 800818a:	4921      	ldr	r1, [pc, #132]	@ (8008210 <__kernel_cos+0x180>)
 800818c:	4598      	cmp	r8, r3
 800818e:	bf8c      	ite	hi
 8008190:	4d21      	ldrhi	r5, [pc, #132]	@ (8008218 <__kernel_cos+0x188>)
 8008192:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008196:	2400      	movs	r4, #0
 8008198:	4622      	mov	r2, r4
 800819a:	462b      	mov	r3, r5
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 f893 	bl	80002c8 <__aeabi_dsub>
 80081a2:	4622      	mov	r2, r4
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	462b      	mov	r3, r5
 80081aa:	4650      	mov	r0, sl
 80081ac:	4659      	mov	r1, fp
 80081ae:	f7f8 f88b 	bl	80002c8 <__aeabi_dsub>
 80081b2:	4632      	mov	r2, r6
 80081b4:	463b      	mov	r3, r7
 80081b6:	f7f8 f887 	bl	80002c8 <__aeabi_dsub>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	e7da      	b.n	800817a <__kernel_cos+0xea>
 80081c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008200 <__kernel_cos+0x170>
 80081c8:	e7db      	b.n	8008182 <__kernel_cos+0xf2>
 80081ca:	bf00      	nop
 80081cc:	f3af 8000 	nop.w
 80081d0:	be8838d4 	.word	0xbe8838d4
 80081d4:	bda8fae9 	.word	0xbda8fae9
 80081d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80081dc:	3e21ee9e 	.word	0x3e21ee9e
 80081e0:	809c52ad 	.word	0x809c52ad
 80081e4:	3e927e4f 	.word	0x3e927e4f
 80081e8:	19cb1590 	.word	0x19cb1590
 80081ec:	3efa01a0 	.word	0x3efa01a0
 80081f0:	16c15177 	.word	0x16c15177
 80081f4:	3f56c16c 	.word	0x3f56c16c
 80081f8:	5555554c 	.word	0x5555554c
 80081fc:	3fa55555 	.word	0x3fa55555
 8008200:	00000000 	.word	0x00000000
 8008204:	3ff00000 	.word	0x3ff00000
 8008208:	3fe00000 	.word	0x3fe00000
 800820c:	3fd33332 	.word	0x3fd33332
 8008210:	3ff00000 	.word	0x3ff00000
 8008214:	3fe90000 	.word	0x3fe90000
 8008218:	3fd20000 	.word	0x3fd20000
 800821c:	00000000 	.word	0x00000000

08008220 <__kernel_sin>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	ec55 4b10 	vmov	r4, r5, d0
 8008228:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800822c:	b085      	sub	sp, #20
 800822e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008232:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008236:	4680      	mov	r8, r0
 8008238:	d205      	bcs.n	8008246 <__kernel_sin+0x26>
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	f7f8 fcab 	bl	8000b98 <__aeabi_d2iz>
 8008242:	2800      	cmp	r0, #0
 8008244:	d052      	beq.n	80082ec <__kernel_sin+0xcc>
 8008246:	4622      	mov	r2, r4
 8008248:	462b      	mov	r3, r5
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f9f3 	bl	8000638 <__aeabi_dmul>
 8008252:	4682      	mov	sl, r0
 8008254:	468b      	mov	fp, r1
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4620      	mov	r0, r4
 800825c:	4629      	mov	r1, r5
 800825e:	f7f8 f9eb 	bl	8000638 <__aeabi_dmul>
 8008262:	a342      	add	r3, pc, #264	@ (adr r3, 800836c <__kernel_sin+0x14c>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	e9cd 0100 	strd	r0, r1, [sp]
 800826c:	4650      	mov	r0, sl
 800826e:	4659      	mov	r1, fp
 8008270:	f7f8 f9e2 	bl	8000638 <__aeabi_dmul>
 8008274:	a33f      	add	r3, pc, #252	@ (adr r3, 8008374 <__kernel_sin+0x154>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f825 	bl	80002c8 <__aeabi_dsub>
 800827e:	4652      	mov	r2, sl
 8008280:	465b      	mov	r3, fp
 8008282:	f7f8 f9d9 	bl	8000638 <__aeabi_dmul>
 8008286:	a33d      	add	r3, pc, #244	@ (adr r3, 800837c <__kernel_sin+0x15c>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f7f8 f81e 	bl	80002cc <__adddf3>
 8008290:	4652      	mov	r2, sl
 8008292:	465b      	mov	r3, fp
 8008294:	f7f8 f9d0 	bl	8000638 <__aeabi_dmul>
 8008298:	a33a      	add	r3, pc, #232	@ (adr r3, 8008384 <__kernel_sin+0x164>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	f7f8 f813 	bl	80002c8 <__aeabi_dsub>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	f7f8 f9c7 	bl	8000638 <__aeabi_dmul>
 80082aa:	a338      	add	r3, pc, #224	@ (adr r3, 800838c <__kernel_sin+0x16c>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f8 f80c 	bl	80002cc <__adddf3>
 80082b4:	4606      	mov	r6, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	f1b8 0f00 	cmp.w	r8, #0
 80082bc:	d11b      	bne.n	80082f6 <__kernel_sin+0xd6>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4650      	mov	r0, sl
 80082c4:	4659      	mov	r1, fp
 80082c6:	f7f8 f9b7 	bl	8000638 <__aeabi_dmul>
 80082ca:	a325      	add	r3, pc, #148	@ (adr r3, 8008360 <__kernel_sin+0x140>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 fffa 	bl	80002c8 <__aeabi_dsub>
 80082d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d8:	f7f8 f9ae 	bl	8000638 <__aeabi_dmul>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4620      	mov	r0, r4
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7f7 fff2 	bl	80002cc <__adddf3>
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	ec45 4b10 	vmov	d0, r4, r5
 80082f0:	b005      	add	sp, #20
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008368 <__kernel_sin+0x148>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	f7f8 f99b 	bl	8000638 <__aeabi_dmul>
 8008302:	4632      	mov	r2, r6
 8008304:	4680      	mov	r8, r0
 8008306:	4689      	mov	r9, r1
 8008308:	463b      	mov	r3, r7
 800830a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4640      	mov	r0, r8
 8008318:	4649      	mov	r1, r9
 800831a:	f7f7 ffd5 	bl	80002c8 <__aeabi_dsub>
 800831e:	4652      	mov	r2, sl
 8008320:	465b      	mov	r3, fp
 8008322:	f7f8 f989 	bl	8000638 <__aeabi_dmul>
 8008326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800832a:	f7f7 ffcd 	bl	80002c8 <__aeabi_dsub>
 800832e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008360 <__kernel_sin+0x140>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800833c:	f7f8 f97c 	bl	8000638 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ffc0 	bl	80002cc <__adddf3>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4620      	mov	r0, r4
 8008352:	4629      	mov	r1, r5
 8008354:	f7f7 ffb8 	bl	80002c8 <__aeabi_dsub>
 8008358:	e7c6      	b.n	80082e8 <__kernel_sin+0xc8>
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	55555549 	.word	0x55555549
 8008364:	3fc55555 	.word	0x3fc55555
 8008368:	3fe00000 	.word	0x3fe00000
 800836c:	5acfd57c 	.word	0x5acfd57c
 8008370:	3de5d93a 	.word	0x3de5d93a
 8008374:	8a2b9ceb 	.word	0x8a2b9ceb
 8008378:	3e5ae5e6 	.word	0x3e5ae5e6
 800837c:	57b1fe7d 	.word	0x57b1fe7d
 8008380:	3ec71de3 	.word	0x3ec71de3
 8008384:	19c161d5 	.word	0x19c161d5
 8008388:	3f2a01a0 	.word	0x3f2a01a0
 800838c:	1110f8a6 	.word	0x1110f8a6
 8008390:	3f811111 	.word	0x3f811111
 8008394:	00000000 	.word	0x00000000

08008398 <__ieee754_atan2>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	ec57 6b11 	vmov	r6, r7, d1
 80083a0:	4273      	negs	r3, r6
 80083a2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008520 <__ieee754_atan2+0x188>
 80083a6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80083aa:	4333      	orrs	r3, r6
 80083ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80083b0:	4543      	cmp	r3, r8
 80083b2:	ec51 0b10 	vmov	r0, r1, d0
 80083b6:	4635      	mov	r5, r6
 80083b8:	d809      	bhi.n	80083ce <__ieee754_atan2+0x36>
 80083ba:	4244      	negs	r4, r0
 80083bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80083c0:	4304      	orrs	r4, r0
 80083c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80083c6:	4544      	cmp	r4, r8
 80083c8:	468e      	mov	lr, r1
 80083ca:	4681      	mov	r9, r0
 80083cc:	d907      	bls.n	80083de <__ieee754_atan2+0x46>
 80083ce:	4632      	mov	r2, r6
 80083d0:	463b      	mov	r3, r7
 80083d2:	f7f7 ff7b 	bl	80002cc <__adddf3>
 80083d6:	ec41 0b10 	vmov	d0, r0, r1
 80083da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083de:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80083e2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80083e6:	4334      	orrs	r4, r6
 80083e8:	d103      	bne.n	80083f2 <__ieee754_atan2+0x5a>
 80083ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ee:	f000 bfe3 	b.w	80093b8 <atan>
 80083f2:	17bc      	asrs	r4, r7, #30
 80083f4:	f004 0402 	and.w	r4, r4, #2
 80083f8:	ea53 0909 	orrs.w	r9, r3, r9
 80083fc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008400:	d107      	bne.n	8008412 <__ieee754_atan2+0x7a>
 8008402:	2c02      	cmp	r4, #2
 8008404:	d05f      	beq.n	80084c6 <__ieee754_atan2+0x12e>
 8008406:	2c03      	cmp	r4, #3
 8008408:	d1e5      	bne.n	80083d6 <__ieee754_atan2+0x3e>
 800840a:	a143      	add	r1, pc, #268	@ (adr r1, 8008518 <__ieee754_atan2+0x180>)
 800840c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008410:	e7e1      	b.n	80083d6 <__ieee754_atan2+0x3e>
 8008412:	4315      	orrs	r5, r2
 8008414:	d106      	bne.n	8008424 <__ieee754_atan2+0x8c>
 8008416:	f1be 0f00 	cmp.w	lr, #0
 800841a:	db5f      	blt.n	80084dc <__ieee754_atan2+0x144>
 800841c:	a136      	add	r1, pc, #216	@ (adr r1, 80084f8 <__ieee754_atan2+0x160>)
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	e7d8      	b.n	80083d6 <__ieee754_atan2+0x3e>
 8008424:	4542      	cmp	r2, r8
 8008426:	d10f      	bne.n	8008448 <__ieee754_atan2+0xb0>
 8008428:	4293      	cmp	r3, r2
 800842a:	f104 34ff 	add.w	r4, r4, #4294967295
 800842e:	d107      	bne.n	8008440 <__ieee754_atan2+0xa8>
 8008430:	2c02      	cmp	r4, #2
 8008432:	d84c      	bhi.n	80084ce <__ieee754_atan2+0x136>
 8008434:	4b36      	ldr	r3, [pc, #216]	@ (8008510 <__ieee754_atan2+0x178>)
 8008436:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800843a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800843e:	e7ca      	b.n	80083d6 <__ieee754_atan2+0x3e>
 8008440:	2c02      	cmp	r4, #2
 8008442:	d848      	bhi.n	80084d6 <__ieee754_atan2+0x13e>
 8008444:	4b33      	ldr	r3, [pc, #204]	@ (8008514 <__ieee754_atan2+0x17c>)
 8008446:	e7f6      	b.n	8008436 <__ieee754_atan2+0x9e>
 8008448:	4543      	cmp	r3, r8
 800844a:	d0e4      	beq.n	8008416 <__ieee754_atan2+0x7e>
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008452:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008456:	da1e      	bge.n	8008496 <__ieee754_atan2+0xfe>
 8008458:	2f00      	cmp	r7, #0
 800845a:	da01      	bge.n	8008460 <__ieee754_atan2+0xc8>
 800845c:	323c      	adds	r2, #60	@ 0x3c
 800845e:	db1e      	blt.n	800849e <__ieee754_atan2+0x106>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f8 fa12 	bl	800088c <__aeabi_ddiv>
 8008468:	ec41 0b10 	vmov	d0, r0, r1
 800846c:	f001 f93c 	bl	80096e8 <fabs>
 8008470:	f000 ffa2 	bl	80093b8 <atan>
 8008474:	ec51 0b10 	vmov	r0, r1, d0
 8008478:	2c01      	cmp	r4, #1
 800847a:	d013      	beq.n	80084a4 <__ieee754_atan2+0x10c>
 800847c:	2c02      	cmp	r4, #2
 800847e:	d015      	beq.n	80084ac <__ieee754_atan2+0x114>
 8008480:	2c00      	cmp	r4, #0
 8008482:	d0a8      	beq.n	80083d6 <__ieee754_atan2+0x3e>
 8008484:	a318      	add	r3, pc, #96	@ (adr r3, 80084e8 <__ieee754_atan2+0x150>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 ff1d 	bl	80002c8 <__aeabi_dsub>
 800848e:	a318      	add	r3, pc, #96	@ (adr r3, 80084f0 <__ieee754_atan2+0x158>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	e014      	b.n	80084c0 <__ieee754_atan2+0x128>
 8008496:	a118      	add	r1, pc, #96	@ (adr r1, 80084f8 <__ieee754_atan2+0x160>)
 8008498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849c:	e7ec      	b.n	8008478 <__ieee754_atan2+0xe0>
 800849e:	2000      	movs	r0, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	e7e9      	b.n	8008478 <__ieee754_atan2+0xe0>
 80084a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084a8:	4619      	mov	r1, r3
 80084aa:	e794      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80084e8 <__ieee754_atan2+0x150>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 ff09 	bl	80002c8 <__aeabi_dsub>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	a10d      	add	r1, pc, #52	@ (adr r1, 80084f0 <__ieee754_atan2+0x158>)
 80084bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c0:	f7f7 ff02 	bl	80002c8 <__aeabi_dsub>
 80084c4:	e787      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084c6:	a10a      	add	r1, pc, #40	@ (adr r1, 80084f0 <__ieee754_atan2+0x158>)
 80084c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084cc:	e783      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084ce:	a10c      	add	r1, pc, #48	@ (adr r1, 8008500 <__ieee754_atan2+0x168>)
 80084d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d4:	e77f      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084d6:	2000      	movs	r0, #0
 80084d8:	2100      	movs	r1, #0
 80084da:	e77c      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084dc:	a10a      	add	r1, pc, #40	@ (adr r1, 8008508 <__ieee754_atan2+0x170>)
 80084de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e2:	e778      	b.n	80083d6 <__ieee754_atan2+0x3e>
 80084e4:	f3af 8000 	nop.w
 80084e8:	33145c07 	.word	0x33145c07
 80084ec:	3ca1a626 	.word	0x3ca1a626
 80084f0:	54442d18 	.word	0x54442d18
 80084f4:	400921fb 	.word	0x400921fb
 80084f8:	54442d18 	.word	0x54442d18
 80084fc:	3ff921fb 	.word	0x3ff921fb
 8008500:	54442d18 	.word	0x54442d18
 8008504:	3fe921fb 	.word	0x3fe921fb
 8008508:	54442d18 	.word	0x54442d18
 800850c:	bff921fb 	.word	0xbff921fb
 8008510:	0800a538 	.word	0x0800a538
 8008514:	0800a520 	.word	0x0800a520
 8008518:	54442d18 	.word	0x54442d18
 800851c:	c00921fb 	.word	0xc00921fb
 8008520:	7ff00000 	.word	0x7ff00000
 8008524:	00000000 	.word	0x00000000

08008528 <__ieee754_pow>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	b091      	sub	sp, #68	@ 0x44
 800852e:	ed8d 1b00 	vstr	d1, [sp]
 8008532:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008536:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800853a:	ea5a 0001 	orrs.w	r0, sl, r1
 800853e:	ec57 6b10 	vmov	r6, r7, d0
 8008542:	d113      	bne.n	800856c <__ieee754_pow+0x44>
 8008544:	19b3      	adds	r3, r6, r6
 8008546:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800854a:	4152      	adcs	r2, r2
 800854c:	4298      	cmp	r0, r3
 800854e:	4b9a      	ldr	r3, [pc, #616]	@ (80087b8 <__ieee754_pow+0x290>)
 8008550:	4193      	sbcs	r3, r2
 8008552:	f080 84ee 	bcs.w	8008f32 <__ieee754_pow+0xa0a>
 8008556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800855a:	4630      	mov	r0, r6
 800855c:	4639      	mov	r1, r7
 800855e:	f7f7 feb5 	bl	80002cc <__adddf3>
 8008562:	ec41 0b10 	vmov	d0, r0, r1
 8008566:	b011      	add	sp, #68	@ 0x44
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	4a93      	ldr	r2, [pc, #588]	@ (80087bc <__ieee754_pow+0x294>)
 800856e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8008572:	4295      	cmp	r5, r2
 8008574:	46b8      	mov	r8, r7
 8008576:	4633      	mov	r3, r6
 8008578:	d80a      	bhi.n	8008590 <__ieee754_pow+0x68>
 800857a:	d104      	bne.n	8008586 <__ieee754_pow+0x5e>
 800857c:	2e00      	cmp	r6, #0
 800857e:	d1ea      	bne.n	8008556 <__ieee754_pow+0x2e>
 8008580:	45aa      	cmp	sl, r5
 8008582:	d8e8      	bhi.n	8008556 <__ieee754_pow+0x2e>
 8008584:	e001      	b.n	800858a <__ieee754_pow+0x62>
 8008586:	4592      	cmp	sl, r2
 8008588:	d802      	bhi.n	8008590 <__ieee754_pow+0x68>
 800858a:	4592      	cmp	sl, r2
 800858c:	d10f      	bne.n	80085ae <__ieee754_pow+0x86>
 800858e:	b171      	cbz	r1, 80085ae <__ieee754_pow+0x86>
 8008590:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008594:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008598:	ea58 0803 	orrs.w	r8, r8, r3
 800859c:	d1db      	bne.n	8008556 <__ieee754_pow+0x2e>
 800859e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085a2:	18db      	adds	r3, r3, r3
 80085a4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80085a8:	4152      	adcs	r2, r2
 80085aa:	4598      	cmp	r8, r3
 80085ac:	e7cf      	b.n	800854e <__ieee754_pow+0x26>
 80085ae:	f1b8 0f00 	cmp.w	r8, #0
 80085b2:	46ab      	mov	fp, r5
 80085b4:	da43      	bge.n	800863e <__ieee754_pow+0x116>
 80085b6:	4a82      	ldr	r2, [pc, #520]	@ (80087c0 <__ieee754_pow+0x298>)
 80085b8:	4592      	cmp	sl, r2
 80085ba:	d856      	bhi.n	800866a <__ieee754_pow+0x142>
 80085bc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80085c0:	4592      	cmp	sl, r2
 80085c2:	f240 84c5 	bls.w	8008f50 <__ieee754_pow+0xa28>
 80085c6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80085ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80085ce:	2a14      	cmp	r2, #20
 80085d0:	dd18      	ble.n	8008604 <__ieee754_pow+0xdc>
 80085d2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80085d6:	fa21 f402 	lsr.w	r4, r1, r2
 80085da:	fa04 f202 	lsl.w	r2, r4, r2
 80085de:	428a      	cmp	r2, r1
 80085e0:	f040 84b6 	bne.w	8008f50 <__ieee754_pow+0xa28>
 80085e4:	f004 0401 	and.w	r4, r4, #1
 80085e8:	f1c4 0402 	rsb	r4, r4, #2
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d159      	bne.n	80086a4 <__ieee754_pow+0x17c>
 80085f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80085f4:	d148      	bne.n	8008688 <__ieee754_pow+0x160>
 80085f6:	4632      	mov	r2, r6
 80085f8:	463b      	mov	r3, r7
 80085fa:	4630      	mov	r0, r6
 80085fc:	4639      	mov	r1, r7
 80085fe:	f7f8 f81b 	bl	8000638 <__aeabi_dmul>
 8008602:	e7ae      	b.n	8008562 <__ieee754_pow+0x3a>
 8008604:	2900      	cmp	r1, #0
 8008606:	d14c      	bne.n	80086a2 <__ieee754_pow+0x17a>
 8008608:	f1c2 0214 	rsb	r2, r2, #20
 800860c:	fa4a f402 	asr.w	r4, sl, r2
 8008610:	fa04 f202 	lsl.w	r2, r4, r2
 8008614:	4552      	cmp	r2, sl
 8008616:	f040 8498 	bne.w	8008f4a <__ieee754_pow+0xa22>
 800861a:	f004 0401 	and.w	r4, r4, #1
 800861e:	f1c4 0402 	rsb	r4, r4, #2
 8008622:	4a68      	ldr	r2, [pc, #416]	@ (80087c4 <__ieee754_pow+0x29c>)
 8008624:	4592      	cmp	sl, r2
 8008626:	d1e3      	bne.n	80085f0 <__ieee754_pow+0xc8>
 8008628:	f1b9 0f00 	cmp.w	r9, #0
 800862c:	f280 8489 	bge.w	8008f42 <__ieee754_pow+0xa1a>
 8008630:	4964      	ldr	r1, [pc, #400]	@ (80087c4 <__ieee754_pow+0x29c>)
 8008632:	4632      	mov	r2, r6
 8008634:	463b      	mov	r3, r7
 8008636:	2000      	movs	r0, #0
 8008638:	f7f8 f928 	bl	800088c <__aeabi_ddiv>
 800863c:	e791      	b.n	8008562 <__ieee754_pow+0x3a>
 800863e:	2400      	movs	r4, #0
 8008640:	bb81      	cbnz	r1, 80086a4 <__ieee754_pow+0x17c>
 8008642:	4a5e      	ldr	r2, [pc, #376]	@ (80087bc <__ieee754_pow+0x294>)
 8008644:	4592      	cmp	sl, r2
 8008646:	d1ec      	bne.n	8008622 <__ieee754_pow+0xfa>
 8008648:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800864c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008650:	431a      	orrs	r2, r3
 8008652:	f000 846e 	beq.w	8008f32 <__ieee754_pow+0xa0a>
 8008656:	4b5c      	ldr	r3, [pc, #368]	@ (80087c8 <__ieee754_pow+0x2a0>)
 8008658:	429d      	cmp	r5, r3
 800865a:	d908      	bls.n	800866e <__ieee754_pow+0x146>
 800865c:	f1b9 0f00 	cmp.w	r9, #0
 8008660:	f280 846b 	bge.w	8008f3a <__ieee754_pow+0xa12>
 8008664:	2000      	movs	r0, #0
 8008666:	2100      	movs	r1, #0
 8008668:	e77b      	b.n	8008562 <__ieee754_pow+0x3a>
 800866a:	2402      	movs	r4, #2
 800866c:	e7e8      	b.n	8008640 <__ieee754_pow+0x118>
 800866e:	f1b9 0f00 	cmp.w	r9, #0
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f04f 0100 	mov.w	r1, #0
 800867a:	f6bf af72 	bge.w	8008562 <__ieee754_pow+0x3a>
 800867e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008682:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008686:	e76c      	b.n	8008562 <__ieee754_pow+0x3a>
 8008688:	4a50      	ldr	r2, [pc, #320]	@ (80087cc <__ieee754_pow+0x2a4>)
 800868a:	4591      	cmp	r9, r2
 800868c:	d10a      	bne.n	80086a4 <__ieee754_pow+0x17c>
 800868e:	f1b8 0f00 	cmp.w	r8, #0
 8008692:	db07      	blt.n	80086a4 <__ieee754_pow+0x17c>
 8008694:	ec47 6b10 	vmov	d0, r6, r7
 8008698:	b011      	add	sp, #68	@ 0x44
 800869a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869e:	f7ff bc1f 	b.w	8007ee0 <__ieee754_sqrt>
 80086a2:	2400      	movs	r4, #0
 80086a4:	ec47 6b10 	vmov	d0, r6, r7
 80086a8:	9302      	str	r3, [sp, #8]
 80086aa:	f001 f81d 	bl	80096e8 <fabs>
 80086ae:	9b02      	ldr	r3, [sp, #8]
 80086b0:	ec51 0b10 	vmov	r0, r1, d0
 80086b4:	bb43      	cbnz	r3, 8008708 <__ieee754_pow+0x1e0>
 80086b6:	4b43      	ldr	r3, [pc, #268]	@ (80087c4 <__ieee754_pow+0x29c>)
 80086b8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80086bc:	429a      	cmp	r2, r3
 80086be:	d000      	beq.n	80086c2 <__ieee754_pow+0x19a>
 80086c0:	bb15      	cbnz	r5, 8008708 <__ieee754_pow+0x1e0>
 80086c2:	f1b9 0f00 	cmp.w	r9, #0
 80086c6:	da05      	bge.n	80086d4 <__ieee754_pow+0x1ac>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	2000      	movs	r0, #0
 80086ce:	493d      	ldr	r1, [pc, #244]	@ (80087c4 <__ieee754_pow+0x29c>)
 80086d0:	f7f8 f8dc 	bl	800088c <__aeabi_ddiv>
 80086d4:	f1b8 0f00 	cmp.w	r8, #0
 80086d8:	f6bf af43 	bge.w	8008562 <__ieee754_pow+0x3a>
 80086dc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80086e0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80086e4:	4325      	orrs	r5, r4
 80086e6:	d108      	bne.n	80086fa <__ieee754_pow+0x1d2>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4610      	mov	r0, r2
 80086ee:	4619      	mov	r1, r3
 80086f0:	f7f7 fdea 	bl	80002c8 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	e79e      	b.n	8008638 <__ieee754_pow+0x110>
 80086fa:	2c01      	cmp	r4, #1
 80086fc:	f47f af31 	bne.w	8008562 <__ieee754_pow+0x3a>
 8008700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008704:	4619      	mov	r1, r3
 8008706:	e72c      	b.n	8008562 <__ieee754_pow+0x3a>
 8008708:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800870c:	3b01      	subs	r3, #1
 800870e:	ea53 0204 	orrs.w	r2, r3, r4
 8008712:	d102      	bne.n	800871a <__ieee754_pow+0x1f2>
 8008714:	4632      	mov	r2, r6
 8008716:	463b      	mov	r3, r7
 8008718:	e7e8      	b.n	80086ec <__ieee754_pow+0x1c4>
 800871a:	3c01      	subs	r4, #1
 800871c:	431c      	orrs	r4, r3
 800871e:	d016      	beq.n	800874e <__ieee754_pow+0x226>
 8008720:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80087a8 <__ieee754_pow+0x280>
 8008724:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800872c:	f240 8110 	bls.w	8008950 <__ieee754_pow+0x428>
 8008730:	4b27      	ldr	r3, [pc, #156]	@ (80087d0 <__ieee754_pow+0x2a8>)
 8008732:	459a      	cmp	sl, r3
 8008734:	4b24      	ldr	r3, [pc, #144]	@ (80087c8 <__ieee754_pow+0x2a0>)
 8008736:	d916      	bls.n	8008766 <__ieee754_pow+0x23e>
 8008738:	429d      	cmp	r5, r3
 800873a:	d80b      	bhi.n	8008754 <__ieee754_pow+0x22c>
 800873c:	f1b9 0f00 	cmp.w	r9, #0
 8008740:	da0b      	bge.n	800875a <__ieee754_pow+0x232>
 8008742:	2000      	movs	r0, #0
 8008744:	b011      	add	sp, #68	@ 0x44
 8008746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	f001 b885 	b.w	8009858 <__math_oflow>
 800874e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80087b0 <__ieee754_pow+0x288>
 8008752:	e7e7      	b.n	8008724 <__ieee754_pow+0x1fc>
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	dcf3      	bgt.n	8008742 <__ieee754_pow+0x21a>
 800875a:	2000      	movs	r0, #0
 800875c:	b011      	add	sp, #68	@ 0x44
 800875e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008762:	f001 b871 	b.w	8009848 <__math_uflow>
 8008766:	429d      	cmp	r5, r3
 8008768:	d20c      	bcs.n	8008784 <__ieee754_pow+0x25c>
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	2300      	movs	r3, #0
 8008772:	f7f8 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8008776:	3800      	subs	r0, #0
 8008778:	bf18      	it	ne
 800877a:	2001      	movne	r0, #1
 800877c:	f1b9 0f00 	cmp.w	r9, #0
 8008780:	daec      	bge.n	800875c <__ieee754_pow+0x234>
 8008782:	e7df      	b.n	8008744 <__ieee754_pow+0x21c>
 8008784:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <__ieee754_pow+0x29c>)
 8008786:	429d      	cmp	r5, r3
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	d922      	bls.n	80087d4 <__ieee754_pow+0x2ac>
 800878e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008792:	2300      	movs	r3, #0
 8008794:	f7f8 f9c2 	bl	8000b1c <__aeabi_dcmplt>
 8008798:	3800      	subs	r0, #0
 800879a:	bf18      	it	ne
 800879c:	2001      	movne	r0, #1
 800879e:	f1b9 0f00 	cmp.w	r9, #0
 80087a2:	dccf      	bgt.n	8008744 <__ieee754_pow+0x21c>
 80087a4:	e7da      	b.n	800875c <__ieee754_pow+0x234>
 80087a6:	bf00      	nop
 80087a8:	00000000 	.word	0x00000000
 80087ac:	3ff00000 	.word	0x3ff00000
 80087b0:	00000000 	.word	0x00000000
 80087b4:	bff00000 	.word	0xbff00000
 80087b8:	fff00000 	.word	0xfff00000
 80087bc:	7ff00000 	.word	0x7ff00000
 80087c0:	433fffff 	.word	0x433fffff
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	3fefffff 	.word	0x3fefffff
 80087cc:	3fe00000 	.word	0x3fe00000
 80087d0:	43f00000 	.word	0x43f00000
 80087d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008940 <__ieee754_pow+0x418>)
 80087d6:	f7f7 fd77 	bl	80002c8 <__aeabi_dsub>
 80087da:	a351      	add	r3, pc, #324	@ (adr r3, 8008920 <__ieee754_pow+0x3f8>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	f7f7 ff28 	bl	8000638 <__aeabi_dmul>
 80087e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8008928 <__ieee754_pow+0x400>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	4606      	mov	r6, r0
 80087f0:	460f      	mov	r7, r1
 80087f2:	4620      	mov	r0, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	f7f7 ff1f 	bl	8000638 <__aeabi_dmul>
 80087fa:	4b52      	ldr	r3, [pc, #328]	@ (8008944 <__ieee754_pow+0x41c>)
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	2200      	movs	r2, #0
 8008802:	4620      	mov	r0, r4
 8008804:	4629      	mov	r1, r5
 8008806:	f7f7 ff17 	bl	8000638 <__aeabi_dmul>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	a148      	add	r1, pc, #288	@ (adr r1, 8008930 <__ieee754_pow+0x408>)
 8008810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008814:	f7f7 fd58 	bl	80002c8 <__aeabi_dsub>
 8008818:	4622      	mov	r2, r4
 800881a:	462b      	mov	r3, r5
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	2000      	movs	r0, #0
 8008826:	4948      	ldr	r1, [pc, #288]	@ (8008948 <__ieee754_pow+0x420>)
 8008828:	f7f7 fd4e 	bl	80002c8 <__aeabi_dsub>
 800882c:	4622      	mov	r2, r4
 800882e:	4680      	mov	r8, r0
 8008830:	4689      	mov	r9, r1
 8008832:	462b      	mov	r3, r5
 8008834:	4620      	mov	r0, r4
 8008836:	4629      	mov	r1, r5
 8008838:	f7f7 fefe 	bl	8000638 <__aeabi_dmul>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f7 fef8 	bl	8000638 <__aeabi_dmul>
 8008848:	a33b      	add	r3, pc, #236	@ (adr r3, 8008938 <__ieee754_pow+0x410>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fef3 	bl	8000638 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4650      	mov	r0, sl
 8008858:	4659      	mov	r1, fp
 800885a:	f7f7 fd35 	bl	80002c8 <__aeabi_dsub>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4680      	mov	r8, r0
 8008864:	4689      	mov	r9, r1
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f7 fd2f 	bl	80002cc <__adddf3>
 800886e:	2400      	movs	r4, #0
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	4620      	mov	r0, r4
 8008876:	460d      	mov	r5, r1
 8008878:	f7f7 fd26 	bl	80002c8 <__aeabi_dsub>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fd20 	bl	80002c8 <__aeabi_dsub>
 8008888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800888c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008890:	2300      	movs	r3, #0
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008898:	4606      	mov	r6, r0
 800889a:	460f      	mov	r7, r1
 800889c:	465b      	mov	r3, fp
 800889e:	4652      	mov	r2, sl
 80088a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088a4:	f7f7 fd10 	bl	80002c8 <__aeabi_dsub>
 80088a8:	4622      	mov	r2, r4
 80088aa:	462b      	mov	r3, r5
 80088ac:	f7f7 fec4 	bl	8000638 <__aeabi_dmul>
 80088b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f7 febc 	bl	8000638 <__aeabi_dmul>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f7 fd00 	bl	80002cc <__adddf3>
 80088cc:	465b      	mov	r3, fp
 80088ce:	4606      	mov	r6, r0
 80088d0:	460f      	mov	r7, r1
 80088d2:	4652      	mov	r2, sl
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 feae 	bl	8000638 <__aeabi_dmul>
 80088dc:	460b      	mov	r3, r1
 80088de:	4602      	mov	r2, r0
 80088e0:	4680      	mov	r8, r0
 80088e2:	4689      	mov	r9, r1
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 fcf0 	bl	80002cc <__adddf3>
 80088ec:	4b17      	ldr	r3, [pc, #92]	@ (800894c <__ieee754_pow+0x424>)
 80088ee:	4299      	cmp	r1, r3
 80088f0:	4604      	mov	r4, r0
 80088f2:	460d      	mov	r5, r1
 80088f4:	468b      	mov	fp, r1
 80088f6:	f340 820b 	ble.w	8008d10 <__ieee754_pow+0x7e8>
 80088fa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80088fe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008902:	4303      	orrs	r3, r0
 8008904:	f000 81ea 	beq.w	8008cdc <__ieee754_pow+0x7b4>
 8008908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	f7f8 f904 	bl	8000b1c <__aeabi_dcmplt>
 8008914:	3800      	subs	r0, #0
 8008916:	bf18      	it	ne
 8008918:	2001      	movne	r0, #1
 800891a:	e713      	b.n	8008744 <__ieee754_pow+0x21c>
 800891c:	f3af 8000 	nop.w
 8008920:	60000000 	.word	0x60000000
 8008924:	3ff71547 	.word	0x3ff71547
 8008928:	f85ddf44 	.word	0xf85ddf44
 800892c:	3e54ae0b 	.word	0x3e54ae0b
 8008930:	55555555 	.word	0x55555555
 8008934:	3fd55555 	.word	0x3fd55555
 8008938:	652b82fe 	.word	0x652b82fe
 800893c:	3ff71547 	.word	0x3ff71547
 8008940:	3ff00000 	.word	0x3ff00000
 8008944:	3fd00000 	.word	0x3fd00000
 8008948:	3fe00000 	.word	0x3fe00000
 800894c:	408fffff 	.word	0x408fffff
 8008950:	4bd5      	ldr	r3, [pc, #852]	@ (8008ca8 <__ieee754_pow+0x780>)
 8008952:	ea08 0303 	and.w	r3, r8, r3
 8008956:	2200      	movs	r2, #0
 8008958:	b92b      	cbnz	r3, 8008966 <__ieee754_pow+0x43e>
 800895a:	4bd4      	ldr	r3, [pc, #848]	@ (8008cac <__ieee754_pow+0x784>)
 800895c:	f7f7 fe6c 	bl	8000638 <__aeabi_dmul>
 8008960:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008964:	468b      	mov	fp, r1
 8008966:	ea4f 532b 	mov.w	r3, fp, asr #20
 800896a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800896e:	4413      	add	r3, r2
 8008970:	930a      	str	r3, [sp, #40]	@ 0x28
 8008972:	4bcf      	ldr	r3, [pc, #828]	@ (8008cb0 <__ieee754_pow+0x788>)
 8008974:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008978:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800897c:	459b      	cmp	fp, r3
 800897e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008982:	dd08      	ble.n	8008996 <__ieee754_pow+0x46e>
 8008984:	4bcb      	ldr	r3, [pc, #812]	@ (8008cb4 <__ieee754_pow+0x78c>)
 8008986:	459b      	cmp	fp, r3
 8008988:	f340 81a5 	ble.w	8008cd6 <__ieee754_pow+0x7ae>
 800898c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898e:	3301      	adds	r3, #1
 8008990:	930a      	str	r3, [sp, #40]	@ 0x28
 8008992:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008996:	f04f 0a00 	mov.w	sl, #0
 800899a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800899e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089a0:	4bc5      	ldr	r3, [pc, #788]	@ (8008cb8 <__ieee754_pow+0x790>)
 80089a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089a6:	ed93 7b00 	vldr	d7, [r3]
 80089aa:	4629      	mov	r1, r5
 80089ac:	ec53 2b17 	vmov	r2, r3, d7
 80089b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089b8:	f7f7 fc86 	bl	80002c8 <__aeabi_dsub>
 80089bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089c0:	4606      	mov	r6, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089c8:	f7f7 fc80 	bl	80002cc <__adddf3>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	2000      	movs	r0, #0
 80089d2:	49ba      	ldr	r1, [pc, #744]	@ (8008cbc <__ieee754_pow+0x794>)
 80089d4:	f7f7 ff5a 	bl	800088c <__aeabi_ddiv>
 80089d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fe28 	bl	8000638 <__aeabi_dmul>
 80089e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089ec:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80089f0:	106d      	asrs	r5, r5, #1
 80089f2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80089f6:	f04f 0b00 	mov.w	fp, #0
 80089fa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80089fe:	4661      	mov	r1, ip
 8008a00:	2200      	movs	r2, #0
 8008a02:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008a06:	4658      	mov	r0, fp
 8008a08:	46e1      	mov	r9, ip
 8008a0a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008a0e:	4614      	mov	r4, r2
 8008a10:	461d      	mov	r5, r3
 8008a12:	f7f7 fe11 	bl	8000638 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f7 fc53 	bl	80002c8 <__aeabi_dsub>
 8008a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc4b 	bl	80002c8 <__aeabi_dsub>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a3a:	f7f7 fc45 	bl	80002c8 <__aeabi_dsub>
 8008a3e:	465a      	mov	r2, fp
 8008a40:	464b      	mov	r3, r9
 8008a42:	f7f7 fdf9 	bl	8000638 <__aeabi_dmul>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a56:	f7f7 fdef 	bl	8000638 <__aeabi_dmul>
 8008a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	f7f7 fde7 	bl	8000638 <__aeabi_dmul>
 8008a6a:	a37d      	add	r3, pc, #500	@ (adr r3, 8008c60 <__ieee754_pow+0x738>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	f7f7 fde0 	bl	8000638 <__aeabi_dmul>
 8008a78:	a37b      	add	r3, pc, #492	@ (adr r3, 8008c68 <__ieee754_pow+0x740>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fc25 	bl	80002cc <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	f7f7 fdd7 	bl	8000638 <__aeabi_dmul>
 8008a8a:	a379      	add	r3, pc, #484	@ (adr r3, 8008c70 <__ieee754_pow+0x748>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fc1c 	bl	80002cc <__adddf3>
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	f7f7 fdce 	bl	8000638 <__aeabi_dmul>
 8008a9c:	a376      	add	r3, pc, #472	@ (adr r3, 8008c78 <__ieee754_pow+0x750>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fc13 	bl	80002cc <__adddf3>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	f7f7 fdc5 	bl	8000638 <__aeabi_dmul>
 8008aae:	a374      	add	r3, pc, #464	@ (adr r3, 8008c80 <__ieee754_pow+0x758>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fc0a 	bl	80002cc <__adddf3>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	462b      	mov	r3, r5
 8008abc:	f7f7 fdbc 	bl	8000638 <__aeabi_dmul>
 8008ac0:	a371      	add	r3, pc, #452	@ (adr r3, 8008c88 <__ieee754_pow+0x760>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fc01 	bl	80002cc <__adddf3>
 8008aca:	4622      	mov	r2, r4
 8008acc:	4606      	mov	r6, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7f7 fdaf 	bl	8000638 <__aeabi_dmul>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fda9 	bl	8000638 <__aeabi_dmul>
 8008ae6:	465a      	mov	r2, fp
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	464b      	mov	r3, r9
 8008aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af2:	f7f7 fbeb 	bl	80002cc <__adddf3>
 8008af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008afa:	f7f7 fd9d 	bl	8000638 <__aeabi_dmul>
 8008afe:	4622      	mov	r2, r4
 8008b00:	462b      	mov	r3, r5
 8008b02:	f7f7 fbe3 	bl	80002cc <__adddf3>
 8008b06:	465a      	mov	r2, fp
 8008b08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	4658      	mov	r0, fp
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 fd91 	bl	8000638 <__aeabi_dmul>
 8008b16:	4b6a      	ldr	r3, [pc, #424]	@ (8008cc0 <__ieee754_pow+0x798>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	f7f7 fbd5 	bl	80002cc <__adddf3>
 8008b22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b26:	f7f7 fbd1 	bl	80002cc <__adddf3>
 8008b2a:	46d8      	mov	r8, fp
 8008b2c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008b30:	460d      	mov	r5, r1
 8008b32:	465a      	mov	r2, fp
 8008b34:	460b      	mov	r3, r1
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008b3e:	f7f7 fd7b 	bl	8000638 <__aeabi_dmul>
 8008b42:	465c      	mov	r4, fp
 8008b44:	4680      	mov	r8, r0
 8008b46:	4689      	mov	r9, r1
 8008b48:	4b5d      	ldr	r3, [pc, #372]	@ (8008cc0 <__ieee754_pow+0x798>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f7f7 fbba 	bl	80002c8 <__aeabi_dsub>
 8008b54:	4632      	mov	r2, r6
 8008b56:	463b      	mov	r3, r7
 8008b58:	f7f7 fbb6 	bl	80002c8 <__aeabi_dsub>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b64:	f7f7 fbb0 	bl	80002c8 <__aeabi_dsub>
 8008b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b6c:	f7f7 fd64 	bl	8000638 <__aeabi_dmul>
 8008b70:	4622      	mov	r2, r4
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	462b      	mov	r3, r5
 8008b78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b7c:	f7f7 fd5c 	bl	8000638 <__aeabi_dmul>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4630      	mov	r0, r6
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 fba0 	bl	80002cc <__adddf3>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4640      	mov	r0, r8
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 fb98 	bl	80002cc <__adddf3>
 8008b9c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008ba0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008c90 <__ieee754_pow+0x768>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	4658      	mov	r0, fp
 8008ba8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008bac:	460d      	mov	r5, r1
 8008bae:	f7f7 fd43 	bl	8000638 <__aeabi_dmul>
 8008bb2:	465c      	mov	r4, fp
 8008bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bb8:	4642      	mov	r2, r8
 8008bba:	464b      	mov	r3, r9
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 fb82 	bl	80002c8 <__aeabi_dsub>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 fb7c 	bl	80002c8 <__aeabi_dsub>
 8008bd0:	a331      	add	r3, pc, #196	@ (adr r3, 8008c98 <__ieee754_pow+0x770>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fd2f 	bl	8000638 <__aeabi_dmul>
 8008bda:	a331      	add	r3, pc, #196	@ (adr r3, 8008ca0 <__ieee754_pow+0x778>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	4606      	mov	r6, r0
 8008be2:	460f      	mov	r7, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fd26 	bl	8000638 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 fb6a 	bl	80002cc <__adddf3>
 8008bf8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008bfa:	4b32      	ldr	r3, [pc, #200]	@ (8008cc4 <__ieee754_pow+0x79c>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb63 	bl	80002cc <__adddf3>
 8008c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c0c:	f7f7 fcaa 	bl	8000564 <__aeabi_i2d>
 8008c10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c12:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc8 <__ieee754_pow+0x7a0>)
 8008c14:	4413      	add	r3, r2
 8008c16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c20:	460f      	mov	r7, r1
 8008c22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c26:	f7f7 fb51 	bl	80002cc <__adddf3>
 8008c2a:	4642      	mov	r2, r8
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	f7f7 fb4d 	bl	80002cc <__adddf3>
 8008c32:	4632      	mov	r2, r6
 8008c34:	463b      	mov	r3, r7
 8008c36:	f7f7 fb49 	bl	80002cc <__adddf3>
 8008c3a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008c3e:	4632      	mov	r2, r6
 8008c40:	463b      	mov	r3, r7
 8008c42:	4658      	mov	r0, fp
 8008c44:	460d      	mov	r5, r1
 8008c46:	f7f7 fb3f 	bl	80002c8 <__aeabi_dsub>
 8008c4a:	4642      	mov	r2, r8
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	f7f7 fb3b 	bl	80002c8 <__aeabi_dsub>
 8008c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c56:	f7f7 fb37 	bl	80002c8 <__aeabi_dsub>
 8008c5a:	465c      	mov	r4, fp
 8008c5c:	e036      	b.n	8008ccc <__ieee754_pow+0x7a4>
 8008c5e:	bf00      	nop
 8008c60:	4a454eef 	.word	0x4a454eef
 8008c64:	3fca7e28 	.word	0x3fca7e28
 8008c68:	93c9db65 	.word	0x93c9db65
 8008c6c:	3fcd864a 	.word	0x3fcd864a
 8008c70:	a91d4101 	.word	0xa91d4101
 8008c74:	3fd17460 	.word	0x3fd17460
 8008c78:	518f264d 	.word	0x518f264d
 8008c7c:	3fd55555 	.word	0x3fd55555
 8008c80:	db6fabff 	.word	0xdb6fabff
 8008c84:	3fdb6db6 	.word	0x3fdb6db6
 8008c88:	33333303 	.word	0x33333303
 8008c8c:	3fe33333 	.word	0x3fe33333
 8008c90:	e0000000 	.word	0xe0000000
 8008c94:	3feec709 	.word	0x3feec709
 8008c98:	dc3a03fd 	.word	0xdc3a03fd
 8008c9c:	3feec709 	.word	0x3feec709
 8008ca0:	145b01f5 	.word	0x145b01f5
 8008ca4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	43400000 	.word	0x43400000
 8008cb0:	0003988e 	.word	0x0003988e
 8008cb4:	000bb679 	.word	0x000bb679
 8008cb8:	0800a570 	.word	0x0800a570
 8008cbc:	3ff00000 	.word	0x3ff00000
 8008cc0:	40080000 	.word	0x40080000
 8008cc4:	0800a550 	.word	0x0800a550
 8008cc8:	0800a560 	.word	0x0800a560
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cd4:	e5d6      	b.n	8008884 <__ieee754_pow+0x35c>
 8008cd6:	f04f 0a01 	mov.w	sl, #1
 8008cda:	e65e      	b.n	800899a <__ieee754_pow+0x472>
 8008cdc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008fb4 <__ieee754_pow+0xa8c>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	f7f7 faf1 	bl	80002cc <__adddf3>
 8008cea:	4642      	mov	r2, r8
 8008cec:	e9cd 0100 	strd	r0, r1, [sp]
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fae7 	bl	80002c8 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d02:	f7f7 ff29 	bl	8000b58 <__aeabi_dcmpgt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f47f adfe 	bne.w	8008908 <__ieee754_pow+0x3e0>
 8008d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8008f98 <__ieee754_pow+0xa70>)
 8008d0e:	e022      	b.n	8008d56 <__ieee754_pow+0x82e>
 8008d10:	4ca2      	ldr	r4, [pc, #648]	@ (8008f9c <__ieee754_pow+0xa74>)
 8008d12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	d919      	bls.n	8008d4e <__ieee754_pow+0x826>
 8008d1a:	4ba1      	ldr	r3, [pc, #644]	@ (8008fa0 <__ieee754_pow+0xa78>)
 8008d1c:	440b      	add	r3, r1
 8008d1e:	4303      	orrs	r3, r0
 8008d20:	d009      	beq.n	8008d36 <__ieee754_pow+0x80e>
 8008d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f7f7 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8008d2e:	3800      	subs	r0, #0
 8008d30:	bf18      	it	ne
 8008d32:	2001      	movne	r0, #1
 8008d34:	e512      	b.n	800875c <__ieee754_pow+0x234>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f7f7 fac5 	bl	80002c8 <__aeabi_dsub>
 8008d3e:	4632      	mov	r2, r6
 8008d40:	463b      	mov	r3, r7
 8008d42:	f7f7 feff 	bl	8000b44 <__aeabi_dcmpge>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d1eb      	bne.n	8008d22 <__ieee754_pow+0x7fa>
 8008d4a:	4b96      	ldr	r3, [pc, #600]	@ (8008fa4 <__ieee754_pow+0xa7c>)
 8008d4c:	e003      	b.n	8008d56 <__ieee754_pow+0x82e>
 8008d4e:	4a96      	ldr	r2, [pc, #600]	@ (8008fa8 <__ieee754_pow+0xa80>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	f240 80e7 	bls.w	8008f24 <__ieee754_pow+0x9fc>
 8008d56:	151b      	asrs	r3, r3, #20
 8008d58:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008d5c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008d60:	fa4a fa03 	asr.w	sl, sl, r3
 8008d64:	44da      	add	sl, fp
 8008d66:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008d6a:	4890      	ldr	r0, [pc, #576]	@ (8008fac <__ieee754_pow+0xa84>)
 8008d6c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008d70:	4108      	asrs	r0, r1
 8008d72:	ea00 030a 	and.w	r3, r0, sl
 8008d76:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008d7a:	f1c1 0114 	rsb	r1, r1, #20
 8008d7e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008d82:	fa4a fa01 	asr.w	sl, sl, r1
 8008d86:	f1bb 0f00 	cmp.w	fp, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	bfb8      	it	lt
 8008d94:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d98:	f7f7 fa96 	bl	80002c8 <__aeabi_dsub>
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4689      	mov	r9, r1
 8008da0:	4632      	mov	r2, r6
 8008da2:	463b      	mov	r3, r7
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	f7f7 fa90 	bl	80002cc <__adddf3>
 8008dac:	2400      	movs	r4, #0
 8008dae:	a36a      	add	r3, pc, #424	@ (adr r3, 8008f58 <__ieee754_pow+0xa30>)
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	4620      	mov	r0, r4
 8008db6:	460d      	mov	r5, r1
 8008db8:	f7f7 fc3e 	bl	8000638 <__aeabi_dmul>
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8008dc2:	464b      	mov	r3, r9
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa7e 	bl	80002c8 <__aeabi_dsub>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fa78 	bl	80002c8 <__aeabi_dsub>
 8008dd8:	a361      	add	r3, pc, #388	@ (adr r3, 8008f60 <__ieee754_pow+0xa38>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f7f7 fc2b 	bl	8000638 <__aeabi_dmul>
 8008de2:	a361      	add	r3, pc, #388	@ (adr r3, 8008f68 <__ieee754_pow+0xa40>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	4680      	mov	r8, r0
 8008dea:	4689      	mov	r9, r1
 8008dec:	4620      	mov	r0, r4
 8008dee:	4629      	mov	r1, r5
 8008df0:	f7f7 fc22 	bl	8000638 <__aeabi_dmul>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4640      	mov	r0, r8
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	f7f7 fa66 	bl	80002cc <__adddf3>
 8008e00:	4604      	mov	r4, r0
 8008e02:	460d      	mov	r5, r1
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e0c:	f7f7 fa5e 	bl	80002cc <__adddf3>
 8008e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e14:	4680      	mov	r8, r0
 8008e16:	4689      	mov	r9, r1
 8008e18:	f7f7 fa56 	bl	80002c8 <__aeabi_dsub>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4620      	mov	r0, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fa50 	bl	80002c8 <__aeabi_dsub>
 8008e28:	4642      	mov	r2, r8
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460f      	mov	r7, r1
 8008e2e:	464b      	mov	r3, r9
 8008e30:	4640      	mov	r0, r8
 8008e32:	4649      	mov	r1, r9
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	a34d      	add	r3, pc, #308	@ (adr r3, 8008f70 <__ieee754_pow+0xa48>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	4604      	mov	r4, r0
 8008e40:	460d      	mov	r5, r1
 8008e42:	f7f7 fbf9 	bl	8000638 <__aeabi_dmul>
 8008e46:	a34c      	add	r3, pc, #304	@ (adr r3, 8008f78 <__ieee754_pow+0xa50>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fa3c 	bl	80002c8 <__aeabi_dsub>
 8008e50:	4622      	mov	r2, r4
 8008e52:	462b      	mov	r3, r5
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	a349      	add	r3, pc, #292	@ (adr r3, 8008f80 <__ieee754_pow+0xa58>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fa35 	bl	80002cc <__adddf3>
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f7f7 fbe7 	bl	8000638 <__aeabi_dmul>
 8008e6a:	a347      	add	r3, pc, #284	@ (adr r3, 8008f88 <__ieee754_pow+0xa60>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 fa2a 	bl	80002c8 <__aeabi_dsub>
 8008e74:	4622      	mov	r2, r4
 8008e76:	462b      	mov	r3, r5
 8008e78:	f7f7 fbde 	bl	8000638 <__aeabi_dmul>
 8008e7c:	a344      	add	r3, pc, #272	@ (adr r3, 8008f90 <__ieee754_pow+0xa68>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa23 	bl	80002cc <__adddf3>
 8008e86:	4622      	mov	r2, r4
 8008e88:	462b      	mov	r3, r5
 8008e8a:	f7f7 fbd5 	bl	8000638 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fa17 	bl	80002c8 <__aeabi_dsub>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fbc7 	bl	8000638 <__aeabi_dmul>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	e9cd 0100 	strd	r0, r1, [sp]
 8008eb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fa06 	bl	80002c8 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec4:	f7f7 fce2 	bl	800088c <__aeabi_ddiv>
 8008ec8:	4632      	mov	r2, r6
 8008eca:	4604      	mov	r4, r0
 8008ecc:	460d      	mov	r5, r1
 8008ece:	463b      	mov	r3, r7
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	f7f7 f9f6 	bl	80002cc <__adddf3>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f7f7 f9ee 	bl	80002c8 <__aeabi_dsub>
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	f7f7 f9ea 	bl	80002c8 <__aeabi_dsub>
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	492d      	ldr	r1, [pc, #180]	@ (8008fb0 <__ieee754_pow+0xa88>)
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7f7 f9e4 	bl	80002c8 <__aeabi_dsub>
 8008f00:	ec41 0b10 	vmov	d0, r0, r1
 8008f04:	ee10 3a90 	vmov	r3, s1
 8008f08:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f10:	da0b      	bge.n	8008f2a <__ieee754_pow+0xa02>
 8008f12:	4650      	mov	r0, sl
 8008f14:	f000 fbf0 	bl	80096f8 <scalbn>
 8008f18:	ec51 0b10 	vmov	r0, r1, d0
 8008f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f20:	f7ff bb6d 	b.w	80085fe <__ieee754_pow+0xd6>
 8008f24:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008f28:	e73a      	b.n	8008da0 <__ieee754_pow+0x878>
 8008f2a:	ec51 0b10 	vmov	r0, r1, d0
 8008f2e:	4619      	mov	r1, r3
 8008f30:	e7f4      	b.n	8008f1c <__ieee754_pow+0x9f4>
 8008f32:	491f      	ldr	r1, [pc, #124]	@ (8008fb0 <__ieee754_pow+0xa88>)
 8008f34:	2000      	movs	r0, #0
 8008f36:	f7ff bb14 	b.w	8008562 <__ieee754_pow+0x3a>
 8008f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f3e:	f7ff bb10 	b.w	8008562 <__ieee754_pow+0x3a>
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7ff bb0c 	b.w	8008562 <__ieee754_pow+0x3a>
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	f7ff bb69 	b.w	8008622 <__ieee754_pow+0xfa>
 8008f50:	2400      	movs	r4, #0
 8008f52:	f7ff bb4b 	b.w	80085ec <__ieee754_pow+0xc4>
 8008f56:	bf00      	nop
 8008f58:	00000000 	.word	0x00000000
 8008f5c:	3fe62e43 	.word	0x3fe62e43
 8008f60:	fefa39ef 	.word	0xfefa39ef
 8008f64:	3fe62e42 	.word	0x3fe62e42
 8008f68:	0ca86c39 	.word	0x0ca86c39
 8008f6c:	be205c61 	.word	0xbe205c61
 8008f70:	72bea4d0 	.word	0x72bea4d0
 8008f74:	3e663769 	.word	0x3e663769
 8008f78:	c5d26bf1 	.word	0xc5d26bf1
 8008f7c:	3ebbbd41 	.word	0x3ebbbd41
 8008f80:	af25de2c 	.word	0xaf25de2c
 8008f84:	3f11566a 	.word	0x3f11566a
 8008f88:	16bebd93 	.word	0x16bebd93
 8008f8c:	3f66c16c 	.word	0x3f66c16c
 8008f90:	5555553e 	.word	0x5555553e
 8008f94:	3fc55555 	.word	0x3fc55555
 8008f98:	40900000 	.word	0x40900000
 8008f9c:	4090cbff 	.word	0x4090cbff
 8008fa0:	3f6f3400 	.word	0x3f6f3400
 8008fa4:	4090cc00 	.word	0x4090cc00
 8008fa8:	3fe00000 	.word	0x3fe00000
 8008fac:	fff00000 	.word	0xfff00000
 8008fb0:	3ff00000 	.word	0x3ff00000
 8008fb4:	652b82fe 	.word	0x652b82fe
 8008fb8:	3c971547 	.word	0x3c971547
 8008fbc:	00000000 	.word	0x00000000

08008fc0 <__ieee754_rem_pio2>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	ec57 6b10 	vmov	r6, r7, d0
 8008fc8:	4bc5      	ldr	r3, [pc, #788]	@ (80092e0 <__ieee754_rem_pio2+0x320>)
 8008fca:	b08d      	sub	sp, #52	@ 0x34
 8008fcc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008fd0:	4598      	cmp	r8, r3
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	9704      	str	r7, [sp, #16]
 8008fd6:	d807      	bhi.n	8008fe8 <__ieee754_rem_pio2+0x28>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2300      	movs	r3, #0
 8008fdc:	ed80 0b00 	vstr	d0, [r0]
 8008fe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008fe4:	2500      	movs	r5, #0
 8008fe6:	e028      	b.n	800903a <__ieee754_rem_pio2+0x7a>
 8008fe8:	4bbe      	ldr	r3, [pc, #760]	@ (80092e4 <__ieee754_rem_pio2+0x324>)
 8008fea:	4598      	cmp	r8, r3
 8008fec:	d878      	bhi.n	80090e0 <__ieee754_rem_pio2+0x120>
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	4dbd      	ldr	r5, [pc, #756]	@ (80092e8 <__ieee754_rem_pio2+0x328>)
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80092a8 <__ieee754_rem_pio2+0x2e8>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	dd38      	ble.n	8009072 <__ieee754_rem_pio2+0xb2>
 8009000:	f7f7 f962 	bl	80002c8 <__aeabi_dsub>
 8009004:	45a8      	cmp	r8, r5
 8009006:	4606      	mov	r6, r0
 8009008:	460f      	mov	r7, r1
 800900a:	d01a      	beq.n	8009042 <__ieee754_rem_pio2+0x82>
 800900c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80092b0 <__ieee754_rem_pio2+0x2f0>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f959 	bl	80002c8 <__aeabi_dsub>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	4630      	mov	r0, r6
 8009020:	4639      	mov	r1, r7
 8009022:	f7f7 f951 	bl	80002c8 <__aeabi_dsub>
 8009026:	a3a2      	add	r3, pc, #648	@ (adr r3, 80092b0 <__ieee754_rem_pio2+0x2f0>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 f94c 	bl	80002c8 <__aeabi_dsub>
 8009030:	e9c4 8900 	strd	r8, r9, [r4]
 8009034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009038:	2501      	movs	r5, #1
 800903a:	4628      	mov	r0, r5
 800903c:	b00d      	add	sp, #52	@ 0x34
 800903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	a39d      	add	r3, pc, #628	@ (adr r3, 80092b8 <__ieee754_rem_pio2+0x2f8>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 f93e 	bl	80002c8 <__aeabi_dsub>
 800904c:	a39c      	add	r3, pc, #624	@ (adr r3, 80092c0 <__ieee754_rem_pio2+0x300>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	f7f7 f937 	bl	80002c8 <__aeabi_dsub>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4680      	mov	r8, r0
 8009060:	4689      	mov	r9, r1
 8009062:	4630      	mov	r0, r6
 8009064:	4639      	mov	r1, r7
 8009066:	f7f7 f92f 	bl	80002c8 <__aeabi_dsub>
 800906a:	a395      	add	r3, pc, #596	@ (adr r3, 80092c0 <__ieee754_rem_pio2+0x300>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	e7dc      	b.n	800902c <__ieee754_rem_pio2+0x6c>
 8009072:	f7f7 f92b 	bl	80002cc <__adddf3>
 8009076:	45a8      	cmp	r8, r5
 8009078:	4606      	mov	r6, r0
 800907a:	460f      	mov	r7, r1
 800907c:	d018      	beq.n	80090b0 <__ieee754_rem_pio2+0xf0>
 800907e:	a38c      	add	r3, pc, #560	@ (adr r3, 80092b0 <__ieee754_rem_pio2+0x2f0>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f7f7 f922 	bl	80002cc <__adddf3>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 f918 	bl	80002c8 <__aeabi_dsub>
 8009098:	a385      	add	r3, pc, #532	@ (adr r3, 80092b0 <__ieee754_rem_pio2+0x2f0>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 f915 	bl	80002cc <__adddf3>
 80090a2:	f04f 35ff 	mov.w	r5, #4294967295
 80090a6:	e9c4 8900 	strd	r8, r9, [r4]
 80090aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090ae:	e7c4      	b.n	800903a <__ieee754_rem_pio2+0x7a>
 80090b0:	a381      	add	r3, pc, #516	@ (adr r3, 80092b8 <__ieee754_rem_pio2+0x2f8>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 f909 	bl	80002cc <__adddf3>
 80090ba:	a381      	add	r3, pc, #516	@ (adr r3, 80092c0 <__ieee754_rem_pio2+0x300>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4606      	mov	r6, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	f7f7 f902 	bl	80002cc <__adddf3>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4680      	mov	r8, r0
 80090ce:	4689      	mov	r9, r1
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 f8f8 	bl	80002c8 <__aeabi_dsub>
 80090d8:	a379      	add	r3, pc, #484	@ (adr r3, 80092c0 <__ieee754_rem_pio2+0x300>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	e7de      	b.n	800909e <__ieee754_rem_pio2+0xde>
 80090e0:	4b82      	ldr	r3, [pc, #520]	@ (80092ec <__ieee754_rem_pio2+0x32c>)
 80090e2:	4598      	cmp	r8, r3
 80090e4:	f200 80d1 	bhi.w	800928a <__ieee754_rem_pio2+0x2ca>
 80090e8:	f000 fafe 	bl	80096e8 <fabs>
 80090ec:	ec57 6b10 	vmov	r6, r7, d0
 80090f0:	a375      	add	r3, pc, #468	@ (adr r3, 80092c8 <__ieee754_rem_pio2+0x308>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fa9d 	bl	8000638 <__aeabi_dmul>
 80090fe:	4b7c      	ldr	r3, [pc, #496]	@ (80092f0 <__ieee754_rem_pio2+0x330>)
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 f8e3 	bl	80002cc <__adddf3>
 8009106:	f7f7 fd47 	bl	8000b98 <__aeabi_d2iz>
 800910a:	4605      	mov	r5, r0
 800910c:	f7f7 fa2a 	bl	8000564 <__aeabi_i2d>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009118:	a363      	add	r3, pc, #396	@ (adr r3, 80092a8 <__ieee754_rem_pio2+0x2e8>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fa8b 	bl	8000638 <__aeabi_dmul>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 f8cd 	bl	80002c8 <__aeabi_dsub>
 800912e:	a360      	add	r3, pc, #384	@ (adr r3, 80092b0 <__ieee754_rem_pio2+0x2f0>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	4682      	mov	sl, r0
 8009136:	468b      	mov	fp, r1
 8009138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913c:	f7f7 fa7c 	bl	8000638 <__aeabi_dmul>
 8009140:	2d1f      	cmp	r5, #31
 8009142:	4606      	mov	r6, r0
 8009144:	460f      	mov	r7, r1
 8009146:	dc0c      	bgt.n	8009162 <__ieee754_rem_pio2+0x1a2>
 8009148:	4b6a      	ldr	r3, [pc, #424]	@ (80092f4 <__ieee754_rem_pio2+0x334>)
 800914a:	1e6a      	subs	r2, r5, #1
 800914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009150:	4543      	cmp	r3, r8
 8009152:	d006      	beq.n	8009162 <__ieee754_rem_pio2+0x1a2>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	4650      	mov	r0, sl
 800915a:	4659      	mov	r1, fp
 800915c:	f7f7 f8b4 	bl	80002c8 <__aeabi_dsub>
 8009160:	e00e      	b.n	8009180 <__ieee754_rem_pio2+0x1c0>
 8009162:	463b      	mov	r3, r7
 8009164:	4632      	mov	r2, r6
 8009166:	4650      	mov	r0, sl
 8009168:	4659      	mov	r1, fp
 800916a:	f7f7 f8ad 	bl	80002c8 <__aeabi_dsub>
 800916e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009172:	9305      	str	r3, [sp, #20]
 8009174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009178:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800917c:	2b10      	cmp	r3, #16
 800917e:	dc02      	bgt.n	8009186 <__ieee754_rem_pio2+0x1c6>
 8009180:	e9c4 0100 	strd	r0, r1, [r4]
 8009184:	e039      	b.n	80091fa <__ieee754_rem_pio2+0x23a>
 8009186:	a34c      	add	r3, pc, #304	@ (adr r3, 80092b8 <__ieee754_rem_pio2+0x2f8>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009190:	f7f7 fa52 	bl	8000638 <__aeabi_dmul>
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4650      	mov	r0, sl
 800919e:	4659      	mov	r1, fp
 80091a0:	f7f7 f892 	bl	80002c8 <__aeabi_dsub>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4680      	mov	r8, r0
 80091aa:	4689      	mov	r9, r1
 80091ac:	4650      	mov	r0, sl
 80091ae:	4659      	mov	r1, fp
 80091b0:	f7f7 f88a 	bl	80002c8 <__aeabi_dsub>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f7 f886 	bl	80002c8 <__aeabi_dsub>
 80091bc:	a340      	add	r3, pc, #256	@ (adr r3, 80092c0 <__ieee754_rem_pio2+0x300>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ca:	f7f7 fa35 	bl	8000638 <__aeabi_dmul>
 80091ce:	4632      	mov	r2, r6
 80091d0:	463b      	mov	r3, r7
 80091d2:	f7f7 f879 	bl	80002c8 <__aeabi_dsub>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	4640      	mov	r0, r8
 80091e0:	4649      	mov	r1, r9
 80091e2:	f7f7 f871 	bl	80002c8 <__aeabi_dsub>
 80091e6:	9a05      	ldr	r2, [sp, #20]
 80091e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b31      	cmp	r3, #49	@ 0x31
 80091f0:	dc20      	bgt.n	8009234 <__ieee754_rem_pio2+0x274>
 80091f2:	e9c4 0100 	strd	r0, r1, [r4]
 80091f6:	46c2      	mov	sl, r8
 80091f8:	46cb      	mov	fp, r9
 80091fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80091fe:	4650      	mov	r0, sl
 8009200:	4642      	mov	r2, r8
 8009202:	464b      	mov	r3, r9
 8009204:	4659      	mov	r1, fp
 8009206:	f7f7 f85f 	bl	80002c8 <__aeabi_dsub>
 800920a:	463b      	mov	r3, r7
 800920c:	4632      	mov	r2, r6
 800920e:	f7f7 f85b 	bl	80002c8 <__aeabi_dsub>
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800921a:	f6bf af0e 	bge.w	800903a <__ieee754_rem_pio2+0x7a>
 800921e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009228:	f8c4 8000 	str.w	r8, [r4]
 800922c:	60a0      	str	r0, [r4, #8]
 800922e:	60e3      	str	r3, [r4, #12]
 8009230:	426d      	negs	r5, r5
 8009232:	e702      	b.n	800903a <__ieee754_rem_pio2+0x7a>
 8009234:	a326      	add	r3, pc, #152	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x310>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800923e:	f7f7 f9fb 	bl	8000638 <__aeabi_dmul>
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 f83b 	bl	80002c8 <__aeabi_dsub>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4682      	mov	sl, r0
 8009258:	468b      	mov	fp, r1
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f7 f833 	bl	80002c8 <__aeabi_dsub>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f82f 	bl	80002c8 <__aeabi_dsub>
 800926a:	a31b      	add	r3, pc, #108	@ (adr r3, 80092d8 <__ieee754_rem_pio2+0x318>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009278:	f7f7 f9de 	bl	8000638 <__aeabi_dmul>
 800927c:	4632      	mov	r2, r6
 800927e:	463b      	mov	r3, r7
 8009280:	f7f7 f822 	bl	80002c8 <__aeabi_dsub>
 8009284:	4606      	mov	r6, r0
 8009286:	460f      	mov	r7, r1
 8009288:	e764      	b.n	8009154 <__ieee754_rem_pio2+0x194>
 800928a:	4b1b      	ldr	r3, [pc, #108]	@ (80092f8 <__ieee754_rem_pio2+0x338>)
 800928c:	4598      	cmp	r8, r3
 800928e:	d935      	bls.n	80092fc <__ieee754_rem_pio2+0x33c>
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	4630      	mov	r0, r6
 8009296:	4639      	mov	r1, r7
 8009298:	f7f7 f816 	bl	80002c8 <__aeabi_dsub>
 800929c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092a0:	e9c4 0100 	strd	r0, r1, [r4]
 80092a4:	e69e      	b.n	8008fe4 <__ieee754_rem_pio2+0x24>
 80092a6:	bf00      	nop
 80092a8:	54400000 	.word	0x54400000
 80092ac:	3ff921fb 	.word	0x3ff921fb
 80092b0:	1a626331 	.word	0x1a626331
 80092b4:	3dd0b461 	.word	0x3dd0b461
 80092b8:	1a600000 	.word	0x1a600000
 80092bc:	3dd0b461 	.word	0x3dd0b461
 80092c0:	2e037073 	.word	0x2e037073
 80092c4:	3ba3198a 	.word	0x3ba3198a
 80092c8:	6dc9c883 	.word	0x6dc9c883
 80092cc:	3fe45f30 	.word	0x3fe45f30
 80092d0:	2e000000 	.word	0x2e000000
 80092d4:	3ba3198a 	.word	0x3ba3198a
 80092d8:	252049c1 	.word	0x252049c1
 80092dc:	397b839a 	.word	0x397b839a
 80092e0:	3fe921fb 	.word	0x3fe921fb
 80092e4:	4002d97b 	.word	0x4002d97b
 80092e8:	3ff921fb 	.word	0x3ff921fb
 80092ec:	413921fb 	.word	0x413921fb
 80092f0:	3fe00000 	.word	0x3fe00000
 80092f4:	0800a580 	.word	0x0800a580
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009300:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009304:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009308:	4630      	mov	r0, r6
 800930a:	460f      	mov	r7, r1
 800930c:	f7f7 fc44 	bl	8000b98 <__aeabi_d2iz>
 8009310:	f7f7 f928 	bl	8000564 <__aeabi_i2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009320:	f7f6 ffd2 	bl	80002c8 <__aeabi_dsub>
 8009324:	4b22      	ldr	r3, [pc, #136]	@ (80093b0 <__ieee754_rem_pio2+0x3f0>)
 8009326:	2200      	movs	r2, #0
 8009328:	f7f7 f986 	bl	8000638 <__aeabi_dmul>
 800932c:	460f      	mov	r7, r1
 800932e:	4606      	mov	r6, r0
 8009330:	f7f7 fc32 	bl	8000b98 <__aeabi_d2iz>
 8009334:	f7f7 f916 	bl	8000564 <__aeabi_i2d>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4630      	mov	r0, r6
 800933e:	4639      	mov	r1, r7
 8009340:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009344:	f7f6 ffc0 	bl	80002c8 <__aeabi_dsub>
 8009348:	4b19      	ldr	r3, [pc, #100]	@ (80093b0 <__ieee754_rem_pio2+0x3f0>)
 800934a:	2200      	movs	r2, #0
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009354:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009358:	f04f 0803 	mov.w	r8, #3
 800935c:	2600      	movs	r6, #0
 800935e:	2700      	movs	r7, #0
 8009360:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009364:	4632      	mov	r2, r6
 8009366:	463b      	mov	r3, r7
 8009368:	46c2      	mov	sl, r8
 800936a:	f108 38ff 	add.w	r8, r8, #4294967295
 800936e:	f7f7 fbcb 	bl	8000b08 <__aeabi_dcmpeq>
 8009372:	2800      	cmp	r0, #0
 8009374:	d1f4      	bne.n	8009360 <__ieee754_rem_pio2+0x3a0>
 8009376:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <__ieee754_rem_pio2+0x3f4>)
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	2302      	movs	r3, #2
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	462a      	mov	r2, r5
 8009380:	4653      	mov	r3, sl
 8009382:	4621      	mov	r1, r4
 8009384:	a806      	add	r0, sp, #24
 8009386:	f000 fa6f 	bl	8009868 <__kernel_rem_pio2>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	4605      	mov	r5, r0
 8009390:	f6bf ae53 	bge.w	800903a <__ieee754_rem_pio2+0x7a>
 8009394:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009398:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800939c:	e9c4 2300 	strd	r2, r3, [r4]
 80093a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80093a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80093ac:	e740      	b.n	8009230 <__ieee754_rem_pio2+0x270>
 80093ae:	bf00      	nop
 80093b0:	41700000 	.word	0x41700000
 80093b4:	0800a600 	.word	0x0800a600

080093b8 <atan>:
 80093b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	ec55 4b10 	vmov	r4, r5, d0
 80093c0:	4bbf      	ldr	r3, [pc, #764]	@ (80096c0 <atan+0x308>)
 80093c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80093c6:	429e      	cmp	r6, r3
 80093c8:	46ab      	mov	fp, r5
 80093ca:	d918      	bls.n	80093fe <atan+0x46>
 80093cc:	4bbd      	ldr	r3, [pc, #756]	@ (80096c4 <atan+0x30c>)
 80093ce:	429e      	cmp	r6, r3
 80093d0:	d801      	bhi.n	80093d6 <atan+0x1e>
 80093d2:	d109      	bne.n	80093e8 <atan+0x30>
 80093d4:	b144      	cbz	r4, 80093e8 <atan+0x30>
 80093d6:	4622      	mov	r2, r4
 80093d8:	462b      	mov	r3, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f6 ff75 	bl	80002cc <__adddf3>
 80093e2:	4604      	mov	r4, r0
 80093e4:	460d      	mov	r5, r1
 80093e6:	e006      	b.n	80093f6 <atan+0x3e>
 80093e8:	f1bb 0f00 	cmp.w	fp, #0
 80093ec:	f340 812b 	ble.w	8009646 <atan+0x28e>
 80093f0:	a597      	add	r5, pc, #604	@ (adr r5, 8009650 <atan+0x298>)
 80093f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093f6:	ec45 4b10 	vmov	d0, r4, r5
 80093fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fe:	4bb2      	ldr	r3, [pc, #712]	@ (80096c8 <atan+0x310>)
 8009400:	429e      	cmp	r6, r3
 8009402:	d813      	bhi.n	800942c <atan+0x74>
 8009404:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009408:	429e      	cmp	r6, r3
 800940a:	d80c      	bhi.n	8009426 <atan+0x6e>
 800940c:	a392      	add	r3, pc, #584	@ (adr r3, 8009658 <atan+0x2a0>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f6 ff59 	bl	80002cc <__adddf3>
 800941a:	4bac      	ldr	r3, [pc, #688]	@ (80096cc <atan+0x314>)
 800941c:	2200      	movs	r2, #0
 800941e:	f7f7 fb9b 	bl	8000b58 <__aeabi_dcmpgt>
 8009422:	2800      	cmp	r0, #0
 8009424:	d1e7      	bne.n	80093f6 <atan+0x3e>
 8009426:	f04f 3aff 	mov.w	sl, #4294967295
 800942a:	e029      	b.n	8009480 <atan+0xc8>
 800942c:	f000 f95c 	bl	80096e8 <fabs>
 8009430:	4ba7      	ldr	r3, [pc, #668]	@ (80096d0 <atan+0x318>)
 8009432:	429e      	cmp	r6, r3
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	f200 80bc 	bhi.w	80095b4 <atan+0x1fc>
 800943c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009440:	429e      	cmp	r6, r3
 8009442:	f200 809e 	bhi.w	8009582 <atan+0x1ca>
 8009446:	4622      	mov	r2, r4
 8009448:	462b      	mov	r3, r5
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f6 ff3d 	bl	80002cc <__adddf3>
 8009452:	4b9e      	ldr	r3, [pc, #632]	@ (80096cc <atan+0x314>)
 8009454:	2200      	movs	r2, #0
 8009456:	f7f6 ff37 	bl	80002c8 <__aeabi_dsub>
 800945a:	2200      	movs	r2, #0
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f6 ff30 	bl	80002cc <__adddf3>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f7 fa0a 	bl	800088c <__aeabi_ddiv>
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	4622      	mov	r2, r4
 8009482:	462b      	mov	r3, r5
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f7 f8d6 	bl	8000638 <__aeabi_dmul>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	f7f7 f8d0 	bl	8000638 <__aeabi_dmul>
 8009498:	a371      	add	r3, pc, #452	@ (adr r3, 8009660 <atan+0x2a8>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	4606      	mov	r6, r0
 80094a0:	460f      	mov	r7, r1
 80094a2:	f7f7 f8c9 	bl	8000638 <__aeabi_dmul>
 80094a6:	a370      	add	r3, pc, #448	@ (adr r3, 8009668 <atan+0x2b0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f6 ff0e 	bl	80002cc <__adddf3>
 80094b0:	4632      	mov	r2, r6
 80094b2:	463b      	mov	r3, r7
 80094b4:	f7f7 f8c0 	bl	8000638 <__aeabi_dmul>
 80094b8:	a36d      	add	r3, pc, #436	@ (adr r3, 8009670 <atan+0x2b8>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7f6 ff05 	bl	80002cc <__adddf3>
 80094c2:	4632      	mov	r2, r6
 80094c4:	463b      	mov	r3, r7
 80094c6:	f7f7 f8b7 	bl	8000638 <__aeabi_dmul>
 80094ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8009678 <atan+0x2c0>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f6 fefc 	bl	80002cc <__adddf3>
 80094d4:	4632      	mov	r2, r6
 80094d6:	463b      	mov	r3, r7
 80094d8:	f7f7 f8ae 	bl	8000638 <__aeabi_dmul>
 80094dc:	a368      	add	r3, pc, #416	@ (adr r3, 8009680 <atan+0x2c8>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f6 fef3 	bl	80002cc <__adddf3>
 80094e6:	4632      	mov	r2, r6
 80094e8:	463b      	mov	r3, r7
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	a366      	add	r3, pc, #408	@ (adr r3, 8009688 <atan+0x2d0>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f6 feea 	bl	80002cc <__adddf3>
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	f7f7 f89c 	bl	8000638 <__aeabi_dmul>
 8009500:	a363      	add	r3, pc, #396	@ (adr r3, 8009690 <atan+0x2d8>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	4680      	mov	r8, r0
 8009508:	4689      	mov	r9, r1
 800950a:	4630      	mov	r0, r6
 800950c:	4639      	mov	r1, r7
 800950e:	f7f7 f893 	bl	8000638 <__aeabi_dmul>
 8009512:	a361      	add	r3, pc, #388	@ (adr r3, 8009698 <atan+0x2e0>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	f7f6 fed6 	bl	80002c8 <__aeabi_dsub>
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	f7f7 f88a 	bl	8000638 <__aeabi_dmul>
 8009524:	a35e      	add	r3, pc, #376	@ (adr r3, 80096a0 <atan+0x2e8>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fecd 	bl	80002c8 <__aeabi_dsub>
 800952e:	4632      	mov	r2, r6
 8009530:	463b      	mov	r3, r7
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	a35c      	add	r3, pc, #368	@ (adr r3, 80096a8 <atan+0x2f0>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f6 fec4 	bl	80002c8 <__aeabi_dsub>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	f7f7 f878 	bl	8000638 <__aeabi_dmul>
 8009548:	a359      	add	r3, pc, #356	@ (adr r3, 80096b0 <atan+0x2f8>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f6 febb 	bl	80002c8 <__aeabi_dsub>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f7 f86f 	bl	8000638 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f6 feb3 	bl	80002cc <__adddf3>
 8009566:	4622      	mov	r2, r4
 8009568:	462b      	mov	r3, r5
 800956a:	f7f7 f865 	bl	8000638 <__aeabi_dmul>
 800956e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	d148      	bne.n	800960a <atan+0x252>
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f6 fea4 	bl	80002c8 <__aeabi_dsub>
 8009580:	e72f      	b.n	80093e2 <atan+0x2a>
 8009582:	4b52      	ldr	r3, [pc, #328]	@ (80096cc <atan+0x314>)
 8009584:	2200      	movs	r2, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f6 fe9d 	bl	80002c8 <__aeabi_dsub>
 800958e:	4b4f      	ldr	r3, [pc, #316]	@ (80096cc <atan+0x314>)
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	2200      	movs	r2, #0
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f6 fe97 	bl	80002cc <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f7 f971 	bl	800088c <__aeabi_ddiv>
 80095aa:	f04f 0a01 	mov.w	sl, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	e765      	b.n	8009480 <atan+0xc8>
 80095b4:	4b47      	ldr	r3, [pc, #284]	@ (80096d4 <atan+0x31c>)
 80095b6:	429e      	cmp	r6, r3
 80095b8:	d21c      	bcs.n	80095f4 <atan+0x23c>
 80095ba:	4b47      	ldr	r3, [pc, #284]	@ (80096d8 <atan+0x320>)
 80095bc:	2200      	movs	r2, #0
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f6 fe81 	bl	80002c8 <__aeabi_dsub>
 80095c6:	4b44      	ldr	r3, [pc, #272]	@ (80096d8 <atan+0x320>)
 80095c8:	4606      	mov	r6, r0
 80095ca:	460f      	mov	r7, r1
 80095cc:	2200      	movs	r2, #0
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 f831 	bl	8000638 <__aeabi_dmul>
 80095d6:	4b3d      	ldr	r3, [pc, #244]	@ (80096cc <atan+0x314>)
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f6 fe77 	bl	80002cc <__adddf3>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f7 f951 	bl	800088c <__aeabi_ddiv>
 80095ea:	f04f 0a02 	mov.w	sl, #2
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	e745      	b.n	8009480 <atan+0xc8>
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	4938      	ldr	r1, [pc, #224]	@ (80096dc <atan+0x324>)
 80095fa:	2000      	movs	r0, #0
 80095fc:	f7f7 f946 	bl	800088c <__aeabi_ddiv>
 8009600:	f04f 0a03 	mov.w	sl, #3
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	e73a      	b.n	8009480 <atan+0xc8>
 800960a:	4b35      	ldr	r3, [pc, #212]	@ (80096e0 <atan+0x328>)
 800960c:	4e35      	ldr	r6, [pc, #212]	@ (80096e4 <atan+0x32c>)
 800960e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fe57 	bl	80002c8 <__aeabi_dsub>
 800961a:	4622      	mov	r2, r4
 800961c:	462b      	mov	r3, r5
 800961e:	f7f6 fe53 	bl	80002c8 <__aeabi_dsub>
 8009622:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800962e:	f7f6 fe4b 	bl	80002c8 <__aeabi_dsub>
 8009632:	f1bb 0f00 	cmp.w	fp, #0
 8009636:	4604      	mov	r4, r0
 8009638:	460d      	mov	r5, r1
 800963a:	f6bf aedc 	bge.w	80093f6 <atan+0x3e>
 800963e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009642:	461d      	mov	r5, r3
 8009644:	e6d7      	b.n	80093f6 <atan+0x3e>
 8009646:	a51c      	add	r5, pc, #112	@ (adr r5, 80096b8 <atan+0x300>)
 8009648:	e9d5 4500 	ldrd	r4, r5, [r5]
 800964c:	e6d3      	b.n	80093f6 <atan+0x3e>
 800964e:	bf00      	nop
 8009650:	54442d18 	.word	0x54442d18
 8009654:	3ff921fb 	.word	0x3ff921fb
 8009658:	8800759c 	.word	0x8800759c
 800965c:	7e37e43c 	.word	0x7e37e43c
 8009660:	e322da11 	.word	0xe322da11
 8009664:	3f90ad3a 	.word	0x3f90ad3a
 8009668:	24760deb 	.word	0x24760deb
 800966c:	3fa97b4b 	.word	0x3fa97b4b
 8009670:	a0d03d51 	.word	0xa0d03d51
 8009674:	3fb10d66 	.word	0x3fb10d66
 8009678:	c54c206e 	.word	0xc54c206e
 800967c:	3fb745cd 	.word	0x3fb745cd
 8009680:	920083ff 	.word	0x920083ff
 8009684:	3fc24924 	.word	0x3fc24924
 8009688:	5555550d 	.word	0x5555550d
 800968c:	3fd55555 	.word	0x3fd55555
 8009690:	2c6a6c2f 	.word	0x2c6a6c2f
 8009694:	bfa2b444 	.word	0xbfa2b444
 8009698:	52defd9a 	.word	0x52defd9a
 800969c:	3fadde2d 	.word	0x3fadde2d
 80096a0:	af749a6d 	.word	0xaf749a6d
 80096a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80096a8:	fe231671 	.word	0xfe231671
 80096ac:	3fbc71c6 	.word	0x3fbc71c6
 80096b0:	9998ebc4 	.word	0x9998ebc4
 80096b4:	3fc99999 	.word	0x3fc99999
 80096b8:	54442d18 	.word	0x54442d18
 80096bc:	bff921fb 	.word	0xbff921fb
 80096c0:	440fffff 	.word	0x440fffff
 80096c4:	7ff00000 	.word	0x7ff00000
 80096c8:	3fdbffff 	.word	0x3fdbffff
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	3ff2ffff 	.word	0x3ff2ffff
 80096d4:	40038000 	.word	0x40038000
 80096d8:	3ff80000 	.word	0x3ff80000
 80096dc:	bff00000 	.word	0xbff00000
 80096e0:	0800a708 	.word	0x0800a708
 80096e4:	0800a728 	.word	0x0800a728

080096e8 <fabs>:
 80096e8:	ec51 0b10 	vmov	r0, r1, d0
 80096ec:	4602      	mov	r2, r0
 80096ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80096f2:	ec43 2b10 	vmov	d0, r2, r3
 80096f6:	4770      	bx	lr

080096f8 <scalbn>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	ec55 4b10 	vmov	r4, r5, d0
 80096fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009702:	4606      	mov	r6, r0
 8009704:	462b      	mov	r3, r5
 8009706:	b991      	cbnz	r1, 800972e <scalbn+0x36>
 8009708:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800970c:	4323      	orrs	r3, r4
 800970e:	d03b      	beq.n	8009788 <scalbn+0x90>
 8009710:	4b33      	ldr	r3, [pc, #204]	@ (80097e0 <scalbn+0xe8>)
 8009712:	4620      	mov	r0, r4
 8009714:	4629      	mov	r1, r5
 8009716:	2200      	movs	r2, #0
 8009718:	f7f6 ff8e 	bl	8000638 <__aeabi_dmul>
 800971c:	4b31      	ldr	r3, [pc, #196]	@ (80097e4 <scalbn+0xec>)
 800971e:	429e      	cmp	r6, r3
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	da0f      	bge.n	8009746 <scalbn+0x4e>
 8009726:	a326      	add	r3, pc, #152	@ (adr r3, 80097c0 <scalbn+0xc8>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	e01e      	b.n	800976c <scalbn+0x74>
 800972e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009732:	4291      	cmp	r1, r2
 8009734:	d10b      	bne.n	800974e <scalbn+0x56>
 8009736:	4622      	mov	r2, r4
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fdc6 	bl	80002cc <__adddf3>
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	e020      	b.n	8009788 <scalbn+0x90>
 8009746:	460b      	mov	r3, r1
 8009748:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800974c:	3936      	subs	r1, #54	@ 0x36
 800974e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009752:	4296      	cmp	r6, r2
 8009754:	dd0d      	ble.n	8009772 <scalbn+0x7a>
 8009756:	2d00      	cmp	r5, #0
 8009758:	a11b      	add	r1, pc, #108	@ (adr r1, 80097c8 <scalbn+0xd0>)
 800975a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800975e:	da02      	bge.n	8009766 <scalbn+0x6e>
 8009760:	a11b      	add	r1, pc, #108	@ (adr r1, 80097d0 <scalbn+0xd8>)
 8009762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009766:	a318      	add	r3, pc, #96	@ (adr r3, 80097c8 <scalbn+0xd0>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 ff64 	bl	8000638 <__aeabi_dmul>
 8009770:	e7e6      	b.n	8009740 <scalbn+0x48>
 8009772:	1872      	adds	r2, r6, r1
 8009774:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009778:	428a      	cmp	r2, r1
 800977a:	dcec      	bgt.n	8009756 <scalbn+0x5e>
 800977c:	2a00      	cmp	r2, #0
 800977e:	dd06      	ble.n	800978e <scalbn+0x96>
 8009780:	f36f 531e 	bfc	r3, #20, #11
 8009784:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009788:	ec45 4b10 	vmov	d0, r4, r5
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009792:	da08      	bge.n	80097a6 <scalbn+0xae>
 8009794:	2d00      	cmp	r5, #0
 8009796:	a10a      	add	r1, pc, #40	@ (adr r1, 80097c0 <scalbn+0xc8>)
 8009798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800979c:	dac3      	bge.n	8009726 <scalbn+0x2e>
 800979e:	a10e      	add	r1, pc, #56	@ (adr r1, 80097d8 <scalbn+0xe0>)
 80097a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a4:	e7bf      	b.n	8009726 <scalbn+0x2e>
 80097a6:	3236      	adds	r2, #54	@ 0x36
 80097a8:	f36f 531e 	bfc	r3, #20, #11
 80097ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097b0:	4620      	mov	r0, r4
 80097b2:	4b0d      	ldr	r3, [pc, #52]	@ (80097e8 <scalbn+0xf0>)
 80097b4:	4629      	mov	r1, r5
 80097b6:	2200      	movs	r2, #0
 80097b8:	e7d8      	b.n	800976c <scalbn+0x74>
 80097ba:	bf00      	nop
 80097bc:	f3af 8000 	nop.w
 80097c0:	c2f8f359 	.word	0xc2f8f359
 80097c4:	01a56e1f 	.word	0x01a56e1f
 80097c8:	8800759c 	.word	0x8800759c
 80097cc:	7e37e43c 	.word	0x7e37e43c
 80097d0:	8800759c 	.word	0x8800759c
 80097d4:	fe37e43c 	.word	0xfe37e43c
 80097d8:	c2f8f359 	.word	0xc2f8f359
 80097dc:	81a56e1f 	.word	0x81a56e1f
 80097e0:	43500000 	.word	0x43500000
 80097e4:	ffff3cb0 	.word	0xffff3cb0
 80097e8:	3c900000 	.word	0x3c900000

080097ec <with_errno>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	ed2d 8b02 	vpush	{d8}
 80097f2:	eeb0 8a40 	vmov.f32	s16, s0
 80097f6:	eef0 8a60 	vmov.f32	s17, s1
 80097fa:	4604      	mov	r4, r0
 80097fc:	f7fc fbdc 	bl	8005fb8 <__errno>
 8009800:	eeb0 0a48 	vmov.f32	s0, s16
 8009804:	eef0 0a68 	vmov.f32	s1, s17
 8009808:	ecbd 8b02 	vpop	{d8}
 800980c:	6004      	str	r4, [r0, #0]
 800980e:	bd10      	pop	{r4, pc}

08009810 <xflow>:
 8009810:	4603      	mov	r3, r0
 8009812:	b507      	push	{r0, r1, r2, lr}
 8009814:	ec51 0b10 	vmov	r0, r1, d0
 8009818:	b183      	cbz	r3, 800983c <xflow+0x2c>
 800981a:	4602      	mov	r2, r0
 800981c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009820:	e9cd 2300 	strd	r2, r3, [sp]
 8009824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009828:	f7f6 ff06 	bl	8000638 <__aeabi_dmul>
 800982c:	ec41 0b10 	vmov	d0, r0, r1
 8009830:	2022      	movs	r0, #34	@ 0x22
 8009832:	b003      	add	sp, #12
 8009834:	f85d eb04 	ldr.w	lr, [sp], #4
 8009838:	f7ff bfd8 	b.w	80097ec <with_errno>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e7ee      	b.n	8009820 <xflow+0x10>
 8009842:	0000      	movs	r0, r0
 8009844:	0000      	movs	r0, r0
	...

08009848 <__math_uflow>:
 8009848:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009850 <__math_uflow+0x8>
 800984c:	f7ff bfe0 	b.w	8009810 <xflow>
 8009850:	00000000 	.word	0x00000000
 8009854:	10000000 	.word	0x10000000

08009858 <__math_oflow>:
 8009858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009860 <__math_oflow+0x8>
 800985c:	f7ff bfd8 	b.w	8009810 <xflow>
 8009860:	00000000 	.word	0x00000000
 8009864:	70000000 	.word	0x70000000

08009868 <__kernel_rem_pio2>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	ed2d 8b02 	vpush	{d8}
 8009870:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009874:	f112 0f14 	cmn.w	r2, #20
 8009878:	9306      	str	r3, [sp, #24]
 800987a:	9104      	str	r1, [sp, #16]
 800987c:	4bc2      	ldr	r3, [pc, #776]	@ (8009b88 <__kernel_rem_pio2+0x320>)
 800987e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009880:	9008      	str	r0, [sp, #32]
 8009882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	9b06      	ldr	r3, [sp, #24]
 800988a:	f103 33ff 	add.w	r3, r3, #4294967295
 800988e:	bfa8      	it	ge
 8009890:	1ed4      	subge	r4, r2, #3
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	bfb2      	itee	lt
 8009896:	2400      	movlt	r4, #0
 8009898:	2318      	movge	r3, #24
 800989a:	fb94 f4f3 	sdivge	r4, r4, r3
 800989e:	f06f 0317 	mvn.w	r3, #23
 80098a2:	fb04 3303 	mla	r3, r4, r3, r3
 80098a6:	eb03 0b02 	add.w	fp, r3, r2
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	9a05      	ldr	r2, [sp, #20]
 80098ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009b78 <__kernel_rem_pio2+0x310>
 80098b2:	eb03 0802 	add.w	r8, r3, r2
 80098b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80098b8:	1aa7      	subs	r7, r4, r2
 80098ba:	ae20      	add	r6, sp, #128	@ 0x80
 80098bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098c0:	2500      	movs	r5, #0
 80098c2:	4545      	cmp	r5, r8
 80098c4:	dd12      	ble.n	80098ec <__kernel_rem_pio2+0x84>
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	aa20      	add	r2, sp, #128	@ 0x80
 80098ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80098ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80098d2:	2700      	movs	r7, #0
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	429f      	cmp	r7, r3
 80098d8:	dc2e      	bgt.n	8009938 <__kernel_rem_pio2+0xd0>
 80098da:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009b78 <__kernel_rem_pio2+0x310>
 80098de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098e6:	46a8      	mov	r8, r5
 80098e8:	2600      	movs	r6, #0
 80098ea:	e01b      	b.n	8009924 <__kernel_rem_pio2+0xbc>
 80098ec:	42ef      	cmn	r7, r5
 80098ee:	d407      	bmi.n	8009900 <__kernel_rem_pio2+0x98>
 80098f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80098f4:	f7f6 fe36 	bl	8000564 <__aeabi_i2d>
 80098f8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80098fc:	3501      	adds	r5, #1
 80098fe:	e7e0      	b.n	80098c2 <__kernel_rem_pio2+0x5a>
 8009900:	ec51 0b18 	vmov	r0, r1, d8
 8009904:	e7f8      	b.n	80098f8 <__kernel_rem_pio2+0x90>
 8009906:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800990a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800990e:	f7f6 fe93 	bl	8000638 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800991a:	f7f6 fcd7 	bl	80002cc <__adddf3>
 800991e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009922:	3601      	adds	r6, #1
 8009924:	9b05      	ldr	r3, [sp, #20]
 8009926:	429e      	cmp	r6, r3
 8009928:	dded      	ble.n	8009906 <__kernel_rem_pio2+0x9e>
 800992a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800992e:	3701      	adds	r7, #1
 8009930:	ecaa 7b02 	vstmia	sl!, {d7}
 8009934:	3508      	adds	r5, #8
 8009936:	e7cd      	b.n	80098d4 <__kernel_rem_pio2+0x6c>
 8009938:	9b00      	ldr	r3, [sp, #0]
 800993a:	f8dd 8000 	ldr.w	r8, [sp]
 800993e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009944:	930a      	str	r3, [sp, #40]	@ 0x28
 8009946:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009948:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800994c:	9309      	str	r3, [sp, #36]	@ 0x24
 800994e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009954:	ab98      	add	r3, sp, #608	@ 0x260
 8009956:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800995a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800995e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009962:	ac0c      	add	r4, sp, #48	@ 0x30
 8009964:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009966:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800996a:	46a1      	mov	r9, r4
 800996c:	46c2      	mov	sl, r8
 800996e:	f1ba 0f00 	cmp.w	sl, #0
 8009972:	dc77      	bgt.n	8009a64 <__kernel_rem_pio2+0x1fc>
 8009974:	4658      	mov	r0, fp
 8009976:	ed9d 0b02 	vldr	d0, [sp, #8]
 800997a:	f7ff febd 	bl	80096f8 <scalbn>
 800997e:	ec57 6b10 	vmov	r6, r7, d0
 8009982:	2200      	movs	r2, #0
 8009984:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f6 fe54 	bl	8000638 <__aeabi_dmul>
 8009990:	ec41 0b10 	vmov	d0, r0, r1
 8009994:	f000 fab8 	bl	8009f08 <floor>
 8009998:	4b7c      	ldr	r3, [pc, #496]	@ (8009b8c <__kernel_rem_pio2+0x324>)
 800999a:	ec51 0b10 	vmov	r0, r1, d0
 800999e:	2200      	movs	r2, #0
 80099a0:	f7f6 fe4a 	bl	8000638 <__aeabi_dmul>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f6 fc8c 	bl	80002c8 <__aeabi_dsub>
 80099b0:	460f      	mov	r7, r1
 80099b2:	4606      	mov	r6, r0
 80099b4:	f7f7 f8f0 	bl	8000b98 <__aeabi_d2iz>
 80099b8:	9002      	str	r0, [sp, #8]
 80099ba:	f7f6 fdd3 	bl	8000564 <__aeabi_i2d>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4630      	mov	r0, r6
 80099c4:	4639      	mov	r1, r7
 80099c6:	f7f6 fc7f 	bl	80002c8 <__aeabi_dsub>
 80099ca:	f1bb 0f00 	cmp.w	fp, #0
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	dd6c      	ble.n	8009aae <__kernel_rem_pio2+0x246>
 80099d4:	f108 31ff 	add.w	r1, r8, #4294967295
 80099d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80099da:	9d02      	ldr	r5, [sp, #8]
 80099dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099e0:	f1cb 0018 	rsb	r0, fp, #24
 80099e4:	fa43 f200 	asr.w	r2, r3, r0
 80099e8:	4415      	add	r5, r2
 80099ea:	4082      	lsls	r2, r0
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80099f0:	9502      	str	r5, [sp, #8]
 80099f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80099f6:	f1cb 0217 	rsb	r2, fp, #23
 80099fa:	fa43 f902 	asr.w	r9, r3, r2
 80099fe:	f1b9 0f00 	cmp.w	r9, #0
 8009a02:	dd64      	ble.n	8009ace <__kernel_rem_pio2+0x266>
 8009a04:	9b02      	ldr	r3, [sp, #8]
 8009a06:	2200      	movs	r2, #0
 8009a08:	3301      	adds	r3, #1
 8009a0a:	9302      	str	r3, [sp, #8]
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009a12:	4590      	cmp	r8, r2
 8009a14:	f300 80a1 	bgt.w	8009b5a <__kernel_rem_pio2+0x2f2>
 8009a18:	f1bb 0f00 	cmp.w	fp, #0
 8009a1c:	dd07      	ble.n	8009a2e <__kernel_rem_pio2+0x1c6>
 8009a1e:	f1bb 0f01 	cmp.w	fp, #1
 8009a22:	f000 80c1 	beq.w	8009ba8 <__kernel_rem_pio2+0x340>
 8009a26:	f1bb 0f02 	cmp.w	fp, #2
 8009a2a:	f000 80c8 	beq.w	8009bbe <__kernel_rem_pio2+0x356>
 8009a2e:	f1b9 0f02 	cmp.w	r9, #2
 8009a32:	d14c      	bne.n	8009ace <__kernel_rem_pio2+0x266>
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	4955      	ldr	r1, [pc, #340]	@ (8009b90 <__kernel_rem_pio2+0x328>)
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f7f6 fc44 	bl	80002c8 <__aeabi_dsub>
 8009a40:	4606      	mov	r6, r0
 8009a42:	460f      	mov	r7, r1
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	d042      	beq.n	8009ace <__kernel_rem_pio2+0x266>
 8009a48:	4658      	mov	r0, fp
 8009a4a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009b80 <__kernel_rem_pio2+0x318>
 8009a4e:	f7ff fe53 	bl	80096f8 <scalbn>
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	ec53 2b10 	vmov	r2, r3, d0
 8009a5a:	f7f6 fc35 	bl	80002c8 <__aeabi_dsub>
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	e034      	b.n	8009ace <__kernel_rem_pio2+0x266>
 8009a64:	4b4b      	ldr	r3, [pc, #300]	@ (8009b94 <__kernel_rem_pio2+0x32c>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6c:	f7f6 fde4 	bl	8000638 <__aeabi_dmul>
 8009a70:	f7f7 f892 	bl	8000b98 <__aeabi_d2iz>
 8009a74:	f7f6 fd76 	bl	8000564 <__aeabi_i2d>
 8009a78:	4b47      	ldr	r3, [pc, #284]	@ (8009b98 <__kernel_rem_pio2+0x330>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	f7f6 fdda 	bl	8000638 <__aeabi_dmul>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8c:	f7f6 fc1c 	bl	80002c8 <__aeabi_dsub>
 8009a90:	f7f7 f882 	bl	8000b98 <__aeabi_d2iz>
 8009a94:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009a98:	f849 0b04 	str.w	r0, [r9], #4
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7f6 fc14 	bl	80002cc <__adddf3>
 8009aa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aac:	e75f      	b.n	800996e <__kernel_rem_pio2+0x106>
 8009aae:	d107      	bne.n	8009ac0 <__kernel_rem_pio2+0x258>
 8009ab0:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ab4:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aba:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009abe:	e79e      	b.n	80099fe <__kernel_rem_pio2+0x196>
 8009ac0:	4b36      	ldr	r3, [pc, #216]	@ (8009b9c <__kernel_rem_pio2+0x334>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f7f7 f83e 	bl	8000b44 <__aeabi_dcmpge>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d143      	bne.n	8009b54 <__kernel_rem_pio2+0x2ec>
 8009acc:	4681      	mov	r9, r0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f7 f817 	bl	8000b08 <__aeabi_dcmpeq>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f000 80c1 	beq.w	8009c62 <__kernel_rem_pio2+0x3fa>
 8009ae0:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	9900      	ldr	r1, [sp, #0]
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	da70      	bge.n	8009bce <__kernel_rem_pio2+0x366>
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	f000 808b 	beq.w	8009c08 <__kernel_rem_pio2+0x3a0>
 8009af2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009af6:	ab0c      	add	r3, sp, #48	@ 0x30
 8009af8:	f1ab 0b18 	sub.w	fp, fp, #24
 8009afc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f6      	beq.n	8009af2 <__kernel_rem_pio2+0x28a>
 8009b04:	4658      	mov	r0, fp
 8009b06:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009b80 <__kernel_rem_pio2+0x318>
 8009b0a:	f7ff fdf5 	bl	80096f8 <scalbn>
 8009b0e:	f108 0301 	add.w	r3, r8, #1
 8009b12:	00da      	lsls	r2, r3, #3
 8009b14:	9205      	str	r2, [sp, #20]
 8009b16:	ec55 4b10 	vmov	r4, r5, d0
 8009b1a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009b1c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009b94 <__kernel_rem_pio2+0x32c>
 8009b20:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009b24:	4646      	mov	r6, r8
 8009b26:	f04f 0a00 	mov.w	sl, #0
 8009b2a:	2e00      	cmp	r6, #0
 8009b2c:	f280 80d1 	bge.w	8009cd2 <__kernel_rem_pio2+0x46a>
 8009b30:	4644      	mov	r4, r8
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	f2c0 80ff 	blt.w	8009d36 <__kernel_rem_pio2+0x4ce>
 8009b38:	4b19      	ldr	r3, [pc, #100]	@ (8009ba0 <__kernel_rem_pio2+0x338>)
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009b3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b42:	9306      	str	r3, [sp, #24]
 8009b44:	f04f 0a00 	mov.w	sl, #0
 8009b48:	f04f 0b00 	mov.w	fp, #0
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	eba8 0504 	sub.w	r5, r8, r4
 8009b52:	e0e4      	b.n	8009d1e <__kernel_rem_pio2+0x4b6>
 8009b54:	f04f 0902 	mov.w	r9, #2
 8009b58:	e754      	b.n	8009a04 <__kernel_rem_pio2+0x19c>
 8009b5a:	f854 3b04 	ldr.w	r3, [r4], #4
 8009b5e:	bb0d      	cbnz	r5, 8009ba4 <__kernel_rem_pio2+0x33c>
 8009b60:	b123      	cbz	r3, 8009b6c <__kernel_rem_pio2+0x304>
 8009b62:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009b66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	3201      	adds	r2, #1
 8009b6e:	461d      	mov	r5, r3
 8009b70:	e74f      	b.n	8009a12 <__kernel_rem_pio2+0x1aa>
 8009b72:	bf00      	nop
 8009b74:	f3af 8000 	nop.w
	...
 8009b84:	3ff00000 	.word	0x3ff00000
 8009b88:	0800a788 	.word	0x0800a788
 8009b8c:	40200000 	.word	0x40200000
 8009b90:	3ff00000 	.word	0x3ff00000
 8009b94:	3e700000 	.word	0x3e700000
 8009b98:	41700000 	.word	0x41700000
 8009b9c:	3fe00000 	.word	0x3fe00000
 8009ba0:	0800a748 	.word	0x0800a748
 8009ba4:	1acb      	subs	r3, r1, r3
 8009ba6:	e7de      	b.n	8009b66 <__kernel_rem_pio2+0x2fe>
 8009ba8:	f108 32ff 	add.w	r2, r8, #4294967295
 8009bac:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009bb6:	a90c      	add	r1, sp, #48	@ 0x30
 8009bb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bbc:	e737      	b.n	8009a2e <__kernel_rem_pio2+0x1c6>
 8009bbe:	f108 32ff 	add.w	r2, r8, #4294967295
 8009bc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bcc:	e7f3      	b.n	8009bb6 <__kernel_rem_pio2+0x34e>
 8009bce:	a90c      	add	r1, sp, #48	@ 0x30
 8009bd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	e785      	b.n	8009ae6 <__kernel_rem_pio2+0x27e>
 8009bda:	3401      	adds	r4, #1
 8009bdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	d0fa      	beq.n	8009bda <__kernel_rem_pio2+0x372>
 8009be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bea:	eb0d 0503 	add.w	r5, sp, r3
 8009bee:	9b06      	ldr	r3, [sp, #24]
 8009bf0:	aa20      	add	r2, sp, #128	@ 0x80
 8009bf2:	4443      	add	r3, r8
 8009bf4:	f108 0701 	add.w	r7, r8, #1
 8009bf8:	3d98      	subs	r5, #152	@ 0x98
 8009bfa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009bfe:	4444      	add	r4, r8
 8009c00:	42bc      	cmp	r4, r7
 8009c02:	da04      	bge.n	8009c0e <__kernel_rem_pio2+0x3a6>
 8009c04:	46a0      	mov	r8, r4
 8009c06:	e6a2      	b.n	800994e <__kernel_rem_pio2+0xe6>
 8009c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0a:	2401      	movs	r4, #1
 8009c0c:	e7e6      	b.n	8009bdc <__kernel_rem_pio2+0x374>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c10:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009c14:	f7f6 fca6 	bl	8000564 <__aeabi_i2d>
 8009c18:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009ed8 <__kernel_rem_pio2+0x670>
 8009c1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c28:	46b2      	mov	sl, r6
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	9b05      	ldr	r3, [sp, #20]
 8009c30:	4598      	cmp	r8, r3
 8009c32:	dd05      	ble.n	8009c40 <__kernel_rem_pio2+0x3d8>
 8009c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c38:	3701      	adds	r7, #1
 8009c3a:	eca5 7b02 	vstmia	r5!, {d7}
 8009c3e:	e7df      	b.n	8009c00 <__kernel_rem_pio2+0x398>
 8009c40:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009c44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009c48:	f7f6 fcf6 	bl	8000638 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c54:	f7f6 fb3a 	bl	80002cc <__adddf3>
 8009c58:	f108 0801 	add.w	r8, r8, #1
 8009c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c60:	e7e5      	b.n	8009c2e <__kernel_rem_pio2+0x3c6>
 8009c62:	f1cb 0000 	rsb	r0, fp, #0
 8009c66:	ec47 6b10 	vmov	d0, r6, r7
 8009c6a:	f7ff fd45 	bl	80096f8 <scalbn>
 8009c6e:	ec55 4b10 	vmov	r4, r5, d0
 8009c72:	4b9b      	ldr	r3, [pc, #620]	@ (8009ee0 <__kernel_rem_pio2+0x678>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	4620      	mov	r0, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f7f6 ff63 	bl	8000b44 <__aeabi_dcmpge>
 8009c7e:	b300      	cbz	r0, 8009cc2 <__kernel_rem_pio2+0x45a>
 8009c80:	4b98      	ldr	r3, [pc, #608]	@ (8009ee4 <__kernel_rem_pio2+0x67c>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fcd6 	bl	8000638 <__aeabi_dmul>
 8009c8c:	f7f6 ff84 	bl	8000b98 <__aeabi_d2iz>
 8009c90:	4606      	mov	r6, r0
 8009c92:	f7f6 fc67 	bl	8000564 <__aeabi_i2d>
 8009c96:	4b92      	ldr	r3, [pc, #584]	@ (8009ee0 <__kernel_rem_pio2+0x678>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7f6 fccd 	bl	8000638 <__aeabi_dmul>
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7f6 fb0f 	bl	80002c8 <__aeabi_dsub>
 8009caa:	f7f6 ff75 	bl	8000b98 <__aeabi_d2iz>
 8009cae:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cb0:	f10b 0b18 	add.w	fp, fp, #24
 8009cb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009cb8:	f108 0801 	add.w	r8, r8, #1
 8009cbc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009cc0:	e720      	b.n	8009b04 <__kernel_rem_pio2+0x29c>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f7f6 ff67 	bl	8000b98 <__aeabi_d2iz>
 8009cca:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ccc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009cd0:	e718      	b.n	8009b04 <__kernel_rem_pio2+0x29c>
 8009cd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009cd8:	f7f6 fc44 	bl	8000564 <__aeabi_i2d>
 8009cdc:	4622      	mov	r2, r4
 8009cde:	462b      	mov	r3, r5
 8009ce0:	f7f6 fcaa 	bl	8000638 <__aeabi_dmul>
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009cea:	465b      	mov	r3, fp
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f6 fca2 	bl	8000638 <__aeabi_dmul>
 8009cf4:	3e01      	subs	r6, #1
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	e716      	b.n	8009b2a <__kernel_rem_pio2+0x2c2>
 8009cfc:	9906      	ldr	r1, [sp, #24]
 8009cfe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009d02:	9106      	str	r1, [sp, #24]
 8009d04:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009d08:	f7f6 fc96 	bl	8000638 <__aeabi_dmul>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	f7f6 fada 	bl	80002cc <__adddf3>
 8009d18:	3601      	adds	r6, #1
 8009d1a:	4682      	mov	sl, r0
 8009d1c:	468b      	mov	fp, r1
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	429e      	cmp	r6, r3
 8009d22:	dc01      	bgt.n	8009d28 <__kernel_rem_pio2+0x4c0>
 8009d24:	42ae      	cmp	r6, r5
 8009d26:	dde9      	ble.n	8009cfc <__kernel_rem_pio2+0x494>
 8009d28:	ab48      	add	r3, sp, #288	@ 0x120
 8009d2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d2e:	e9c5 ab00 	strd	sl, fp, [r5]
 8009d32:	3c01      	subs	r4, #1
 8009d34:	e6fd      	b.n	8009b32 <__kernel_rem_pio2+0x2ca>
 8009d36:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	dc0b      	bgt.n	8009d54 <__kernel_rem_pio2+0x4ec>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc35      	bgt.n	8009dac <__kernel_rem_pio2+0x544>
 8009d40:	d059      	beq.n	8009df6 <__kernel_rem_pio2+0x58e>
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	f003 0007 	and.w	r0, r3, #7
 8009d48:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009d4c:	ecbd 8b02 	vpop	{d8}
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d1f3      	bne.n	8009d42 <__kernel_rem_pio2+0x4da>
 8009d5a:	9b05      	ldr	r3, [sp, #20]
 8009d5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d60:	eb0d 0403 	add.w	r4, sp, r3
 8009d64:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009d68:	4625      	mov	r5, r4
 8009d6a:	46c2      	mov	sl, r8
 8009d6c:	f1ba 0f00 	cmp.w	sl, #0
 8009d70:	dc69      	bgt.n	8009e46 <__kernel_rem_pio2+0x5de>
 8009d72:	4645      	mov	r5, r8
 8009d74:	2d01      	cmp	r5, #1
 8009d76:	f300 8087 	bgt.w	8009e88 <__kernel_rem_pio2+0x620>
 8009d7a:	9c05      	ldr	r4, [sp, #20]
 8009d7c:	ab48      	add	r3, sp, #288	@ 0x120
 8009d7e:	441c      	add	r4, r3
 8009d80:	2000      	movs	r0, #0
 8009d82:	2100      	movs	r1, #0
 8009d84:	f1b8 0f01 	cmp.w	r8, #1
 8009d88:	f300 809c 	bgt.w	8009ec4 <__kernel_rem_pio2+0x65c>
 8009d8c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009d90:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009d94:	f1b9 0f00 	cmp.w	r9, #0
 8009d98:	f040 80a6 	bne.w	8009ee8 <__kernel_rem_pio2+0x680>
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	e9c3 5600 	strd	r5, r6, [r3]
 8009da2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009da6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009daa:	e7ca      	b.n	8009d42 <__kernel_rem_pio2+0x4da>
 8009dac:	9d05      	ldr	r5, [sp, #20]
 8009dae:	ab48      	add	r3, sp, #288	@ 0x120
 8009db0:	441d      	add	r5, r3
 8009db2:	4644      	mov	r4, r8
 8009db4:	2000      	movs	r0, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	2c00      	cmp	r4, #0
 8009dba:	da35      	bge.n	8009e28 <__kernel_rem_pio2+0x5c0>
 8009dbc:	f1b9 0f00 	cmp.w	r9, #0
 8009dc0:	d038      	beq.n	8009e34 <__kernel_rem_pio2+0x5cc>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dc8:	9c04      	ldr	r4, [sp, #16]
 8009dca:	e9c4 2300 	strd	r2, r3, [r4]
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009dd6:	f7f6 fa77 	bl	80002c8 <__aeabi_dsub>
 8009dda:	ad4a      	add	r5, sp, #296	@ 0x128
 8009ddc:	2401      	movs	r4, #1
 8009dde:	45a0      	cmp	r8, r4
 8009de0:	da2b      	bge.n	8009e3a <__kernel_rem_pio2+0x5d2>
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	d002      	beq.n	8009dee <__kernel_rem_pio2+0x586>
 8009de8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009dec:	4619      	mov	r1, r3
 8009dee:	9b04      	ldr	r3, [sp, #16]
 8009df0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009df4:	e7a5      	b.n	8009d42 <__kernel_rem_pio2+0x4da>
 8009df6:	9c05      	ldr	r4, [sp, #20]
 8009df8:	ab48      	add	r3, sp, #288	@ 0x120
 8009dfa:	441c      	add	r4, r3
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	f1b8 0f00 	cmp.w	r8, #0
 8009e04:	da09      	bge.n	8009e1a <__kernel_rem_pio2+0x5b2>
 8009e06:	f1b9 0f00 	cmp.w	r9, #0
 8009e0a:	d002      	beq.n	8009e12 <__kernel_rem_pio2+0x5aa>
 8009e0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e10:	4619      	mov	r1, r3
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	e9c3 0100 	strd	r0, r1, [r3]
 8009e18:	e793      	b.n	8009d42 <__kernel_rem_pio2+0x4da>
 8009e1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e1e:	f7f6 fa55 	bl	80002cc <__adddf3>
 8009e22:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e26:	e7eb      	b.n	8009e00 <__kernel_rem_pio2+0x598>
 8009e28:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009e2c:	f7f6 fa4e 	bl	80002cc <__adddf3>
 8009e30:	3c01      	subs	r4, #1
 8009e32:	e7c1      	b.n	8009db8 <__kernel_rem_pio2+0x550>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e7c6      	b.n	8009dc8 <__kernel_rem_pio2+0x560>
 8009e3a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009e3e:	f7f6 fa45 	bl	80002cc <__adddf3>
 8009e42:	3401      	adds	r4, #1
 8009e44:	e7cb      	b.n	8009dde <__kernel_rem_pio2+0x576>
 8009e46:	ed35 7b02 	vldmdb	r5!, {d7}
 8009e4a:	ed8d 7b00 	vstr	d7, [sp]
 8009e4e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009e52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e56:	ec53 2b17 	vmov	r2, r3, d7
 8009e5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e5e:	f7f6 fa35 	bl	80002cc <__adddf3>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4606      	mov	r6, r0
 8009e68:	460f      	mov	r7, r1
 8009e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6e:	f7f6 fa2b 	bl	80002c8 <__aeabi_dsub>
 8009e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e76:	f7f6 fa29 	bl	80002cc <__adddf3>
 8009e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009e82:	e9c5 6700 	strd	r6, r7, [r5]
 8009e86:	e771      	b.n	8009d6c <__kernel_rem_pio2+0x504>
 8009e88:	ed34 7b02 	vldmdb	r4!, {d7}
 8009e8c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009e90:	ec51 0b17 	vmov	r0, r1, d7
 8009e94:	4652      	mov	r2, sl
 8009e96:	465b      	mov	r3, fp
 8009e98:	ed8d 7b00 	vstr	d7, [sp]
 8009e9c:	f7f6 fa16 	bl	80002cc <__adddf3>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	460f      	mov	r7, r1
 8009ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eac:	f7f6 fa0c 	bl	80002c8 <__aeabi_dsub>
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	465b      	mov	r3, fp
 8009eb4:	f7f6 fa0a 	bl	80002cc <__adddf3>
 8009eb8:	3d01      	subs	r5, #1
 8009eba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ebe:	e9c4 6700 	strd	r6, r7, [r4]
 8009ec2:	e757      	b.n	8009d74 <__kernel_rem_pio2+0x50c>
 8009ec4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ec8:	f7f6 fa00 	bl	80002cc <__adddf3>
 8009ecc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ed0:	e758      	b.n	8009d84 <__kernel_rem_pio2+0x51c>
 8009ed2:	bf00      	nop
 8009ed4:	f3af 8000 	nop.w
	...
 8009ee0:	41700000 	.word	0x41700000
 8009ee4:	3e700000 	.word	0x3e700000
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	9a04      	ldr	r2, [sp, #16]
 8009eec:	601d      	str	r5, [r3, #0]
 8009eee:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009ef2:	605c      	str	r4, [r3, #4]
 8009ef4:	609f      	str	r7, [r3, #8]
 8009ef6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009efa:	60d3      	str	r3, [r2, #12]
 8009efc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f00:	6110      	str	r0, [r2, #16]
 8009f02:	6153      	str	r3, [r2, #20]
 8009f04:	e71d      	b.n	8009d42 <__kernel_rem_pio2+0x4da>
 8009f06:	bf00      	nop

08009f08 <floor>:
 8009f08:	ec51 0b10 	vmov	r0, r1, d0
 8009f0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009f18:	2e13      	cmp	r6, #19
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	4680      	mov	r8, r0
 8009f20:	dc34      	bgt.n	8009f8c <floor+0x84>
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	da17      	bge.n	8009f56 <floor+0x4e>
 8009f26:	a332      	add	r3, pc, #200	@ (adr r3, 8009ff0 <floor+0xe8>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	f7f6 f9ce 	bl	80002cc <__adddf3>
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	f7f6 fe10 	bl	8000b58 <__aeabi_dcmpgt>
 8009f38:	b150      	cbz	r0, 8009f50 <floor+0x48>
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	da55      	bge.n	8009fea <floor+0xe2>
 8009f3e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009f42:	432c      	orrs	r4, r5
 8009f44:	2500      	movs	r5, #0
 8009f46:	42ac      	cmp	r4, r5
 8009f48:	4c2b      	ldr	r4, [pc, #172]	@ (8009ff8 <floor+0xf0>)
 8009f4a:	bf08      	it	eq
 8009f4c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	e023      	b.n	8009f9e <floor+0x96>
 8009f56:	4f29      	ldr	r7, [pc, #164]	@ (8009ffc <floor+0xf4>)
 8009f58:	4137      	asrs	r7, r6
 8009f5a:	ea01 0307 	and.w	r3, r1, r7
 8009f5e:	4303      	orrs	r3, r0
 8009f60:	d01d      	beq.n	8009f9e <floor+0x96>
 8009f62:	a323      	add	r3, pc, #140	@ (adr r3, 8009ff0 <floor+0xe8>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f9b0 	bl	80002cc <__adddf3>
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f7f6 fdf2 	bl	8000b58 <__aeabi_dcmpgt>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d0eb      	beq.n	8009f50 <floor+0x48>
 8009f78:	2c00      	cmp	r4, #0
 8009f7a:	bfbe      	ittt	lt
 8009f7c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009f80:	4133      	asrlt	r3, r6
 8009f82:	18e4      	addlt	r4, r4, r3
 8009f84:	ea24 0407 	bic.w	r4, r4, r7
 8009f88:	2500      	movs	r5, #0
 8009f8a:	e7e1      	b.n	8009f50 <floor+0x48>
 8009f8c:	2e33      	cmp	r6, #51	@ 0x33
 8009f8e:	dd0a      	ble.n	8009fa6 <floor+0x9e>
 8009f90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009f94:	d103      	bne.n	8009f9e <floor+0x96>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	f7f6 f997 	bl	80002cc <__adddf3>
 8009f9e:	ec41 0b10 	vmov	d0, r0, r1
 8009fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009faa:	f04f 37ff 	mov.w	r7, #4294967295
 8009fae:	40df      	lsrs	r7, r3
 8009fb0:	4207      	tst	r7, r0
 8009fb2:	d0f4      	beq.n	8009f9e <floor+0x96>
 8009fb4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ff0 <floor+0xe8>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 f987 	bl	80002cc <__adddf3>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f7f6 fdc9 	bl	8000b58 <__aeabi_dcmpgt>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d0c2      	beq.n	8009f50 <floor+0x48>
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	da0a      	bge.n	8009fe4 <floor+0xdc>
 8009fce:	2e14      	cmp	r6, #20
 8009fd0:	d101      	bne.n	8009fd6 <floor+0xce>
 8009fd2:	3401      	adds	r4, #1
 8009fd4:	e006      	b.n	8009fe4 <floor+0xdc>
 8009fd6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009fda:	2301      	movs	r3, #1
 8009fdc:	40b3      	lsls	r3, r6
 8009fde:	441d      	add	r5, r3
 8009fe0:	4545      	cmp	r5, r8
 8009fe2:	d3f6      	bcc.n	8009fd2 <floor+0xca>
 8009fe4:	ea25 0507 	bic.w	r5, r5, r7
 8009fe8:	e7b2      	b.n	8009f50 <floor+0x48>
 8009fea:	2500      	movs	r5, #0
 8009fec:	462c      	mov	r4, r5
 8009fee:	e7af      	b.n	8009f50 <floor+0x48>
 8009ff0:	8800759c 	.word	0x8800759c
 8009ff4:	7e37e43c 	.word	0x7e37e43c
 8009ff8:	bff00000 	.word	0xbff00000
 8009ffc:	000fffff 	.word	0x000fffff

0800a000 <_init>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr

0800a00c <_fini>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr
