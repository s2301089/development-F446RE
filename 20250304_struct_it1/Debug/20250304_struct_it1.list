
20250304_struct_it1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004374  08004374  00005374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800452c  0800452c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004534  08004534  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004538  08004538  00005538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800453c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  080045a4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080045a4  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a460  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00012208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  00012a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022090  00000000  00000000  000130c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5c2  00000000  00000000  00035152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca810  00000000  00000000  00040714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010af24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  0010af68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0010d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800435c 	.word	0x0800435c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800435c 	.word	0x0800435c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getData>:
static uint8_t Adata[REV_SIZE] = {};
static uint8_t Gdata = 0;
static bool DF = 0;
bool AFF = 0;

void getData(UART_HandleTypeDef* huart,getdata* revdata){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
//	printf("getData\r\n");
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	490a      	ldr	r1, [pc, #40]	@ (8000614 <getData+0x38>)
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f001 feeb 	bl	80023c6 <HAL_UART_Receive_IT>
	if(DF == 1){
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <getData+0x3c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d005      	beq.n	8000604 <getData+0x28>
		AddStruct(revdata);
 80005f8:	6838      	ldr	r0, [r7, #0]
 80005fa:	f000 f891 	bl	8000720 <AddStruct>
		DF = 0;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <getData+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
//		return 0;
	}
	printf("snct\r\n");
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <getData+0x40>)
 8000606:	f002 ff83 	bl	8003510 <puts>
//	return -1;
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008f 	.word	0x2000008f
 8000618:	20000090 	.word	0x20000090
 800061c:	08004374 	.word	0x08004374

08000620 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	static int Gcount;
	static int timeout;
	if(Gdata == 0xaf){
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <HAL_UART_RxCpltCallback+0x94>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2baf      	cmp	r3, #175	@ 0xaf
 800062e:	d106      	bne.n	800063e <HAL_UART_RxCpltCallback+0x1e>
		AFF = true;
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <HAL_UART_RxCpltCallback+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
		Gcount = 0;
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	e00b      	b.n	8000656 <HAL_UART_RxCpltCallback+0x36>
	}else{
		timeout++;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <HAL_UART_RxCpltCallback+0xa0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <HAL_UART_RxCpltCallback+0xa0>)
 8000646:	6013      	str	r3, [r2, #0]
		if(timeout >= TIMEOUT_MAX){
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <HAL_UART_RxCpltCallback+0xa0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b09      	cmp	r3, #9
 800064e:	dd02      	ble.n	8000656 <HAL_UART_RxCpltCallback+0x36>
			timeout = 0;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <HAL_UART_RxCpltCallback+0xa0>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <HAL_UART_RxCpltCallback+0x98>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d020      	beq.n	80006a0 <HAL_UART_RxCpltCallback+0x80>
		Adata[Gcount] = Gdata;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <HAL_UART_RxCpltCallback+0x94>)
 8000664:	7811      	ldrb	r1, [r2, #0]
 8000666:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <HAL_UART_RxCpltCallback+0xa4>)
 8000668:	54d1      	strb	r1, [r2, r3]
		Gcount++;
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 8000672:	6013      	str	r3, [r2, #0]
		if(Gcount == REV_SIZE){
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b0b      	cmp	r3, #11
 800067a:	d111      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0x80>
			AFF = 0;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <HAL_UART_RxCpltCallback+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
			if(ChSUM() == 0){
 8000682:	f000 f823 	bl	80006cc <ChSUM>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <HAL_UART_RxCpltCallback+0x74>
				DF = 1;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <HAL_UART_RxCpltCallback+0xa8>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e002      	b.n	800069a <HAL_UART_RxCpltCallback+0x7a>
			}else{
				DF = 0;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <HAL_UART_RxCpltCallback+0xa8>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
			}
			Gcount = 0;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_UART_RxCpltCallback+0x9c>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <HAL_UART_RxCpltCallback+0x94>)
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f001 fe8e 	bl	80023c6 <HAL_UART_Receive_IT>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000008f 	.word	0x2000008f
 80006b8:	20000091 	.word	0x20000091
 80006bc:	20000094 	.word	0x20000094
 80006c0:	20000098 	.word	0x20000098
 80006c4:	20000084 	.word	0x20000084
 80006c8:	20000090 	.word	0x20000090

080006cc <ChSUM>:

int ChSUM(void){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
	if(Adata[10] = 0xed){
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <ChSUM+0x50>)
 80006d4:	22ed      	movs	r2, #237	@ 0xed
 80006d6:	729a      	strb	r2, [r3, #10]
		uint8_t revsum = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006dc:	2301      	movs	r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	e009      	b.n	80006f6 <ChSUM+0x2a>
			revsum += Adata[i];
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <ChSUM+0x50>)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4413      	add	r3, r2
 80006ee:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2b08      	cmp	r3, #8
 80006fa:	ddf2      	ble.n	80006e2 <ChSUM+0x16>
		}
		if(revsum == Adata[9]){
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <ChSUM+0x50>)
 80006fe:	7a5b      	ldrb	r3, [r3, #9]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	429a      	cmp	r2, r3
 8000704:	d101      	bne.n	800070a <ChSUM+0x3e>
			return 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e001      	b.n	800070e <ChSUM+0x42>
		}else{
			return -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}else {
		return 1;
	}
}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000084 	.word	0x20000084

08000720 <AddStruct>:

void AddStruct(getdata* Udata){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	StructInit(Udata);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f8ad 	bl	8000888 <StructInit>
	Udata->LX = Adata[1];
 800072e:	4b55      	ldr	r3, [pc, #340]	@ (8000884 <AddStruct+0x164>)
 8000730:	785a      	ldrb	r2, [r3, #1]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 8000736:	4b53      	ldr	r3, [pc, #332]	@ (8000884 <AddStruct+0x164>)
 8000738:	789a      	ldrb	r2, [r3, #2]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 800073e:	4b51      	ldr	r3, [pc, #324]	@ (8000884 <AddStruct+0x164>)
 8000740:	795a      	ldrb	r2, [r3, #5]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8000746:	4b4f      	ldr	r3, [pc, #316]	@ (8000884 <AddStruct+0x164>)
 8000748:	78da      	ldrb	r2, [r3, #3]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800074e:	4b4d      	ldr	r3, [pc, #308]	@ (8000884 <AddStruct+0x164>)
 8000750:	791a      	ldrb	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8000756:	4b4b      	ldr	r3, [pc, #300]	@ (8000884 <AddStruct+0x164>)
 8000758:	799a      	ldrb	r2, [r3, #6]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800075e:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <AddStruct+0x164>)
 8000760:	79db      	ldrb	r3, [r3, #7]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <AddStruct+0x50>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8000770:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <AddStruct+0x164>)
 8000772:	79db      	ldrb	r3, [r3, #7]
 8000774:	f003 0302 	and.w	r3, r3, #2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <AddStruct+0x62>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8000782:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <AddStruct+0x164>)
 8000784:	79db      	ldrb	r3, [r3, #7]
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <AddStruct+0x74>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8000794:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <AddStruct+0x164>)
 8000796:	79db      	ldrb	r3, [r3, #7]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <AddStruct+0x86>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 80007a6:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <AddStruct+0x164>)
 80007a8:	79db      	ldrb	r3, [r3, #7]
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AddStruct+0x98>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 80007b8:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <AddStruct+0x164>)
 80007ba:	79db      	ldrb	r3, [r3, #7]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <AddStruct+0xaa>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <AddStruct+0x164>)
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <AddStruct+0xbc>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <AddStruct+0x164>)
 80007de:	79db      	ldrb	r3, [r3, #7]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da02      	bge.n	80007ec <AddStruct+0xcc>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2201      	movs	r2, #1
 80007ea:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <AddStruct+0x164>)
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <AddStruct+0xde>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2201      	movs	r2, #1
 80007fc:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <AddStruct+0x164>)
 8000800:	7a1b      	ldrb	r3, [r3, #8]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <AddStruct+0xf0>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2201      	movs	r2, #1
 800080e:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <AddStruct+0x164>)
 8000812:	7a1b      	ldrb	r3, [r3, #8]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <AddStruct+0x102>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <AddStruct+0x164>)
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <AddStruct+0x114>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <AddStruct+0x164>)
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <AddStruct+0x126>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2201      	movs	r2, #1
 8000844:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTION 	= 1;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <AddStruct+0x164>)
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <AddStruct+0x138>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <AddStruct+0x164>)
 800085a:	7a1b      	ldrb	r3, [r3, #8]
 800085c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <AddStruct+0x14a>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <AddStruct+0x164>)
 800086c:	7a1b      	ldrb	r3, [r3, #8]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	da03      	bge.n	800087c <AddStruct+0x15c>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	755a      	strb	r2, [r3, #21]

	return;
 800087a:	bf00      	nop
 800087c:	bf00      	nop
}
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000084 	.word	0x20000084

08000888 <StructInit>:

void StructInit(getdata* Udata){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	749a      	strb	r2, [r3, #18]
	Udata->OPTION = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	755a      	strb	r2, [r3, #21]

	return;
 8000914:	bf00      	nop
}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <AllShowP>:
			,Udata.PS
			,Udata.TOUCHPAD
			);
}

void AllShowP(getdata Udata){
 8000920:	b084      	sub	sp, #16
 8000922:	b5b0      	push	{r4, r5, r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af04      	add	r7, sp, #16
 8000928:	f107 0410 	add.w	r4, r7, #16
 800092c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"RX:%3d "
			"RY:%3d "
			"L2:%3d "
			"R2:%3d "
			"Pressed Button: "
			,Udata.LX
 8000930:	7c3b      	ldrb	r3, [r7, #16]
	printf(
 8000932:	4618      	mov	r0, r3
			,Udata.LY
 8000934:	7c7b      	ldrb	r3, [r7, #17]
	printf(
 8000936:	461c      	mov	r4, r3
			,Udata.RX
 8000938:	7cfb      	ldrb	r3, [r7, #19]
	printf(
 800093a:	461d      	mov	r5, r3
			,Udata.RY
 800093c:	7d3b      	ldrb	r3, [r7, #20]
			,Udata.L2
 800093e:	7cba      	ldrb	r2, [r7, #18]
			,Udata.R2
 8000940:	7d79      	ldrb	r1, [r7, #21]
	printf(
 8000942:	9102      	str	r1, [sp, #8]
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	462b      	mov	r3, r5
 800094a:	4622      	mov	r2, r4
 800094c:	4601      	mov	r1, r0
 800094e:	4839      	ldr	r0, [pc, #228]	@ (8000a34 <AllShowP+0x114>)
 8000950:	f002 fd76 	bl	8003440 <iprintf>
			);

	if(Udata.TRIANGLE	== 1) printf("TRIANGLE ");
 8000954:	7dbb      	ldrb	r3, [r7, #22]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <AllShowP+0x40>
 800095a:	4837      	ldr	r0, [pc, #220]	@ (8000a38 <AllShowP+0x118>)
 800095c:	f002 fd70 	bl	8003440 <iprintf>
	if(Udata.CIRCLE		== 1) printf("CIRCLE ");
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <AllShowP+0x4c>
 8000966:	4835      	ldr	r0, [pc, #212]	@ (8000a3c <AllShowP+0x11c>)
 8000968:	f002 fd6a 	bl	8003440 <iprintf>
	if(Udata.CROSS		== 1) printf("CROSS ");
 800096c:	7e3b      	ldrb	r3, [r7, #24]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <AllShowP+0x58>
 8000972:	4833      	ldr	r0, [pc, #204]	@ (8000a40 <AllShowP+0x120>)
 8000974:	f002 fd64 	bl	8003440 <iprintf>
	if(Udata.SQUARE 	== 1) printf("SQUARE ");
 8000978:	7e7b      	ldrb	r3, [r7, #25]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <AllShowP+0x64>
 800097e:	4831      	ldr	r0, [pc, #196]	@ (8000a44 <AllShowP+0x124>)
 8000980:	f002 fd5e 	bl	8003440 <iprintf>
	if(Udata.UP 		== 1) printf("UP ");
 8000984:	7ebb      	ldrb	r3, [r7, #26]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <AllShowP+0x70>
 800098a:	482f      	ldr	r0, [pc, #188]	@ (8000a48 <AllShowP+0x128>)
 800098c:	f002 fd58 	bl	8003440 <iprintf>
	if(Udata.RIGHT 		== 1) printf("RIGHT ");
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <AllShowP+0x7c>
 8000996:	482d      	ldr	r0, [pc, #180]	@ (8000a4c <AllShowP+0x12c>)
 8000998:	f002 fd52 	bl	8003440 <iprintf>
	if(Udata.DOWN 		== 1) printf("DOWN ");
 800099c:	7f3b      	ldrb	r3, [r7, #28]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <AllShowP+0x88>
 80009a2:	482b      	ldr	r0, [pc, #172]	@ (8000a50 <AllShowP+0x130>)
 80009a4:	f002 fd4c 	bl	8003440 <iprintf>
	if(Udata.LEFT 		== 1) printf("LEFT ");
 80009a8:	7f7b      	ldrb	r3, [r7, #29]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <AllShowP+0x94>
 80009ae:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <AllShowP+0x134>)
 80009b0:	f002 fd46 	bl	8003440 <iprintf>
	if(Udata.L1 		== 1) printf("L1 ");
 80009b4:	7fbb      	ldrb	r3, [r7, #30]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <AllShowP+0xa0>
 80009ba:	4827      	ldr	r0, [pc, #156]	@ (8000a58 <AllShowP+0x138>)
 80009bc:	f002 fd40 	bl	8003440 <iprintf>
	if(Udata.L3 		== 1) printf("L3 ");
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <AllShowP+0xac>
 80009c6:	4825      	ldr	r0, [pc, #148]	@ (8000a5c <AllShowP+0x13c>)
 80009c8:	f002 fd3a 	bl	8003440 <iprintf>
	if(Udata.R1 		== 1) printf("R1 ");
 80009cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <AllShowP+0xba>
 80009d4:	4822      	ldr	r0, [pc, #136]	@ (8000a60 <AllShowP+0x140>)
 80009d6:	f002 fd33 	bl	8003440 <iprintf>
	if(Udata.R3 		== 1) printf("R3 ");
 80009da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <AllShowP+0xc8>
 80009e2:	4820      	ldr	r0, [pc, #128]	@ (8000a64 <AllShowP+0x144>)
 80009e4:	f002 fd2c 	bl	8003440 <iprintf>
	if(Udata.SHARE 		== 1) printf("SHARE ");
 80009e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <AllShowP+0xd6>
 80009f0:	481d      	ldr	r0, [pc, #116]	@ (8000a68 <AllShowP+0x148>)
 80009f2:	f002 fd25 	bl	8003440 <iprintf>
	if(Udata.OPTION 	== 1) printf("OPTION ");
 80009f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <AllShowP+0xe4>
 80009fe:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <AllShowP+0x14c>)
 8000a00:	f002 fd1e 	bl	8003440 <iprintf>
	if(Udata.PS 		== 1) printf("PS ");
 8000a04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <AllShowP+0xf2>
 8000a0c:	4818      	ldr	r0, [pc, #96]	@ (8000a70 <AllShowP+0x150>)
 8000a0e:	f002 fd17 	bl	8003440 <iprintf>
	if(Udata.TOUCHPAD 	== 1) printf("TOUOCHPAD ");
 8000a12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <AllShowP+0x100>
 8000a1a:	4816      	ldr	r0, [pc, #88]	@ (8000a74 <AllShowP+0x154>)
 8000a1c:	f002 fd10 	bl	8003440 <iprintf>

	printf("\r\n");
 8000a20:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <AllShowP+0x158>)
 8000a22:	f002 fd75 	bl	8003510 <puts>
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a2e:	b004      	add	sp, #16
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	08004430 	.word	0x08004430
 8000a38:	0800446c 	.word	0x0800446c
 8000a3c:	08004478 	.word	0x08004478
 8000a40:	08004480 	.word	0x08004480
 8000a44:	08004488 	.word	0x08004488
 8000a48:	08004490 	.word	0x08004490
 8000a4c:	08004494 	.word	0x08004494
 8000a50:	0800449c 	.word	0x0800449c
 8000a54:	080044a4 	.word	0x080044a4
 8000a58:	080044ac 	.word	0x080044ac
 8000a5c:	080044b0 	.word	0x080044b0
 8000a60:	080044b4 	.word	0x080044b4
 8000a64:	080044b8 	.word	0x080044b8
 8000a68:	080044bc 	.word	0x080044bc
 8000a6c:	080044c4 	.word	0x080044c4
 8000a70:	080044cc 	.word	0x080044cc
 8000a74:	080044d0 	.word	0x080044d0
 8000a78:	080044dc 	.word	0x080044dc

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <main+0x50>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fd48 	bl	8003520 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fab2 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f81e 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f8d0 	bl	8000c3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a9c:	f000 f87a 	bl	8000b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f8a2 	bl	8000be8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getData(&huart1,&data);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <main+0x54>)
 8000aaa:	f7ff fd97 	bl	80005dc <getData>
//	  if(getData(&huart1,&data) == 0){
//		  AllShowP(data);
//	  }
	  AllShowP(data);
 8000aae:	466b      	mov	r3, sp
 8000ab0:	f107 0210 	add.w	r2, r7, #16
 8000ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab8:	6018      	str	r0, [r3, #0]
 8000aba:	3304      	adds	r3, #4
 8000abc:	8019      	strh	r1, [r3, #0]
 8000abe:	463b      	mov	r3, r7
 8000ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac2:	f7ff ff2d 	bl	8000920 <AllShowP>
	  getData(&huart1,&data);
 8000ac6:	bf00      	nop
 8000ac8:	e7ec      	b.n	8000aa4 <main+0x28>
 8000aca:	bf00      	nop
 8000acc:	20000018 	.word	0x20000018
 8000ad0:	2000009c 	.word	0x2000009c

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	@ 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2234      	movs	r2, #52	@ 0x34
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 feb0 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <SystemClock_Config+0xb8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <SystemClock_Config+0xb8>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <SystemClock_Config+0xb8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <SystemClock_Config+0xbc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <SystemClock_Config+0xbc>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <SystemClock_Config+0xbc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f8c3 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b54:	f000 f8a0 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fdea 	bl	800174c <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b7e:	f000 f88b 	bl	8000c98 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	@ 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <MX_USART1_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	f001 fb20 	bl	8002210 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f85f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000009c 	.word	0x2000009c
 8000be4:	40011000 	.word	0x40011000

08000be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <MX_USART2_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_USART2_UART_Init+0x4c>)
 8000c20:	f001 faf6 	bl	8002210 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f835 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000e4 	.word	0x200000e4
 8000c38:	40004400 	.word	0x40004400

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_GPIO_Init+0x30>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <MX_GPIO_Init+0x30>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_GPIO_Init+0x30>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char* ptr,int len){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	230a      	movs	r3, #10
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <_write+0x24>)
 8000c86:	f001 fb13 	bl	80022b0 <HAL_UART_Transmit>
	return len;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000e4 	.word	0x200000e4

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	@ 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a36      	ldr	r2, [pc, #216]	@ (8000dec <HAL_UART_MspInit+0xf8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d135      	bne.n	8000d82 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a34      	ldr	r2, [pc, #208]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d60:	2307      	movs	r3, #7
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <HAL_UART_MspInit+0x100>)
 8000d6c:	f000 fb5a 	bl	8001424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2025      	movs	r0, #37	@ 0x25
 8000d76:	f000 fa8c 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d7a:	2025      	movs	r0, #37	@ 0x25
 8000d7c:	f000 faa5 	bl	80012ca <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d80:	e030      	b.n	8000de4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <HAL_UART_MspInit+0x104>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d12b      	bne.n	8000de4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	4a0f      	ldr	r2, [pc, #60]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_UART_MspInit+0xfc>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <HAL_UART_MspInit+0x100>)
 8000de0:	f000 fb20 	bl	8001424 <HAL_GPIO_Init>
}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	@ 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40004400 	.word	0x40004400

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e52:	f000 f923 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <USART1_IRQHandler+0x10>)
 8000e62:	f001 fad5 	bl	8002410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000009c 	.word	0x2000009c

08000e70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e00a      	b.n	8000e98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e82:	f3af 8000 	nop.w
 8000e86:	4601      	mov	r1, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf0      	blt.n	8000e82 <_read+0x12>
  }

  return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_isatty>:

int _isatty(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f002 fcce 	bl	80038e4 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20020000 	.word	0x20020000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	2000012c 	.word	0x2000012c
 8000f7c:	20000280 	.word	0x20000280

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa8:	f7ff ffea 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f002 fc8d 	bl	80038f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fd51 	bl	8000a7c <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fe8:	0800453c 	.word	0x0800453c
  ldr r2, =_sbss
 8000fec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ff0:	20000280 	.word	0x20000280

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f92b 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fe3a 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f943 	bl	80012e6 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f90b 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000130 	.word	0x20000130

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000130 	.word	0x20000130

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feda 	bl	80010c4 <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d008      	beq.n	8001330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e052      	b.n	80013d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0216 	bic.w	r2, r2, #22
 800133e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <HAL_DMA_Abort+0x62>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0208 	bic.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001380:	e013      	b.n	80013aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001382:	f7ff fe9f 	bl	80010c4 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b05      	cmp	r3, #5
 800138e:	d90c      	bls.n	80013aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2220      	movs	r2, #32
 8001394:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e015      	b.n	80013d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e4      	bne.n	8001382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013bc:	223f      	movs	r2, #63	@ 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00c      	b.n	8001416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2205      	movs	r2, #5
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e165      	b.n	800170c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8154 	bne.w	8001706 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d005      	beq.n	8001476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	2b02      	cmp	r3, #2
 8001474:	d130      	bne.n	80014d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 0201 	and.w	r2, r3, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d017      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80ae 	beq.w	8001706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <HAL_GPIO_Init+0x300>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001724 <HAL_GPIO_Init+0x300>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <HAL_GPIO_Init+0x300>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a58      	ldr	r2, [pc, #352]	@ (8001728 <HAL_GPIO_Init+0x304>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4f      	ldr	r2, [pc, #316]	@ (800172c <HAL_GPIO_Init+0x308>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d025      	beq.n	800163e <HAL_GPIO_Init+0x21a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001730 <HAL_GPIO_Init+0x30c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01f      	beq.n	800163a <HAL_GPIO_Init+0x216>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <HAL_GPIO_Init+0x310>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x212>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4c      	ldr	r2, [pc, #304]	@ (8001738 <HAL_GPIO_Init+0x314>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x20e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4b      	ldr	r2, [pc, #300]	@ (800173c <HAL_GPIO_Init+0x318>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x20a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4a      	ldr	r2, [pc, #296]	@ (8001740 <HAL_GPIO_Init+0x31c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x206>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <HAL_GPIO_Init+0x320>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x202>
 8001622:	2306      	movs	r3, #6
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001626:	2307      	movs	r3, #7
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x21c>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001650:	4935      	ldr	r1, [pc, #212]	@ (8001728 <HAL_GPIO_Init+0x304>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_GPIO_Init+0x324>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <HAL_GPIO_Init+0x324>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_GPIO_Init+0x324>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <HAL_GPIO_Init+0x324>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <HAL_GPIO_Init+0x324>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <HAL_GPIO_Init+0x324>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_GPIO_Init+0x324>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001700:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <HAL_GPIO_Init+0x324>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae96 	bls.w	8001440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40013800 	.word	0x40013800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40021400 	.word	0x40021400
 8001744:	40021800 	.word	0x40021800
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fc42 	bl	80010c4 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fc3e 	bl	80010c4 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f855 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	@ (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fba2 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	080044e0 	.word	0x080044e0
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	080044f0 	.word	0x080044f0

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffdc 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	@ (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	080044f0 	.word	0x080044f0

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b0a6      	sub	sp, #152	@ 0x98
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	4bc8      	ldr	r3, [pc, #800]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f200 817e 	bhi.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x330>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019f1 	.word	0x080019f1
 80019c0:	08001cb1 	.word	0x08001cb1
 80019c4:	08001cb1 	.word	0x08001cb1
 80019c8:	08001cb1 	.word	0x08001cb1
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	08001cb1 	.word	0x08001cb1
 80019d4:	08001cb1 	.word	0x08001cb1
 80019d8:	08001cb1 	.word	0x08001cb1
 80019dc:	08001a01 	.word	0x08001a01
 80019e0:	08001cb1 	.word	0x08001cb1
 80019e4:	08001cb1 	.word	0x08001cb1
 80019e8:	08001cb1 	.word	0x08001cb1
 80019ec:	08001b6b 	.word	0x08001b6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4bb6      	ldr	r3, [pc, #728]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x34c>)
 80019f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019f6:	e15f      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4bb5      	ldr	r3, [pc, #724]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019fe:	e15b      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0c:	4bae      	ldr	r3, [pc, #696]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d031      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4bab      	ldr	r3, [pc, #684]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a30:	4ba7      	ldr	r3, [pc, #668]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a32:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a36:	462a      	mov	r2, r5
 8001a38:	fb03 f202 	mul.w	r2, r3, r2
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4621      	mov	r1, r4
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	4aa2      	ldr	r2, [pc, #648]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a48:	4621      	mov	r1, r4
 8001a4a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a50:	460a      	mov	r2, r1
 8001a52:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a56:	4413      	add	r3, r2
 8001a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a5e:	2200      	movs	r2, #0
 8001a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a62:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a6c:	f7fe fc20 	bl	80002b0 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a7a:	e064      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4b92      	ldr	r3, [pc, #584]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	2200      	movs	r2, #0
 8001a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a86:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a98:	4622      	mov	r2, r4
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	1a51      	subs	r1, r2, r1
 8001ab4:	6139      	str	r1, [r7, #16]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	eb63 0301 	sbc.w	r3, r3, r1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aca:	4659      	mov	r1, fp
 8001acc:	018b      	lsls	r3, r1, #6
 8001ace:	4651      	mov	r1, sl
 8001ad0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	018a      	lsls	r2, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ebb2 0801 	subs.w	r8, r2, r1
 8001ade:	4659      	mov	r1, fp
 8001ae0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	eb18 0303 	adds.w	r3, r8, r3
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	462b      	mov	r3, r5
 8001b06:	eb49 0303 	adc.w	r3, r9, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b18:	4629      	mov	r1, r5
 8001b1a:	028b      	lsls	r3, r1, #10
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b22:	4621      	mov	r1, r4
 8001b24:	028a      	lsls	r2, r1, #10
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2e:	2200      	movs	r2, #0
 8001b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b32:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b38:	f7fe fbba 	bl	80002b0 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b46:	4b60      	ldr	r3, [pc, #384]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	3301      	adds	r3, #1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b68:	e0a6      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6a:	4b57      	ldr	r3, [pc, #348]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b54      	ldr	r3, [pc, #336]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d02a      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b51      	ldr	r3, [pc, #324]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b94:	2100      	movs	r1, #0
 8001b96:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b98:	fb03 f201 	mul.w	r2, r3, r1
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8001baa:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bac:	460a      	mov	r2, r1
 8001bae:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bb0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bb2:	4413      	add	r3, r2
 8001bb4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bbe:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bc8:	f7fe fb72 	bl	80002b0 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd6:	e05b      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0159      	lsls	r1, r3, #5
 8001c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c06:	0150      	lsls	r0, r2, #5
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c12:	4649      	mov	r1, r9
 8001c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c30:	eb63 050b 	sbc.w	r5, r3, fp
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	00eb      	lsls	r3, r5, #3
 8001c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c42:	00e2      	lsls	r2, r4, #3
 8001c44:	4614      	mov	r4, r2
 8001c46:	461d      	mov	r5, r3
 8001c48:	4643      	mov	r3, r8
 8001c4a:	18e3      	adds	r3, r4, r3
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	464b      	mov	r3, r9
 8001c50:	eb45 0303 	adc.w	r3, r5, r3
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	61fa      	str	r2, [r7, #28]
 8001c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c82:	f7fe fb15 	bl	80002b0 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0f1b      	lsrs	r3, r3, #28
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cae:	e003      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3798      	adds	r7, #152	@ 0x98
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	017d7840 	.word	0x017d7840

08001cd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e28d      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8083 	beq.w	8001dfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cf4:	4b94      	ldr	r3, [pc, #592]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d00:	4b91      	ldr	r3, [pc, #580]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b84      	ldr	r3, [pc, #528]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x124>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e25a      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x90>
 8001d56:	4b7c      	ldr	r3, [pc, #496]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xcc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xb4>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a72      	ldr	r2, [pc, #456]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xcc>
 8001d88:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b6c      	ldr	r3, [pc, #432]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6b      	ldr	r2, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f98c 	bl	80010c4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f988 	bl	80010c4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	@ 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e21f      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b61      	ldr	r3, [pc, #388]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xdc>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f978 	bl	80010c4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f974 	bl	80010c4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e20b      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b57      	ldr	r3, [pc, #348]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x104>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06f      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e06:	4b50      	ldr	r3, [pc, #320]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d017      	beq.n	8001e42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e12:	4b4d      	ldr	r3, [pc, #308]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x186>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1d3      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f921 	bl	80010c4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f91d 	bl	80010c4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1b4      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f900 	bl	80010c4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f8fc 	bl	80010c4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e193      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f8e0 	bl	80010c4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f8dc 	bl	80010c4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e173      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x234>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f8c9 	bl	80010c4 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff f8c5 	bl	80010c4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e15c      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b8a      	ldr	r3, [pc, #552]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b83      	ldr	r3, [pc, #524]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7f      	ldr	r3, [pc, #508]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a7e      	ldr	r2, [pc, #504]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b79      	ldr	r3, [pc, #484]	@ (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b76      	ldr	r3, [pc, #472]	@ (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a75      	ldr	r2, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f885 	bl	80010c4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff f881 	bl	80010c4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e118      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x31e>
 8001fe4:	4b66      	ldr	r3, [pc, #408]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a65      	ldr	r2, [pc, #404]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x358>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x340>
 8001ffa:	4b61      	ldr	r3, [pc, #388]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	4a60      	ldr	r2, [pc, #384]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	@ 0x70
 8002006:	4b5e      	ldr	r3, [pc, #376]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a5d      	ldr	r2, [pc, #372]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x358>
 8002014:	4b5a      	ldr	r3, [pc, #360]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a59      	ldr	r2, [pc, #356]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a56      	ldr	r2, [pc, #344]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f846 	bl	80010c4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f842 	bl	80010c4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0d7      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x368>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff f830 	bl	80010c4 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff f82c 	bl	80010c4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0c1      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	4a3a      	ldr	r2, [pc, #232]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80ad 	beq.w	8002200 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d060      	beq.n	8002174 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d145      	bne.n	8002146 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <HAL_RCC_OscConfig+0x4b4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f800 	bl	80010c4 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fffc 	bl	80010c4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e093      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	071b      	lsls	r3, r3, #28
 8002112:	491b      	ldr	r1, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4b4>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe ffd1 	bl	80010c4 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe ffcd 	bl	80010c4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e064      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x452>
 8002144:	e05c      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_RCC_OscConfig+0x4b4>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe ffba 	bl	80010c4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe ffb6 	bl	80010c4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04d      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x480>
 8002172:	e045      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e040      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
 8002188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_RCC_OscConfig+0x538>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d030      	beq.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d129      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d122      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d119      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10f      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e042      	b.n	80022a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fd5c 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fdbd 	bl	8002dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d175      	bne.n	80023bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_UART_Transmit+0x2c>
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e06e      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	@ 0x21
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ee:	f7fe fee9 	bl	80010c4 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002308:	d108      	bne.n	800231c <HAL_UART_Transmit+0x6c>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e003      	b.n	8002324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002324:	e02e      	b.n	8002384 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fb1f 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e03a      	b.n	80023be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3302      	adds	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e007      	b.n	8002376 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1cb      	bne.n	8002326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	@ 0x40
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 faeb 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e006      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d112      	bne.n	8002406 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_UART_Receive_IT+0x26>
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00b      	b.n	8002408 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb12 	bl	8002a26 <UART_Start_Receive_IT>
 8002402:	4603      	mov	r3, r0
 8002404:	e000      	b.n	8002408 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0ba      	sub	sp, #232	@ 0xe8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800244e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_UART_IRQHandler+0x66>
 8002462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fbf2 	bl	8002c58 <UART_Receive_IT>
      return;
 8002474:	e25b      	b.n	800292e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80de 	beq.w	800263c <HAL_UART_IRQHandler+0x22c>
 8002480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800248c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002490:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80d1 	beq.w	800263c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_UART_IRQHandler+0xae>
 80024a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_UART_IRQHandler+0xd2>
 80024ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f043 0202 	orr.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_UART_IRQHandler+0xf6>
 80024ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f043 0204 	orr.w	r2, r3, #4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <HAL_UART_IRQHandler+0x126>
 8002512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800251e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81f2 	beq.w	8002924 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_UART_IRQHandler+0x14e>
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fb7d 	bl	8002c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_UART_IRQHandler+0x17a>
 8002582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04f      	beq.n	800262a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa85 	bl	8002a9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259a:	2b40      	cmp	r3, #64	@ 0x40
 800259c:	d141      	bne.n	8002622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3314      	adds	r3, #20
 80025a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ac:	e853 3f00 	ldrex	r3, [r3]
 80025b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1d9      	bne.n	800259e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d013      	beq.n	800261a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	4a7e      	ldr	r2, [pc, #504]	@ (80027f0 <HAL_UART_IRQHandler+0x3e0>)
 80025f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe feed 	bl	80013de <HAL_DMA_Abort_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	e00e      	b.n	8002638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f994 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	e00a      	b.n	8002638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f990 	bl	8002948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	e006      	b.n	8002638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f98c 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002636:	e175      	b.n	8002924 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	bf00      	nop
    return;
 800263a:	e173      	b.n	8002924 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 814f 	bne.w	80028e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8148 	beq.w	80028e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8141 	beq.w	80028e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	2b40      	cmp	r3, #64	@ 0x40
 8002684:	f040 80b6 	bne.w	80027f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8145 	beq.w	8002928 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026a6:	429a      	cmp	r2, r3
 80026a8:	f080 813e 	bcs.w	8002928 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026be:	f000 8088 	beq.w	80027d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026d0:	e853 3f00 	ldrex	r3, [r3]
 80026d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1d9      	bne.n	80026c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3314      	adds	r3, #20
 8002714:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800271e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002732:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002736:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800273a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800273e:	e841 2300 	strex	r3, r2, [r1]
 8002742:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1e1      	bne.n	800270e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3314      	adds	r3, #20
 8002750:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002754:	e853 3f00 	ldrex	r3, [r3]
 8002758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800275a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3314      	adds	r3, #20
 800276a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800276e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002770:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002774:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002776:	e841 2300 	strex	r3, r2, [r1]
 800277a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800277c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e3      	bne.n	800274a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a2:	f023 0310 	bic.w	r3, r3, #16
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e3      	bne.n	8002790 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fd96 	bl	80012fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8b7 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027ee:	e09b      	b.n	8002928 <HAL_UART_IRQHandler+0x518>
 80027f0:	08002b61 	.word	0x08002b61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 808e 	beq.w	800292c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8089 	beq.w	800292c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800283e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800284c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e3      	bne.n	800281a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	623b      	str	r3, [r7, #32]
   return(result);
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002876:	633a      	str	r2, [r7, #48]	@ 0x30
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800287c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e3      	bne.n	8002852 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028bc:	61fa      	str	r2, [r7, #28]
 80028be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	69b9      	ldr	r1, [r7, #24]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	617b      	str	r3, [r7, #20]
   return(result);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e3      	bne.n	8002898 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f83d 	bl	800295c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028e2:	e023      	b.n	800292c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_UART_IRQHandler+0x4f4>
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f943 	bl	8002b88 <UART_Transmit_IT>
    return;
 8002902:	e014      	b.n	800292e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00e      	beq.n	800292e <HAL_UART_IRQHandler+0x51e>
 8002910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f983 	bl	8002c28 <UART_EndTransmit_IT>
    return;
 8002922:	e004      	b.n	800292e <HAL_UART_IRQHandler+0x51e>
    return;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <HAL_UART_IRQHandler+0x51e>
      return;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_UART_IRQHandler+0x51e>
      return;
 800292c:	bf00      	nop
  }
}
 800292e:	37e8      	adds	r7, #232	@ 0xe8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	e03b      	b.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d037      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7fe fb99 	bl	80010c4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e03a      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d023      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b80      	cmp	r3, #128	@ 0x80
 80029ba:	d020      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b40      	cmp	r3, #64	@ 0x40
 80029c0:	d01d      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d116      	bne.n	80029fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f857 	bl	8002a9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2208      	movs	r2, #8
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d0b4      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2222      	movs	r2, #34	@ 0x22
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b095      	sub	sp, #84	@ 0x54
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ac2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e5      	bne.n	8002aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e5      	bne.n	8002ad6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d119      	bne.n	8002b46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f023 0310 	bic.w	r3, r3, #16
 8002b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b32:	61ba      	str	r2, [r7, #24]
 8002b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6979      	ldr	r1, [r7, #20]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e5      	bne.n	8002b12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b54:	bf00      	nop
 8002b56:	3754      	adds	r7, #84	@ 0x54
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fee4 	bl	8002948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b21      	cmp	r3, #33	@ 0x21
 8002b9a:	d13e      	bne.n	8002c1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba4:	d114      	bne.n	8002bd0 <UART_Transmit_IT+0x48>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d110      	bne.n	8002bd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	e008      	b.n	8002be2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6211      	str	r1, [r2, #32]
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fe73 	bl	8002934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	@ 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b22      	cmp	r3, #34	@ 0x22
 8002c6a:	f040 80ae 	bne.w	8002dca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c76:	d117      	bne.n	8002ca8 <UART_Receive_IT+0x50>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d113      	bne.n	8002ca8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ca6:	e026      	b.n	8002cf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cba:	d007      	beq.n	8002ccc <UART_Receive_IT+0x74>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <UART_Receive_IT+0x82>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e008      	b.n	8002cec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4619      	mov	r1, r3
 8002d04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d15d      	bne.n	8002dc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d135      	bne.n	8002dbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	613b      	str	r3, [r7, #16]
   return(result);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f023 0310 	bic.w	r3, r3, #16
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d76:	623a      	str	r2, [r7, #32]
 8002d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	69f9      	ldr	r1, [r7, #28]
 8002d7c:	6a3a      	ldr	r2, [r7, #32]
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d10a      	bne.n	8002dae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fdd1 	bl	800295c <HAL_UARTEx_RxEventCallback>
 8002dba:	e002      	b.n	8002dc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fd fc2f 	bl	8000620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e002      	b.n	8002dcc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3730      	adds	r7, #48	@ 0x30
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b0c0      	sub	sp, #256	@ 0x100
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	68d9      	ldr	r1, [r3, #12]
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	ea40 0301 	orr.w	r3, r0, r1
 8002dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e2c:	f021 010c 	bic.w	r1, r1, #12
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4e:	6999      	ldr	r1, [r3, #24]
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	ea40 0301 	orr.w	r3, r0, r1
 8002e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b8f      	ldr	r3, [pc, #572]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d005      	beq.n	8002e74 <UART_SetConfig+0xa0>
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80030a4 <UART_SetConfig+0x2d0>)
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d104      	bne.n	8002e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7fe fd70 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002e78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e7c:	e003      	b.n	8002e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e7e:	f7fe fd57 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002e82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e90:	f040 810c 	bne.w	80030ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	1891      	adds	r1, r2, r2
 8002eac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	eb12 0801 	adds.w	r8, r2, r1
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb43 0901 	adc.w	r9, r3, r1
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed6:	4690      	mov	r8, r2
 8002ed8:	4699      	mov	r9, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	eb18 0303 	adds.w	r3, r8, r3
 8002ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	eb49 0303 	adc.w	r3, r9, r3
 8002eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002efa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f02:	460b      	mov	r3, r1
 8002f04:	18db      	adds	r3, r3, r3
 8002f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f08:	4613      	mov	r3, r2
 8002f0a:	eb42 0303 	adc.w	r3, r2, r3
 8002f0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f18:	f7fd f9ca 	bl	80002b0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b61      	ldr	r3, [pc, #388]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8002f22:	fba3 2302 	umull	r2, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	011c      	lsls	r4, r3, #4
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f44:	415b      	adcs	r3, r3
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f52:	4649      	mov	r1, r9
 8002f54:	eb43 0b01 	adc.w	fp, r3, r1
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6c:	4692      	mov	sl, r2
 8002f6e:	469b      	mov	fp, r3
 8002f70:	4643      	mov	r3, r8
 8002f72:	eb1a 0303 	adds.w	r3, sl, r3
 8002f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	18db      	adds	r3, r3, r3
 8002f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	eb42 0303 	adc.w	r3, r2, r3
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fae:	f7fd f97f 	bl	80002b0 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8002fba:	fba3 2301 	umull	r2, r3, r3, r1
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2264      	movs	r2, #100	@ 0x64
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	1acb      	subs	r3, r1, r3
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fce:	4b36      	ldr	r3, [pc, #216]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8002fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fdc:	441c      	add	r4, r3
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003000:	4641      	mov	r1, r8
 8003002:	1851      	adds	r1, r2, r1
 8003004:	6339      	str	r1, [r7, #48]	@ 0x30
 8003006:	4649      	mov	r1, r9
 8003008:	414b      	adcs	r3, r1
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003018:	4659      	mov	r1, fp
 800301a:	00cb      	lsls	r3, r1, #3
 800301c:	4651      	mov	r1, sl
 800301e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003022:	4651      	mov	r1, sl
 8003024:	00ca      	lsls	r2, r1, #3
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	4603      	mov	r3, r0
 800302c:	4642      	mov	r2, r8
 800302e:	189b      	adds	r3, r3, r2
 8003030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003034:	464b      	mov	r3, r9
 8003036:	460a      	mov	r2, r1
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800304c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003054:	460b      	mov	r3, r1
 8003056:	18db      	adds	r3, r3, r3
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305a:	4613      	mov	r3, r2
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800306a:	f7fd f921 	bl	80002b0 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	@ 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	3332      	adds	r3, #50	@ 0x32
 8003086:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 0207 	and.w	r2, r3, #7
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4422      	add	r2, r4
 800309a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800309c:	e106      	b.n	80032ac <UART_SetConfig+0x4d8>
 800309e:	bf00      	nop
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40011400 	.word	0x40011400
 80030a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	6239      	str	r1, [r7, #32]
 80030c6:	415b      	adcs	r3, r3
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ce:	4641      	mov	r1, r8
 80030d0:	1854      	adds	r4, r2, r1
 80030d2:	4649      	mov	r1, r9
 80030d4:	eb43 0501 	adc.w	r5, r3, r1
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	00eb      	lsls	r3, r5, #3
 80030e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e6:	00e2      	lsls	r2, r4, #3
 80030e8:	4614      	mov	r4, r2
 80030ea:	461d      	mov	r5, r3
 80030ec:	4643      	mov	r3, r8
 80030ee:	18e3      	adds	r3, r4, r3
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030f4:	464b      	mov	r3, r9
 80030f6:	eb45 0303 	adc.w	r3, r5, r3
 80030fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800310a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800311a:	4629      	mov	r1, r5
 800311c:	008b      	lsls	r3, r1, #2
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003124:	4621      	mov	r1, r4
 8003126:	008a      	lsls	r2, r1, #2
 8003128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800312c:	f7fd f8c0 	bl	80002b0 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4b60      	ldr	r3, [pc, #384]	@ (80032b8 <UART_SetConfig+0x4e4>)
 8003136:	fba3 2302 	umull	r2, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	011c      	lsls	r4, r3, #4
 800313e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003148:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800314c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	1891      	adds	r1, r2, r2
 8003156:	61b9      	str	r1, [r7, #24]
 8003158:	415b      	adcs	r3, r3
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003160:	4641      	mov	r1, r8
 8003162:	1851      	adds	r1, r2, r1
 8003164:	6139      	str	r1, [r7, #16]
 8003166:	4649      	mov	r1, r9
 8003168:	414b      	adcs	r3, r1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003178:	4659      	mov	r1, fp
 800317a:	00cb      	lsls	r3, r1, #3
 800317c:	4651      	mov	r1, sl
 800317e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003182:	4651      	mov	r1, sl
 8003184:	00ca      	lsls	r2, r1, #3
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	4603      	mov	r3, r0
 800318c:	4642      	mov	r2, r8
 800318e:	189b      	adds	r3, r3, r2
 8003190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003194:	464b      	mov	r3, r9
 8003196:	460a      	mov	r2, r1
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031b8:	4649      	mov	r1, r9
 80031ba:	008b      	lsls	r3, r1, #2
 80031bc:	4641      	mov	r1, r8
 80031be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c2:	4641      	mov	r1, r8
 80031c4:	008a      	lsls	r2, r1, #2
 80031c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031ca:	f7fd f871 	bl	80002b0 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	4b38      	ldr	r3, [pc, #224]	@ (80032b8 <UART_SetConfig+0x4e4>)
 80031d6:	fba3 2301 	umull	r2, r3, r3, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2264      	movs	r2, #100	@ 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	1acb      	subs	r3, r1, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	3332      	adds	r3, #50	@ 0x32
 80031e8:	4a33      	ldr	r2, [pc, #204]	@ (80032b8 <UART_SetConfig+0x4e4>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f4:	441c      	add	r4, r3
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80031fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003200:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	1891      	adds	r1, r2, r2
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	415b      	adcs	r3, r3
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003214:	4641      	mov	r1, r8
 8003216:	1851      	adds	r1, r2, r1
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	4649      	mov	r1, r9
 800321c:	414b      	adcs	r3, r1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800322c:	4659      	mov	r1, fp
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003236:	4651      	mov	r1, sl
 8003238:	00ca      	lsls	r2, r1, #3
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	4603      	mov	r3, r0
 8003240:	4642      	mov	r2, r8
 8003242:	189b      	adds	r3, r3, r2
 8003244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003246:	464b      	mov	r3, r9
 8003248:	460a      	mov	r2, r1
 800324a:	eb42 0303 	adc.w	r3, r2, r3
 800324e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	663b      	str	r3, [r7, #96]	@ 0x60
 800325a:	667a      	str	r2, [r7, #100]	@ 0x64
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003268:	4649      	mov	r1, r9
 800326a:	008b      	lsls	r3, r1, #2
 800326c:	4641      	mov	r1, r8
 800326e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003272:	4641      	mov	r1, r8
 8003274:	008a      	lsls	r2, r1, #2
 8003276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800327a:	f7fd f819 	bl	80002b0 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <UART_SetConfig+0x4e4>)
 8003284:	fba3 1302 	umull	r1, r3, r3, r2
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2164      	movs	r1, #100	@ 0x64
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	3332      	adds	r3, #50	@ 0x32
 8003296:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <UART_SetConfig+0x4e4>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4422      	add	r2, r4
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032b2:	46bd      	mov	sp, r7
 80032b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b8:	51eb851f 	.word	0x51eb851f

080032bc <std>:
 80032bc:	2300      	movs	r3, #0
 80032be:	b510      	push	{r4, lr}
 80032c0:	4604      	mov	r4, r0
 80032c2:	e9c0 3300 	strd	r3, r3, [r0]
 80032c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ca:	6083      	str	r3, [r0, #8]
 80032cc:	8181      	strh	r1, [r0, #12]
 80032ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80032d0:	81c2      	strh	r2, [r0, #14]
 80032d2:	6183      	str	r3, [r0, #24]
 80032d4:	4619      	mov	r1, r3
 80032d6:	2208      	movs	r2, #8
 80032d8:	305c      	adds	r0, #92	@ 0x5c
 80032da:	f000 fab5 	bl	8003848 <memset>
 80032de:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <std+0x58>)
 80032e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <std+0x5c>)
 80032e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032e6:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <std+0x60>)
 80032e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <std+0x64>)
 80032ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <std+0x68>)
 80032f0:	6224      	str	r4, [r4, #32]
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d006      	beq.n	8003304 <std+0x48>
 80032f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032fa:	4294      	cmp	r4, r2
 80032fc:	d002      	beq.n	8003304 <std+0x48>
 80032fe:	33d0      	adds	r3, #208	@ 0xd0
 8003300:	429c      	cmp	r4, r3
 8003302:	d105      	bne.n	8003310 <std+0x54>
 8003304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f000 bb14 	b.w	8003938 <__retarget_lock_init_recursive>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	08003699 	.word	0x08003699
 8003318:	080036bb 	.word	0x080036bb
 800331c:	080036f3 	.word	0x080036f3
 8003320:	08003717 	.word	0x08003717
 8003324:	20000134 	.word	0x20000134

08003328 <stdio_exit_handler>:
 8003328:	4a02      	ldr	r2, [pc, #8]	@ (8003334 <stdio_exit_handler+0xc>)
 800332a:	4903      	ldr	r1, [pc, #12]	@ (8003338 <stdio_exit_handler+0x10>)
 800332c:	4803      	ldr	r0, [pc, #12]	@ (800333c <stdio_exit_handler+0x14>)
 800332e:	f000 b869 	b.w	8003404 <_fwalk_sglue>
 8003332:	bf00      	nop
 8003334:	2000000c 	.word	0x2000000c
 8003338:	080041e5 	.word	0x080041e5
 800333c:	2000001c 	.word	0x2000001c

08003340 <cleanup_stdio>:
 8003340:	6841      	ldr	r1, [r0, #4]
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <cleanup_stdio+0x34>)
 8003344:	4299      	cmp	r1, r3
 8003346:	b510      	push	{r4, lr}
 8003348:	4604      	mov	r4, r0
 800334a:	d001      	beq.n	8003350 <cleanup_stdio+0x10>
 800334c:	f000 ff4a 	bl	80041e4 <_fflush_r>
 8003350:	68a1      	ldr	r1, [r4, #8]
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <cleanup_stdio+0x38>)
 8003354:	4299      	cmp	r1, r3
 8003356:	d002      	beq.n	800335e <cleanup_stdio+0x1e>
 8003358:	4620      	mov	r0, r4
 800335a:	f000 ff43 	bl	80041e4 <_fflush_r>
 800335e:	68e1      	ldr	r1, [r4, #12]
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <cleanup_stdio+0x3c>)
 8003362:	4299      	cmp	r1, r3
 8003364:	d004      	beq.n	8003370 <cleanup_stdio+0x30>
 8003366:	4620      	mov	r0, r4
 8003368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800336c:	f000 bf3a 	b.w	80041e4 <_fflush_r>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	bf00      	nop
 8003374:	20000134 	.word	0x20000134
 8003378:	2000019c 	.word	0x2000019c
 800337c:	20000204 	.word	0x20000204

08003380 <global_stdio_init.part.0>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <global_stdio_init.part.0+0x30>)
 8003384:	4c0b      	ldr	r4, [pc, #44]	@ (80033b4 <global_stdio_init.part.0+0x34>)
 8003386:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <global_stdio_init.part.0+0x38>)
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4620      	mov	r0, r4
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	f7ff ff94 	bl	80032bc <std>
 8003394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003398:	2201      	movs	r2, #1
 800339a:	2109      	movs	r1, #9
 800339c:	f7ff ff8e 	bl	80032bc <std>
 80033a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033a4:	2202      	movs	r2, #2
 80033a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033aa:	2112      	movs	r1, #18
 80033ac:	f7ff bf86 	b.w	80032bc <std>
 80033b0:	2000026c 	.word	0x2000026c
 80033b4:	20000134 	.word	0x20000134
 80033b8:	08003329 	.word	0x08003329

080033bc <__sfp_lock_acquire>:
 80033bc:	4801      	ldr	r0, [pc, #4]	@ (80033c4 <__sfp_lock_acquire+0x8>)
 80033be:	f000 babc 	b.w	800393a <__retarget_lock_acquire_recursive>
 80033c2:	bf00      	nop
 80033c4:	20000275 	.word	0x20000275

080033c8 <__sfp_lock_release>:
 80033c8:	4801      	ldr	r0, [pc, #4]	@ (80033d0 <__sfp_lock_release+0x8>)
 80033ca:	f000 bab7 	b.w	800393c <__retarget_lock_release_recursive>
 80033ce:	bf00      	nop
 80033d0:	20000275 	.word	0x20000275

080033d4 <__sinit>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4604      	mov	r4, r0
 80033d8:	f7ff fff0 	bl	80033bc <__sfp_lock_acquire>
 80033dc:	6a23      	ldr	r3, [r4, #32]
 80033de:	b11b      	cbz	r3, 80033e8 <__sinit+0x14>
 80033e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e4:	f7ff bff0 	b.w	80033c8 <__sfp_lock_release>
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <__sinit+0x28>)
 80033ea:	6223      	str	r3, [r4, #32]
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <__sinit+0x2c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f5      	bne.n	80033e0 <__sinit+0xc>
 80033f4:	f7ff ffc4 	bl	8003380 <global_stdio_init.part.0>
 80033f8:	e7f2      	b.n	80033e0 <__sinit+0xc>
 80033fa:	bf00      	nop
 80033fc:	08003341 	.word	0x08003341
 8003400:	2000026c 	.word	0x2000026c

08003404 <_fwalk_sglue>:
 8003404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003408:	4607      	mov	r7, r0
 800340a:	4688      	mov	r8, r1
 800340c:	4614      	mov	r4, r2
 800340e:	2600      	movs	r6, #0
 8003410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003414:	f1b9 0901 	subs.w	r9, r9, #1
 8003418:	d505      	bpl.n	8003426 <_fwalk_sglue+0x22>
 800341a:	6824      	ldr	r4, [r4, #0]
 800341c:	2c00      	cmp	r4, #0
 800341e:	d1f7      	bne.n	8003410 <_fwalk_sglue+0xc>
 8003420:	4630      	mov	r0, r6
 8003422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003426:	89ab      	ldrh	r3, [r5, #12]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d907      	bls.n	800343c <_fwalk_sglue+0x38>
 800342c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	d003      	beq.n	800343c <_fwalk_sglue+0x38>
 8003434:	4629      	mov	r1, r5
 8003436:	4638      	mov	r0, r7
 8003438:	47c0      	blx	r8
 800343a:	4306      	orrs	r6, r0
 800343c:	3568      	adds	r5, #104	@ 0x68
 800343e:	e7e9      	b.n	8003414 <_fwalk_sglue+0x10>

08003440 <iprintf>:
 8003440:	b40f      	push	{r0, r1, r2, r3}
 8003442:	b507      	push	{r0, r1, r2, lr}
 8003444:	4906      	ldr	r1, [pc, #24]	@ (8003460 <iprintf+0x20>)
 8003446:	ab04      	add	r3, sp, #16
 8003448:	6808      	ldr	r0, [r1, #0]
 800344a:	f853 2b04 	ldr.w	r2, [r3], #4
 800344e:	6881      	ldr	r1, [r0, #8]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	f000 fb9f 	bl	8003b94 <_vfiprintf_r>
 8003456:	b003      	add	sp, #12
 8003458:	f85d eb04 	ldr.w	lr, [sp], #4
 800345c:	b004      	add	sp, #16
 800345e:	4770      	bx	lr
 8003460:	20000018 	.word	0x20000018

08003464 <_puts_r>:
 8003464:	6a03      	ldr	r3, [r0, #32]
 8003466:	b570      	push	{r4, r5, r6, lr}
 8003468:	6884      	ldr	r4, [r0, #8]
 800346a:	4605      	mov	r5, r0
 800346c:	460e      	mov	r6, r1
 800346e:	b90b      	cbnz	r3, 8003474 <_puts_r+0x10>
 8003470:	f7ff ffb0 	bl	80033d4 <__sinit>
 8003474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003476:	07db      	lsls	r3, r3, #31
 8003478:	d405      	bmi.n	8003486 <_puts_r+0x22>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	0598      	lsls	r0, r3, #22
 800347e:	d402      	bmi.n	8003486 <_puts_r+0x22>
 8003480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003482:	f000 fa5a 	bl	800393a <__retarget_lock_acquire_recursive>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	0719      	lsls	r1, r3, #28
 800348a:	d502      	bpl.n	8003492 <_puts_r+0x2e>
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d135      	bne.n	80034fe <_puts_r+0x9a>
 8003492:	4621      	mov	r1, r4
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f981 	bl	800379c <__swsetup_r>
 800349a:	b380      	cbz	r0, 80034fe <_puts_r+0x9a>
 800349c:	f04f 35ff 	mov.w	r5, #4294967295
 80034a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034a2:	07da      	lsls	r2, r3, #31
 80034a4:	d405      	bmi.n	80034b2 <_puts_r+0x4e>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	059b      	lsls	r3, r3, #22
 80034aa:	d402      	bmi.n	80034b2 <_puts_r+0x4e>
 80034ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ae:	f000 fa45 	bl	800393c <__retarget_lock_release_recursive>
 80034b2:	4628      	mov	r0, r5
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da04      	bge.n	80034c4 <_puts_r+0x60>
 80034ba:	69a2      	ldr	r2, [r4, #24]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dc17      	bgt.n	80034f0 <_puts_r+0x8c>
 80034c0:	290a      	cmp	r1, #10
 80034c2:	d015      	beq.n	80034f0 <_puts_r+0x8c>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	6022      	str	r2, [r4, #0]
 80034ca:	7019      	strb	r1, [r3, #0]
 80034cc:	68a3      	ldr	r3, [r4, #8]
 80034ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034d2:	3b01      	subs	r3, #1
 80034d4:	60a3      	str	r3, [r4, #8]
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d1ed      	bne.n	80034b6 <_puts_r+0x52>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da11      	bge.n	8003502 <_puts_r+0x9e>
 80034de:	4622      	mov	r2, r4
 80034e0:	210a      	movs	r1, #10
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f91b 	bl	800371e <__swbuf_r>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d0d7      	beq.n	800349c <_puts_r+0x38>
 80034ec:	250a      	movs	r5, #10
 80034ee:	e7d7      	b.n	80034a0 <_puts_r+0x3c>
 80034f0:	4622      	mov	r2, r4
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 f913 	bl	800371e <__swbuf_r>
 80034f8:	3001      	adds	r0, #1
 80034fa:	d1e7      	bne.n	80034cc <_puts_r+0x68>
 80034fc:	e7ce      	b.n	800349c <_puts_r+0x38>
 80034fe:	3e01      	subs	r6, #1
 8003500:	e7e4      	b.n	80034cc <_puts_r+0x68>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	6022      	str	r2, [r4, #0]
 8003508:	220a      	movs	r2, #10
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e7ee      	b.n	80034ec <_puts_r+0x88>
	...

08003510 <puts>:
 8003510:	4b02      	ldr	r3, [pc, #8]	@ (800351c <puts+0xc>)
 8003512:	4601      	mov	r1, r0
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f7ff bfa5 	b.w	8003464 <_puts_r>
 800351a:	bf00      	nop
 800351c:	20000018 	.word	0x20000018

08003520 <setbuf>:
 8003520:	fab1 f281 	clz	r2, r1
 8003524:	0952      	lsrs	r2, r2, #5
 8003526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800352a:	0052      	lsls	r2, r2, #1
 800352c:	f000 b800 	b.w	8003530 <setvbuf>

08003530 <setvbuf>:
 8003530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003534:	461d      	mov	r5, r3
 8003536:	4b57      	ldr	r3, [pc, #348]	@ (8003694 <setvbuf+0x164>)
 8003538:	681f      	ldr	r7, [r3, #0]
 800353a:	4604      	mov	r4, r0
 800353c:	460e      	mov	r6, r1
 800353e:	4690      	mov	r8, r2
 8003540:	b127      	cbz	r7, 800354c <setvbuf+0x1c>
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	b913      	cbnz	r3, 800354c <setvbuf+0x1c>
 8003546:	4638      	mov	r0, r7
 8003548:	f7ff ff44 	bl	80033d4 <__sinit>
 800354c:	f1b8 0f02 	cmp.w	r8, #2
 8003550:	d006      	beq.n	8003560 <setvbuf+0x30>
 8003552:	f1b8 0f01 	cmp.w	r8, #1
 8003556:	f200 809a 	bhi.w	800368e <setvbuf+0x15e>
 800355a:	2d00      	cmp	r5, #0
 800355c:	f2c0 8097 	blt.w	800368e <setvbuf+0x15e>
 8003560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	d405      	bmi.n	8003572 <setvbuf+0x42>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	059a      	lsls	r2, r3, #22
 800356a:	d402      	bmi.n	8003572 <setvbuf+0x42>
 800356c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800356e:	f000 f9e4 	bl	800393a <__retarget_lock_acquire_recursive>
 8003572:	4621      	mov	r1, r4
 8003574:	4638      	mov	r0, r7
 8003576:	f000 fe35 	bl	80041e4 <_fflush_r>
 800357a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800357c:	b141      	cbz	r1, 8003590 <setvbuf+0x60>
 800357e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003582:	4299      	cmp	r1, r3
 8003584:	d002      	beq.n	800358c <setvbuf+0x5c>
 8003586:	4638      	mov	r0, r7
 8003588:	f000 f9da 	bl	8003940 <_free_r>
 800358c:	2300      	movs	r3, #0
 800358e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003590:	2300      	movs	r3, #0
 8003592:	61a3      	str	r3, [r4, #24]
 8003594:	6063      	str	r3, [r4, #4]
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	d503      	bpl.n	80035a4 <setvbuf+0x74>
 800359c:	6921      	ldr	r1, [r4, #16]
 800359e:	4638      	mov	r0, r7
 80035a0:	f000 f9ce 	bl	8003940 <_free_r>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	f1b8 0f02 	cmp.w	r8, #2
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	d061      	beq.n	800367a <setvbuf+0x14a>
 80035b6:	ab01      	add	r3, sp, #4
 80035b8:	466a      	mov	r2, sp
 80035ba:	4621      	mov	r1, r4
 80035bc:	4638      	mov	r0, r7
 80035be:	f000 fe39 	bl	8004234 <__swhatbuf_r>
 80035c2:	89a3      	ldrh	r3, [r4, #12]
 80035c4:	4318      	orrs	r0, r3
 80035c6:	81a0      	strh	r0, [r4, #12]
 80035c8:	bb2d      	cbnz	r5, 8003616 <setvbuf+0xe6>
 80035ca:	9d00      	ldr	r5, [sp, #0]
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 fa01 	bl	80039d4 <malloc>
 80035d2:	4606      	mov	r6, r0
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d152      	bne.n	800367e <setvbuf+0x14e>
 80035d8:	f8dd 9000 	ldr.w	r9, [sp]
 80035dc:	45a9      	cmp	r9, r5
 80035de:	d140      	bne.n	8003662 <setvbuf+0x132>
 80035e0:	f04f 35ff 	mov.w	r5, #4294967295
 80035e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e8:	f043 0202 	orr.w	r2, r3, #2
 80035ec:	81a2      	strh	r2, [r4, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	60a2      	str	r2, [r4, #8]
 80035f2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80035f6:	6022      	str	r2, [r4, #0]
 80035f8:	6122      	str	r2, [r4, #16]
 80035fa:	2201      	movs	r2, #1
 80035fc:	6162      	str	r2, [r4, #20]
 80035fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003600:	07d6      	lsls	r6, r2, #31
 8003602:	d404      	bmi.n	800360e <setvbuf+0xde>
 8003604:	0598      	lsls	r0, r3, #22
 8003606:	d402      	bmi.n	800360e <setvbuf+0xde>
 8003608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360a:	f000 f997 	bl	800393c <__retarget_lock_release_recursive>
 800360e:	4628      	mov	r0, r5
 8003610:	b003      	add	sp, #12
 8003612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003616:	2e00      	cmp	r6, #0
 8003618:	d0d8      	beq.n	80035cc <setvbuf+0x9c>
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	b913      	cbnz	r3, 8003624 <setvbuf+0xf4>
 800361e:	4638      	mov	r0, r7
 8003620:	f7ff fed8 	bl	80033d4 <__sinit>
 8003624:	f1b8 0f01 	cmp.w	r8, #1
 8003628:	bf08      	it	eq
 800362a:	89a3      	ldrheq	r3, [r4, #12]
 800362c:	6026      	str	r6, [r4, #0]
 800362e:	bf04      	itt	eq
 8003630:	f043 0301 	orreq.w	r3, r3, #1
 8003634:	81a3      	strheq	r3, [r4, #12]
 8003636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363a:	f013 0208 	ands.w	r2, r3, #8
 800363e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003642:	d01e      	beq.n	8003682 <setvbuf+0x152>
 8003644:	07d9      	lsls	r1, r3, #31
 8003646:	bf41      	itttt	mi
 8003648:	2200      	movmi	r2, #0
 800364a:	426d      	negmi	r5, r5
 800364c:	60a2      	strmi	r2, [r4, #8]
 800364e:	61a5      	strmi	r5, [r4, #24]
 8003650:	bf58      	it	pl
 8003652:	60a5      	strpl	r5, [r4, #8]
 8003654:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003656:	07d2      	lsls	r2, r2, #31
 8003658:	d401      	bmi.n	800365e <setvbuf+0x12e>
 800365a:	059b      	lsls	r3, r3, #22
 800365c:	d513      	bpl.n	8003686 <setvbuf+0x156>
 800365e:	2500      	movs	r5, #0
 8003660:	e7d5      	b.n	800360e <setvbuf+0xde>
 8003662:	4648      	mov	r0, r9
 8003664:	f000 f9b6 	bl	80039d4 <malloc>
 8003668:	4606      	mov	r6, r0
 800366a:	2800      	cmp	r0, #0
 800366c:	d0b8      	beq.n	80035e0 <setvbuf+0xb0>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	464d      	mov	r5, r9
 8003678:	e7cf      	b.n	800361a <setvbuf+0xea>
 800367a:	2500      	movs	r5, #0
 800367c:	e7b2      	b.n	80035e4 <setvbuf+0xb4>
 800367e:	46a9      	mov	r9, r5
 8003680:	e7f5      	b.n	800366e <setvbuf+0x13e>
 8003682:	60a2      	str	r2, [r4, #8]
 8003684:	e7e6      	b.n	8003654 <setvbuf+0x124>
 8003686:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003688:	f000 f958 	bl	800393c <__retarget_lock_release_recursive>
 800368c:	e7e7      	b.n	800365e <setvbuf+0x12e>
 800368e:	f04f 35ff 	mov.w	r5, #4294967295
 8003692:	e7bc      	b.n	800360e <setvbuf+0xde>
 8003694:	20000018 	.word	0x20000018

08003698 <__sread>:
 8003698:	b510      	push	{r4, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	f000 f8fc 	bl	800389c <_read_r>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	bfab      	itete	ge
 80036a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036aa:	89a3      	ldrhlt	r3, [r4, #12]
 80036ac:	181b      	addge	r3, r3, r0
 80036ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036b2:	bfac      	ite	ge
 80036b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036b6:	81a3      	strhlt	r3, [r4, #12]
 80036b8:	bd10      	pop	{r4, pc}

080036ba <__swrite>:
 80036ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036be:	461f      	mov	r7, r3
 80036c0:	898b      	ldrh	r3, [r1, #12]
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	4605      	mov	r5, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	4616      	mov	r6, r2
 80036ca:	d505      	bpl.n	80036d8 <__swrite+0x1e>
 80036cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d0:	2302      	movs	r3, #2
 80036d2:	2200      	movs	r2, #0
 80036d4:	f000 f8d0 	bl	8003878 <_lseek_r>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	4632      	mov	r2, r6
 80036e6:	463b      	mov	r3, r7
 80036e8:	4628      	mov	r0, r5
 80036ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ee:	f000 b8e7 	b.w	80038c0 <_write_r>

080036f2 <__sseek>:
 80036f2:	b510      	push	{r4, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fa:	f000 f8bd 	bl	8003878 <_lseek_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	bf15      	itete	ne
 8003704:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800370a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800370e:	81a3      	strheq	r3, [r4, #12]
 8003710:	bf18      	it	ne
 8003712:	81a3      	strhne	r3, [r4, #12]
 8003714:	bd10      	pop	{r4, pc}

08003716 <__sclose>:
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 b89d 	b.w	8003858 <_close_r>

0800371e <__swbuf_r>:
 800371e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003720:	460e      	mov	r6, r1
 8003722:	4614      	mov	r4, r2
 8003724:	4605      	mov	r5, r0
 8003726:	b118      	cbz	r0, 8003730 <__swbuf_r+0x12>
 8003728:	6a03      	ldr	r3, [r0, #32]
 800372a:	b90b      	cbnz	r3, 8003730 <__swbuf_r+0x12>
 800372c:	f7ff fe52 	bl	80033d4 <__sinit>
 8003730:	69a3      	ldr	r3, [r4, #24]
 8003732:	60a3      	str	r3, [r4, #8]
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	071a      	lsls	r2, r3, #28
 8003738:	d501      	bpl.n	800373e <__swbuf_r+0x20>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	b943      	cbnz	r3, 8003750 <__swbuf_r+0x32>
 800373e:	4621      	mov	r1, r4
 8003740:	4628      	mov	r0, r5
 8003742:	f000 f82b 	bl	800379c <__swsetup_r>
 8003746:	b118      	cbz	r0, 8003750 <__swbuf_r+0x32>
 8003748:	f04f 37ff 	mov.w	r7, #4294967295
 800374c:	4638      	mov	r0, r7
 800374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	6922      	ldr	r2, [r4, #16]
 8003754:	1a98      	subs	r0, r3, r2
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	b2f6      	uxtb	r6, r6
 800375a:	4283      	cmp	r3, r0
 800375c:	4637      	mov	r7, r6
 800375e:	dc05      	bgt.n	800376c <__swbuf_r+0x4e>
 8003760:	4621      	mov	r1, r4
 8003762:	4628      	mov	r0, r5
 8003764:	f000 fd3e 	bl	80041e4 <_fflush_r>
 8003768:	2800      	cmp	r0, #0
 800376a:	d1ed      	bne.n	8003748 <__swbuf_r+0x2a>
 800376c:	68a3      	ldr	r3, [r4, #8]
 800376e:	3b01      	subs	r3, #1
 8003770:	60a3      	str	r3, [r4, #8]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	6022      	str	r2, [r4, #0]
 8003778:	701e      	strb	r6, [r3, #0]
 800377a:	6962      	ldr	r2, [r4, #20]
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	429a      	cmp	r2, r3
 8003780:	d004      	beq.n	800378c <__swbuf_r+0x6e>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	07db      	lsls	r3, r3, #31
 8003786:	d5e1      	bpl.n	800374c <__swbuf_r+0x2e>
 8003788:	2e0a      	cmp	r6, #10
 800378a:	d1df      	bne.n	800374c <__swbuf_r+0x2e>
 800378c:	4621      	mov	r1, r4
 800378e:	4628      	mov	r0, r5
 8003790:	f000 fd28 	bl	80041e4 <_fflush_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	d0d9      	beq.n	800374c <__swbuf_r+0x2e>
 8003798:	e7d6      	b.n	8003748 <__swbuf_r+0x2a>
	...

0800379c <__swsetup_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <__swsetup_r+0xa8>)
 80037a0:	4605      	mov	r5, r0
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	460c      	mov	r4, r1
 80037a6:	b118      	cbz	r0, 80037b0 <__swsetup_r+0x14>
 80037a8:	6a03      	ldr	r3, [r0, #32]
 80037aa:	b90b      	cbnz	r3, 80037b0 <__swsetup_r+0x14>
 80037ac:	f7ff fe12 	bl	80033d4 <__sinit>
 80037b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b4:	0719      	lsls	r1, r3, #28
 80037b6:	d422      	bmi.n	80037fe <__swsetup_r+0x62>
 80037b8:	06da      	lsls	r2, r3, #27
 80037ba:	d407      	bmi.n	80037cc <__swsetup_r+0x30>
 80037bc:	2209      	movs	r2, #9
 80037be:	602a      	str	r2, [r5, #0]
 80037c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ca:	e033      	b.n	8003834 <__swsetup_r+0x98>
 80037cc:	0758      	lsls	r0, r3, #29
 80037ce:	d512      	bpl.n	80037f6 <__swsetup_r+0x5a>
 80037d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037d2:	b141      	cbz	r1, 80037e6 <__swsetup_r+0x4a>
 80037d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037d8:	4299      	cmp	r1, r3
 80037da:	d002      	beq.n	80037e2 <__swsetup_r+0x46>
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 f8af 	bl	8003940 <_free_r>
 80037e2:	2300      	movs	r3, #0
 80037e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	6063      	str	r3, [r4, #4]
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f043 0308 	orr.w	r3, r3, #8
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	b94b      	cbnz	r3, 8003816 <__swsetup_r+0x7a>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800380c:	d003      	beq.n	8003816 <__swsetup_r+0x7a>
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 fd35 	bl	8004280 <__smakebuf_r>
 8003816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800381a:	f013 0201 	ands.w	r2, r3, #1
 800381e:	d00a      	beq.n	8003836 <__swsetup_r+0x9a>
 8003820:	2200      	movs	r2, #0
 8003822:	60a2      	str	r2, [r4, #8]
 8003824:	6962      	ldr	r2, [r4, #20]
 8003826:	4252      	negs	r2, r2
 8003828:	61a2      	str	r2, [r4, #24]
 800382a:	6922      	ldr	r2, [r4, #16]
 800382c:	b942      	cbnz	r2, 8003840 <__swsetup_r+0xa4>
 800382e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003832:	d1c5      	bne.n	80037c0 <__swsetup_r+0x24>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	0799      	lsls	r1, r3, #30
 8003838:	bf58      	it	pl
 800383a:	6962      	ldrpl	r2, [r4, #20]
 800383c:	60a2      	str	r2, [r4, #8]
 800383e:	e7f4      	b.n	800382a <__swsetup_r+0x8e>
 8003840:	2000      	movs	r0, #0
 8003842:	e7f7      	b.n	8003834 <__swsetup_r+0x98>
 8003844:	20000018 	.word	0x20000018

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <_close_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d06      	ldr	r5, [pc, #24]	@ (8003874 <_close_r+0x1c>)
 800385c:	2300      	movs	r3, #0
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	f7fd fb21 	bl	8000eaa <_close>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_close_r+0x1a>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_close_r+0x1a>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	20000270 	.word	0x20000270

08003878 <_lseek_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	@ (8003898 <_lseek_r+0x20>)
 800387c:	4604      	mov	r4, r0
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	2200      	movs	r2, #0
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fd fb36 	bl	8000ef8 <_lseek>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_lseek_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_lseek_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000270 	.word	0x20000270

0800389c <_read_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	@ (80038bc <_read_r+0x20>)
 80038a0:	4604      	mov	r4, r0
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd fae0 	bl	8000e70 <_read>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_read_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_read_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	20000270 	.word	0x20000270

080038c0 <_write_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d07      	ldr	r5, [pc, #28]	@ (80038e0 <_write_r+0x20>)
 80038c4:	4604      	mov	r4, r0
 80038c6:	4608      	mov	r0, r1
 80038c8:	4611      	mov	r1, r2
 80038ca:	2200      	movs	r2, #0
 80038cc:	602a      	str	r2, [r5, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f7fd f9ce 	bl	8000c70 <_write>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_write_r+0x1e>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_write_r+0x1e>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000270 	.word	0x20000270

080038e4 <__errno>:
 80038e4:	4b01      	ldr	r3, [pc, #4]	@ (80038ec <__errno+0x8>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000018 	.word	0x20000018

080038f0 <__libc_init_array>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003928 <__libc_init_array+0x38>)
 80038f4:	4c0d      	ldr	r4, [pc, #52]	@ (800392c <__libc_init_array+0x3c>)
 80038f6:	1b64      	subs	r4, r4, r5
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	2600      	movs	r6, #0
 80038fc:	42a6      	cmp	r6, r4
 80038fe:	d109      	bne.n	8003914 <__libc_init_array+0x24>
 8003900:	4d0b      	ldr	r5, [pc, #44]	@ (8003930 <__libc_init_array+0x40>)
 8003902:	4c0c      	ldr	r4, [pc, #48]	@ (8003934 <__libc_init_array+0x44>)
 8003904:	f000 fd2a 	bl	800435c <_init>
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	2600      	movs	r6, #0
 800390e:	42a6      	cmp	r6, r4
 8003910:	d105      	bne.n	800391e <__libc_init_array+0x2e>
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	f855 3b04 	ldr.w	r3, [r5], #4
 8003918:	4798      	blx	r3
 800391a:	3601      	adds	r6, #1
 800391c:	e7ee      	b.n	80038fc <__libc_init_array+0xc>
 800391e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003922:	4798      	blx	r3
 8003924:	3601      	adds	r6, #1
 8003926:	e7f2      	b.n	800390e <__libc_init_array+0x1e>
 8003928:	08004534 	.word	0x08004534
 800392c:	08004534 	.word	0x08004534
 8003930:	08004534 	.word	0x08004534
 8003934:	08004538 	.word	0x08004538

08003938 <__retarget_lock_init_recursive>:
 8003938:	4770      	bx	lr

0800393a <__retarget_lock_acquire_recursive>:
 800393a:	4770      	bx	lr

0800393c <__retarget_lock_release_recursive>:
 800393c:	4770      	bx	lr
	...

08003940 <_free_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	2900      	cmp	r1, #0
 8003946:	d041      	beq.n	80039cc <_free_r+0x8c>
 8003948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800394c:	1f0c      	subs	r4, r1, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfb8      	it	lt
 8003952:	18e4      	addlt	r4, r4, r3
 8003954:	f000 f8e8 	bl	8003b28 <__malloc_lock>
 8003958:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <_free_r+0x90>)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	b933      	cbnz	r3, 800396c <_free_r+0x2c>
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6014      	str	r4, [r2, #0]
 8003962:	4628      	mov	r0, r5
 8003964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003968:	f000 b8e4 	b.w	8003b34 <__malloc_unlock>
 800396c:	42a3      	cmp	r3, r4
 800396e:	d908      	bls.n	8003982 <_free_r+0x42>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	1821      	adds	r1, r4, r0
 8003974:	428b      	cmp	r3, r1
 8003976:	bf01      	itttt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	1809      	addeq	r1, r1, r0
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	e7ed      	b.n	800395e <_free_r+0x1e>
 8003982:	461a      	mov	r2, r3
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b10b      	cbz	r3, 800398c <_free_r+0x4c>
 8003988:	42a3      	cmp	r3, r4
 800398a:	d9fa      	bls.n	8003982 <_free_r+0x42>
 800398c:	6811      	ldr	r1, [r2, #0]
 800398e:	1850      	adds	r0, r2, r1
 8003990:	42a0      	cmp	r0, r4
 8003992:	d10b      	bne.n	80039ac <_free_r+0x6c>
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	4401      	add	r1, r0
 8003998:	1850      	adds	r0, r2, r1
 800399a:	4283      	cmp	r3, r0
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	d1e0      	bne.n	8003962 <_free_r+0x22>
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	6053      	str	r3, [r2, #4]
 80039a6:	4408      	add	r0, r1
 80039a8:	6010      	str	r0, [r2, #0]
 80039aa:	e7da      	b.n	8003962 <_free_r+0x22>
 80039ac:	d902      	bls.n	80039b4 <_free_r+0x74>
 80039ae:	230c      	movs	r3, #12
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	e7d6      	b.n	8003962 <_free_r+0x22>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	1821      	adds	r1, r4, r0
 80039b8:	428b      	cmp	r3, r1
 80039ba:	bf04      	itt	eq
 80039bc:	6819      	ldreq	r1, [r3, #0]
 80039be:	685b      	ldreq	r3, [r3, #4]
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	bf04      	itt	eq
 80039c4:	1809      	addeq	r1, r1, r0
 80039c6:	6021      	streq	r1, [r4, #0]
 80039c8:	6054      	str	r4, [r2, #4]
 80039ca:	e7ca      	b.n	8003962 <_free_r+0x22>
 80039cc:	bd38      	pop	{r3, r4, r5, pc}
 80039ce:	bf00      	nop
 80039d0:	2000027c 	.word	0x2000027c

080039d4 <malloc>:
 80039d4:	4b02      	ldr	r3, [pc, #8]	@ (80039e0 <malloc+0xc>)
 80039d6:	4601      	mov	r1, r0
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	f000 b825 	b.w	8003a28 <_malloc_r>
 80039de:	bf00      	nop
 80039e0:	20000018 	.word	0x20000018

080039e4 <sbrk_aligned>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a24 <sbrk_aligned+0x40>)
 80039e8:	460c      	mov	r4, r1
 80039ea:	6831      	ldr	r1, [r6, #0]
 80039ec:	4605      	mov	r5, r0
 80039ee:	b911      	cbnz	r1, 80039f6 <sbrk_aligned+0x12>
 80039f0:	f000 fca4 	bl	800433c <_sbrk_r>
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 fc9f 	bl	800433c <_sbrk_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d103      	bne.n	8003a0a <sbrk_aligned+0x26>
 8003a02:	f04f 34ff 	mov.w	r4, #4294967295
 8003a06:	4620      	mov	r0, r4
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	1cc4      	adds	r4, r0, #3
 8003a0c:	f024 0403 	bic.w	r4, r4, #3
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d0f8      	beq.n	8003a06 <sbrk_aligned+0x22>
 8003a14:	1a21      	subs	r1, r4, r0
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 fc90 	bl	800433c <_sbrk_r>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d1f2      	bne.n	8003a06 <sbrk_aligned+0x22>
 8003a20:	e7ef      	b.n	8003a02 <sbrk_aligned+0x1e>
 8003a22:	bf00      	nop
 8003a24:	20000278 	.word	0x20000278

08003a28 <_malloc_r>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	1ccd      	adds	r5, r1, #3
 8003a2e:	f025 0503 	bic.w	r5, r5, #3
 8003a32:	3508      	adds	r5, #8
 8003a34:	2d0c      	cmp	r5, #12
 8003a36:	bf38      	it	cc
 8003a38:	250c      	movcc	r5, #12
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	db01      	blt.n	8003a44 <_malloc_r+0x1c>
 8003a40:	42a9      	cmp	r1, r5
 8003a42:	d904      	bls.n	8003a4e <_malloc_r+0x26>
 8003a44:	230c      	movs	r3, #12
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b24 <_malloc_r+0xfc>
 8003a52:	f000 f869 	bl	8003b28 <__malloc_lock>
 8003a56:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	bb44      	cbnz	r4, 8003ab0 <_malloc_r+0x88>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbf 	bl	80039e4 <sbrk_aligned>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	4604      	mov	r4, r0
 8003a6a:	d158      	bne.n	8003b1e <_malloc_r+0xf6>
 8003a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a70:	4627      	mov	r7, r4
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	d143      	bne.n	8003afe <_malloc_r+0xd6>
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	d04b      	beq.n	8003b12 <_malloc_r+0xea>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	4630      	mov	r0, r6
 8003a80:	eb04 0903 	add.w	r9, r4, r3
 8003a84:	f000 fc5a 	bl	800433c <_sbrk_r>
 8003a88:	4581      	cmp	r9, r0
 8003a8a:	d142      	bne.n	8003b12 <_malloc_r+0xea>
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	1a6d      	subs	r5, r5, r1
 8003a90:	4629      	mov	r1, r5
 8003a92:	4630      	mov	r0, r6
 8003a94:	f7ff ffa6 	bl	80039e4 <sbrk_aligned>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d03a      	beq.n	8003b12 <_malloc_r+0xea>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	442b      	add	r3, r5
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	bb62      	cbnz	r2, 8003b04 <_malloc_r+0xdc>
 8003aaa:	f8c8 7000 	str.w	r7, [r8]
 8003aae:	e00f      	b.n	8003ad0 <_malloc_r+0xa8>
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	1b52      	subs	r2, r2, r5
 8003ab4:	d420      	bmi.n	8003af8 <_malloc_r+0xd0>
 8003ab6:	2a0b      	cmp	r2, #11
 8003ab8:	d917      	bls.n	8003aea <_malloc_r+0xc2>
 8003aba:	1961      	adds	r1, r4, r5
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	bf18      	it	ne
 8003ac2:	6059      	strne	r1, [r3, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	bf08      	it	eq
 8003ac8:	f8c8 1000 	streq.w	r1, [r8]
 8003acc:	5162      	str	r2, [r4, r5]
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 f82f 	bl	8003b34 <__malloc_unlock>
 8003ad6:	f104 000b 	add.w	r0, r4, #11
 8003ada:	1d23      	adds	r3, r4, #4
 8003adc:	f020 0007 	bic.w	r0, r0, #7
 8003ae0:	1ac2      	subs	r2, r0, r3
 8003ae2:	bf1c      	itt	ne
 8003ae4:	1a1b      	subne	r3, r3, r0
 8003ae6:	50a3      	strne	r3, [r4, r2]
 8003ae8:	e7af      	b.n	8003a4a <_malloc_r+0x22>
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	bf0c      	ite	eq
 8003af0:	f8c8 2000 	streq.w	r2, [r8]
 8003af4:	605a      	strne	r2, [r3, #4]
 8003af6:	e7eb      	b.n	8003ad0 <_malloc_r+0xa8>
 8003af8:	4623      	mov	r3, r4
 8003afa:	6864      	ldr	r4, [r4, #4]
 8003afc:	e7ae      	b.n	8003a5c <_malloc_r+0x34>
 8003afe:	463c      	mov	r4, r7
 8003b00:	687f      	ldr	r7, [r7, #4]
 8003b02:	e7b6      	b.n	8003a72 <_malloc_r+0x4a>
 8003b04:	461a      	mov	r2, r3
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d1fb      	bne.n	8003b04 <_malloc_r+0xdc>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6053      	str	r3, [r2, #4]
 8003b10:	e7de      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b12:	230c      	movs	r3, #12
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	4630      	mov	r0, r6
 8003b18:	f000 f80c 	bl	8003b34 <__malloc_unlock>
 8003b1c:	e794      	b.n	8003a48 <_malloc_r+0x20>
 8003b1e:	6005      	str	r5, [r0, #0]
 8003b20:	e7d6      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b22:	bf00      	nop
 8003b24:	2000027c 	.word	0x2000027c

08003b28 <__malloc_lock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	@ (8003b30 <__malloc_lock+0x8>)
 8003b2a:	f7ff bf06 	b.w	800393a <__retarget_lock_acquire_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000274 	.word	0x20000274

08003b34 <__malloc_unlock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_unlock+0x8>)
 8003b36:	f7ff bf01 	b.w	800393c <__retarget_lock_release_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000274 	.word	0x20000274

08003b40 <__sfputc_r>:
 8003b40:	6893      	ldr	r3, [r2, #8]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	b410      	push	{r4}
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	da08      	bge.n	8003b5e <__sfputc_r+0x1e>
 8003b4c:	6994      	ldr	r4, [r2, #24]
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	db01      	blt.n	8003b56 <__sfputc_r+0x16>
 8003b52:	290a      	cmp	r1, #10
 8003b54:	d103      	bne.n	8003b5e <__sfputc_r+0x1e>
 8003b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b5a:	f7ff bde0 	b.w	800371e <__swbuf_r>
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	1c58      	adds	r0, r3, #1
 8003b62:	6010      	str	r0, [r2, #0]
 8003b64:	7019      	strb	r1, [r3, #0]
 8003b66:	4608      	mov	r0, r1
 8003b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <__sfputs_r>:
 8003b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b70:	4606      	mov	r6, r0
 8003b72:	460f      	mov	r7, r1
 8003b74:	4614      	mov	r4, r2
 8003b76:	18d5      	adds	r5, r2, r3
 8003b78:	42ac      	cmp	r4, r5
 8003b7a:	d101      	bne.n	8003b80 <__sfputs_r+0x12>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	e007      	b.n	8003b90 <__sfputs_r+0x22>
 8003b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b84:	463a      	mov	r2, r7
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff ffda 	bl	8003b40 <__sfputc_r>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d1f3      	bne.n	8003b78 <__sfputs_r+0xa>
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b94 <_vfiprintf_r>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	460d      	mov	r5, r1
 8003b9a:	b09d      	sub	sp, #116	@ 0x74
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	4698      	mov	r8, r3
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	b118      	cbz	r0, 8003bac <_vfiprintf_r+0x18>
 8003ba4:	6a03      	ldr	r3, [r0, #32]
 8003ba6:	b90b      	cbnz	r3, 8003bac <_vfiprintf_r+0x18>
 8003ba8:	f7ff fc14 	bl	80033d4 <__sinit>
 8003bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bae:	07d9      	lsls	r1, r3, #31
 8003bb0:	d405      	bmi.n	8003bbe <_vfiprintf_r+0x2a>
 8003bb2:	89ab      	ldrh	r3, [r5, #12]
 8003bb4:	059a      	lsls	r2, r3, #22
 8003bb6:	d402      	bmi.n	8003bbe <_vfiprintf_r+0x2a>
 8003bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bba:	f7ff febe 	bl	800393a <__retarget_lock_acquire_recursive>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	071b      	lsls	r3, r3, #28
 8003bc2:	d501      	bpl.n	8003bc8 <_vfiprintf_r+0x34>
 8003bc4:	692b      	ldr	r3, [r5, #16]
 8003bc6:	b99b      	cbnz	r3, 8003bf0 <_vfiprintf_r+0x5c>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7ff fde6 	bl	800379c <__swsetup_r>
 8003bd0:	b170      	cbz	r0, 8003bf0 <_vfiprintf_r+0x5c>
 8003bd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bd4:	07dc      	lsls	r4, r3, #31
 8003bd6:	d504      	bpl.n	8003be2 <_vfiprintf_r+0x4e>
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	b01d      	add	sp, #116	@ 0x74
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	0598      	lsls	r0, r3, #22
 8003be6:	d4f7      	bmi.n	8003bd8 <_vfiprintf_r+0x44>
 8003be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bea:	f7ff fea7 	bl	800393c <__retarget_lock_release_recursive>
 8003bee:	e7f3      	b.n	8003bd8 <_vfiprintf_r+0x44>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bfe:	2330      	movs	r3, #48	@ 0x30
 8003c00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003db0 <_vfiprintf_r+0x21c>
 8003c04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c08:	f04f 0901 	mov.w	r9, #1
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	469a      	mov	sl, r3
 8003c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c14:	b10a      	cbz	r2, 8003c1a <_vfiprintf_r+0x86>
 8003c16:	2a25      	cmp	r2, #37	@ 0x25
 8003c18:	d1f9      	bne.n	8003c0e <_vfiprintf_r+0x7a>
 8003c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c1e:	d00b      	beq.n	8003c38 <_vfiprintf_r+0xa4>
 8003c20:	465b      	mov	r3, fp
 8003c22:	4622      	mov	r2, r4
 8003c24:	4629      	mov	r1, r5
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7ff ffa1 	bl	8003b6e <__sfputs_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	f000 80a7 	beq.w	8003d80 <_vfiprintf_r+0x1ec>
 8003c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c34:	445a      	add	r2, fp
 8003c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c38:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809f 	beq.w	8003d80 <_vfiprintf_r+0x1ec>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4c:	f10a 0a01 	add.w	sl, sl, #1
 8003c50:	9304      	str	r3, [sp, #16]
 8003c52:	9307      	str	r3, [sp, #28]
 8003c54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c58:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c5a:	4654      	mov	r4, sl
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c62:	4853      	ldr	r0, [pc, #332]	@ (8003db0 <_vfiprintf_r+0x21c>)
 8003c64:	f7fc fad4 	bl	8000210 <memchr>
 8003c68:	9a04      	ldr	r2, [sp, #16]
 8003c6a:	b9d8      	cbnz	r0, 8003ca4 <_vfiprintf_r+0x110>
 8003c6c:	06d1      	lsls	r1, r2, #27
 8003c6e:	bf44      	itt	mi
 8003c70:	2320      	movmi	r3, #32
 8003c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c76:	0713      	lsls	r3, r2, #28
 8003c78:	bf44      	itt	mi
 8003c7a:	232b      	movmi	r3, #43	@ 0x2b
 8003c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c80:	f89a 3000 	ldrb.w	r3, [sl]
 8003c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c86:	d015      	beq.n	8003cb4 <_vfiprintf_r+0x120>
 8003c88:	9a07      	ldr	r2, [sp, #28]
 8003c8a:	4654      	mov	r4, sl
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f04f 0c0a 	mov.w	ip, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c98:	3b30      	subs	r3, #48	@ 0x30
 8003c9a:	2b09      	cmp	r3, #9
 8003c9c:	d94b      	bls.n	8003d36 <_vfiprintf_r+0x1a2>
 8003c9e:	b1b0      	cbz	r0, 8003cce <_vfiprintf_r+0x13a>
 8003ca0:	9207      	str	r2, [sp, #28]
 8003ca2:	e014      	b.n	8003cce <_vfiprintf_r+0x13a>
 8003ca4:	eba0 0308 	sub.w	r3, r0, r8
 8003ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8003cac:	4313      	orrs	r3, r2
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	46a2      	mov	sl, r4
 8003cb2:	e7d2      	b.n	8003c5a <_vfiprintf_r+0xc6>
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	1d19      	adds	r1, r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	9103      	str	r1, [sp, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfbb      	ittet	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc6:	9307      	strge	r3, [sp, #28]
 8003cc8:	9307      	strlt	r3, [sp, #28]
 8003cca:	bfb8      	it	lt
 8003ccc:	9204      	strlt	r2, [sp, #16]
 8003cce:	7823      	ldrb	r3, [r4, #0]
 8003cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cd2:	d10a      	bne.n	8003cea <_vfiprintf_r+0x156>
 8003cd4:	7863      	ldrb	r3, [r4, #1]
 8003cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cd8:	d132      	bne.n	8003d40 <_vfiprintf_r+0x1ac>
 8003cda:	9b03      	ldr	r3, [sp, #12]
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	9203      	str	r2, [sp, #12]
 8003ce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ce6:	3402      	adds	r4, #2
 8003ce8:	9305      	str	r3, [sp, #20]
 8003cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003dc0 <_vfiprintf_r+0x22c>
 8003cee:	7821      	ldrb	r1, [r4, #0]
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	f7fc fa8c 	bl	8000210 <memchr>
 8003cf8:	b138      	cbz	r0, 8003d0a <_vfiprintf_r+0x176>
 8003cfa:	9b04      	ldr	r3, [sp, #16]
 8003cfc:	eba0 000a 	sub.w	r0, r0, sl
 8003d00:	2240      	movs	r2, #64	@ 0x40
 8003d02:	4082      	lsls	r2, r0
 8003d04:	4313      	orrs	r3, r2
 8003d06:	3401      	adds	r4, #1
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d0e:	4829      	ldr	r0, [pc, #164]	@ (8003db4 <_vfiprintf_r+0x220>)
 8003d10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d14:	2206      	movs	r2, #6
 8003d16:	f7fc fa7b 	bl	8000210 <memchr>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d03f      	beq.n	8003d9e <_vfiprintf_r+0x20a>
 8003d1e:	4b26      	ldr	r3, [pc, #152]	@ (8003db8 <_vfiprintf_r+0x224>)
 8003d20:	bb1b      	cbnz	r3, 8003d6a <_vfiprintf_r+0x1d6>
 8003d22:	9b03      	ldr	r3, [sp, #12]
 8003d24:	3307      	adds	r3, #7
 8003d26:	f023 0307 	bic.w	r3, r3, #7
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	9303      	str	r3, [sp, #12]
 8003d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d30:	443b      	add	r3, r7
 8003d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d34:	e76a      	b.n	8003c0c <_vfiprintf_r+0x78>
 8003d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	e7a8      	b.n	8003c92 <_vfiprintf_r+0xfe>
 8003d40:	2300      	movs	r3, #0
 8003d42:	3401      	adds	r4, #1
 8003d44:	9305      	str	r3, [sp, #20]
 8003d46:	4619      	mov	r1, r3
 8003d48:	f04f 0c0a 	mov.w	ip, #10
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d52:	3a30      	subs	r2, #48	@ 0x30
 8003d54:	2a09      	cmp	r2, #9
 8003d56:	d903      	bls.n	8003d60 <_vfiprintf_r+0x1cc>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0c6      	beq.n	8003cea <_vfiprintf_r+0x156>
 8003d5c:	9105      	str	r1, [sp, #20]
 8003d5e:	e7c4      	b.n	8003cea <_vfiprintf_r+0x156>
 8003d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d64:	4604      	mov	r4, r0
 8003d66:	2301      	movs	r3, #1
 8003d68:	e7f0      	b.n	8003d4c <_vfiprintf_r+0x1b8>
 8003d6a:	ab03      	add	r3, sp, #12
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <_vfiprintf_r+0x228>)
 8003d72:	a904      	add	r1, sp, #16
 8003d74:	4630      	mov	r0, r6
 8003d76:	f3af 8000 	nop.w
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	1c78      	adds	r0, r7, #1
 8003d7e:	d1d6      	bne.n	8003d2e <_vfiprintf_r+0x19a>
 8003d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d82:	07d9      	lsls	r1, r3, #31
 8003d84:	d405      	bmi.n	8003d92 <_vfiprintf_r+0x1fe>
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	059a      	lsls	r2, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_vfiprintf_r+0x1fe>
 8003d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d8e:	f7ff fdd5 	bl	800393c <__retarget_lock_release_recursive>
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	065b      	lsls	r3, r3, #25
 8003d96:	f53f af1f 	bmi.w	8003bd8 <_vfiprintf_r+0x44>
 8003d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d9c:	e71e      	b.n	8003bdc <_vfiprintf_r+0x48>
 8003d9e:	ab03      	add	r3, sp, #12
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	462a      	mov	r2, r5
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <_vfiprintf_r+0x228>)
 8003da6:	a904      	add	r1, sp, #16
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f879 	bl	8003ea0 <_printf_i>
 8003dae:	e7e4      	b.n	8003d7a <_vfiprintf_r+0x1e6>
 8003db0:	080044f8 	.word	0x080044f8
 8003db4:	08004502 	.word	0x08004502
 8003db8:	00000000 	.word	0x00000000
 8003dbc:	08003b6f 	.word	0x08003b6f
 8003dc0:	080044fe 	.word	0x080044fe

08003dc4 <_printf_common>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	4616      	mov	r6, r2
 8003dca:	4698      	mov	r8, r3
 8003dcc:	688a      	ldr	r2, [r1, #8]
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	bfb8      	it	lt
 8003dd8:	4613      	movlt	r3, r2
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de0:	4607      	mov	r7, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	b10a      	cbz	r2, 8003dea <_printf_common+0x26>
 8003de6:	3301      	adds	r3, #1
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	0699      	lsls	r1, r3, #26
 8003dee:	bf42      	ittt	mi
 8003df0:	6833      	ldrmi	r3, [r6, #0]
 8003df2:	3302      	addmi	r3, #2
 8003df4:	6033      	strmi	r3, [r6, #0]
 8003df6:	6825      	ldr	r5, [r4, #0]
 8003df8:	f015 0506 	ands.w	r5, r5, #6
 8003dfc:	d106      	bne.n	8003e0c <_printf_common+0x48>
 8003dfe:	f104 0a19 	add.w	sl, r4, #25
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	dc26      	bgt.n	8003e5a <_printf_common+0x96>
 8003e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	3b00      	subs	r3, #0
 8003e14:	bf18      	it	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	0692      	lsls	r2, r2, #26
 8003e1a:	d42b      	bmi.n	8003e74 <_printf_common+0xb0>
 8003e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e20:	4641      	mov	r1, r8
 8003e22:	4638      	mov	r0, r7
 8003e24:	47c8      	blx	r9
 8003e26:	3001      	adds	r0, #1
 8003e28:	d01e      	beq.n	8003e68 <_printf_common+0xa4>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	f003 0306 	and.w	r3, r3, #6
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	bf02      	ittt	eq
 8003e36:	68e5      	ldreq	r5, [r4, #12]
 8003e38:	6833      	ldreq	r3, [r6, #0]
 8003e3a:	1aed      	subeq	r5, r5, r3
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	bf0c      	ite	eq
 8003e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e44:	2500      	movne	r5, #0
 8003e46:	4293      	cmp	r3, r2
 8003e48:	bfc4      	itt	gt
 8003e4a:	1a9b      	subgt	r3, r3, r2
 8003e4c:	18ed      	addgt	r5, r5, r3
 8003e4e:	2600      	movs	r6, #0
 8003e50:	341a      	adds	r4, #26
 8003e52:	42b5      	cmp	r5, r6
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xc8>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xa8>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4641      	mov	r1, r8
 8003e60:	4638      	mov	r0, r7
 8003e62:	47c8      	blx	r9
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xac>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c6      	b.n	8003e02 <_printf_common+0x3e>
 8003e74:	18e1      	adds	r1, r4, r3
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	2030      	movs	r0, #48	@ 0x30
 8003e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e7e:	4422      	add	r2, r4
 8003e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e88:	3302      	adds	r3, #2
 8003e8a:	e7c7      	b.n	8003e1c <_printf_common+0x58>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4641      	mov	r1, r8
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c8      	blx	r9
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xa4>
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7d9      	b.n	8003e52 <_printf_common+0x8e>
	...

08003ea0 <_printf_i>:
 8003ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	7e0f      	ldrb	r7, [r1, #24]
 8003ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ea8:	2f78      	cmp	r7, #120	@ 0x78
 8003eaa:	4691      	mov	r9, r2
 8003eac:	4680      	mov	r8, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eb6:	d807      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eb8:	2f62      	cmp	r7, #98	@ 0x62
 8003eba:	d80a      	bhi.n	8003ed2 <_printf_i+0x32>
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	f000 80d1 	beq.w	8004064 <_printf_i+0x1c4>
 8003ec2:	2f58      	cmp	r7, #88	@ 0x58
 8003ec4:	f000 80b8 	beq.w	8004038 <_printf_i+0x198>
 8003ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed0:	e03a      	b.n	8003f48 <_printf_i+0xa8>
 8003ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ed6:	2b15      	cmp	r3, #21
 8003ed8:	d8f6      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eda:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee0 <_printf_i+0x40>)
 8003edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003ec9 	.word	0x08003ec9
 8003eec:	08003ec9 	.word	0x08003ec9
 8003ef0:	08003ec9 	.word	0x08003ec9
 8003ef4:	08003ec9 	.word	0x08003ec9
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003ec9 	.word	0x08003ec9
 8003f00:	08003ec9 	.word	0x08003ec9
 8003f04:	08003ec9 	.word	0x08003ec9
 8003f08:	08003ec9 	.word	0x08003ec9
 8003f0c:	0800404b 	.word	0x0800404b
 8003f10:	08003f77 	.word	0x08003f77
 8003f14:	08004005 	.word	0x08004005
 8003f18:	08003ec9 	.word	0x08003ec9
 8003f1c:	08003ec9 	.word	0x08003ec9
 8003f20:	0800406d 	.word	0x0800406d
 8003f24:	08003ec9 	.word	0x08003ec9
 8003f28:	08003f77 	.word	0x08003f77
 8003f2c:	08003ec9 	.word	0x08003ec9
 8003f30:	08003ec9 	.word	0x08003ec9
 8003f34:	0800400d 	.word	0x0800400d
 8003f38:	6833      	ldr	r3, [r6, #0]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6032      	str	r2, [r6, #0]
 8003f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e09c      	b.n	8004086 <_printf_i+0x1e6>
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6031      	str	r1, [r6, #0]
 8003f54:	0606      	lsls	r6, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xbc>
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	e003      	b.n	8003f64 <_printf_i+0xc4>
 8003f5c:	0645      	lsls	r5, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xb8>
 8003f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	da03      	bge.n	8003f70 <_printf_i+0xd0>
 8003f68:	232d      	movs	r3, #45	@ 0x2d
 8003f6a:	426d      	negs	r5, r5
 8003f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f70:	4858      	ldr	r0, [pc, #352]	@ (80040d4 <_printf_i+0x234>)
 8003f72:	230a      	movs	r3, #10
 8003f74:	e011      	b.n	8003f9a <_printf_i+0xfa>
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	0608      	lsls	r0, r1, #24
 8003f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f80:	d402      	bmi.n	8003f88 <_printf_i+0xe8>
 8003f82:	0649      	lsls	r1, r1, #25
 8003f84:	bf48      	it	mi
 8003f86:	b2ad      	uxthmi	r5, r5
 8003f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f8a:	4852      	ldr	r0, [pc, #328]	@ (80040d4 <_printf_i+0x234>)
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	bf14      	ite	ne
 8003f90:	230a      	movne	r3, #10
 8003f92:	2308      	moveq	r3, #8
 8003f94:	2100      	movs	r1, #0
 8003f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f9a:	6866      	ldr	r6, [r4, #4]
 8003f9c:	60a6      	str	r6, [r4, #8]
 8003f9e:	2e00      	cmp	r6, #0
 8003fa0:	db05      	blt.n	8003fae <_printf_i+0x10e>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	432e      	orrs	r6, r5
 8003fa6:	f021 0104 	bic.w	r1, r1, #4
 8003faa:	6021      	str	r1, [r4, #0]
 8003fac:	d04b      	beq.n	8004046 <_printf_i+0x1a6>
 8003fae:	4616      	mov	r6, r2
 8003fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8003fb8:	5dc7      	ldrb	r7, [r0, r7]
 8003fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fbe:	462f      	mov	r7, r5
 8003fc0:	42bb      	cmp	r3, r7
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	d9f4      	bls.n	8003fb0 <_printf_i+0x110>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d10b      	bne.n	8003fe2 <_printf_i+0x142>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	07df      	lsls	r7, r3, #31
 8003fce:	d508      	bpl.n	8003fe2 <_printf_i+0x142>
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	6861      	ldr	r1, [r4, #4]
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	bfde      	ittt	le
 8003fd8:	2330      	movle	r3, #48	@ 0x30
 8003fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fe2:	1b92      	subs	r2, r2, r6
 8003fe4:	6122      	str	r2, [r4, #16]
 8003fe6:	f8cd a000 	str.w	sl, [sp]
 8003fea:	464b      	mov	r3, r9
 8003fec:	aa03      	add	r2, sp, #12
 8003fee:	4621      	mov	r1, r4
 8003ff0:	4640      	mov	r0, r8
 8003ff2:	f7ff fee7 	bl	8003dc4 <_printf_common>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d14a      	bne.n	8004090 <_printf_i+0x1f0>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	b004      	add	sp, #16
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	f043 0320 	orr.w	r3, r3, #32
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	4832      	ldr	r0, [pc, #200]	@ (80040d8 <_printf_i+0x238>)
 800400e:	2778      	movs	r7, #120	@ 0x78
 8004010:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	6831      	ldr	r1, [r6, #0]
 8004018:	061f      	lsls	r7, r3, #24
 800401a:	f851 5b04 	ldr.w	r5, [r1], #4
 800401e:	d402      	bmi.n	8004026 <_printf_i+0x186>
 8004020:	065f      	lsls	r7, r3, #25
 8004022:	bf48      	it	mi
 8004024:	b2ad      	uxthmi	r5, r5
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	07d9      	lsls	r1, r3, #31
 800402a:	bf44      	itt	mi
 800402c:	f043 0320 	orrmi.w	r3, r3, #32
 8004030:	6023      	strmi	r3, [r4, #0]
 8004032:	b11d      	cbz	r5, 800403c <_printf_i+0x19c>
 8004034:	2310      	movs	r3, #16
 8004036:	e7ad      	b.n	8003f94 <_printf_i+0xf4>
 8004038:	4826      	ldr	r0, [pc, #152]	@ (80040d4 <_printf_i+0x234>)
 800403a:	e7e9      	b.n	8004010 <_printf_i+0x170>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f023 0320 	bic.w	r3, r3, #32
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	e7f6      	b.n	8004034 <_printf_i+0x194>
 8004046:	4616      	mov	r6, r2
 8004048:	e7bd      	b.n	8003fc6 <_printf_i+0x126>
 800404a:	6833      	ldr	r3, [r6, #0]
 800404c:	6825      	ldr	r5, [r4, #0]
 800404e:	6961      	ldr	r1, [r4, #20]
 8004050:	1d18      	adds	r0, r3, #4
 8004052:	6030      	str	r0, [r6, #0]
 8004054:	062e      	lsls	r6, r5, #24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	d501      	bpl.n	800405e <_printf_i+0x1be>
 800405a:	6019      	str	r1, [r3, #0]
 800405c:	e002      	b.n	8004064 <_printf_i+0x1c4>
 800405e:	0668      	lsls	r0, r5, #25
 8004060:	d5fb      	bpl.n	800405a <_printf_i+0x1ba>
 8004062:	8019      	strh	r1, [r3, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	4616      	mov	r6, r2
 800406a:	e7bc      	b.n	8003fe6 <_printf_i+0x146>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	6032      	str	r2, [r6, #0]
 8004072:	681e      	ldr	r6, [r3, #0]
 8004074:	6862      	ldr	r2, [r4, #4]
 8004076:	2100      	movs	r1, #0
 8004078:	4630      	mov	r0, r6
 800407a:	f7fc f8c9 	bl	8000210 <memchr>
 800407e:	b108      	cbz	r0, 8004084 <_printf_i+0x1e4>
 8004080:	1b80      	subs	r0, r0, r6
 8004082:	6060      	str	r0, [r4, #4]
 8004084:	6863      	ldr	r3, [r4, #4]
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	2300      	movs	r3, #0
 800408a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800408e:	e7aa      	b.n	8003fe6 <_printf_i+0x146>
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d0ad      	beq.n	8003ffa <_printf_i+0x15a>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	079b      	lsls	r3, r3, #30
 80040a2:	d413      	bmi.n	80040cc <_printf_i+0x22c>
 80040a4:	68e0      	ldr	r0, [r4, #12]
 80040a6:	9b03      	ldr	r3, [sp, #12]
 80040a8:	4298      	cmp	r0, r3
 80040aa:	bfb8      	it	lt
 80040ac:	4618      	movlt	r0, r3
 80040ae:	e7a6      	b.n	8003ffe <_printf_i+0x15e>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4632      	mov	r2, r6
 80040b4:	4649      	mov	r1, r9
 80040b6:	4640      	mov	r0, r8
 80040b8:	47d0      	blx	sl
 80040ba:	3001      	adds	r0, #1
 80040bc:	d09d      	beq.n	8003ffa <_printf_i+0x15a>
 80040be:	3501      	adds	r5, #1
 80040c0:	68e3      	ldr	r3, [r4, #12]
 80040c2:	9903      	ldr	r1, [sp, #12]
 80040c4:	1a5b      	subs	r3, r3, r1
 80040c6:	42ab      	cmp	r3, r5
 80040c8:	dcf2      	bgt.n	80040b0 <_printf_i+0x210>
 80040ca:	e7eb      	b.n	80040a4 <_printf_i+0x204>
 80040cc:	2500      	movs	r5, #0
 80040ce:	f104 0619 	add.w	r6, r4, #25
 80040d2:	e7f5      	b.n	80040c0 <_printf_i+0x220>
 80040d4:	08004509 	.word	0x08004509
 80040d8:	0800451a 	.word	0x0800451a

080040dc <__sflush_r>:
 80040dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e4:	0716      	lsls	r6, r2, #28
 80040e6:	4605      	mov	r5, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	d454      	bmi.n	8004196 <__sflush_r+0xba>
 80040ec:	684b      	ldr	r3, [r1, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	dc02      	bgt.n	80040f8 <__sflush_r+0x1c>
 80040f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dd48      	ble.n	800418a <__sflush_r+0xae>
 80040f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040fa:	2e00      	cmp	r6, #0
 80040fc:	d045      	beq.n	800418a <__sflush_r+0xae>
 80040fe:	2300      	movs	r3, #0
 8004100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004104:	682f      	ldr	r7, [r5, #0]
 8004106:	6a21      	ldr	r1, [r4, #32]
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	d030      	beq.n	800416e <__sflush_r+0x92>
 800410c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	0759      	lsls	r1, r3, #29
 8004112:	d505      	bpl.n	8004120 <__sflush_r+0x44>
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800411a:	b10b      	cbz	r3, 8004120 <__sflush_r+0x44>
 800411c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004124:	6a21      	ldr	r1, [r4, #32]
 8004126:	4628      	mov	r0, r5
 8004128:	47b0      	blx	r6
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	d106      	bne.n	800413e <__sflush_r+0x62>
 8004130:	6829      	ldr	r1, [r5, #0]
 8004132:	291d      	cmp	r1, #29
 8004134:	d82b      	bhi.n	800418e <__sflush_r+0xb2>
 8004136:	4a2a      	ldr	r2, [pc, #168]	@ (80041e0 <__sflush_r+0x104>)
 8004138:	40ca      	lsrs	r2, r1
 800413a:	07d6      	lsls	r6, r2, #31
 800413c:	d527      	bpl.n	800418e <__sflush_r+0xb2>
 800413e:	2200      	movs	r2, #0
 8004140:	6062      	str	r2, [r4, #4]
 8004142:	04d9      	lsls	r1, r3, #19
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	d504      	bpl.n	8004154 <__sflush_r+0x78>
 800414a:	1c42      	adds	r2, r0, #1
 800414c:	d101      	bne.n	8004152 <__sflush_r+0x76>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	b903      	cbnz	r3, 8004154 <__sflush_r+0x78>
 8004152:	6560      	str	r0, [r4, #84]	@ 0x54
 8004154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004156:	602f      	str	r7, [r5, #0]
 8004158:	b1b9      	cbz	r1, 800418a <__sflush_r+0xae>
 800415a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800415e:	4299      	cmp	r1, r3
 8004160:	d002      	beq.n	8004168 <__sflush_r+0x8c>
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fbec 	bl	8003940 <_free_r>
 8004168:	2300      	movs	r3, #0
 800416a:	6363      	str	r3, [r4, #52]	@ 0x34
 800416c:	e00d      	b.n	800418a <__sflush_r+0xae>
 800416e:	2301      	movs	r3, #1
 8004170:	4628      	mov	r0, r5
 8004172:	47b0      	blx	r6
 8004174:	4602      	mov	r2, r0
 8004176:	1c50      	adds	r0, r2, #1
 8004178:	d1c9      	bne.n	800410e <__sflush_r+0x32>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0c6      	beq.n	800410e <__sflush_r+0x32>
 8004180:	2b1d      	cmp	r3, #29
 8004182:	d001      	beq.n	8004188 <__sflush_r+0xac>
 8004184:	2b16      	cmp	r3, #22
 8004186:	d11e      	bne.n	80041c6 <__sflush_r+0xea>
 8004188:	602f      	str	r7, [r5, #0]
 800418a:	2000      	movs	r0, #0
 800418c:	e022      	b.n	80041d4 <__sflush_r+0xf8>
 800418e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004192:	b21b      	sxth	r3, r3
 8004194:	e01b      	b.n	80041ce <__sflush_r+0xf2>
 8004196:	690f      	ldr	r7, [r1, #16]
 8004198:	2f00      	cmp	r7, #0
 800419a:	d0f6      	beq.n	800418a <__sflush_r+0xae>
 800419c:	0793      	lsls	r3, r2, #30
 800419e:	680e      	ldr	r6, [r1, #0]
 80041a0:	bf08      	it	eq
 80041a2:	694b      	ldreq	r3, [r1, #20]
 80041a4:	600f      	str	r7, [r1, #0]
 80041a6:	bf18      	it	ne
 80041a8:	2300      	movne	r3, #0
 80041aa:	eba6 0807 	sub.w	r8, r6, r7
 80041ae:	608b      	str	r3, [r1, #8]
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	dde9      	ble.n	800418a <__sflush_r+0xae>
 80041b6:	6a21      	ldr	r1, [r4, #32]
 80041b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041ba:	4643      	mov	r3, r8
 80041bc:	463a      	mov	r2, r7
 80041be:	4628      	mov	r0, r5
 80041c0:	47b0      	blx	r6
 80041c2:	2800      	cmp	r0, #0
 80041c4:	dc08      	bgt.n	80041d8 <__sflush_r+0xfc>
 80041c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d8:	4407      	add	r7, r0
 80041da:	eba8 0800 	sub.w	r8, r8, r0
 80041de:	e7e7      	b.n	80041b0 <__sflush_r+0xd4>
 80041e0:	20400001 	.word	0x20400001

080041e4 <_fflush_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	690b      	ldr	r3, [r1, #16]
 80041e8:	4605      	mov	r5, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	b913      	cbnz	r3, 80041f4 <_fflush_r+0x10>
 80041ee:	2500      	movs	r5, #0
 80041f0:	4628      	mov	r0, r5
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	b118      	cbz	r0, 80041fe <_fflush_r+0x1a>
 80041f6:	6a03      	ldr	r3, [r0, #32]
 80041f8:	b90b      	cbnz	r3, 80041fe <_fflush_r+0x1a>
 80041fa:	f7ff f8eb 	bl	80033d4 <__sinit>
 80041fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f3      	beq.n	80041ee <_fflush_r+0xa>
 8004206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004208:	07d0      	lsls	r0, r2, #31
 800420a:	d404      	bmi.n	8004216 <_fflush_r+0x32>
 800420c:	0599      	lsls	r1, r3, #22
 800420e:	d402      	bmi.n	8004216 <_fflush_r+0x32>
 8004210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004212:	f7ff fb92 	bl	800393a <__retarget_lock_acquire_recursive>
 8004216:	4628      	mov	r0, r5
 8004218:	4621      	mov	r1, r4
 800421a:	f7ff ff5f 	bl	80040dc <__sflush_r>
 800421e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004220:	07da      	lsls	r2, r3, #31
 8004222:	4605      	mov	r5, r0
 8004224:	d4e4      	bmi.n	80041f0 <_fflush_r+0xc>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	d4e1      	bmi.n	80041f0 <_fflush_r+0xc>
 800422c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800422e:	f7ff fb85 	bl	800393c <__retarget_lock_release_recursive>
 8004232:	e7dd      	b.n	80041f0 <_fflush_r+0xc>

08004234 <__swhatbuf_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	460c      	mov	r4, r1
 8004238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423c:	2900      	cmp	r1, #0
 800423e:	b096      	sub	sp, #88	@ 0x58
 8004240:	4615      	mov	r5, r2
 8004242:	461e      	mov	r6, r3
 8004244:	da0d      	bge.n	8004262 <__swhatbuf_r+0x2e>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	bf14      	ite	ne
 8004252:	2340      	movne	r3, #64	@ 0x40
 8004254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004258:	2000      	movs	r0, #0
 800425a:	6031      	str	r1, [r6, #0]
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	b016      	add	sp, #88	@ 0x58
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	466a      	mov	r2, sp
 8004264:	f000 f848 	bl	80042f8 <_fstat_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	dbec      	blt.n	8004246 <__swhatbuf_r+0x12>
 800426c:	9901      	ldr	r1, [sp, #4]
 800426e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004276:	4259      	negs	r1, r3
 8004278:	4159      	adcs	r1, r3
 800427a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800427e:	e7eb      	b.n	8004258 <__swhatbuf_r+0x24>

08004280 <__smakebuf_r>:
 8004280:	898b      	ldrh	r3, [r1, #12]
 8004282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004284:	079d      	lsls	r5, r3, #30
 8004286:	4606      	mov	r6, r0
 8004288:	460c      	mov	r4, r1
 800428a:	d507      	bpl.n	800429c <__smakebuf_r+0x1c>
 800428c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	6123      	str	r3, [r4, #16]
 8004294:	2301      	movs	r3, #1
 8004296:	6163      	str	r3, [r4, #20]
 8004298:	b003      	add	sp, #12
 800429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429c:	ab01      	add	r3, sp, #4
 800429e:	466a      	mov	r2, sp
 80042a0:	f7ff ffc8 	bl	8004234 <__swhatbuf_r>
 80042a4:	9f00      	ldr	r7, [sp, #0]
 80042a6:	4605      	mov	r5, r0
 80042a8:	4639      	mov	r1, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff fbbc 	bl	8003a28 <_malloc_r>
 80042b0:	b948      	cbnz	r0, 80042c6 <__smakebuf_r+0x46>
 80042b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042b6:	059a      	lsls	r2, r3, #22
 80042b8:	d4ee      	bmi.n	8004298 <__smakebuf_r+0x18>
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	f043 0302 	orr.w	r3, r3, #2
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	e7e2      	b.n	800428c <__smakebuf_r+0xc>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	6020      	str	r0, [r4, #0]
 80042ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	9b01      	ldr	r3, [sp, #4]
 80042d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042d6:	b15b      	cbz	r3, 80042f0 <__smakebuf_r+0x70>
 80042d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042dc:	4630      	mov	r0, r6
 80042de:	f000 f81d 	bl	800431c <_isatty_r>
 80042e2:	b128      	cbz	r0, 80042f0 <__smakebuf_r+0x70>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	431d      	orrs	r5, r3
 80042f4:	81a5      	strh	r5, [r4, #12]
 80042f6:	e7cf      	b.n	8004298 <__smakebuf_r+0x18>

080042f8 <_fstat_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d07      	ldr	r5, [pc, #28]	@ (8004318 <_fstat_r+0x20>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	602b      	str	r3, [r5, #0]
 8004306:	f7fc fddc 	bl	8000ec2 <_fstat>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	d102      	bne.n	8004314 <_fstat_r+0x1c>
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	b103      	cbz	r3, 8004314 <_fstat_r+0x1c>
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	bd38      	pop	{r3, r4, r5, pc}
 8004316:	bf00      	nop
 8004318:	20000270 	.word	0x20000270

0800431c <_isatty_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d06      	ldr	r5, [pc, #24]	@ (8004338 <_isatty_r+0x1c>)
 8004320:	2300      	movs	r3, #0
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fc fddb 	bl	8000ee2 <_isatty>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_isatty_r+0x1a>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_isatty_r+0x1a>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	20000270 	.word	0x20000270

0800433c <_sbrk_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d06      	ldr	r5, [pc, #24]	@ (8004358 <_sbrk_r+0x1c>)
 8004340:	2300      	movs	r3, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fc fde4 	bl	8000f14 <_sbrk>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_sbrk_r+0x1a>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_sbrk_r+0x1a>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20000270 	.word	0x20000270

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
