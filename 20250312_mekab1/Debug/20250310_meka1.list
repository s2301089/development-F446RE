
20250310_meka1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08008d30  08008d30  00009d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009398  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d4  0800956c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800956c  0000b408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adc2  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002034  00000000  00000000  00015fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00018000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069f  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a2a  00000000  00000000  00018f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c609  00000000  00000000  0003b991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb50a  00000000  00000000  00047f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001134a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  001134e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00116d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d18 	.word	0x08008d18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008d18 	.word	0x08008d18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <STprintf+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fccf 	bl	8004908 <setbuf>
	Huart = huart;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <STprintf+0x28>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	200001f0 	.word	0x200001f0

08000f80 <_write>:

int _write(int file,char *ptr,int len){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <_write+0x28>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	f001 ff86 	bl	8002ea8 <HAL_UART_Transmit>
	return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	FAF = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <getDataIT+0x20>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	@ (8000fd0 <getDataIT+0x24>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f001 fffd 	bl	8002fbe <HAL_UART_Receive_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000201 	.word	0x20000201
 8000fd0:	200001ff 	.word	0x200001ff

08000fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	FAF = 1;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <HAL_UART_RxCpltCallback+0x94>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2baf      	cmp	r3, #175	@ 0xaf
 8000fe8:	d106      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 8000ff0:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001000:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b09      	cmp	r3, #9
 8001008:	dd02      	ble.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 8001022:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800102c:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	d10f      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800103e:	f000 f821 	bl	8001084 <ChSUM>
 8001042:	4603      	mov	r3, r0
 8001044:	2bed      	cmp	r3, #237	@ 0xed
 8001046:	d103      	bne.n	8001050 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <HAL_UART_RxCpltCallback+0xac>)
 800104c:	f000 f846 	bl	80010dc <AddStruct>
			}
			GIcount = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 ffaf 	bl	8002fbe <HAL_UART_Receive_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000201 	.word	0x20000201
 800106c:	200001ff 	.word	0x200001ff
 8001070:	20000200 	.word	0x20000200
 8001074:	2000021c 	.word	0x2000021c
 8001078:	20000220 	.word	0x20000220
 800107c:	200001f4 	.word	0x200001f4
 8001080:	20000204 	.word	0x20000204

08001084 <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	330a      	adds	r3, #10
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2bed      	cmp	r3, #237	@ 0xed
 8001094:	d11b      	bne.n	80010ce <ChSUM+0x4a>
		uint8_t revsum = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e009      	b.n	80010b4 <ChSUM+0x30>
			revsum += (int)Adata[i];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4413      	add	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	ddf2      	ble.n	80010a0 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3309      	adds	r3, #9
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d101      	bne.n	80010ca <ChSUM+0x46>
			return 0xed;
 80010c6:	23ed      	movs	r3, #237	@ 0xed
 80010c8:	e002      	b.n	80010d0 <ChSUM+0x4c>
		}else{
			return 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 80010ce:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8bb 	bl	8001262 <StructInit>
	Udata->LX = Adata[1];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	789a      	ldrb	r2, [r3, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	795a      	ldrb	r2, [r3, #5]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	78da      	ldrb	r2, [r3, #3]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	791a      	ldrb	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	799a      	ldrb	r2, [r3, #6]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3307      	adds	r3, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <AddStruct+0x54>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <AddStruct+0x68>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3307      	adds	r3, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <AddStruct+0x7c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3307      	adds	r3, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <AddStruct+0x90>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3307      	adds	r3, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <AddStruct+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3307      	adds	r3, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <AddStruct+0xb8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3307      	adds	r3, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <AddStruct+0xcc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3307      	adds	r3, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da02      	bge.n	80011ba <AddStruct+0xde>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3308      	adds	r3, #8
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <AddStruct+0xf2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3308      	adds	r3, #8
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <AddStruct+0x106>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <AddStruct+0x11a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3308      	adds	r3, #8
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <AddStruct+0x12e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <AddStruct+0x142>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <AddStruct+0x156>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3308      	adds	r3, #8
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <AddStruct+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3308      	adds	r3, #8
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <AddStruct+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	755a      	strb	r2, [r3, #21]

	return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <StructInit>:

void StructInit(getdata* Udata){
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	755a      	strb	r2, [r3, #21]

	return;
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 fc75 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f821 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 f8d3 	bl	80014b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800130e:	f000 f87d 	bl	800140c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001312:	f000 f8a5 	bl	8001460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 8001316:	480a      	ldr	r0, [pc, #40]	@ (8001340 <main+0x44>)
 8001318:	f7ff fe1c 	bl	8000f54 <STprintf>
  uint8_t Out[8] = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart1);
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <main+0x48>)
 8001326:	f7ff fe41 	bl	8000fac <getDataIT>
//		  AllShowP(data);
//	  }
//	  printf("%d ",FAF);
//	  printf("LX:%+4d LY:%+4d RX:%+4d RY:%+4d \r\n",halfX(data.LX),halfY(data.LY),halfX(data.RX),halfY(data.RY));
//	  HAL_Delay(250);
	  Move(Out,data.LX,data.LY);
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <main+0x4c>)
 800132c:	7819      	ldrb	r1, [r3, #0]
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <main+0x4c>)
 8001330:	785a      	ldrb	r2, [r3, #1]
 8001332:	463b      	mov	r3, r7
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f91b 	bl	8001570 <Move>
	  getDataIT(&huart1);
 800133a:	bf00      	nop
 800133c:	e7f2      	b.n	8001324 <main+0x28>
 800133e:	bf00      	nop
 8001340:	2000026c 	.word	0x2000026c
 8001344:	20000224 	.word	0x20000224
 8001348:	20000204 	.word	0x20000204

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	@ 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fc68 	bl	8004c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <SystemClock_Config+0xb8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <SystemClock_Config+0xb8>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <SystemClock_Config+0xb8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <SystemClock_Config+0xbc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001398:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <SystemClock_Config+0xbc>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <SystemClock_Config+0xbc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fa83 	bl	80028cc <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013cc:	f000 f88c 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 ffaa 	bl	8002344 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013f6:	f000 f877 	bl	80014e8 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_USART1_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001418:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800141c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001444:	f001 fce0 	bl	8002e08 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f000 f84b 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000224 	.word	0x20000224
 800145c:	40011000 	.word	0x40011000

08001460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_USART2_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800146c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001498:	f001 fcb6 	bl	8002e08 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f000 f821 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	40004400 	.word	0x40004400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <Error_Handler+0x8>

080014f4 <halfX>:

#include <mekanamu.h>
#include <math.h>
#include <stdio.h>

signed char halfX(uint8_t X){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	if(X > 0x7f - TOLE_VALUE && X < 0x7f + TOLE_VALUE){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b75      	cmp	r3, #117	@ 0x75
 8001502:	d904      	bls.n	800150e <halfX+0x1a>
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b88      	cmp	r3, #136	@ 0x88
 8001508:	d801      	bhi.n	800150e <halfX+0x1a>
		return 0;
 800150a:	2300      	movs	r3, #0
 800150c:	e008      	b.n	8001520 <halfX+0x2c>
	}else {
		if(X - 0x7f < -0x7f){
			return -0x7f;
		}else if(X - 0x7f > 0x7f){
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2bff      	cmp	r3, #255	@ 0xff
 8001512:	d101      	bne.n	8001518 <halfX+0x24>
			return 0x7f;
 8001514:	237f      	movs	r3, #127	@ 0x7f
 8001516:	e003      	b.n	8001520 <halfX+0x2c>
		}else {
			return X - 0x7f;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3b7f      	subs	r3, #127	@ 0x7f
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b25b      	sxtb	r3, r3
		}
	}
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <halfY>:

signed char halfY(uint8_t Y){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	if(Y > 0x7f - TOLE_VALUE && Y < 0x7f + TOLE_VALUE){
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b75      	cmp	r3, #117	@ 0x75
 800153a:	d904      	bls.n	8001546 <halfY+0x1a>
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b88      	cmp	r3, #136	@ 0x88
 8001540:	d801      	bhi.n	8001546 <halfY+0x1a>
		return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e00d      	b.n	8001562 <halfY+0x36>
	}else {
		if(0x7f - Y < -0x7f){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800154c:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001550:	da02      	bge.n	8001558 <halfY+0x2c>
			return -0x7f;
 8001552:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001556:	e004      	b.n	8001562 <halfY+0x36>
		}else if(0x7f - Y > 0x7f){
			return 0x7f;
		}else {
			return 0x7f - Y;
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b25b      	sxtb	r3, r3
		}
	}
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <Move>:

void Move(uint8_t *Udata,uint8_t stX,uint8_t stY){ // Udata[0] 左上 Udata[1] 右上 Udata[2] 左下 Udata[3] 右下
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b093      	sub	sp, #76	@ 0x4c
 8001574:	af06      	add	r7, sp, #24
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
 800157c:	4613      	mov	r3, r2
 800157e:	70bb      	strb	r3, [r7, #2]
	signed char PosY;
	double Z;
	double theta;
	double deg;
	double theta_plus;
	PosX = halfX(stX);
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffb6 	bl	80014f4 <halfX>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	PosY = halfY(stY);
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ffcb 	bl	800152c <halfY>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	Z = sqrt(pow(PosX,2) + pow(PosY,2));
 800159c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffdf 	bl	8000564 <__aeabi_i2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8001830 <Move+0x2c0>
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f005 f9d1 	bl	8006958 <pow>
 80015b6:	ec55 4b10 	vmov	r4, r5, d0
 80015ba:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffd0 	bl	8000564 <__aeabi_i2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	ed9f 1b99 	vldr	d1, [pc, #612]	@ 8001830 <Move+0x2c0>
 80015cc:	ec43 2b10 	vmov	d0, r2, r3
 80015d0:	f005 f9c2 	bl	8006958 <pow>
 80015d4:	ec53 2b10 	vmov	r2, r3, d0
 80015d8:	4620      	mov	r0, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	f7fe fe76 	bl	80002cc <__adddf3>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	ec43 2b17 	vmov	d7, r2, r3
 80015e8:	eeb0 0a47 	vmov.f32	s0, s14
 80015ec:	eef0 0a67 	vmov.f32	s1, s15
 80015f0:	f005 fa22 	bl	8006a38 <sqrt>
 80015f4:	ed87 0b08 	vstr	d0, [r7, #32]
	theta = atan2(PosY,PosX);
 80015f8:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffb1 	bl	8000564 <__aeabi_i2d>
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
 8001606:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffaa 	bl	8000564 <__aeabi_i2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	ec43 2b11 	vmov	d1, r2, r3
 8001618:	ec45 4b10 	vmov	d0, r4, r5
 800161c:	f005 f99a 	bl	8006954 <atan2>
 8001620:	ed87 0b06 	vstr	d0, [r7, #24]
	theta_plus = theta + (PLUS * M_PI) / 180;
 8001624:	a38a      	add	r3, pc, #552	@ (adr r3, 8001850 <Move+0x2e0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800162e:	f7fe fe4d 	bl	80002cc <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9c7 2304 	strd	r2, r3, [r7, #16]
	deg = (180 * theta) / M_PI;
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b82      	ldr	r3, [pc, #520]	@ (8001848 <Move+0x2d8>)
 8001640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001644:	f7fe fff8 	bl	8000638 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	a379      	add	r3, pc, #484	@ (adr r3, 8001838 <Move+0x2c8>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7ff f919 	bl	800088c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	printf("(%+4d,%+4d) %f∠%f %f\r\n",PosX,PosY,Z,deg,theta);
//	printf("%f %f %f %f\r\n",deg,theta + ((M_PI * PLUS) / 180),(180 * (theta + (M_PI * PLUS) / 180) / M_PI),theta_plus);
//	printf("%f %f \r\n",Z * cos(theta_plus),Z * sin(theta_plus));
	if(Z * sin(theta_plus) < 0){
 8001662:	ed97 0b04 	vldr	d0, [r7, #16]
 8001666:	f005 fa67 	bl	8006b38 <sin>
 800166a:	ec51 0b10 	vmov	r0, r1, d0
 800166e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001672:	f7fe ffe1 	bl	8000638 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f7ff fa49 	bl	8000b1c <__aeabi_dcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d021      	beq.n	80016d4 <Move+0x164>
		Udata[4] = 0x7f + Z * sin(theta_plus);
 8001690:	ed97 0b04 	vldr	d0, [r7, #16]
 8001694:	f005 fa50 	bl	8006b38 <sin>
 8001698:	ec51 0b10 	vmov	r0, r1, d0
 800169c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a0:	f7fe ffca 	bl	8000638 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	a364      	add	r3, pc, #400	@ (adr r3, 8001840 <Move+0x2d0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe fe0b 	bl	80002cc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1d1c      	adds	r4, r3, #4
 80016c2:	f7ff fa91 	bl	8000be8 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	7023      	strb	r3, [r4, #0]
		Udata[0] = 1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e017      	b.n	8001704 <Move+0x194>
	}else{
		Udata[4] = Z * sin(theta_plus);
 80016d4:	ed97 0b04 	vldr	d0, [r7, #16]
 80016d8:	f005 fa2e 	bl	8006b38 <sin>
 80016dc:	ec51 0b10 	vmov	r0, r1, d0
 80016e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016e4:	f7fe ffa8 	bl	8000638 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	1d1c      	adds	r4, r3, #4
 80016f4:	f7ff fa78 	bl	8000be8 <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	7023      	strb	r3, [r4, #0]
		Udata[0] = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
	}
	if(Z * cos(theta_plus) < 0){
 8001704:	ed97 0b04 	vldr	d0, [r7, #16]
 8001708:	f005 f9c2 	bl	8006a90 <cos>
 800170c:	ec51 0b10 	vmov	r0, r1, d0
 8001710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001714:	f7fe ff90 	bl	8000638 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f7ff f9f8 	bl	8000b1c <__aeabi_dcmplt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d022      	beq.n	8001778 <Move+0x208>
		Udata[5] = 0x7f + Z * cos(theta_plus);
 8001732:	ed97 0b04 	vldr	d0, [r7, #16]
 8001736:	f005 f9ab 	bl	8006a90 <cos>
 800173a:	ec51 0b10 	vmov	r0, r1, d0
 800173e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001840 <Move+0x2d0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fdba 	bl	80002cc <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1d5c      	adds	r4, r3, #5
 8001764:	f7ff fa40 	bl	8000be8 <__aeabi_d2uiz>
 8001768:	4603      	mov	r3, r0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	7023      	strb	r3, [r4, #0]
		Udata[1] = 1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e018      	b.n	80017aa <Move+0x23a>
	}else {
		Udata[5] = Z * sin(theta_plus);
 8001778:	ed97 0b04 	vldr	d0, [r7, #16]
 800177c:	f005 f9dc 	bl	8006b38 <sin>
 8001780:	ec51 0b10 	vmov	r0, r1, d0
 8001784:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001788:	f7fe ff56 	bl	8000638 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1d5c      	adds	r4, r3, #5
 8001798:	f7ff fa26 	bl	8000be8 <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	7023      	strb	r3, [r4, #0]
		Udata[1] = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	}
	Udata[2] = Udata[1];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3302      	adds	r3, #2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	7852      	ldrb	r2, [r2, #1]
 80017b2:	701a      	strb	r2, [r3, #0]
	Udata[3] = Udata[0];
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3303      	adds	r3, #3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	701a      	strb	r2, [r3, #0]
	Udata[6] = Udata[5];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3306      	adds	r3, #6
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	7952      	ldrb	r2, [r2, #5]
 80017c6:	701a      	strb	r2, [r3, #0]
	Udata[7] = Udata[4];
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3307      	adds	r3, #7
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	7912      	ldrb	r2, [r2, #4]
 80017d0:	701a      	strb	r2, [r3, #0]
	printf("左上 %d %2X 右上 %d %2X 左下 %d %2X 右下 %d %2X\r\n",Udata[0],Udata[4],Udata[1],Udata[5],Udata[2],Udata[6],Udata[3],Udata[7]);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461d      	mov	r5, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461e      	mov	r6, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	469c      	mov	ip, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3305      	adds	r3, #5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3306      	adds	r3, #6
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3303      	adds	r3, #3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461c      	mov	r4, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3307      	adds	r3, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	9304      	str	r3, [sp, #16]
 8001810:	9403      	str	r4, [sp, #12]
 8001812:	9002      	str	r0, [sp, #8]
 8001814:	9101      	str	r1, [sp, #4]
 8001816:	9200      	str	r2, [sp, #0]
 8001818:	4663      	mov	r3, ip
 800181a:	4632      	mov	r2, r6
 800181c:	4629      	mov	r1, r5
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <Move+0x2dc>)
 8001820:	f003 f860 	bl	80048e4 <iprintf>
}
 8001824:	bf00      	nop
 8001826:	3734      	adds	r7, #52	@ 0x34
 8001828:	46bd      	mov	sp, r7
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	00000000 	.word	0x00000000
 8001834:	40000000 	.word	0x40000000
 8001838:	54442d18 	.word	0x54442d18
 800183c:	400921fb 	.word	0x400921fb
 8001840:	00000000 	.word	0x00000000
 8001844:	405fc000 	.word	0x405fc000
 8001848:	40668000 	.word	0x40668000
 800184c:	08008d30 	.word	0x08008d30
 8001850:	54442d18 	.word	0x54442d18
 8001854:	3fe921fb 	.word	0x3fe921fb

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186c:	6453      	str	r3, [r2, #68]	@ 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a36      	ldr	r2, [pc, #216]	@ (80019a0 <HAL_UART_MspInit+0xf8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d135      	bne.n	8001936 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4b35      	ldr	r3, [pc, #212]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a34      	ldr	r2, [pc, #208]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001902:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4822      	ldr	r0, [pc, #136]	@ (80019a8 <HAL_UART_MspInit+0x100>)
 8001920:	f000 fb7c 	bl	800201c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2025      	movs	r0, #37	@ 0x25
 800192a:	f000 faae 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192e:	2025      	movs	r0, #37	@ 0x25
 8001930:	f000 fac7 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001934:	e030      	b.n	8001998 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <HAL_UART_MspInit+0x104>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d12b      	bne.n	8001998 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6313      	str	r3, [r2, #48]	@ 0x30
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_UART_MspInit+0xfc>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001978:	230c      	movs	r3, #12
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001988:	2307      	movs	r3, #7
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <HAL_UART_MspInit+0x100>)
 8001994:	f000 fb42 	bl	800201c <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40004400 	.word	0x40004400

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 f945 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <USART1_IRQHandler+0x10>)
 8001a16:	f001 faf7 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000224 	.word	0x20000224

08001a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3e:	f003 f949 	bl	8004cd4 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a66:	bf00      	nop
 8001a68:	e7fd      	b.n	8001a66 <_exit+0x12>

08001a6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e00a      	b.n	8001a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7c:	f3af 8000 	nop.w
 8001a80:	4601      	mov	r1, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf0      	blt.n	8001a7c <_read+0x12>
  }

  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001acc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_isatty>:

int _isatty(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f003 f8ca 	bl	8004cd4 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <_sbrk+0x64>)
 8001b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20020000 	.word	0x20020000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	200002b4 	.word	0x200002b4
 8001b74:	20000408 	.word	0x20000408

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <SystemInit+0x20>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <SystemInit+0x20>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ba0:	f7ff ffea 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f003 f889 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7ff fb95 	bl	80012fc <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001be0:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 8001be4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001be8:	20000408 	.word	0x20000408

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_Init+0x40>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_Init+0x40>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_Init+0x40>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f92b 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fe18 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f943 	bl	8001ede <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f90b 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200002b8 	.word	0x200002b8

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200002b8 	.word	0x200002b8

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	@ (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff feda 	bl	8001cbc <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d008      	beq.n	8001f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e052      	b.n	8001fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0216 	bic.w	r2, r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <HAL_DMA_Abort+0x62>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0208 	bic.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f78:	e013      	b.n	8001fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f7a:	f7ff fe9f 	bl	8001cbc <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d90c      	bls.n	8001fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e015      	b.n	8001fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e4      	bne.n	8001f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	223f      	movs	r2, #63	@ 0x3f
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e00c      	b.n	800200e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e165      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8154 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d005      	beq.n	800206e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	2b02      	cmp	r3, #2
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d017      	beq.n	800210c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80ae 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_GPIO_Init+0x300>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a5c      	ldr	r2, [pc, #368]	@ (800231c <HAL_GPIO_Init+0x300>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b5a      	ldr	r3, [pc, #360]	@ (800231c <HAL_GPIO_Init+0x300>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a58      	ldr	r2, [pc, #352]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002324 <HAL_GPIO_Init+0x308>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x21a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002328 <HAL_GPIO_Init+0x30c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x216>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	@ (800232c <HAL_GPIO_Init+0x310>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x212>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002330 <HAL_GPIO_Init+0x314>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x20e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4b      	ldr	r2, [pc, #300]	@ (8002334 <HAL_GPIO_Init+0x318>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x20a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <HAL_GPIO_Init+0x31c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x206>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a49      	ldr	r2, [pc, #292]	@ (800233c <HAL_GPIO_Init+0x320>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x202>
 800221a:	2306      	movs	r3, #6
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800221e:	2307      	movs	r3, #7
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_GPIO_Init+0x324>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <HAL_GPIO_Init+0x324>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <HAL_GPIO_Init+0x324>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a26      	ldr	r2, [pc, #152]	@ (8002340 <HAL_GPIO_Init+0x324>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_GPIO_Init+0x324>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <HAL_GPIO_Init+0x324>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_GPIO_Init+0x324>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a11      	ldr	r2, [pc, #68]	@ (8002340 <HAL_GPIO_Init+0x324>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae96 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40021400 	.word	0x40021400
 800233c:	40021800 	.word	0x40021800
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff fc42 	bl	8001cbc <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff fc3e 	bl	8001cbc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f855 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fba2 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	08008d6c 	.word	0x08008d6c
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	08008d7c 	.word	0x08008d7c

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffdc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0b5b      	lsrs	r3, r3, #13
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08008d7c 	.word	0x08008d7c

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b0a6      	sub	sp, #152	@ 0x98
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259e:	4bc8      	ldr	r3, [pc, #800]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	f200 817e 	bhi.w	80028a8 <HAL_RCC_GetSysClockFreq+0x330>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	080028a9 	.word	0x080028a9
 80025bc:	080028a9 	.word	0x080028a9
 80025c0:	080028a9 	.word	0x080028a9
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	080028a9 	.word	0x080028a9
 80025cc:	080028a9 	.word	0x080028a9
 80025d0:	080028a9 	.word	0x080028a9
 80025d4:	080025f9 	.word	0x080025f9
 80025d8:	080028a9 	.word	0x080028a9
 80025dc:	080028a9 	.word	0x080028a9
 80025e0:	080028a9 	.word	0x080028a9
 80025e4:	08002763 	.word	0x08002763
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4bb6      	ldr	r3, [pc, #728]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025ee:	e15f      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4bb5      	ldr	r3, [pc, #724]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025f6:	e15b      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4bb1      	ldr	r3, [pc, #708]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002604:	4bae      	ldr	r3, [pc, #696]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4bab      	ldr	r3, [pc, #684]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800261a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800261c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	663b      	str	r3, [r7, #96]	@ 0x60
 8002624:	2300      	movs	r3, #0
 8002626:	667b      	str	r3, [r7, #100]	@ 0x64
 8002628:	4ba7      	ldr	r3, [pc, #668]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800262a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800262e:	462a      	mov	r2, r5
 8002630:	fb03 f202 	mul.w	r2, r3, r2
 8002634:	2300      	movs	r3, #0
 8002636:	4621      	mov	r1, r4
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	4aa2      	ldr	r2, [pc, #648]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002640:	4621      	mov	r1, r4
 8002642:	fba1 1202 	umull	r1, r2, r1, r2
 8002646:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002648:	460a      	mov	r2, r1
 800264a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800264c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800264e:	4413      	add	r3, r2
 8002650:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002656:	2200      	movs	r2, #0
 8002658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800265a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800265c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002660:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002664:	f7fe fae0 	bl	8000c28 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002672:	e064      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	653b      	str	r3, [r7, #80]	@ 0x50
 800267e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002688:	2300      	movs	r3, #0
 800268a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800268c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4621      	mov	r1, r4
 80026aa:	1a51      	subs	r1, r2, r1
 80026ac:	6139      	str	r1, [r7, #16]
 80026ae:	4629      	mov	r1, r5
 80026b0:	eb63 0301 	sbc.w	r3, r3, r1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c2:	4659      	mov	r1, fp
 80026c4:	018b      	lsls	r3, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026cc:	4651      	mov	r1, sl
 80026ce:	018a      	lsls	r2, r1, #6
 80026d0:	4651      	mov	r1, sl
 80026d2:	ebb2 0801 	subs.w	r8, r2, r1
 80026d6:	4659      	mov	r1, fp
 80026d8:	eb63 0901 	sbc.w	r9, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f0:	4690      	mov	r8, r2
 80026f2:	4699      	mov	r9, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	eb18 0303 	adds.w	r3, r8, r3
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002710:	4629      	mov	r1, r5
 8002712:	028b      	lsls	r3, r1, #10
 8002714:	4621      	mov	r1, r4
 8002716:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800271a:	4621      	mov	r1, r4
 800271c:	028a      	lsls	r2, r1, #10
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002726:	2200      	movs	r2, #0
 8002728:	643b      	str	r3, [r7, #64]	@ 0x40
 800272a:	647a      	str	r2, [r7, #68]	@ 0x44
 800272c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002730:	f7fe fa7a 	bl	8000c28 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800273e:	4b60      	ldr	r3, [pc, #384]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	3301      	adds	r3, #1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002750:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002760:	e0a6      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002762:	4b57      	ldr	r3, [pc, #348]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800276a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b54      	ldr	r3, [pc, #336]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02a      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	2200      	movs	r2, #0
 8002782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800278c:	2100      	movs	r1, #0
 800278e:	4b4e      	ldr	r3, [pc, #312]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002790:	fb03 f201 	mul.w	r2, r3, r1
 8002794:	2300      	movs	r3, #0
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	4413      	add	r3, r2
 800279c:	4a4a      	ldr	r2, [pc, #296]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800279e:	fba0 1202 	umull	r1, r2, r0, r2
 80027a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80027a4:	460a      	mov	r2, r1
 80027a6:	673a      	str	r2, [r7, #112]	@ 0x70
 80027a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027aa:	4413      	add	r3, r2
 80027ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b2:	2200      	movs	r2, #0
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80027b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80027c0:	f7fe fa32 	bl	8000c28 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027ce:	e05b      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ec:	4642      	mov	r2, r8
 80027ee:	464b      	mov	r3, r9
 80027f0:	f04f 0000 	mov.w	r0, #0
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	0159      	lsls	r1, r3, #5
 80027fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027fe:	0150      	lsls	r0, r2, #5
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4641      	mov	r1, r8
 8002806:	ebb2 0a01 	subs.w	sl, r2, r1
 800280a:	4649      	mov	r1, r9
 800280c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800281c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002824:	ebb2 040a 	subs.w	r4, r2, sl
 8002828:	eb63 050b 	sbc.w	r5, r3, fp
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	00eb      	lsls	r3, r5, #3
 8002836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283a:	00e2      	lsls	r2, r4, #3
 800283c:	4614      	mov	r4, r2
 800283e:	461d      	mov	r5, r3
 8002840:	4643      	mov	r3, r8
 8002842:	18e3      	adds	r3, r4, r3
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	464b      	mov	r3, r9
 8002848:	eb45 0303 	adc.w	r3, r5, r3
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285a:	4629      	mov	r1, r5
 800285c:	028b      	lsls	r3, r1, #10
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002864:	4621      	mov	r1, r4
 8002866:	028a      	lsls	r2, r1, #10
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002870:	2200      	movs	r2, #0
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	61fa      	str	r2, [r7, #28]
 8002876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287a:	f7fe f9d5 	bl	8000c28 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4613      	mov	r3, r2
 8002884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0f1b      	lsrs	r3, r3, #28
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002896:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800289a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028a6:	e003      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3798      	adds	r7, #152	@ 0x98
 80028b8:	46bd      	mov	sp, r7
 80028ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	017d7840 	.word	0x017d7840

080028cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e28d      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8083 	beq.w	80029f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028ec:	4b94      	ldr	r3, [pc, #592]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d019      	beq.n	800292c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028f8:	4b91      	ldr	r3, [pc, #580]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002900:	2b08      	cmp	r3, #8
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002904:	4b8e      	ldr	r3, [pc, #568]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002910:	d00c      	beq.n	800292c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b8b      	ldr	r3, [pc, #556]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d112      	bne.n	8002944 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b88      	ldr	r3, [pc, #544]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800292a:	d10b      	bne.n	8002944 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	4b84      	ldr	r3, [pc, #528]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05b      	beq.n	80029f0 <HAL_RCC_OscConfig+0x124>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e25a      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x90>
 800294e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7b      	ldr	r2, [pc, #492]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xcc>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xb4>
 8002966:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b73      	ldr	r3, [pc, #460]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xcc>
 8002980:	4b6f      	ldr	r3, [pc, #444]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6b      	ldr	r2, [pc, #428]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f98c 	bl	8001cbc <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f988 	bl	8001cbc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e21f      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xdc>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f978 	bl	8001cbc <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff f974 	bl	8001cbc <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	@ 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e20b      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x104>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06f      	beq.n	8002ade <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029fe:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d017      	beq.n	8002a3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a16:	4b4a      	ldr	r3, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b44      	ldr	r3, [pc, #272]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x186>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e1d3      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4937      	ldr	r1, [pc, #220]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x278>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7ff f921 	bl	8001cbc <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7ff f91d 	bl	8001cbc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1b4      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4925      	ldr	r1, [pc, #148]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_RCC_OscConfig+0x278>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f900 	bl	8001cbc <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7ff f8fc 	bl	8001cbc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e193      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d036      	beq.n	8002b58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7ff f8e0 	bl	8001cbc <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7ff f8dc 	bl	8001cbc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e173      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x234>
 8002b1e:	e01b      	b.n	8002b58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff f8c9 	bl	8001cbc <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	e00e      	b.n	8002b4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7ff f8c5 	bl	8001cbc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d907      	bls.n	8002b4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e15c      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	42470000 	.word	0x42470000
 8002b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ea      	bne.n	8002b2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8097 	beq.w	8002c94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b7c      	ldr	r3, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b79      	ldr	r3, [pc, #484]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b76      	ldr	r3, [pc, #472]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a75      	ldr	r2, [pc, #468]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7ff f885 	bl	8001cbc <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7ff f881 	bl	8001cbc <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e118      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x31e>
 8002bdc:	4b66      	ldr	r3, [pc, #408]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	4a65      	ldr	r2, [pc, #404]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x358>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x340>
 8002bf2:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	4a60      	ldr	r2, [pc, #384]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a5d      	ldr	r2, [pc, #372]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x358>
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a59      	ldr	r2, [pc, #356]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c18:	4b57      	ldr	r3, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a56      	ldr	r2, [pc, #344]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7ff f846 	bl	8001cbc <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7ff f842 	bl	8001cbc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0d7      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ee      	beq.n	8002c34 <HAL_RCC_OscConfig+0x368>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7ff f830 	bl	8001cbc <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7ff f82c 	bl	8001cbc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0c1      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ee      	bne.n	8002c60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80ad 	beq.w	8002df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d060      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d145      	bne.n	8002d3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b33      	ldr	r3, [pc, #204]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f800 	bl	8001cbc <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fffc 	bl	8001cbc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e093      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	491b      	ldr	r1, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe ffd1 	bl	8001cbc <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe ffcd 	bl	8001cbc <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e064      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x452>
 8002d3c:	e05c      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe ffba 	bl	8001cbc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe ffb6 	bl	8001cbc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04d      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x480>
 8002d6a:	e045      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e040      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_RCC_OscConfig+0x538>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d030      	beq.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d129      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d122      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d119      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10f      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800

08002e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e042      	b.n	8002ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fd3a 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	@ 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fdbd 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d175      	bne.n	8002fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_UART_Transmit+0x2c>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e06e      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2221      	movs	r2, #33	@ 0x21
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fee9 	bl	8001cbc <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f00:	d108      	bne.n	8002f14 <HAL_UART_Transmit+0x6c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e003      	b.n	8002f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f1c:	e02e      	b.n	8002f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2180      	movs	r1, #128	@ 0x80
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fb1f 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03a      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	e007      	b.n	8002f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1cb      	bne.n	8002f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2140      	movs	r1, #64	@ 0x40
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 faeb 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e006      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d112      	bne.n	8002ffe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Receive_IT+0x26>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e00b      	b.n	8003000 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fb12 	bl	800361e <UART_Start_Receive_IT>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	e000      	b.n	8003000 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ba      	sub	sp, #232	@ 0xe8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fbf2 	bl	8003850 <UART_Receive_IT>
      return;
 800306c:	e25b      	b.n	8003526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800306e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80de 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80d1 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
 80030c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
 80030e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 81f2 	beq.w	800351c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb7d 	bl	8003850 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_UART_IRQHandler+0x17a>
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04f      	beq.n	8003222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa85 	bl	8003692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d141      	bne.n	800321a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1d9      	bne.n	8003196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	4a7e      	ldr	r2, [pc, #504]	@ (80033e8 <HAL_UART_IRQHandler+0x3e0>)
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe feed 	bl	8001fd6 <HAL_DMA_Abort_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	e00e      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f994 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	e00a      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f990 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e006      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f98c 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800322e:	e175      	b.n	800351c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	bf00      	nop
    return;
 8003232:	e173      	b.n	800351c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 814f 	bne.w	80034dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8148 	beq.w	80034dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8141 	beq.w	80034dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	f040 80b6 	bne.w	80033ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800328c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8145 	beq.w	8003520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800329a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800329e:	429a      	cmp	r2, r3
 80032a0:	f080 813e 	bcs.w	8003520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b6:	f000 8088 	beq.w	80033ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1d9      	bne.n	80032ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800332a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800332e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800333c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e1      	bne.n	8003306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800336c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e3      	bne.n	8003342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e3      	bne.n	8003388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fd96 	bl	8001ef6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8b7 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033e6:	e09b      	b.n	8003520 <HAL_UART_IRQHandler+0x518>
 80033e8:	08003759 	.word	0x08003759
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808e 	beq.w	8003524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8089 	beq.w	8003524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003436:	647a      	str	r2, [r7, #68]	@ 0x44
 8003438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800343c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e3      	bne.n	8003412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3314      	adds	r3, #20
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	623b      	str	r3, [r7, #32]
   return(result);
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3314      	adds	r3, #20
 800346a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800346e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e3      	bne.n	800344a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0310 	bic.w	r3, r3, #16
 80034a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034b4:	61fa      	str	r2, [r7, #28]
 80034b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	617b      	str	r3, [r7, #20]
   return(result);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e3      	bne.n	8003490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034d2:	4619      	mov	r1, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f83d 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034da:	e023      	b.n	8003524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_UART_IRQHandler+0x4f4>
 80034e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f943 	bl	8003780 <UART_Transmit_IT>
    return;
 80034fa:	e014      	b.n	8003526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <HAL_UART_IRQHandler+0x51e>
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f983 	bl	8003820 <UART_EndTransmit_IT>
    return;
 800351a:	e004      	b.n	8003526 <HAL_UART_IRQHandler+0x51e>
    return;
 800351c:	bf00      	nop
 800351e:	e002      	b.n	8003526 <HAL_UART_IRQHandler+0x51e>
      return;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <HAL_UART_IRQHandler+0x51e>
      return;
 8003524:	bf00      	nop
  }
}
 8003526:	37e8      	adds	r7, #232	@ 0xe8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e03b      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d037      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fb99 	bl	8001cbc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e03a      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d023      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b80      	cmp	r3, #128	@ 0x80
 80035b2:	d020      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d01d      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d116      	bne.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f857 	bl	8003692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2208      	movs	r2, #8
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	429a      	cmp	r2, r3
 8003612:	d0b4      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2222      	movs	r2, #34	@ 0x22
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003662:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0220 	orr.w	r2, r2, #32
 8003682:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003692:	b480      	push	{r7}
 8003694:	b095      	sub	sp, #84	@ 0x54
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	2b01      	cmp	r3, #1
 8003708:	d119      	bne.n	800373e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	60bb      	str	r3, [r7, #8]
   return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f023 0310 	bic.w	r3, r3, #16
 8003720:	647b      	str	r3, [r7, #68]	@ 0x44
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800372a:	61ba      	str	r2, [r7, #24]
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6979      	ldr	r1, [r7, #20]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e5      	bne.n	800370a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800374c:	bf00      	nop
 800374e:	3754      	adds	r7, #84	@ 0x54
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fee4 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b21      	cmp	r3, #33	@ 0x21
 8003792:	d13e      	bne.n	8003812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	d114      	bne.n	80037c8 <UART_Transmit_IT+0x48>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	1c9a      	adds	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e008      	b.n	80037da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	1c59      	adds	r1, r3, #1
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6211      	str	r1, [r2, #32]
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4619      	mov	r1, r3
 80037e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800380c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fe73 	bl	800352c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	@ 0x30
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b22      	cmp	r3, #34	@ 0x22
 8003862:	f040 80ae 	bne.w	80039c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386e:	d117      	bne.n	80038a0 <UART_Receive_IT+0x50>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d113      	bne.n	80038a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	b29a      	uxth	r2, r3
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28
 800389e:	e026      	b.n	80038ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d007      	beq.n	80038c4 <UART_Receive_IT+0x74>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <UART_Receive_IT+0x82>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e008      	b.n	80038e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4619      	mov	r1, r3
 80038fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d15d      	bne.n	80039be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0220 	bic.w	r2, r2, #32
 8003910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	2b01      	cmp	r3, #1
 8003946:	d135      	bne.n	80039b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	613b      	str	r3, [r7, #16]
   return(result);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 0310 	bic.w	r3, r3, #16
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	623a      	str	r2, [r7, #32]
 8003970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	69f9      	ldr	r1, [r7, #28]
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	61bb      	str	r3, [r7, #24]
   return(result);
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e5      	bne.n	800394e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d10a      	bne.n	80039a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fdd1 	bl	8003554 <HAL_UARTEx_RxEventCallback>
 80039b2:	e002      	b.n	80039ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd fb0d 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e002      	b.n	80039c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3730      	adds	r7, #48	@ 0x30
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0c0      	sub	sp, #256	@ 0x100
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	ea40 0301 	orr.w	r3, r0, r1
 80039f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a24:	f021 010c 	bic.w	r1, r1, #12
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a32:	430b      	orrs	r3, r1
 8003a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	6999      	ldr	r1, [r3, #24]
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	ea40 0301 	orr.w	r3, r0, r1
 8003a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c98 <UART_SetConfig+0x2cc>)
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d005      	beq.n	8003a6c <UART_SetConfig+0xa0>
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b8d      	ldr	r3, [pc, #564]	@ (8003c9c <UART_SetConfig+0x2d0>)
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d104      	bne.n	8003a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7fe fd70 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8003a70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a74:	e003      	b.n	8003a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a76:	f7fe fd57 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a88:	f040 810c 	bne.w	8003ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003aae:	4621      	mov	r1, r4
 8003ab0:	eb12 0801 	adds.w	r8, r2, r1
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb43 0901 	adc.w	r9, r3, r1
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ace:	4690      	mov	r8, r2
 8003ad0:	4699      	mov	r9, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	eb18 0303 	adds.w	r3, r8, r3
 8003ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003adc:	462b      	mov	r3, r5
 8003ade:	eb49 0303 	adc.w	r3, r9, r3
 8003ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003af2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003afa:	460b      	mov	r3, r1
 8003afc:	18db      	adds	r3, r3, r3
 8003afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b00:	4613      	mov	r3, r2
 8003b02:	eb42 0303 	adc.w	r3, r2, r3
 8003b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b10:	f7fd f88a 	bl	8000c28 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4b61      	ldr	r3, [pc, #388]	@ (8003ca0 <UART_SetConfig+0x2d4>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011c      	lsls	r4, r3, #4
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b44:	4641      	mov	r1, r8
 8003b46:	eb12 0a01 	adds.w	sl, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b64:	4692      	mov	sl, r2
 8003b66:	469b      	mov	fp, r3
 8003b68:	4643      	mov	r3, r8
 8003b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b72:	464b      	mov	r3, r9
 8003b74:	eb4b 0303 	adc.w	r3, fp, r3
 8003b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b90:	460b      	mov	r3, r1
 8003b92:	18db      	adds	r3, r3, r3
 8003b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b96:	4613      	mov	r3, r2
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ba6:	f7fd f83f 	bl	8000c28 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <UART_SetConfig+0x2d4>)
 8003bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2264      	movs	r2, #100	@ 0x64
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	1acb      	subs	r3, r1, r3
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ca0 <UART_SetConfig+0x2d4>)
 8003bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bd4:	441c      	add	r4, r3
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003be0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	1851      	adds	r1, r2, r1
 8003bfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bfe:	4649      	mov	r1, r9
 8003c00:	414b      	adcs	r3, r1
 8003c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c10:	4659      	mov	r1, fp
 8003c12:	00cb      	lsls	r3, r1, #3
 8003c14:	4651      	mov	r1, sl
 8003c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	00ca      	lsls	r2, r1, #3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	4642      	mov	r2, r8
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	460a      	mov	r2, r1
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	18db      	adds	r3, r3, r3
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c52:	4613      	mov	r3, r2
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c62:	f7fc ffe1 	bl	8000c28 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <UART_SetConfig+0x2d4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	@ 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3332      	adds	r3, #50	@ 0x32
 8003c7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <UART_SetConfig+0x2d4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 0207 	and.w	r2, r3, #7
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4422      	add	r2, r4
 8003c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c94:	e106      	b.n	8003ea4 <UART_SetConfig+0x4d8>
 8003c96:	bf00      	nop
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40011400 	.word	0x40011400
 8003ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	6239      	str	r1, [r7, #32]
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	1854      	adds	r4, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb43 0501 	adc.w	r5, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	00eb      	lsls	r3, r5, #3
 8003cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	4643      	mov	r3, r8
 8003ce6:	18e3      	adds	r3, r4, r3
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cec:	464b      	mov	r3, r9
 8003cee:	eb45 0303 	adc.w	r3, r5, r3
 8003cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d12:	4629      	mov	r1, r5
 8003d14:	008b      	lsls	r3, r1, #2
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	008a      	lsls	r2, r1, #2
 8003d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d24:	f7fc ff80 	bl	8000c28 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4b60      	ldr	r3, [pc, #384]	@ (8003eb0 <UART_SetConfig+0x4e4>)
 8003d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	011c      	lsls	r4, r3, #4
 8003d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	61b9      	str	r1, [r7, #24]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6139      	str	r1, [r7, #16]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	460a      	mov	r2, r1
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003da2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003db0:	4649      	mov	r1, r9
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dba:	4641      	mov	r1, r8
 8003dbc:	008a      	lsls	r2, r1, #2
 8003dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dc2:	f7fc ff31 	bl	8000c28 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4b38      	ldr	r3, [pc, #224]	@ (8003eb0 <UART_SetConfig+0x4e4>)
 8003dce:	fba3 2301 	umull	r2, r3, r3, r1
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2264      	movs	r2, #100	@ 0x64
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	1acb      	subs	r3, r1, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	@ 0x32
 8003de0:	4a33      	ldr	r2, [pc, #204]	@ (8003eb0 <UART_SetConfig+0x4e4>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dec:	441c      	add	r4, r3
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003df6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003df8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	415b      	adcs	r3, r3
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	1851      	adds	r1, r2, r1
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	4649      	mov	r1, r9
 8003e14:	414b      	adcs	r3, r1
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e24:	4659      	mov	r1, fp
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4651      	mov	r1, sl
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e3e:	464b      	mov	r3, r9
 8003e40:	460a      	mov	r2, r1
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e52:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e60:	4649      	mov	r1, r9
 8003e62:	008b      	lsls	r3, r1, #2
 8003e64:	4641      	mov	r1, r8
 8003e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	008a      	lsls	r2, r1, #2
 8003e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e72:	f7fc fed9 	bl	8000c28 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <UART_SetConfig+0x4e4>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	@ 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3332      	adds	r3, #50	@ 0x32
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <UART_SetConfig+0x4e4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4422      	add	r2, r4
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb0:	51eb851f 	.word	0x51eb851f

08003eb4 <__cvt>:
 8003eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	ec57 6b10 	vmov	r6, r7, d0
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	bfbb      	ittet	lt
 8003ec6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003eca:	461f      	movlt	r7, r3
 8003ecc:	2300      	movge	r3, #0
 8003ece:	232d      	movlt	r3, #45	@ 0x2d
 8003ed0:	700b      	strb	r3, [r1, #0]
 8003ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003ed8:	4691      	mov	r9, r2
 8003eda:	f023 0820 	bic.w	r8, r3, #32
 8003ede:	bfbc      	itt	lt
 8003ee0:	4632      	movlt	r2, r6
 8003ee2:	4616      	movlt	r6, r2
 8003ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ee8:	d005      	beq.n	8003ef6 <__cvt+0x42>
 8003eea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003eee:	d100      	bne.n	8003ef2 <__cvt+0x3e>
 8003ef0:	3401      	adds	r4, #1
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	e000      	b.n	8003ef8 <__cvt+0x44>
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	ab02      	add	r3, sp, #8
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	ec47 6b10 	vmov	d0, r6, r7
 8003f04:	4653      	mov	r3, sl
 8003f06:	4622      	mov	r2, r4
 8003f08:	f000 ff9a 	bl	8004e40 <_dtoa_r>
 8003f0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f10:	4605      	mov	r5, r0
 8003f12:	d119      	bne.n	8003f48 <__cvt+0x94>
 8003f14:	f019 0f01 	tst.w	r9, #1
 8003f18:	d00e      	beq.n	8003f38 <__cvt+0x84>
 8003f1a:	eb00 0904 	add.w	r9, r0, r4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2300      	movs	r3, #0
 8003f22:	4630      	mov	r0, r6
 8003f24:	4639      	mov	r1, r7
 8003f26:	f7fc fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8003f2a:	b108      	cbz	r0, 8003f30 <__cvt+0x7c>
 8003f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f30:	2230      	movs	r2, #48	@ 0x30
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	454b      	cmp	r3, r9
 8003f36:	d31e      	bcc.n	8003f76 <__cvt+0xc2>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f3c:	1b5b      	subs	r3, r3, r5
 8003f3e:	4628      	mov	r0, r5
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	b004      	add	sp, #16
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f4c:	eb00 0904 	add.w	r9, r0, r4
 8003f50:	d1e5      	bne.n	8003f1e <__cvt+0x6a>
 8003f52:	7803      	ldrb	r3, [r0, #0]
 8003f54:	2b30      	cmp	r3, #48	@ 0x30
 8003f56:	d10a      	bne.n	8003f6e <__cvt+0xba>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f7fc fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 8003f64:	b918      	cbnz	r0, 8003f6e <__cvt+0xba>
 8003f66:	f1c4 0401 	rsb	r4, r4, #1
 8003f6a:	f8ca 4000 	str.w	r4, [sl]
 8003f6e:	f8da 3000 	ldr.w	r3, [sl]
 8003f72:	4499      	add	r9, r3
 8003f74:	e7d3      	b.n	8003f1e <__cvt+0x6a>
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	9103      	str	r1, [sp, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e7d9      	b.n	8003f32 <__cvt+0x7e>

08003f7e <__exponent>:
 8003f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f80:	2900      	cmp	r1, #0
 8003f82:	bfba      	itte	lt
 8003f84:	4249      	neglt	r1, r1
 8003f86:	232d      	movlt	r3, #45	@ 0x2d
 8003f88:	232b      	movge	r3, #43	@ 0x2b
 8003f8a:	2909      	cmp	r1, #9
 8003f8c:	7002      	strb	r2, [r0, #0]
 8003f8e:	7043      	strb	r3, [r0, #1]
 8003f90:	dd29      	ble.n	8003fe6 <__exponent+0x68>
 8003f92:	f10d 0307 	add.w	r3, sp, #7
 8003f96:	461d      	mov	r5, r3
 8003f98:	270a      	movs	r7, #10
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fa0:	fb07 1416 	mls	r4, r7, r6, r1
 8003fa4:	3430      	adds	r4, #48	@ 0x30
 8003fa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003faa:	460c      	mov	r4, r1
 8003fac:	2c63      	cmp	r4, #99	@ 0x63
 8003fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	dcf1      	bgt.n	8003f9a <__exponent+0x1c>
 8003fb6:	3130      	adds	r1, #48	@ 0x30
 8003fb8:	1e94      	subs	r4, r2, #2
 8003fba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fbe:	1c41      	adds	r1, r0, #1
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	d30a      	bcc.n	8003fdc <__exponent+0x5e>
 8003fc6:	f10d 0309 	add.w	r3, sp, #9
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ac      	cmp	r4, r5
 8003fce:	bf88      	it	hi
 8003fd0:	2300      	movhi	r3, #0
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	4403      	add	r3, r0
 8003fd6:	1a18      	subs	r0, r3, r0
 8003fd8:	b003      	add	sp, #12
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003fe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fe4:	e7ed      	b.n	8003fc2 <__exponent+0x44>
 8003fe6:	2330      	movs	r3, #48	@ 0x30
 8003fe8:	3130      	adds	r1, #48	@ 0x30
 8003fea:	7083      	strb	r3, [r0, #2]
 8003fec:	70c1      	strb	r1, [r0, #3]
 8003fee:	1d03      	adds	r3, r0, #4
 8003ff0:	e7f1      	b.n	8003fd6 <__exponent+0x58>
	...

08003ff4 <_printf_float>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	b08d      	sub	sp, #52	@ 0x34
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004000:	4616      	mov	r6, r2
 8004002:	461f      	mov	r7, r3
 8004004:	4605      	mov	r5, r0
 8004006:	f000 fe1b 	bl	8004c40 <_localeconv_r>
 800400a:	6803      	ldr	r3, [r0, #0]
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc f94e 	bl	80002b0 <strlen>
 8004014:	2300      	movs	r3, #0
 8004016:	930a      	str	r3, [sp, #40]	@ 0x28
 8004018:	f8d8 3000 	ldr.w	r3, [r8]
 800401c:	9005      	str	r0, [sp, #20]
 800401e:	3307      	adds	r3, #7
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	f103 0208 	add.w	r2, r3, #8
 8004028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800402c:	f8d4 b000 	ldr.w	fp, [r4]
 8004030:	f8c8 2000 	str.w	r2, [r8]
 8004034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004038:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800403c:	9307      	str	r3, [sp, #28]
 800403e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800404a:	4b9c      	ldr	r3, [pc, #624]	@ (80042bc <_printf_float+0x2c8>)
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	f7fc fd8c 	bl	8000b6c <__aeabi_dcmpun>
 8004054:	bb70      	cbnz	r0, 80040b4 <_printf_float+0xc0>
 8004056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800405a:	4b98      	ldr	r3, [pc, #608]	@ (80042bc <_printf_float+0x2c8>)
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	f7fc fd66 	bl	8000b30 <__aeabi_dcmple>
 8004064:	bb30      	cbnz	r0, 80040b4 <_printf_float+0xc0>
 8004066:	2200      	movs	r2, #0
 8004068:	2300      	movs	r3, #0
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc fd55 	bl	8000b1c <__aeabi_dcmplt>
 8004072:	b110      	cbz	r0, 800407a <_printf_float+0x86>
 8004074:	232d      	movs	r3, #45	@ 0x2d
 8004076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800407a:	4a91      	ldr	r2, [pc, #580]	@ (80042c0 <_printf_float+0x2cc>)
 800407c:	4b91      	ldr	r3, [pc, #580]	@ (80042c4 <_printf_float+0x2d0>)
 800407e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004082:	bf8c      	ite	hi
 8004084:	4690      	movhi	r8, r2
 8004086:	4698      	movls	r8, r3
 8004088:	2303      	movs	r3, #3
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	f02b 0304 	bic.w	r3, fp, #4
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	f04f 0900 	mov.w	r9, #0
 8004096:	9700      	str	r7, [sp, #0]
 8004098:	4633      	mov	r3, r6
 800409a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f9d2 	bl	8004448 <_printf_common>
 80040a4:	3001      	adds	r0, #1
 80040a6:	f040 808d 	bne.w	80041c4 <_printf_float+0x1d0>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b00d      	add	sp, #52	@ 0x34
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc fd56 	bl	8000b6c <__aeabi_dcmpun>
 80040c0:	b140      	cbz	r0, 80040d4 <_printf_float+0xe0>
 80040c2:	464b      	mov	r3, r9
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bfbc      	itt	lt
 80040c8:	232d      	movlt	r3, #45	@ 0x2d
 80040ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040ce:	4a7e      	ldr	r2, [pc, #504]	@ (80042c8 <_printf_float+0x2d4>)
 80040d0:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <_printf_float+0x2d8>)
 80040d2:	e7d4      	b.n	800407e <_printf_float+0x8a>
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80040da:	9206      	str	r2, [sp, #24]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	d13b      	bne.n	8004158 <_printf_float+0x164>
 80040e0:	2306      	movs	r3, #6
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80040e8:	2300      	movs	r3, #0
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	9303      	str	r3, [sp, #12]
 80040ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80040f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80040f4:	ab09      	add	r3, sp, #36	@ 0x24
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	6861      	ldr	r1, [r4, #4]
 80040fa:	ec49 8b10 	vmov	d0, r8, r9
 80040fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004102:	4628      	mov	r0, r5
 8004104:	f7ff fed6 	bl	8003eb4 <__cvt>
 8004108:	9b06      	ldr	r3, [sp, #24]
 800410a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800410c:	2b47      	cmp	r3, #71	@ 0x47
 800410e:	4680      	mov	r8, r0
 8004110:	d129      	bne.n	8004166 <_printf_float+0x172>
 8004112:	1cc8      	adds	r0, r1, #3
 8004114:	db02      	blt.n	800411c <_printf_float+0x128>
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	4299      	cmp	r1, r3
 800411a:	dd41      	ble.n	80041a0 <_printf_float+0x1ac>
 800411c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004120:	fa5f fa8a 	uxtb.w	sl, sl
 8004124:	3901      	subs	r1, #1
 8004126:	4652      	mov	r2, sl
 8004128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800412c:	9109      	str	r1, [sp, #36]	@ 0x24
 800412e:	f7ff ff26 	bl	8003f7e <__exponent>
 8004132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004134:	1813      	adds	r3, r2, r0
 8004136:	2a01      	cmp	r2, #1
 8004138:	4681      	mov	r9, r0
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	dc02      	bgt.n	8004144 <_printf_float+0x150>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	07d2      	lsls	r2, r2, #31
 8004142:	d501      	bpl.n	8004148 <_printf_float+0x154>
 8004144:	3301      	adds	r3, #1
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0a2      	beq.n	8004096 <_printf_float+0xa2>
 8004150:	232d      	movs	r3, #45	@ 0x2d
 8004152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004156:	e79e      	b.n	8004096 <_printf_float+0xa2>
 8004158:	9a06      	ldr	r2, [sp, #24]
 800415a:	2a47      	cmp	r2, #71	@ 0x47
 800415c:	d1c2      	bne.n	80040e4 <_printf_float+0xf0>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1c0      	bne.n	80040e4 <_printf_float+0xf0>
 8004162:	2301      	movs	r3, #1
 8004164:	e7bd      	b.n	80040e2 <_printf_float+0xee>
 8004166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800416a:	d9db      	bls.n	8004124 <_printf_float+0x130>
 800416c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004170:	d118      	bne.n	80041a4 <_printf_float+0x1b0>
 8004172:	2900      	cmp	r1, #0
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	dd0b      	ble.n	8004190 <_printf_float+0x19c>
 8004178:	6121      	str	r1, [r4, #16]
 800417a:	b913      	cbnz	r3, 8004182 <_printf_float+0x18e>
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	07d0      	lsls	r0, r2, #31
 8004180:	d502      	bpl.n	8004188 <_printf_float+0x194>
 8004182:	3301      	adds	r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	65a1      	str	r1, [r4, #88]	@ 0x58
 800418a:	f04f 0900 	mov.w	r9, #0
 800418e:	e7db      	b.n	8004148 <_printf_float+0x154>
 8004190:	b913      	cbnz	r3, 8004198 <_printf_float+0x1a4>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	07d2      	lsls	r2, r2, #31
 8004196:	d501      	bpl.n	800419c <_printf_float+0x1a8>
 8004198:	3302      	adds	r3, #2
 800419a:	e7f4      	b.n	8004186 <_printf_float+0x192>
 800419c:	2301      	movs	r3, #1
 800419e:	e7f2      	b.n	8004186 <_printf_float+0x192>
 80041a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80041a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041a6:	4299      	cmp	r1, r3
 80041a8:	db05      	blt.n	80041b6 <_printf_float+0x1c2>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	6121      	str	r1, [r4, #16]
 80041ae:	07d8      	lsls	r0, r3, #31
 80041b0:	d5ea      	bpl.n	8004188 <_printf_float+0x194>
 80041b2:	1c4b      	adds	r3, r1, #1
 80041b4:	e7e7      	b.n	8004186 <_printf_float+0x192>
 80041b6:	2900      	cmp	r1, #0
 80041b8:	bfd4      	ite	le
 80041ba:	f1c1 0202 	rsble	r2, r1, #2
 80041be:	2201      	movgt	r2, #1
 80041c0:	4413      	add	r3, r2
 80041c2:	e7e0      	b.n	8004186 <_printf_float+0x192>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	055a      	lsls	r2, r3, #21
 80041c8:	d407      	bmi.n	80041da <_printf_float+0x1e6>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	4642      	mov	r2, r8
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	d12b      	bne.n	8004230 <_printf_float+0x23c>
 80041d8:	e767      	b.n	80040aa <_printf_float+0xb6>
 80041da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041de:	f240 80dd 	bls.w	800439c <_printf_float+0x3a8>
 80041e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041e6:	2200      	movs	r2, #0
 80041e8:	2300      	movs	r3, #0
 80041ea:	f7fc fc8d 	bl	8000b08 <__aeabi_dcmpeq>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d033      	beq.n	800425a <_printf_float+0x266>
 80041f2:	4a37      	ldr	r2, [pc, #220]	@ (80042d0 <_printf_float+0x2dc>)
 80041f4:	2301      	movs	r3, #1
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f af54 	beq.w	80040aa <_printf_float+0xb6>
 8004202:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004206:	4543      	cmp	r3, r8
 8004208:	db02      	blt.n	8004210 <_printf_float+0x21c>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07d8      	lsls	r0, r3, #31
 800420e:	d50f      	bpl.n	8004230 <_printf_float+0x23c>
 8004210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004214:	4631      	mov	r1, r6
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	f43f af45 	beq.w	80040aa <_printf_float+0xb6>
 8004220:	f04f 0900 	mov.w	r9, #0
 8004224:	f108 38ff 	add.w	r8, r8, #4294967295
 8004228:	f104 0a1a 	add.w	sl, r4, #26
 800422c:	45c8      	cmp	r8, r9
 800422e:	dc09      	bgt.n	8004244 <_printf_float+0x250>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	079b      	lsls	r3, r3, #30
 8004234:	f100 8103 	bmi.w	800443e <_printf_float+0x44a>
 8004238:	68e0      	ldr	r0, [r4, #12]
 800423a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800423c:	4298      	cmp	r0, r3
 800423e:	bfb8      	it	lt
 8004240:	4618      	movlt	r0, r3
 8004242:	e734      	b.n	80040ae <_printf_float+0xba>
 8004244:	2301      	movs	r3, #1
 8004246:	4652      	mov	r2, sl
 8004248:	4631      	mov	r1, r6
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	3001      	adds	r0, #1
 8004250:	f43f af2b 	beq.w	80040aa <_printf_float+0xb6>
 8004254:	f109 0901 	add.w	r9, r9, #1
 8004258:	e7e8      	b.n	800422c <_printf_float+0x238>
 800425a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	dc39      	bgt.n	80042d4 <_printf_float+0x2e0>
 8004260:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <_printf_float+0x2dc>)
 8004262:	2301      	movs	r3, #1
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af1d 	beq.w	80040aa <_printf_float+0xb6>
 8004270:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004274:	ea59 0303 	orrs.w	r3, r9, r3
 8004278:	d102      	bne.n	8004280 <_printf_float+0x28c>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	07d9      	lsls	r1, r3, #31
 800427e:	d5d7      	bpl.n	8004230 <_printf_float+0x23c>
 8004280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f af0d 	beq.w	80040aa <_printf_float+0xb6>
 8004290:	f04f 0a00 	mov.w	sl, #0
 8004294:	f104 0b1a 	add.w	fp, r4, #26
 8004298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429a:	425b      	negs	r3, r3
 800429c:	4553      	cmp	r3, sl
 800429e:	dc01      	bgt.n	80042a4 <_printf_float+0x2b0>
 80042a0:	464b      	mov	r3, r9
 80042a2:	e793      	b.n	80041cc <_printf_float+0x1d8>
 80042a4:	2301      	movs	r3, #1
 80042a6:	465a      	mov	r2, fp
 80042a8:	4631      	mov	r1, r6
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b8      	blx	r7
 80042ae:	3001      	adds	r0, #1
 80042b0:	f43f aefb 	beq.w	80040aa <_printf_float+0xb6>
 80042b4:	f10a 0a01 	add.w	sl, sl, #1
 80042b8:	e7ee      	b.n	8004298 <_printf_float+0x2a4>
 80042ba:	bf00      	nop
 80042bc:	7fefffff 	.word	0x7fefffff
 80042c0:	08008d88 	.word	0x08008d88
 80042c4:	08008d84 	.word	0x08008d84
 80042c8:	08008d90 	.word	0x08008d90
 80042cc:	08008d8c 	.word	0x08008d8c
 80042d0:	08008d94 	.word	0x08008d94
 80042d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042da:	4553      	cmp	r3, sl
 80042dc:	bfa8      	it	ge
 80042de:	4653      	movge	r3, sl
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	4699      	mov	r9, r3
 80042e4:	dc36      	bgt.n	8004354 <_printf_float+0x360>
 80042e6:	f04f 0b00 	mov.w	fp, #0
 80042ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ee:	f104 021a 	add.w	r2, r4, #26
 80042f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042f4:	9306      	str	r3, [sp, #24]
 80042f6:	eba3 0309 	sub.w	r3, r3, r9
 80042fa:	455b      	cmp	r3, fp
 80042fc:	dc31      	bgt.n	8004362 <_printf_float+0x36e>
 80042fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004300:	459a      	cmp	sl, r3
 8004302:	dc3a      	bgt.n	800437a <_printf_float+0x386>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	07da      	lsls	r2, r3, #31
 8004308:	d437      	bmi.n	800437a <_printf_float+0x386>
 800430a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800430c:	ebaa 0903 	sub.w	r9, sl, r3
 8004310:	9b06      	ldr	r3, [sp, #24]
 8004312:	ebaa 0303 	sub.w	r3, sl, r3
 8004316:	4599      	cmp	r9, r3
 8004318:	bfa8      	it	ge
 800431a:	4699      	movge	r9, r3
 800431c:	f1b9 0f00 	cmp.w	r9, #0
 8004320:	dc33      	bgt.n	800438a <_printf_float+0x396>
 8004322:	f04f 0800 	mov.w	r8, #0
 8004326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800432a:	f104 0b1a 	add.w	fp, r4, #26
 800432e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004330:	ebaa 0303 	sub.w	r3, sl, r3
 8004334:	eba3 0309 	sub.w	r3, r3, r9
 8004338:	4543      	cmp	r3, r8
 800433a:	f77f af79 	ble.w	8004230 <_printf_float+0x23c>
 800433e:	2301      	movs	r3, #1
 8004340:	465a      	mov	r2, fp
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	f43f aeae 	beq.w	80040aa <_printf_float+0xb6>
 800434e:	f108 0801 	add.w	r8, r8, #1
 8004352:	e7ec      	b.n	800432e <_printf_float+0x33a>
 8004354:	4642      	mov	r2, r8
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	d1c2      	bne.n	80042e6 <_printf_float+0x2f2>
 8004360:	e6a3      	b.n	80040aa <_printf_float+0xb6>
 8004362:	2301      	movs	r3, #1
 8004364:	4631      	mov	r1, r6
 8004366:	4628      	mov	r0, r5
 8004368:	9206      	str	r2, [sp, #24]
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f ae9c 	beq.w	80040aa <_printf_float+0xb6>
 8004372:	9a06      	ldr	r2, [sp, #24]
 8004374:	f10b 0b01 	add.w	fp, fp, #1
 8004378:	e7bb      	b.n	80042f2 <_printf_float+0x2fe>
 800437a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	d1c0      	bne.n	800430a <_printf_float+0x316>
 8004388:	e68f      	b.n	80040aa <_printf_float+0xb6>
 800438a:	9a06      	ldr	r2, [sp, #24]
 800438c:	464b      	mov	r3, r9
 800438e:	4442      	add	r2, r8
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	d1c3      	bne.n	8004322 <_printf_float+0x32e>
 800439a:	e686      	b.n	80040aa <_printf_float+0xb6>
 800439c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043a0:	f1ba 0f01 	cmp.w	sl, #1
 80043a4:	dc01      	bgt.n	80043aa <_printf_float+0x3b6>
 80043a6:	07db      	lsls	r3, r3, #31
 80043a8:	d536      	bpl.n	8004418 <_printf_float+0x424>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4642      	mov	r2, r8
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f ae78 	beq.w	80040aa <_printf_float+0xb6>
 80043ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f ae70 	beq.w	80040aa <_printf_float+0xb6>
 80043ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043ce:	2200      	movs	r2, #0
 80043d0:	2300      	movs	r3, #0
 80043d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043d6:	f7fc fb97 	bl	8000b08 <__aeabi_dcmpeq>
 80043da:	b9c0      	cbnz	r0, 800440e <_printf_float+0x41a>
 80043dc:	4653      	mov	r3, sl
 80043de:	f108 0201 	add.w	r2, r8, #1
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	d10c      	bne.n	8004406 <_printf_float+0x412>
 80043ec:	e65d      	b.n	80040aa <_printf_float+0xb6>
 80043ee:	2301      	movs	r3, #1
 80043f0:	465a      	mov	r2, fp
 80043f2:	4631      	mov	r1, r6
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	f43f ae56 	beq.w	80040aa <_printf_float+0xb6>
 80043fe:	f108 0801 	add.w	r8, r8, #1
 8004402:	45d0      	cmp	r8, sl
 8004404:	dbf3      	blt.n	80043ee <_printf_float+0x3fa>
 8004406:	464b      	mov	r3, r9
 8004408:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800440c:	e6df      	b.n	80041ce <_printf_float+0x1da>
 800440e:	f04f 0800 	mov.w	r8, #0
 8004412:	f104 0b1a 	add.w	fp, r4, #26
 8004416:	e7f4      	b.n	8004402 <_printf_float+0x40e>
 8004418:	2301      	movs	r3, #1
 800441a:	4642      	mov	r2, r8
 800441c:	e7e1      	b.n	80043e2 <_printf_float+0x3ee>
 800441e:	2301      	movs	r3, #1
 8004420:	464a      	mov	r2, r9
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f ae3e 	beq.w	80040aa <_printf_float+0xb6>
 800442e:	f108 0801 	add.w	r8, r8, #1
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004436:	1a5b      	subs	r3, r3, r1
 8004438:	4543      	cmp	r3, r8
 800443a:	dcf0      	bgt.n	800441e <_printf_float+0x42a>
 800443c:	e6fc      	b.n	8004238 <_printf_float+0x244>
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	f104 0919 	add.w	r9, r4, #25
 8004446:	e7f4      	b.n	8004432 <_printf_float+0x43e>

08004448 <_printf_common>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	4616      	mov	r6, r2
 800444e:	4698      	mov	r8, r3
 8004450:	688a      	ldr	r2, [r1, #8]
 8004452:	690b      	ldr	r3, [r1, #16]
 8004454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004458:	4293      	cmp	r3, r2
 800445a:	bfb8      	it	lt
 800445c:	4613      	movlt	r3, r2
 800445e:	6033      	str	r3, [r6, #0]
 8004460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004464:	4607      	mov	r7, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b10a      	cbz	r2, 800446e <_printf_common+0x26>
 800446a:	3301      	adds	r3, #1
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	0699      	lsls	r1, r3, #26
 8004472:	bf42      	ittt	mi
 8004474:	6833      	ldrmi	r3, [r6, #0]
 8004476:	3302      	addmi	r3, #2
 8004478:	6033      	strmi	r3, [r6, #0]
 800447a:	6825      	ldr	r5, [r4, #0]
 800447c:	f015 0506 	ands.w	r5, r5, #6
 8004480:	d106      	bne.n	8004490 <_printf_common+0x48>
 8004482:	f104 0a19 	add.w	sl, r4, #25
 8004486:	68e3      	ldr	r3, [r4, #12]
 8004488:	6832      	ldr	r2, [r6, #0]
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	42ab      	cmp	r3, r5
 800448e:	dc26      	bgt.n	80044de <_printf_common+0x96>
 8004490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	3b00      	subs	r3, #0
 8004498:	bf18      	it	ne
 800449a:	2301      	movne	r3, #1
 800449c:	0692      	lsls	r2, r2, #26
 800449e:	d42b      	bmi.n	80044f8 <_printf_common+0xb0>
 80044a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044a4:	4641      	mov	r1, r8
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c8      	blx	r9
 80044aa:	3001      	adds	r0, #1
 80044ac:	d01e      	beq.n	80044ec <_printf_common+0xa4>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	f003 0306 	and.w	r3, r3, #6
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf02      	ittt	eq
 80044ba:	68e5      	ldreq	r5, [r4, #12]
 80044bc:	6833      	ldreq	r3, [r6, #0]
 80044be:	1aed      	subeq	r5, r5, r3
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	bf0c      	ite	eq
 80044c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c8:	2500      	movne	r5, #0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	bfc4      	itt	gt
 80044ce:	1a9b      	subgt	r3, r3, r2
 80044d0:	18ed      	addgt	r5, r5, r3
 80044d2:	2600      	movs	r6, #0
 80044d4:	341a      	adds	r4, #26
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d11a      	bne.n	8004510 <_printf_common+0xc8>
 80044da:	2000      	movs	r0, #0
 80044dc:	e008      	b.n	80044f0 <_printf_common+0xa8>
 80044de:	2301      	movs	r3, #1
 80044e0:	4652      	mov	r2, sl
 80044e2:	4641      	mov	r1, r8
 80044e4:	4638      	mov	r0, r7
 80044e6:	47c8      	blx	r9
 80044e8:	3001      	adds	r0, #1
 80044ea:	d103      	bne.n	80044f4 <_printf_common+0xac>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7c6      	b.n	8004486 <_printf_common+0x3e>
 80044f8:	18e1      	adds	r1, r4, r3
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	2030      	movs	r0, #48	@ 0x30
 80044fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004502:	4422      	add	r2, r4
 8004504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800450c:	3302      	adds	r3, #2
 800450e:	e7c7      	b.n	80044a0 <_printf_common+0x58>
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d0e6      	beq.n	80044ec <_printf_common+0xa4>
 800451e:	3601      	adds	r6, #1
 8004520:	e7d9      	b.n	80044d6 <_printf_common+0x8e>
	...

08004524 <_printf_i>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	7e0f      	ldrb	r7, [r1, #24]
 800452a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800452c:	2f78      	cmp	r7, #120	@ 0x78
 800452e:	4691      	mov	r9, r2
 8004530:	4680      	mov	r8, r0
 8004532:	460c      	mov	r4, r1
 8004534:	469a      	mov	sl, r3
 8004536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800453a:	d807      	bhi.n	800454c <_printf_i+0x28>
 800453c:	2f62      	cmp	r7, #98	@ 0x62
 800453e:	d80a      	bhi.n	8004556 <_printf_i+0x32>
 8004540:	2f00      	cmp	r7, #0
 8004542:	f000 80d1 	beq.w	80046e8 <_printf_i+0x1c4>
 8004546:	2f58      	cmp	r7, #88	@ 0x58
 8004548:	f000 80b8 	beq.w	80046bc <_printf_i+0x198>
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004554:	e03a      	b.n	80045cc <_printf_i+0xa8>
 8004556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800455a:	2b15      	cmp	r3, #21
 800455c:	d8f6      	bhi.n	800454c <_printf_i+0x28>
 800455e:	a101      	add	r1, pc, #4	@ (adr r1, 8004564 <_printf_i+0x40>)
 8004560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045d1 	.word	0x080045d1
 800456c:	0800454d 	.word	0x0800454d
 8004570:	0800454d 	.word	0x0800454d
 8004574:	0800454d 	.word	0x0800454d
 8004578:	0800454d 	.word	0x0800454d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800454d 	.word	0x0800454d
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	080046cf 	.word	0x080046cf
 8004594:	080045fb 	.word	0x080045fb
 8004598:	08004689 	.word	0x08004689
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	0800454d 	.word	0x0800454d
 80045a4:	080046f1 	.word	0x080046f1
 80045a8:	0800454d 	.word	0x0800454d
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	0800454d 	.word	0x0800454d
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	08004691 	.word	0x08004691
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6032      	str	r2, [r6, #0]
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045cc:	2301      	movs	r3, #1
 80045ce:	e09c      	b.n	800470a <_printf_i+0x1e6>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	0606      	lsls	r6, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xbc>
 80045dc:	681d      	ldr	r5, [r3, #0]
 80045de:	e003      	b.n	80045e8 <_printf_i+0xc4>
 80045e0:	0645      	lsls	r5, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xb8>
 80045e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	da03      	bge.n	80045f4 <_printf_i+0xd0>
 80045ec:	232d      	movs	r3, #45	@ 0x2d
 80045ee:	426d      	negs	r5, r5
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f4:	4858      	ldr	r0, [pc, #352]	@ (8004758 <_printf_i+0x234>)
 80045f6:	230a      	movs	r3, #10
 80045f8:	e011      	b.n	800461e <_printf_i+0xfa>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	0608      	lsls	r0, r1, #24
 8004600:	f853 5b04 	ldr.w	r5, [r3], #4
 8004604:	d402      	bmi.n	800460c <_printf_i+0xe8>
 8004606:	0649      	lsls	r1, r1, #25
 8004608:	bf48      	it	mi
 800460a:	b2ad      	uxthmi	r5, r5
 800460c:	2f6f      	cmp	r7, #111	@ 0x6f
 800460e:	4852      	ldr	r0, [pc, #328]	@ (8004758 <_printf_i+0x234>)
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	bf14      	ite	ne
 8004614:	230a      	movne	r3, #10
 8004616:	2308      	moveq	r3, #8
 8004618:	2100      	movs	r1, #0
 800461a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800461e:	6866      	ldr	r6, [r4, #4]
 8004620:	60a6      	str	r6, [r4, #8]
 8004622:	2e00      	cmp	r6, #0
 8004624:	db05      	blt.n	8004632 <_printf_i+0x10e>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	432e      	orrs	r6, r5
 800462a:	f021 0104 	bic.w	r1, r1, #4
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	d04b      	beq.n	80046ca <_printf_i+0x1a6>
 8004632:	4616      	mov	r6, r2
 8004634:	fbb5 f1f3 	udiv	r1, r5, r3
 8004638:	fb03 5711 	mls	r7, r3, r1, r5
 800463c:	5dc7      	ldrb	r7, [r0, r7]
 800463e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004642:	462f      	mov	r7, r5
 8004644:	42bb      	cmp	r3, r7
 8004646:	460d      	mov	r5, r1
 8004648:	d9f4      	bls.n	8004634 <_printf_i+0x110>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d10b      	bne.n	8004666 <_printf_i+0x142>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	07df      	lsls	r7, r3, #31
 8004652:	d508      	bpl.n	8004666 <_printf_i+0x142>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6861      	ldr	r1, [r4, #4]
 8004658:	4299      	cmp	r1, r3
 800465a:	bfde      	ittt	le
 800465c:	2330      	movle	r3, #48	@ 0x30
 800465e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004662:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004666:	1b92      	subs	r2, r2, r6
 8004668:	6122      	str	r2, [r4, #16]
 800466a:	f8cd a000 	str.w	sl, [sp]
 800466e:	464b      	mov	r3, r9
 8004670:	aa03      	add	r2, sp, #12
 8004672:	4621      	mov	r1, r4
 8004674:	4640      	mov	r0, r8
 8004676:	f7ff fee7 	bl	8004448 <_printf_common>
 800467a:	3001      	adds	r0, #1
 800467c:	d14a      	bne.n	8004714 <_printf_i+0x1f0>
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f043 0320 	orr.w	r3, r3, #32
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	4832      	ldr	r0, [pc, #200]	@ (800475c <_printf_i+0x238>)
 8004692:	2778      	movs	r7, #120	@ 0x78
 8004694:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	6831      	ldr	r1, [r6, #0]
 800469c:	061f      	lsls	r7, r3, #24
 800469e:	f851 5b04 	ldr.w	r5, [r1], #4
 80046a2:	d402      	bmi.n	80046aa <_printf_i+0x186>
 80046a4:	065f      	lsls	r7, r3, #25
 80046a6:	bf48      	it	mi
 80046a8:	b2ad      	uxthmi	r5, r5
 80046aa:	6031      	str	r1, [r6, #0]
 80046ac:	07d9      	lsls	r1, r3, #31
 80046ae:	bf44      	itt	mi
 80046b0:	f043 0320 	orrmi.w	r3, r3, #32
 80046b4:	6023      	strmi	r3, [r4, #0]
 80046b6:	b11d      	cbz	r5, 80046c0 <_printf_i+0x19c>
 80046b8:	2310      	movs	r3, #16
 80046ba:	e7ad      	b.n	8004618 <_printf_i+0xf4>
 80046bc:	4826      	ldr	r0, [pc, #152]	@ (8004758 <_printf_i+0x234>)
 80046be:	e7e9      	b.n	8004694 <_printf_i+0x170>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f023 0320 	bic.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	e7f6      	b.n	80046b8 <_printf_i+0x194>
 80046ca:	4616      	mov	r6, r2
 80046cc:	e7bd      	b.n	800464a <_printf_i+0x126>
 80046ce:	6833      	ldr	r3, [r6, #0]
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	6961      	ldr	r1, [r4, #20]
 80046d4:	1d18      	adds	r0, r3, #4
 80046d6:	6030      	str	r0, [r6, #0]
 80046d8:	062e      	lsls	r6, r5, #24
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	d501      	bpl.n	80046e2 <_printf_i+0x1be>
 80046de:	6019      	str	r1, [r3, #0]
 80046e0:	e002      	b.n	80046e8 <_printf_i+0x1c4>
 80046e2:	0668      	lsls	r0, r5, #25
 80046e4:	d5fb      	bpl.n	80046de <_printf_i+0x1ba>
 80046e6:	8019      	strh	r1, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	4616      	mov	r6, r2
 80046ee:	e7bc      	b.n	800466a <_printf_i+0x146>
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	6032      	str	r2, [r6, #0]
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7fb fd87 	bl	8000210 <memchr>
 8004702:	b108      	cbz	r0, 8004708 <_printf_i+0x1e4>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	6060      	str	r0, [r4, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004712:	e7aa      	b.n	800466a <_printf_i+0x146>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	4632      	mov	r2, r6
 8004718:	4649      	mov	r1, r9
 800471a:	4640      	mov	r0, r8
 800471c:	47d0      	blx	sl
 800471e:	3001      	adds	r0, #1
 8004720:	d0ad      	beq.n	800467e <_printf_i+0x15a>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	079b      	lsls	r3, r3, #30
 8004726:	d413      	bmi.n	8004750 <_printf_i+0x22c>
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	4298      	cmp	r0, r3
 800472e:	bfb8      	it	lt
 8004730:	4618      	movlt	r0, r3
 8004732:	e7a6      	b.n	8004682 <_printf_i+0x15e>
 8004734:	2301      	movs	r3, #1
 8004736:	4632      	mov	r2, r6
 8004738:	4649      	mov	r1, r9
 800473a:	4640      	mov	r0, r8
 800473c:	47d0      	blx	sl
 800473e:	3001      	adds	r0, #1
 8004740:	d09d      	beq.n	800467e <_printf_i+0x15a>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	9903      	ldr	r1, [sp, #12]
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	42ab      	cmp	r3, r5
 800474c:	dcf2      	bgt.n	8004734 <_printf_i+0x210>
 800474e:	e7eb      	b.n	8004728 <_printf_i+0x204>
 8004750:	2500      	movs	r5, #0
 8004752:	f104 0619 	add.w	r6, r4, #25
 8004756:	e7f5      	b.n	8004744 <_printf_i+0x220>
 8004758:	08008d96 	.word	0x08008d96
 800475c:	08008da7 	.word	0x08008da7

08004760 <std>:
 8004760:	2300      	movs	r3, #0
 8004762:	b510      	push	{r4, lr}
 8004764:	4604      	mov	r4, r0
 8004766:	e9c0 3300 	strd	r3, r3, [r0]
 800476a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476e:	6083      	str	r3, [r0, #8]
 8004770:	8181      	strh	r1, [r0, #12]
 8004772:	6643      	str	r3, [r0, #100]	@ 0x64
 8004774:	81c2      	strh	r2, [r0, #14]
 8004776:	6183      	str	r3, [r0, #24]
 8004778:	4619      	mov	r1, r3
 800477a:	2208      	movs	r2, #8
 800477c:	305c      	adds	r0, #92	@ 0x5c
 800477e:	f000 fa57 	bl	8004c30 <memset>
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <std+0x58>)
 8004784:	6263      	str	r3, [r4, #36]	@ 0x24
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <std+0x5c>)
 8004788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <std+0x60>)
 800478c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800478e:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <std+0x64>)
 8004790:	6323      	str	r3, [r4, #48]	@ 0x30
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <std+0x68>)
 8004794:	6224      	str	r4, [r4, #32]
 8004796:	429c      	cmp	r4, r3
 8004798:	d006      	beq.n	80047a8 <std+0x48>
 800479a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800479e:	4294      	cmp	r4, r2
 80047a0:	d002      	beq.n	80047a8 <std+0x48>
 80047a2:	33d0      	adds	r3, #208	@ 0xd0
 80047a4:	429c      	cmp	r4, r3
 80047a6:	d105      	bne.n	80047b4 <std+0x54>
 80047a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b0:	f000 baba 	b.w	8004d28 <__retarget_lock_init_recursive>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	bf00      	nop
 80047b8:	08004a81 	.word	0x08004a81
 80047bc:	08004aa3 	.word	0x08004aa3
 80047c0:	08004adb 	.word	0x08004adb
 80047c4:	08004aff 	.word	0x08004aff
 80047c8:	200002bc 	.word	0x200002bc

080047cc <stdio_exit_handler>:
 80047cc:	4a02      	ldr	r2, [pc, #8]	@ (80047d8 <stdio_exit_handler+0xc>)
 80047ce:	4903      	ldr	r1, [pc, #12]	@ (80047dc <stdio_exit_handler+0x10>)
 80047d0:	4803      	ldr	r0, [pc, #12]	@ (80047e0 <stdio_exit_handler+0x14>)
 80047d2:	f000 b869 	b.w	80048a8 <_fwalk_sglue>
 80047d6:	bf00      	nop
 80047d8:	2000000c 	.word	0x2000000c
 80047dc:	08006661 	.word	0x08006661
 80047e0:	2000001c 	.word	0x2000001c

080047e4 <cleanup_stdio>:
 80047e4:	6841      	ldr	r1, [r0, #4]
 80047e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <cleanup_stdio+0x34>)
 80047e8:	4299      	cmp	r1, r3
 80047ea:	b510      	push	{r4, lr}
 80047ec:	4604      	mov	r4, r0
 80047ee:	d001      	beq.n	80047f4 <cleanup_stdio+0x10>
 80047f0:	f001 ff36 	bl	8006660 <_fflush_r>
 80047f4:	68a1      	ldr	r1, [r4, #8]
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <cleanup_stdio+0x38>)
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <cleanup_stdio+0x1e>
 80047fc:	4620      	mov	r0, r4
 80047fe:	f001 ff2f 	bl	8006660 <_fflush_r>
 8004802:	68e1      	ldr	r1, [r4, #12]
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <cleanup_stdio+0x3c>)
 8004806:	4299      	cmp	r1, r3
 8004808:	d004      	beq.n	8004814 <cleanup_stdio+0x30>
 800480a:	4620      	mov	r0, r4
 800480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004810:	f001 bf26 	b.w	8006660 <_fflush_r>
 8004814:	bd10      	pop	{r4, pc}
 8004816:	bf00      	nop
 8004818:	200002bc 	.word	0x200002bc
 800481c:	20000324 	.word	0x20000324
 8004820:	2000038c 	.word	0x2000038c

08004824 <global_stdio_init.part.0>:
 8004824:	b510      	push	{r4, lr}
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <global_stdio_init.part.0+0x30>)
 8004828:	4c0b      	ldr	r4, [pc, #44]	@ (8004858 <global_stdio_init.part.0+0x34>)
 800482a:	4a0c      	ldr	r2, [pc, #48]	@ (800485c <global_stdio_init.part.0+0x38>)
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	4620      	mov	r0, r4
 8004830:	2200      	movs	r2, #0
 8004832:	2104      	movs	r1, #4
 8004834:	f7ff ff94 	bl	8004760 <std>
 8004838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800483c:	2201      	movs	r2, #1
 800483e:	2109      	movs	r1, #9
 8004840:	f7ff ff8e 	bl	8004760 <std>
 8004844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004848:	2202      	movs	r2, #2
 800484a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484e:	2112      	movs	r1, #18
 8004850:	f7ff bf86 	b.w	8004760 <std>
 8004854:	200003f4 	.word	0x200003f4
 8004858:	200002bc 	.word	0x200002bc
 800485c:	080047cd 	.word	0x080047cd

08004860 <__sfp_lock_acquire>:
 8004860:	4801      	ldr	r0, [pc, #4]	@ (8004868 <__sfp_lock_acquire+0x8>)
 8004862:	f000 ba62 	b.w	8004d2a <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	200003fd 	.word	0x200003fd

0800486c <__sfp_lock_release>:
 800486c:	4801      	ldr	r0, [pc, #4]	@ (8004874 <__sfp_lock_release+0x8>)
 800486e:	f000 ba5d 	b.w	8004d2c <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	200003fd 	.word	0x200003fd

08004878 <__sinit>:
 8004878:	b510      	push	{r4, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	f7ff fff0 	bl	8004860 <__sfp_lock_acquire>
 8004880:	6a23      	ldr	r3, [r4, #32]
 8004882:	b11b      	cbz	r3, 800488c <__sinit+0x14>
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004888:	f7ff bff0 	b.w	800486c <__sfp_lock_release>
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <__sinit+0x28>)
 800488e:	6223      	str	r3, [r4, #32]
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <__sinit+0x2c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f5      	bne.n	8004884 <__sinit+0xc>
 8004898:	f7ff ffc4 	bl	8004824 <global_stdio_init.part.0>
 800489c:	e7f2      	b.n	8004884 <__sinit+0xc>
 800489e:	bf00      	nop
 80048a0:	080047e5 	.word	0x080047e5
 80048a4:	200003f4 	.word	0x200003f4

080048a8 <_fwalk_sglue>:
 80048a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ac:	4607      	mov	r7, r0
 80048ae:	4688      	mov	r8, r1
 80048b0:	4614      	mov	r4, r2
 80048b2:	2600      	movs	r6, #0
 80048b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048b8:	f1b9 0901 	subs.w	r9, r9, #1
 80048bc:	d505      	bpl.n	80048ca <_fwalk_sglue+0x22>
 80048be:	6824      	ldr	r4, [r4, #0]
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d1f7      	bne.n	80048b4 <_fwalk_sglue+0xc>
 80048c4:	4630      	mov	r0, r6
 80048c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d907      	bls.n	80048e0 <_fwalk_sglue+0x38>
 80048d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048d4:	3301      	adds	r3, #1
 80048d6:	d003      	beq.n	80048e0 <_fwalk_sglue+0x38>
 80048d8:	4629      	mov	r1, r5
 80048da:	4638      	mov	r0, r7
 80048dc:	47c0      	blx	r8
 80048de:	4306      	orrs	r6, r0
 80048e0:	3568      	adds	r5, #104	@ 0x68
 80048e2:	e7e9      	b.n	80048b8 <_fwalk_sglue+0x10>

080048e4 <iprintf>:
 80048e4:	b40f      	push	{r0, r1, r2, r3}
 80048e6:	b507      	push	{r0, r1, r2, lr}
 80048e8:	4906      	ldr	r1, [pc, #24]	@ (8004904 <iprintf+0x20>)
 80048ea:	ab04      	add	r3, sp, #16
 80048ec:	6808      	ldr	r0, [r1, #0]
 80048ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f2:	6881      	ldr	r1, [r0, #8]
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	f001 fd17 	bl	8006328 <_vfiprintf_r>
 80048fa:	b003      	add	sp, #12
 80048fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr
 8004904:	20000018 	.word	0x20000018

08004908 <setbuf>:
 8004908:	fab1 f281 	clz	r2, r1
 800490c:	0952      	lsrs	r2, r2, #5
 800490e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004912:	0052      	lsls	r2, r2, #1
 8004914:	f000 b800 	b.w	8004918 <setvbuf>

08004918 <setvbuf>:
 8004918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800491c:	461d      	mov	r5, r3
 800491e:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <setvbuf+0x164>)
 8004920:	681f      	ldr	r7, [r3, #0]
 8004922:	4604      	mov	r4, r0
 8004924:	460e      	mov	r6, r1
 8004926:	4690      	mov	r8, r2
 8004928:	b127      	cbz	r7, 8004934 <setvbuf+0x1c>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	b913      	cbnz	r3, 8004934 <setvbuf+0x1c>
 800492e:	4638      	mov	r0, r7
 8004930:	f7ff ffa2 	bl	8004878 <__sinit>
 8004934:	f1b8 0f02 	cmp.w	r8, #2
 8004938:	d006      	beq.n	8004948 <setvbuf+0x30>
 800493a:	f1b8 0f01 	cmp.w	r8, #1
 800493e:	f200 809a 	bhi.w	8004a76 <setvbuf+0x15e>
 8004942:	2d00      	cmp	r5, #0
 8004944:	f2c0 8097 	blt.w	8004a76 <setvbuf+0x15e>
 8004948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800494a:	07d9      	lsls	r1, r3, #31
 800494c:	d405      	bmi.n	800495a <setvbuf+0x42>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059a      	lsls	r2, r3, #22
 8004952:	d402      	bmi.n	800495a <setvbuf+0x42>
 8004954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004956:	f000 f9e8 	bl	8004d2a <__retarget_lock_acquire_recursive>
 800495a:	4621      	mov	r1, r4
 800495c:	4638      	mov	r0, r7
 800495e:	f001 fe7f 	bl	8006660 <_fflush_r>
 8004962:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004964:	b141      	cbz	r1, 8004978 <setvbuf+0x60>
 8004966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800496a:	4299      	cmp	r1, r3
 800496c:	d002      	beq.n	8004974 <setvbuf+0x5c>
 800496e:	4638      	mov	r0, r7
 8004970:	f001 f836 	bl	80059e0 <_free_r>
 8004974:	2300      	movs	r3, #0
 8004976:	6363      	str	r3, [r4, #52]	@ 0x34
 8004978:	2300      	movs	r3, #0
 800497a:	61a3      	str	r3, [r4, #24]
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	d503      	bpl.n	800498c <setvbuf+0x74>
 8004984:	6921      	ldr	r1, [r4, #16]
 8004986:	4638      	mov	r0, r7
 8004988:	f001 f82a 	bl	80059e0 <_free_r>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	f1b8 0f02 	cmp.w	r8, #2
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	d061      	beq.n	8004a62 <setvbuf+0x14a>
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	466a      	mov	r2, sp
 80049a2:	4621      	mov	r1, r4
 80049a4:	4638      	mov	r0, r7
 80049a6:	f001 fe83 	bl	80066b0 <__swhatbuf_r>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	4318      	orrs	r0, r3
 80049ae:	81a0      	strh	r0, [r4, #12]
 80049b0:	bb2d      	cbnz	r5, 80049fe <setvbuf+0xe6>
 80049b2:	9d00      	ldr	r5, [sp, #0]
 80049b4:	4628      	mov	r0, r5
 80049b6:	f001 f85d 	bl	8005a74 <malloc>
 80049ba:	4606      	mov	r6, r0
 80049bc:	2800      	cmp	r0, #0
 80049be:	d152      	bne.n	8004a66 <setvbuf+0x14e>
 80049c0:	f8dd 9000 	ldr.w	r9, [sp]
 80049c4:	45a9      	cmp	r9, r5
 80049c6:	d140      	bne.n	8004a4a <setvbuf+0x132>
 80049c8:	f04f 35ff 	mov.w	r5, #4294967295
 80049cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d0:	f043 0202 	orr.w	r2, r3, #2
 80049d4:	81a2      	strh	r2, [r4, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	60a2      	str	r2, [r4, #8]
 80049da:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	6122      	str	r2, [r4, #16]
 80049e2:	2201      	movs	r2, #1
 80049e4:	6162      	str	r2, [r4, #20]
 80049e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049e8:	07d6      	lsls	r6, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <setvbuf+0xde>
 80049ec:	0598      	lsls	r0, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <setvbuf+0xde>
 80049f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049f2:	f000 f99b 	bl	8004d2c <__retarget_lock_release_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	b003      	add	sp, #12
 80049fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	d0d8      	beq.n	80049b4 <setvbuf+0x9c>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	b913      	cbnz	r3, 8004a0c <setvbuf+0xf4>
 8004a06:	4638      	mov	r0, r7
 8004a08:	f7ff ff36 	bl	8004878 <__sinit>
 8004a0c:	f1b8 0f01 	cmp.w	r8, #1
 8004a10:	bf08      	it	eq
 8004a12:	89a3      	ldrheq	r3, [r4, #12]
 8004a14:	6026      	str	r6, [r4, #0]
 8004a16:	bf04      	itt	eq
 8004a18:	f043 0301 	orreq.w	r3, r3, #1
 8004a1c:	81a3      	strheq	r3, [r4, #12]
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f013 0208 	ands.w	r2, r3, #8
 8004a26:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a2a:	d01e      	beq.n	8004a6a <setvbuf+0x152>
 8004a2c:	07d9      	lsls	r1, r3, #31
 8004a2e:	bf41      	itttt	mi
 8004a30:	2200      	movmi	r2, #0
 8004a32:	426d      	negmi	r5, r5
 8004a34:	60a2      	strmi	r2, [r4, #8]
 8004a36:	61a5      	strmi	r5, [r4, #24]
 8004a38:	bf58      	it	pl
 8004a3a:	60a5      	strpl	r5, [r4, #8]
 8004a3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a3e:	07d2      	lsls	r2, r2, #31
 8004a40:	d401      	bmi.n	8004a46 <setvbuf+0x12e>
 8004a42:	059b      	lsls	r3, r3, #22
 8004a44:	d513      	bpl.n	8004a6e <setvbuf+0x156>
 8004a46:	2500      	movs	r5, #0
 8004a48:	e7d5      	b.n	80049f6 <setvbuf+0xde>
 8004a4a:	4648      	mov	r0, r9
 8004a4c:	f001 f812 	bl	8005a74 <malloc>
 8004a50:	4606      	mov	r6, r0
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d0b8      	beq.n	80049c8 <setvbuf+0xb0>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	464d      	mov	r5, r9
 8004a60:	e7cf      	b.n	8004a02 <setvbuf+0xea>
 8004a62:	2500      	movs	r5, #0
 8004a64:	e7b2      	b.n	80049cc <setvbuf+0xb4>
 8004a66:	46a9      	mov	r9, r5
 8004a68:	e7f5      	b.n	8004a56 <setvbuf+0x13e>
 8004a6a:	60a2      	str	r2, [r4, #8]
 8004a6c:	e7e6      	b.n	8004a3c <setvbuf+0x124>
 8004a6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a70:	f000 f95c 	bl	8004d2c <__retarget_lock_release_recursive>
 8004a74:	e7e7      	b.n	8004a46 <setvbuf+0x12e>
 8004a76:	f04f 35ff 	mov.w	r5, #4294967295
 8004a7a:	e7bc      	b.n	80049f6 <setvbuf+0xde>
 8004a7c:	20000018 	.word	0x20000018

08004a80 <__sread>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	460c      	mov	r4, r1
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	f000 f900 	bl	8004c8c <_read_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	bfab      	itete	ge
 8004a90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a92:	89a3      	ldrhlt	r3, [r4, #12]
 8004a94:	181b      	addge	r3, r3, r0
 8004a96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a9a:	bfac      	ite	ge
 8004a9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a9e:	81a3      	strhlt	r3, [r4, #12]
 8004aa0:	bd10      	pop	{r4, pc}

08004aa2 <__swrite>:
 8004aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	05db      	lsls	r3, r3, #23
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	d505      	bpl.n	8004ac0 <__swrite+0x1e>
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	2302      	movs	r3, #2
 8004aba:	2200      	movs	r2, #0
 8004abc:	f000 f8d4 	bl	8004c68 <_lseek_r>
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad6:	f000 b8eb 	b.w	8004cb0 <_write_r>

08004ada <__sseek>:
 8004ada:	b510      	push	{r4, lr}
 8004adc:	460c      	mov	r4, r1
 8004ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae2:	f000 f8c1 	bl	8004c68 <_lseek_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	bf15      	itete	ne
 8004aec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004aee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004af2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004af6:	81a3      	strheq	r3, [r4, #12]
 8004af8:	bf18      	it	ne
 8004afa:	81a3      	strhne	r3, [r4, #12]
 8004afc:	bd10      	pop	{r4, pc}

08004afe <__sclose>:
 8004afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b02:	f000 b8a1 	b.w	8004c48 <_close_r>

08004b06 <__swbuf_r>:
 8004b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b08:	460e      	mov	r6, r1
 8004b0a:	4614      	mov	r4, r2
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	b118      	cbz	r0, 8004b18 <__swbuf_r+0x12>
 8004b10:	6a03      	ldr	r3, [r0, #32]
 8004b12:	b90b      	cbnz	r3, 8004b18 <__swbuf_r+0x12>
 8004b14:	f7ff feb0 	bl	8004878 <__sinit>
 8004b18:	69a3      	ldr	r3, [r4, #24]
 8004b1a:	60a3      	str	r3, [r4, #8]
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	071a      	lsls	r2, r3, #28
 8004b20:	d501      	bpl.n	8004b26 <__swbuf_r+0x20>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	b943      	cbnz	r3, 8004b38 <__swbuf_r+0x32>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 f82b 	bl	8004b84 <__swsetup_r>
 8004b2e:	b118      	cbz	r0, 8004b38 <__swbuf_r+0x32>
 8004b30:	f04f 37ff 	mov.w	r7, #4294967295
 8004b34:	4638      	mov	r0, r7
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	6922      	ldr	r2, [r4, #16]
 8004b3c:	1a98      	subs	r0, r3, r2
 8004b3e:	6963      	ldr	r3, [r4, #20]
 8004b40:	b2f6      	uxtb	r6, r6
 8004b42:	4283      	cmp	r3, r0
 8004b44:	4637      	mov	r7, r6
 8004b46:	dc05      	bgt.n	8004b54 <__swbuf_r+0x4e>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f001 fd88 	bl	8006660 <_fflush_r>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1ed      	bne.n	8004b30 <__swbuf_r+0x2a>
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60a3      	str	r3, [r4, #8]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	6022      	str	r2, [r4, #0]
 8004b60:	701e      	strb	r6, [r3, #0]
 8004b62:	6962      	ldr	r2, [r4, #20]
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d004      	beq.n	8004b74 <__swbuf_r+0x6e>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	07db      	lsls	r3, r3, #31
 8004b6e:	d5e1      	bpl.n	8004b34 <__swbuf_r+0x2e>
 8004b70:	2e0a      	cmp	r6, #10
 8004b72:	d1df      	bne.n	8004b34 <__swbuf_r+0x2e>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f001 fd72 	bl	8006660 <_fflush_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d0d9      	beq.n	8004b34 <__swbuf_r+0x2e>
 8004b80:	e7d6      	b.n	8004b30 <__swbuf_r+0x2a>
	...

08004b84 <__swsetup_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <__swsetup_r+0xa8>)
 8004b88:	4605      	mov	r5, r0
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	b118      	cbz	r0, 8004b98 <__swsetup_r+0x14>
 8004b90:	6a03      	ldr	r3, [r0, #32]
 8004b92:	b90b      	cbnz	r3, 8004b98 <__swsetup_r+0x14>
 8004b94:	f7ff fe70 	bl	8004878 <__sinit>
 8004b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9c:	0719      	lsls	r1, r3, #28
 8004b9e:	d422      	bmi.n	8004be6 <__swsetup_r+0x62>
 8004ba0:	06da      	lsls	r2, r3, #27
 8004ba2:	d407      	bmi.n	8004bb4 <__swsetup_r+0x30>
 8004ba4:	2209      	movs	r2, #9
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb2:	e033      	b.n	8004c1c <__swsetup_r+0x98>
 8004bb4:	0758      	lsls	r0, r3, #29
 8004bb6:	d512      	bpl.n	8004bde <__swsetup_r+0x5a>
 8004bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bba:	b141      	cbz	r1, 8004bce <__swsetup_r+0x4a>
 8004bbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <__swsetup_r+0x46>
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 ff0b 	bl	80059e0 <_free_r>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0308 	orr.w	r3, r3, #8
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	b94b      	cbnz	r3, 8004bfe <__swsetup_r+0x7a>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf4:	d003      	beq.n	8004bfe <__swsetup_r+0x7a>
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f001 fd7f 	bl	80066fc <__smakebuf_r>
 8004bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c02:	f013 0201 	ands.w	r2, r3, #1
 8004c06:	d00a      	beq.n	8004c1e <__swsetup_r+0x9a>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60a2      	str	r2, [r4, #8]
 8004c0c:	6962      	ldr	r2, [r4, #20]
 8004c0e:	4252      	negs	r2, r2
 8004c10:	61a2      	str	r2, [r4, #24]
 8004c12:	6922      	ldr	r2, [r4, #16]
 8004c14:	b942      	cbnz	r2, 8004c28 <__swsetup_r+0xa4>
 8004c16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c1a:	d1c5      	bne.n	8004ba8 <__swsetup_r+0x24>
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}
 8004c1e:	0799      	lsls	r1, r3, #30
 8004c20:	bf58      	it	pl
 8004c22:	6962      	ldrpl	r2, [r4, #20]
 8004c24:	60a2      	str	r2, [r4, #8]
 8004c26:	e7f4      	b.n	8004c12 <__swsetup_r+0x8e>
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e7f7      	b.n	8004c1c <__swsetup_r+0x98>
 8004c2c:	20000018 	.word	0x20000018

08004c30 <memset>:
 8004c30:	4402      	add	r2, r0
 8004c32:	4603      	mov	r3, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d100      	bne.n	8004c3a <memset+0xa>
 8004c38:	4770      	bx	lr
 8004c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3e:	e7f9      	b.n	8004c34 <memset+0x4>

08004c40 <_localeconv_r>:
 8004c40:	4800      	ldr	r0, [pc, #0]	@ (8004c44 <_localeconv_r+0x4>)
 8004c42:	4770      	bx	lr
 8004c44:	20000158 	.word	0x20000158

08004c48 <_close_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	@ (8004c64 <_close_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc ff26 	bl	8001aa4 <_close>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_close_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_close_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200003f8 	.word	0x200003f8

08004c68 <_lseek_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d07      	ldr	r5, [pc, #28]	@ (8004c88 <_lseek_r+0x20>)
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	4608      	mov	r0, r1
 8004c70:	4611      	mov	r1, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	602a      	str	r2, [r5, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f7fc ff3b 	bl	8001af2 <_lseek>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_lseek_r+0x1e>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_lseek_r+0x1e>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	200003f8 	.word	0x200003f8

08004c8c <_read_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d07      	ldr	r5, [pc, #28]	@ (8004cac <_read_r+0x20>)
 8004c90:	4604      	mov	r4, r0
 8004c92:	4608      	mov	r0, r1
 8004c94:	4611      	mov	r1, r2
 8004c96:	2200      	movs	r2, #0
 8004c98:	602a      	str	r2, [r5, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f7fc fee5 	bl	8001a6a <_read>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_read_r+0x1e>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_read_r+0x1e>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	200003f8 	.word	0x200003f8

08004cb0 <_write_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d07      	ldr	r5, [pc, #28]	@ (8004cd0 <_write_r+0x20>)
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	4608      	mov	r0, r1
 8004cb8:	4611      	mov	r1, r2
 8004cba:	2200      	movs	r2, #0
 8004cbc:	602a      	str	r2, [r5, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f7fc f95e 	bl	8000f80 <_write>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_write_r+0x1e>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_write_r+0x1e>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	200003f8 	.word	0x200003f8

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	@ (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000018 	.word	0x20000018

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f004 f810 	bl	8008d18 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08009390 	.word	0x08009390
 8004d1c:	08009390 	.word	0x08009390
 8004d20:	08009390 	.word	0x08009390
 8004d24:	08009394 	.word	0x08009394

08004d28 <__retarget_lock_init_recursive>:
 8004d28:	4770      	bx	lr

08004d2a <__retarget_lock_acquire_recursive>:
 8004d2a:	4770      	bx	lr

08004d2c <__retarget_lock_release_recursive>:
 8004d2c:	4770      	bx	lr

08004d2e <quorem>:
 8004d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d32:	6903      	ldr	r3, [r0, #16]
 8004d34:	690c      	ldr	r4, [r1, #16]
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	4607      	mov	r7, r0
 8004d3a:	db7e      	blt.n	8004e3a <quorem+0x10c>
 8004d3c:	3c01      	subs	r4, #1
 8004d3e:	f101 0814 	add.w	r8, r1, #20
 8004d42:	00a3      	lsls	r3, r4, #2
 8004d44:	f100 0514 	add.w	r5, r0, #20
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d64:	d32e      	bcc.n	8004dc4 <quorem+0x96>
 8004d66:	f04f 0a00 	mov.w	sl, #0
 8004d6a:	46c4      	mov	ip, r8
 8004d6c:	46ae      	mov	lr, r5
 8004d6e:	46d3      	mov	fp, sl
 8004d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d74:	b298      	uxth	r0, r3
 8004d76:	fb06 a000 	mla	r0, r6, r0, sl
 8004d7a:	0c02      	lsrs	r2, r0, #16
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	fb06 2303 	mla	r3, r6, r3, r2
 8004d82:	f8de 2000 	ldr.w	r2, [lr]
 8004d86:	b280      	uxth	r0, r0
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	1a12      	subs	r2, r2, r0
 8004d8c:	445a      	add	r2, fp
 8004d8e:	f8de 0000 	ldr.w	r0, [lr]
 8004d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004da0:	b292      	uxth	r2, r2
 8004da2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004da6:	45e1      	cmp	r9, ip
 8004da8:	f84e 2b04 	str.w	r2, [lr], #4
 8004dac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004db0:	d2de      	bcs.n	8004d70 <quorem+0x42>
 8004db2:	9b00      	ldr	r3, [sp, #0]
 8004db4:	58eb      	ldr	r3, [r5, r3]
 8004db6:	b92b      	cbnz	r3, 8004dc4 <quorem+0x96>
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	429d      	cmp	r5, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	d32f      	bcc.n	8004e22 <quorem+0xf4>
 8004dc2:	613c      	str	r4, [r7, #16]
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f001 f97d 	bl	80060c4 <__mcmp>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	db25      	blt.n	8004e1a <quorem+0xec>
 8004dce:	4629      	mov	r1, r5
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dd6:	f8d1 c000 	ldr.w	ip, [r1]
 8004dda:	fa1f fe82 	uxth.w	lr, r2
 8004dde:	fa1f f38c 	uxth.w	r3, ip
 8004de2:	eba3 030e 	sub.w	r3, r3, lr
 8004de6:	4403      	add	r3, r0
 8004de8:	0c12      	lsrs	r2, r2, #16
 8004dea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004dee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df8:	45c1      	cmp	r9, r8
 8004dfa:	f841 3b04 	str.w	r3, [r1], #4
 8004dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e02:	d2e6      	bcs.n	8004dd2 <quorem+0xa4>
 8004e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e0c:	b922      	cbnz	r2, 8004e18 <quorem+0xea>
 8004e0e:	3b04      	subs	r3, #4
 8004e10:	429d      	cmp	r5, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	d30b      	bcc.n	8004e2e <quorem+0x100>
 8004e16:	613c      	str	r4, [r7, #16]
 8004e18:	3601      	adds	r6, #1
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	b003      	add	sp, #12
 8004e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1cb      	bne.n	8004dc2 <quorem+0x94>
 8004e2a:	3c01      	subs	r4, #1
 8004e2c:	e7c6      	b.n	8004dbc <quorem+0x8e>
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	3b04      	subs	r3, #4
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d1ef      	bne.n	8004e16 <quorem+0xe8>
 8004e36:	3c01      	subs	r4, #1
 8004e38:	e7ea      	b.n	8004e10 <quorem+0xe2>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e7ee      	b.n	8004e1c <quorem+0xee>
	...

08004e40 <_dtoa_r>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	69c7      	ldr	r7, [r0, #28]
 8004e46:	b097      	sub	sp, #92	@ 0x5c
 8004e48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004e4c:	ec55 4b10 	vmov	r4, r5, d0
 8004e50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004e52:	9107      	str	r1, [sp, #28]
 8004e54:	4681      	mov	r9, r0
 8004e56:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e58:	9311      	str	r3, [sp, #68]	@ 0x44
 8004e5a:	b97f      	cbnz	r7, 8004e7c <_dtoa_r+0x3c>
 8004e5c:	2010      	movs	r0, #16
 8004e5e:	f000 fe09 	bl	8005a74 <malloc>
 8004e62:	4602      	mov	r2, r0
 8004e64:	f8c9 001c 	str.w	r0, [r9, #28]
 8004e68:	b920      	cbnz	r0, 8004e74 <_dtoa_r+0x34>
 8004e6a:	4ba9      	ldr	r3, [pc, #676]	@ (8005110 <_dtoa_r+0x2d0>)
 8004e6c:	21ef      	movs	r1, #239	@ 0xef
 8004e6e:	48a9      	ldr	r0, [pc, #676]	@ (8005114 <_dtoa_r+0x2d4>)
 8004e70:	f001 fcc0 	bl	80067f4 <__assert_func>
 8004e74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e78:	6007      	str	r7, [r0, #0]
 8004e7a:	60c7      	str	r7, [r0, #12]
 8004e7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	b159      	cbz	r1, 8004e9c <_dtoa_r+0x5c>
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	604a      	str	r2, [r1, #4]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4093      	lsls	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
 8004e8e:	4648      	mov	r0, r9
 8004e90:	f000 fee6 	bl	8005c60 <_Bfree>
 8004e94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	1e2b      	subs	r3, r5, #0
 8004e9e:	bfb9      	ittee	lt
 8004ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ea4:	9305      	strlt	r3, [sp, #20]
 8004ea6:	2300      	movge	r3, #0
 8004ea8:	6033      	strge	r3, [r6, #0]
 8004eaa:	9f05      	ldr	r7, [sp, #20]
 8004eac:	4b9a      	ldr	r3, [pc, #616]	@ (8005118 <_dtoa_r+0x2d8>)
 8004eae:	bfbc      	itt	lt
 8004eb0:	2201      	movlt	r2, #1
 8004eb2:	6032      	strlt	r2, [r6, #0]
 8004eb4:	43bb      	bics	r3, r7
 8004eb6:	d112      	bne.n	8004ede <_dtoa_r+0x9e>
 8004eb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004eba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ec4:	4323      	orrs	r3, r4
 8004ec6:	f000 855a 	beq.w	800597e <_dtoa_r+0xb3e>
 8004eca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ecc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800512c <_dtoa_r+0x2ec>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 855c 	beq.w	800598e <_dtoa_r+0xb4e>
 8004ed6:	f10a 0303 	add.w	r3, sl, #3
 8004eda:	f000 bd56 	b.w	800598a <_dtoa_r+0xb4a>
 8004ede:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	ec51 0b17 	vmov	r0, r1, d7
 8004ee8:	2300      	movs	r3, #0
 8004eea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004eee:	f7fb fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 8004ef2:	4680      	mov	r8, r0
 8004ef4:	b158      	cbz	r0, 8004f0e <_dtoa_r+0xce>
 8004ef6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004efe:	b113      	cbz	r3, 8004f06 <_dtoa_r+0xc6>
 8004f00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004f02:	4b86      	ldr	r3, [pc, #536]	@ (800511c <_dtoa_r+0x2dc>)
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005130 <_dtoa_r+0x2f0>
 8004f0a:	f000 bd40 	b.w	800598e <_dtoa_r+0xb4e>
 8004f0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004f12:	aa14      	add	r2, sp, #80	@ 0x50
 8004f14:	a915      	add	r1, sp, #84	@ 0x54
 8004f16:	4648      	mov	r0, r9
 8004f18:	f001 f984 	bl	8006224 <__d2b>
 8004f1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004f20:	9002      	str	r0, [sp, #8]
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d078      	beq.n	8005018 <_dtoa_r+0x1d8>
 8004f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f40:	4619      	mov	r1, r3
 8004f42:	2200      	movs	r2, #0
 8004f44:	4b76      	ldr	r3, [pc, #472]	@ (8005120 <_dtoa_r+0x2e0>)
 8004f46:	f7fb f9bf 	bl	80002c8 <__aeabi_dsub>
 8004f4a:	a36b      	add	r3, pc, #428	@ (adr r3, 80050f8 <_dtoa_r+0x2b8>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f7fb fb72 	bl	8000638 <__aeabi_dmul>
 8004f54:	a36a      	add	r3, pc, #424	@ (adr r3, 8005100 <_dtoa_r+0x2c0>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb f9b7 	bl	80002cc <__adddf3>
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4630      	mov	r0, r6
 8004f62:	460d      	mov	r5, r1
 8004f64:	f7fb fafe 	bl	8000564 <__aeabi_i2d>
 8004f68:	a367      	add	r3, pc, #412	@ (adr r3, 8005108 <_dtoa_r+0x2c8>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb63 	bl	8000638 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f9a7 	bl	80002cc <__adddf3>
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	f7fb fe09 	bl	8000b98 <__aeabi_d2iz>
 8004f86:	2200      	movs	r2, #0
 8004f88:	4607      	mov	r7, r0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7fb fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8004f94:	b140      	cbz	r0, 8004fa8 <_dtoa_r+0x168>
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7fb fae4 	bl	8000564 <__aeabi_i2d>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	f7fb fdb2 	bl	8000b08 <__aeabi_dcmpeq>
 8004fa4:	b900      	cbnz	r0, 8004fa8 <_dtoa_r+0x168>
 8004fa6:	3f01      	subs	r7, #1
 8004fa8:	2f16      	cmp	r7, #22
 8004faa:	d852      	bhi.n	8005052 <_dtoa_r+0x212>
 8004fac:	4b5d      	ldr	r3, [pc, #372]	@ (8005124 <_dtoa_r+0x2e4>)
 8004fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fba:	f7fb fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d049      	beq.n	8005056 <_dtoa_r+0x216>
 8004fc2:	3f01      	subs	r7, #1
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8004fc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fca:	1b9b      	subs	r3, r3, r6
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	bf45      	ittet	mi
 8004fd0:	f1c3 0301 	rsbmi	r3, r3, #1
 8004fd4:	9300      	strmi	r3, [sp, #0]
 8004fd6:	2300      	movpl	r3, #0
 8004fd8:	2300      	movmi	r3, #0
 8004fda:	9206      	str	r2, [sp, #24]
 8004fdc:	bf54      	ite	pl
 8004fde:	9300      	strpl	r3, [sp, #0]
 8004fe0:	9306      	strmi	r3, [sp, #24]
 8004fe2:	2f00      	cmp	r7, #0
 8004fe4:	db39      	blt.n	800505a <_dtoa_r+0x21a>
 8004fe6:	9b06      	ldr	r3, [sp, #24]
 8004fe8:	970d      	str	r7, [sp, #52]	@ 0x34
 8004fea:	443b      	add	r3, r7
 8004fec:	9306      	str	r3, [sp, #24]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9308      	str	r3, [sp, #32]
 8004ff2:	9b07      	ldr	r3, [sp, #28]
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d863      	bhi.n	80050c0 <_dtoa_r+0x280>
 8004ff8:	2b05      	cmp	r3, #5
 8004ffa:	bfc4      	itt	gt
 8004ffc:	3b04      	subgt	r3, #4
 8004ffe:	9307      	strgt	r3, [sp, #28]
 8005000:	9b07      	ldr	r3, [sp, #28]
 8005002:	f1a3 0302 	sub.w	r3, r3, #2
 8005006:	bfcc      	ite	gt
 8005008:	2400      	movgt	r4, #0
 800500a:	2401      	movle	r4, #1
 800500c:	2b03      	cmp	r3, #3
 800500e:	d863      	bhi.n	80050d8 <_dtoa_r+0x298>
 8005010:	e8df f003 	tbb	[pc, r3]
 8005014:	2b375452 	.word	0x2b375452
 8005018:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800501c:	441e      	add	r6, r3
 800501e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005022:	2b20      	cmp	r3, #32
 8005024:	bfc1      	itttt	gt
 8005026:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800502a:	409f      	lslgt	r7, r3
 800502c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005030:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005034:	bfd6      	itet	le
 8005036:	f1c3 0320 	rsble	r3, r3, #32
 800503a:	ea47 0003 	orrgt.w	r0, r7, r3
 800503e:	fa04 f003 	lslle.w	r0, r4, r3
 8005042:	f7fb fa7f 	bl	8000544 <__aeabi_ui2d>
 8005046:	2201      	movs	r2, #1
 8005048:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800504c:	3e01      	subs	r6, #1
 800504e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005050:	e776      	b.n	8004f40 <_dtoa_r+0x100>
 8005052:	2301      	movs	r3, #1
 8005054:	e7b7      	b.n	8004fc6 <_dtoa_r+0x186>
 8005056:	9010      	str	r0, [sp, #64]	@ 0x40
 8005058:	e7b6      	b.n	8004fc8 <_dtoa_r+0x188>
 800505a:	9b00      	ldr	r3, [sp, #0]
 800505c:	1bdb      	subs	r3, r3, r7
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	427b      	negs	r3, r7
 8005062:	9308      	str	r3, [sp, #32]
 8005064:	2300      	movs	r3, #0
 8005066:	930d      	str	r3, [sp, #52]	@ 0x34
 8005068:	e7c3      	b.n	8004ff2 <_dtoa_r+0x1b2>
 800506a:	2301      	movs	r3, #1
 800506c:	9309      	str	r3, [sp, #36]	@ 0x24
 800506e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005070:	eb07 0b03 	add.w	fp, r7, r3
 8005074:	f10b 0301 	add.w	r3, fp, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	9303      	str	r3, [sp, #12]
 800507c:	bfb8      	it	lt
 800507e:	2301      	movlt	r3, #1
 8005080:	e006      	b.n	8005090 <_dtoa_r+0x250>
 8005082:	2301      	movs	r3, #1
 8005084:	9309      	str	r3, [sp, #36]	@ 0x24
 8005086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	dd28      	ble.n	80050de <_dtoa_r+0x29e>
 800508c:	469b      	mov	fp, r3
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005094:	2100      	movs	r1, #0
 8005096:	2204      	movs	r2, #4
 8005098:	f102 0514 	add.w	r5, r2, #20
 800509c:	429d      	cmp	r5, r3
 800509e:	d926      	bls.n	80050ee <_dtoa_r+0x2ae>
 80050a0:	6041      	str	r1, [r0, #4]
 80050a2:	4648      	mov	r0, r9
 80050a4:	f000 fd9c 	bl	8005be0 <_Balloc>
 80050a8:	4682      	mov	sl, r0
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d142      	bne.n	8005134 <_dtoa_r+0x2f4>
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <_dtoa_r+0x2e8>)
 80050b0:	4602      	mov	r2, r0
 80050b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80050b6:	e6da      	b.n	8004e6e <_dtoa_r+0x2e>
 80050b8:	2300      	movs	r3, #0
 80050ba:	e7e3      	b.n	8005084 <_dtoa_r+0x244>
 80050bc:	2300      	movs	r3, #0
 80050be:	e7d5      	b.n	800506c <_dtoa_r+0x22c>
 80050c0:	2401      	movs	r4, #1
 80050c2:	2300      	movs	r3, #0
 80050c4:	9307      	str	r3, [sp, #28]
 80050c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80050c8:	f04f 3bff 	mov.w	fp, #4294967295
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80050d2:	2312      	movs	r3, #18
 80050d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80050d6:	e7db      	b.n	8005090 <_dtoa_r+0x250>
 80050d8:	2301      	movs	r3, #1
 80050da:	9309      	str	r3, [sp, #36]	@ 0x24
 80050dc:	e7f4      	b.n	80050c8 <_dtoa_r+0x288>
 80050de:	f04f 0b01 	mov.w	fp, #1
 80050e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80050e6:	465b      	mov	r3, fp
 80050e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80050ec:	e7d0      	b.n	8005090 <_dtoa_r+0x250>
 80050ee:	3101      	adds	r1, #1
 80050f0:	0052      	lsls	r2, r2, #1
 80050f2:	e7d1      	b.n	8005098 <_dtoa_r+0x258>
 80050f4:	f3af 8000 	nop.w
 80050f8:	636f4361 	.word	0x636f4361
 80050fc:	3fd287a7 	.word	0x3fd287a7
 8005100:	8b60c8b3 	.word	0x8b60c8b3
 8005104:	3fc68a28 	.word	0x3fc68a28
 8005108:	509f79fb 	.word	0x509f79fb
 800510c:	3fd34413 	.word	0x3fd34413
 8005110:	08008dc5 	.word	0x08008dc5
 8005114:	08008ddc 	.word	0x08008ddc
 8005118:	7ff00000 	.word	0x7ff00000
 800511c:	08008d95 	.word	0x08008d95
 8005120:	3ff80000 	.word	0x3ff80000
 8005124:	08008f30 	.word	0x08008f30
 8005128:	08008e34 	.word	0x08008e34
 800512c:	08008dc1 	.word	0x08008dc1
 8005130:	08008d94 	.word	0x08008d94
 8005134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005138:	6018      	str	r0, [r3, #0]
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	2b0e      	cmp	r3, #14
 800513e:	f200 80a1 	bhi.w	8005284 <_dtoa_r+0x444>
 8005142:	2c00      	cmp	r4, #0
 8005144:	f000 809e 	beq.w	8005284 <_dtoa_r+0x444>
 8005148:	2f00      	cmp	r7, #0
 800514a:	dd33      	ble.n	80051b4 <_dtoa_r+0x374>
 800514c:	4b9c      	ldr	r3, [pc, #624]	@ (80053c0 <_dtoa_r+0x580>)
 800514e:	f007 020f 	and.w	r2, r7, #15
 8005152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005156:	ed93 7b00 	vldr	d7, [r3]
 800515a:	05f8      	lsls	r0, r7, #23
 800515c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005164:	d516      	bpl.n	8005194 <_dtoa_r+0x354>
 8005166:	4b97      	ldr	r3, [pc, #604]	@ (80053c4 <_dtoa_r+0x584>)
 8005168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800516c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005170:	f7fb fb8c 	bl	800088c <__aeabi_ddiv>
 8005174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005178:	f004 040f 	and.w	r4, r4, #15
 800517c:	2603      	movs	r6, #3
 800517e:	4d91      	ldr	r5, [pc, #580]	@ (80053c4 <_dtoa_r+0x584>)
 8005180:	b954      	cbnz	r4, 8005198 <_dtoa_r+0x358>
 8005182:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518a:	f7fb fb7f 	bl	800088c <__aeabi_ddiv>
 800518e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005192:	e028      	b.n	80051e6 <_dtoa_r+0x3a6>
 8005194:	2602      	movs	r6, #2
 8005196:	e7f2      	b.n	800517e <_dtoa_r+0x33e>
 8005198:	07e1      	lsls	r1, r4, #31
 800519a:	d508      	bpl.n	80051ae <_dtoa_r+0x36e>
 800519c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80051a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051a4:	f7fb fa48 	bl	8000638 <__aeabi_dmul>
 80051a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80051ac:	3601      	adds	r6, #1
 80051ae:	1064      	asrs	r4, r4, #1
 80051b0:	3508      	adds	r5, #8
 80051b2:	e7e5      	b.n	8005180 <_dtoa_r+0x340>
 80051b4:	f000 80af 	beq.w	8005316 <_dtoa_r+0x4d6>
 80051b8:	427c      	negs	r4, r7
 80051ba:	4b81      	ldr	r3, [pc, #516]	@ (80053c0 <_dtoa_r+0x580>)
 80051bc:	4d81      	ldr	r5, [pc, #516]	@ (80053c4 <_dtoa_r+0x584>)
 80051be:	f004 020f 	and.w	r2, r4, #15
 80051c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051ce:	f7fb fa33 	bl	8000638 <__aeabi_dmul>
 80051d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051d6:	1124      	asrs	r4, r4, #4
 80051d8:	2300      	movs	r3, #0
 80051da:	2602      	movs	r6, #2
 80051dc:	2c00      	cmp	r4, #0
 80051de:	f040 808f 	bne.w	8005300 <_dtoa_r+0x4c0>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1d3      	bne.n	800518e <_dtoa_r+0x34e>
 80051e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8094 	beq.w	800531a <_dtoa_r+0x4da>
 80051f2:	4b75      	ldr	r3, [pc, #468]	@ (80053c8 <_dtoa_r+0x588>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fc8f 	bl	8000b1c <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f000 808b 	beq.w	800531a <_dtoa_r+0x4da>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8087 	beq.w	800531a <_dtoa_r+0x4da>
 800520c:	f1bb 0f00 	cmp.w	fp, #0
 8005210:	dd34      	ble.n	800527c <_dtoa_r+0x43c>
 8005212:	4620      	mov	r0, r4
 8005214:	4b6d      	ldr	r3, [pc, #436]	@ (80053cc <_dtoa_r+0x58c>)
 8005216:	2200      	movs	r2, #0
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb fa0d 	bl	8000638 <__aeabi_dmul>
 800521e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005222:	f107 38ff 	add.w	r8, r7, #4294967295
 8005226:	3601      	adds	r6, #1
 8005228:	465c      	mov	r4, fp
 800522a:	4630      	mov	r0, r6
 800522c:	f7fb f99a 	bl	8000564 <__aeabi_i2d>
 8005230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005234:	f7fb fa00 	bl	8000638 <__aeabi_dmul>
 8005238:	4b65      	ldr	r3, [pc, #404]	@ (80053d0 <_dtoa_r+0x590>)
 800523a:	2200      	movs	r2, #0
 800523c:	f7fb f846 	bl	80002cc <__adddf3>
 8005240:	4605      	mov	r5, r0
 8005242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005246:	2c00      	cmp	r4, #0
 8005248:	d16a      	bne.n	8005320 <_dtoa_r+0x4e0>
 800524a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800524e:	4b61      	ldr	r3, [pc, #388]	@ (80053d4 <_dtoa_r+0x594>)
 8005250:	2200      	movs	r2, #0
 8005252:	f7fb f839 	bl	80002c8 <__aeabi_dsub>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800525e:	462a      	mov	r2, r5
 8005260:	4633      	mov	r3, r6
 8005262:	f7fb fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8005266:	2800      	cmp	r0, #0
 8005268:	f040 8298 	bne.w	800579c <_dtoa_r+0x95c>
 800526c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005270:	462a      	mov	r2, r5
 8005272:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005276:	f7fb fc51 	bl	8000b1c <__aeabi_dcmplt>
 800527a:	bb38      	cbnz	r0, 80052cc <_dtoa_r+0x48c>
 800527c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005280:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005286:	2b00      	cmp	r3, #0
 8005288:	f2c0 8157 	blt.w	800553a <_dtoa_r+0x6fa>
 800528c:	2f0e      	cmp	r7, #14
 800528e:	f300 8154 	bgt.w	800553a <_dtoa_r+0x6fa>
 8005292:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <_dtoa_r+0x580>)
 8005294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005298:	ed93 7b00 	vldr	d7, [r3]
 800529c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	ed8d 7b00 	vstr	d7, [sp]
 80052a4:	f280 80e5 	bge.w	8005472 <_dtoa_r+0x632>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f300 80e1 	bgt.w	8005472 <_dtoa_r+0x632>
 80052b0:	d10c      	bne.n	80052cc <_dtoa_r+0x48c>
 80052b2:	4b48      	ldr	r3, [pc, #288]	@ (80053d4 <_dtoa_r+0x594>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	ec51 0b17 	vmov	r0, r1, d7
 80052ba:	f7fb f9bd 	bl	8000638 <__aeabi_dmul>
 80052be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c2:	f7fb fc3f 	bl	8000b44 <__aeabi_dcmpge>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f000 8266 	beq.w	8005798 <_dtoa_r+0x958>
 80052cc:	2400      	movs	r4, #0
 80052ce:	4625      	mov	r5, r4
 80052d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052d2:	4656      	mov	r6, sl
 80052d4:	ea6f 0803 	mvn.w	r8, r3
 80052d8:	2700      	movs	r7, #0
 80052da:	4621      	mov	r1, r4
 80052dc:	4648      	mov	r0, r9
 80052de:	f000 fcbf 	bl	8005c60 <_Bfree>
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	f000 80bd 	beq.w	8005462 <_dtoa_r+0x622>
 80052e8:	b12f      	cbz	r7, 80052f6 <_dtoa_r+0x4b6>
 80052ea:	42af      	cmp	r7, r5
 80052ec:	d003      	beq.n	80052f6 <_dtoa_r+0x4b6>
 80052ee:	4639      	mov	r1, r7
 80052f0:	4648      	mov	r0, r9
 80052f2:	f000 fcb5 	bl	8005c60 <_Bfree>
 80052f6:	4629      	mov	r1, r5
 80052f8:	4648      	mov	r0, r9
 80052fa:	f000 fcb1 	bl	8005c60 <_Bfree>
 80052fe:	e0b0      	b.n	8005462 <_dtoa_r+0x622>
 8005300:	07e2      	lsls	r2, r4, #31
 8005302:	d505      	bpl.n	8005310 <_dtoa_r+0x4d0>
 8005304:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005308:	f7fb f996 	bl	8000638 <__aeabi_dmul>
 800530c:	3601      	adds	r6, #1
 800530e:	2301      	movs	r3, #1
 8005310:	1064      	asrs	r4, r4, #1
 8005312:	3508      	adds	r5, #8
 8005314:	e762      	b.n	80051dc <_dtoa_r+0x39c>
 8005316:	2602      	movs	r6, #2
 8005318:	e765      	b.n	80051e6 <_dtoa_r+0x3a6>
 800531a:	9c03      	ldr	r4, [sp, #12]
 800531c:	46b8      	mov	r8, r7
 800531e:	e784      	b.n	800522a <_dtoa_r+0x3ea>
 8005320:	4b27      	ldr	r3, [pc, #156]	@ (80053c0 <_dtoa_r+0x580>)
 8005322:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800532c:	4454      	add	r4, sl
 800532e:	2900      	cmp	r1, #0
 8005330:	d054      	beq.n	80053dc <_dtoa_r+0x59c>
 8005332:	4929      	ldr	r1, [pc, #164]	@ (80053d8 <_dtoa_r+0x598>)
 8005334:	2000      	movs	r0, #0
 8005336:	f7fb faa9 	bl	800088c <__aeabi_ddiv>
 800533a:	4633      	mov	r3, r6
 800533c:	462a      	mov	r2, r5
 800533e:	f7fa ffc3 	bl	80002c8 <__aeabi_dsub>
 8005342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005346:	4656      	mov	r6, sl
 8005348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800534c:	f7fb fc24 	bl	8000b98 <__aeabi_d2iz>
 8005350:	4605      	mov	r5, r0
 8005352:	f7fb f907 	bl	8000564 <__aeabi_i2d>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800535e:	f7fa ffb3 	bl	80002c8 <__aeabi_dsub>
 8005362:	3530      	adds	r5, #48	@ 0x30
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800536c:	f806 5b01 	strb.w	r5, [r6], #1
 8005370:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005374:	f7fb fbd2 	bl	8000b1c <__aeabi_dcmplt>
 8005378:	2800      	cmp	r0, #0
 800537a:	d172      	bne.n	8005462 <_dtoa_r+0x622>
 800537c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005380:	4911      	ldr	r1, [pc, #68]	@ (80053c8 <_dtoa_r+0x588>)
 8005382:	2000      	movs	r0, #0
 8005384:	f7fa ffa0 	bl	80002c8 <__aeabi_dsub>
 8005388:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800538c:	f7fb fbc6 	bl	8000b1c <__aeabi_dcmplt>
 8005390:	2800      	cmp	r0, #0
 8005392:	f040 80b4 	bne.w	80054fe <_dtoa_r+0x6be>
 8005396:	42a6      	cmp	r6, r4
 8005398:	f43f af70 	beq.w	800527c <_dtoa_r+0x43c>
 800539c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80053a0:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <_dtoa_r+0x58c>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	f7fb f948 	bl	8000638 <__aeabi_dmul>
 80053a8:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <_dtoa_r+0x58c>)
 80053aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053ae:	2200      	movs	r2, #0
 80053b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b4:	f7fb f940 	bl	8000638 <__aeabi_dmul>
 80053b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053bc:	e7c4      	b.n	8005348 <_dtoa_r+0x508>
 80053be:	bf00      	nop
 80053c0:	08008f30 	.word	0x08008f30
 80053c4:	08008f08 	.word	0x08008f08
 80053c8:	3ff00000 	.word	0x3ff00000
 80053cc:	40240000 	.word	0x40240000
 80053d0:	401c0000 	.word	0x401c0000
 80053d4:	40140000 	.word	0x40140000
 80053d8:	3fe00000 	.word	0x3fe00000
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	f7fb f92a 	bl	8000638 <__aeabi_dmul>
 80053e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80053ea:	4656      	mov	r6, sl
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	f7fb fbd2 	bl	8000b98 <__aeabi_d2iz>
 80053f4:	4605      	mov	r5, r0
 80053f6:	f7fb f8b5 	bl	8000564 <__aeabi_i2d>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005402:	f7fa ff61 	bl	80002c8 <__aeabi_dsub>
 8005406:	3530      	adds	r5, #48	@ 0x30
 8005408:	f806 5b01 	strb.w	r5, [r6], #1
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	42a6      	cmp	r6, r4
 8005412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	d124      	bne.n	8005466 <_dtoa_r+0x626>
 800541c:	4baf      	ldr	r3, [pc, #700]	@ (80056dc <_dtoa_r+0x89c>)
 800541e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005422:	f7fa ff53 	bl	80002cc <__adddf3>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	f7fb fb93 	bl	8000b58 <__aeabi_dcmpgt>
 8005432:	2800      	cmp	r0, #0
 8005434:	d163      	bne.n	80054fe <_dtoa_r+0x6be>
 8005436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800543a:	49a8      	ldr	r1, [pc, #672]	@ (80056dc <_dtoa_r+0x89c>)
 800543c:	2000      	movs	r0, #0
 800543e:	f7fa ff43 	bl	80002c8 <__aeabi_dsub>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544a:	f7fb fb67 	bl	8000b1c <__aeabi_dcmplt>
 800544e:	2800      	cmp	r0, #0
 8005450:	f43f af14 	beq.w	800527c <_dtoa_r+0x43c>
 8005454:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005456:	1e73      	subs	r3, r6, #1
 8005458:	9313      	str	r3, [sp, #76]	@ 0x4c
 800545a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800545e:	2b30      	cmp	r3, #48	@ 0x30
 8005460:	d0f8      	beq.n	8005454 <_dtoa_r+0x614>
 8005462:	4647      	mov	r7, r8
 8005464:	e03b      	b.n	80054de <_dtoa_r+0x69e>
 8005466:	4b9e      	ldr	r3, [pc, #632]	@ (80056e0 <_dtoa_r+0x8a0>)
 8005468:	f7fb f8e6 	bl	8000638 <__aeabi_dmul>
 800546c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005470:	e7bc      	b.n	80053ec <_dtoa_r+0x5ac>
 8005472:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005476:	4656      	mov	r6, sl
 8005478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f7fb fa04 	bl	800088c <__aeabi_ddiv>
 8005484:	f7fb fb88 	bl	8000b98 <__aeabi_d2iz>
 8005488:	4680      	mov	r8, r0
 800548a:	f7fb f86b 	bl	8000564 <__aeabi_i2d>
 800548e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005492:	f7fb f8d1 	bl	8000638 <__aeabi_dmul>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054a2:	f7fa ff11 	bl	80002c8 <__aeabi_dsub>
 80054a6:	f806 4b01 	strb.w	r4, [r6], #1
 80054aa:	9d03      	ldr	r5, [sp, #12]
 80054ac:	eba6 040a 	sub.w	r4, r6, sl
 80054b0:	42a5      	cmp	r5, r4
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	d133      	bne.n	8005520 <_dtoa_r+0x6e0>
 80054b8:	f7fa ff08 	bl	80002cc <__adddf3>
 80054bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c0:	4604      	mov	r4, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	f7fb fb48 	bl	8000b58 <__aeabi_dcmpgt>
 80054c8:	b9c0      	cbnz	r0, 80054fc <_dtoa_r+0x6bc>
 80054ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80054d6:	b110      	cbz	r0, 80054de <_dtoa_r+0x69e>
 80054d8:	f018 0f01 	tst.w	r8, #1
 80054dc:	d10e      	bne.n	80054fc <_dtoa_r+0x6bc>
 80054de:	9902      	ldr	r1, [sp, #8]
 80054e0:	4648      	mov	r0, r9
 80054e2:	f000 fbbd 	bl	8005c60 <_Bfree>
 80054e6:	2300      	movs	r3, #0
 80054e8:	7033      	strb	r3, [r6, #0]
 80054ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054ec:	3701      	adds	r7, #1
 80054ee:	601f      	str	r7, [r3, #0]
 80054f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 824b 	beq.w	800598e <_dtoa_r+0xb4e>
 80054f8:	601e      	str	r6, [r3, #0]
 80054fa:	e248      	b.n	800598e <_dtoa_r+0xb4e>
 80054fc:	46b8      	mov	r8, r7
 80054fe:	4633      	mov	r3, r6
 8005500:	461e      	mov	r6, r3
 8005502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005506:	2a39      	cmp	r2, #57	@ 0x39
 8005508:	d106      	bne.n	8005518 <_dtoa_r+0x6d8>
 800550a:	459a      	cmp	sl, r3
 800550c:	d1f8      	bne.n	8005500 <_dtoa_r+0x6c0>
 800550e:	2230      	movs	r2, #48	@ 0x30
 8005510:	f108 0801 	add.w	r8, r8, #1
 8005514:	f88a 2000 	strb.w	r2, [sl]
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	3201      	adds	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e7a0      	b.n	8005462 <_dtoa_r+0x622>
 8005520:	4b6f      	ldr	r3, [pc, #444]	@ (80056e0 <_dtoa_r+0x8a0>)
 8005522:	2200      	movs	r2, #0
 8005524:	f7fb f888 	bl	8000638 <__aeabi_dmul>
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	f7fb faea 	bl	8000b08 <__aeabi_dcmpeq>
 8005534:	2800      	cmp	r0, #0
 8005536:	d09f      	beq.n	8005478 <_dtoa_r+0x638>
 8005538:	e7d1      	b.n	80054de <_dtoa_r+0x69e>
 800553a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800553c:	2a00      	cmp	r2, #0
 800553e:	f000 80ea 	beq.w	8005716 <_dtoa_r+0x8d6>
 8005542:	9a07      	ldr	r2, [sp, #28]
 8005544:	2a01      	cmp	r2, #1
 8005546:	f300 80cd 	bgt.w	80056e4 <_dtoa_r+0x8a4>
 800554a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800554c:	2a00      	cmp	r2, #0
 800554e:	f000 80c1 	beq.w	80056d4 <_dtoa_r+0x894>
 8005552:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005556:	9c08      	ldr	r4, [sp, #32]
 8005558:	9e00      	ldr	r6, [sp, #0]
 800555a:	9a00      	ldr	r2, [sp, #0]
 800555c:	441a      	add	r2, r3
 800555e:	9200      	str	r2, [sp, #0]
 8005560:	9a06      	ldr	r2, [sp, #24]
 8005562:	2101      	movs	r1, #1
 8005564:	441a      	add	r2, r3
 8005566:	4648      	mov	r0, r9
 8005568:	9206      	str	r2, [sp, #24]
 800556a:	f000 fc2d 	bl	8005dc8 <__i2b>
 800556e:	4605      	mov	r5, r0
 8005570:	b166      	cbz	r6, 800558c <_dtoa_r+0x74c>
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	dd09      	ble.n	800558c <_dtoa_r+0x74c>
 8005578:	42b3      	cmp	r3, r6
 800557a:	9a00      	ldr	r2, [sp, #0]
 800557c:	bfa8      	it	ge
 800557e:	4633      	movge	r3, r6
 8005580:	1ad2      	subs	r2, r2, r3
 8005582:	9200      	str	r2, [sp, #0]
 8005584:	9a06      	ldr	r2, [sp, #24]
 8005586:	1af6      	subs	r6, r6, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	9306      	str	r3, [sp, #24]
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	b30b      	cbz	r3, 80055d4 <_dtoa_r+0x794>
 8005590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80c6 	beq.w	8005724 <_dtoa_r+0x8e4>
 8005598:	2c00      	cmp	r4, #0
 800559a:	f000 80c0 	beq.w	800571e <_dtoa_r+0x8de>
 800559e:	4629      	mov	r1, r5
 80055a0:	4622      	mov	r2, r4
 80055a2:	4648      	mov	r0, r9
 80055a4:	f000 fcc8 	bl	8005f38 <__pow5mult>
 80055a8:	9a02      	ldr	r2, [sp, #8]
 80055aa:	4601      	mov	r1, r0
 80055ac:	4605      	mov	r5, r0
 80055ae:	4648      	mov	r0, r9
 80055b0:	f000 fc20 	bl	8005df4 <__multiply>
 80055b4:	9902      	ldr	r1, [sp, #8]
 80055b6:	4680      	mov	r8, r0
 80055b8:	4648      	mov	r0, r9
 80055ba:	f000 fb51 	bl	8005c60 <_Bfree>
 80055be:	9b08      	ldr	r3, [sp, #32]
 80055c0:	1b1b      	subs	r3, r3, r4
 80055c2:	9308      	str	r3, [sp, #32]
 80055c4:	f000 80b1 	beq.w	800572a <_dtoa_r+0x8ea>
 80055c8:	9a08      	ldr	r2, [sp, #32]
 80055ca:	4641      	mov	r1, r8
 80055cc:	4648      	mov	r0, r9
 80055ce:	f000 fcb3 	bl	8005f38 <__pow5mult>
 80055d2:	9002      	str	r0, [sp, #8]
 80055d4:	2101      	movs	r1, #1
 80055d6:	4648      	mov	r0, r9
 80055d8:	f000 fbf6 	bl	8005dc8 <__i2b>
 80055dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055de:	4604      	mov	r4, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 81d8 	beq.w	8005996 <_dtoa_r+0xb56>
 80055e6:	461a      	mov	r2, r3
 80055e8:	4601      	mov	r1, r0
 80055ea:	4648      	mov	r0, r9
 80055ec:	f000 fca4 	bl	8005f38 <__pow5mult>
 80055f0:	9b07      	ldr	r3, [sp, #28]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	4604      	mov	r4, r0
 80055f6:	f300 809f 	bgt.w	8005738 <_dtoa_r+0x8f8>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 8097 	bne.w	8005730 <_dtoa_r+0x8f0>
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 8093 	bne.w	8005734 <_dtoa_r+0x8f4>
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	051b      	lsls	r3, r3, #20
 8005618:	b133      	cbz	r3, 8005628 <_dtoa_r+0x7e8>
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	9b06      	ldr	r3, [sp, #24]
 8005622:	3301      	adds	r3, #1
 8005624:	9306      	str	r3, [sp, #24]
 8005626:	2301      	movs	r3, #1
 8005628:	9308      	str	r3, [sp, #32]
 800562a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 81b8 	beq.w	80059a2 <_dtoa_r+0xb62>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005638:	6918      	ldr	r0, [r3, #16]
 800563a:	f000 fb79 	bl	8005d30 <__hi0bits>
 800563e:	f1c0 0020 	rsb	r0, r0, #32
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	4418      	add	r0, r3
 8005646:	f010 001f 	ands.w	r0, r0, #31
 800564a:	f000 8082 	beq.w	8005752 <_dtoa_r+0x912>
 800564e:	f1c0 0320 	rsb	r3, r0, #32
 8005652:	2b04      	cmp	r3, #4
 8005654:	dd73      	ble.n	800573e <_dtoa_r+0x8fe>
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	f1c0 001c 	rsb	r0, r0, #28
 800565c:	4403      	add	r3, r0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	9b06      	ldr	r3, [sp, #24]
 8005662:	4403      	add	r3, r0
 8005664:	4406      	add	r6, r0
 8005666:	9306      	str	r3, [sp, #24]
 8005668:	9b00      	ldr	r3, [sp, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd05      	ble.n	800567a <_dtoa_r+0x83a>
 800566e:	9902      	ldr	r1, [sp, #8]
 8005670:	461a      	mov	r2, r3
 8005672:	4648      	mov	r0, r9
 8005674:	f000 fcba 	bl	8005fec <__lshift>
 8005678:	9002      	str	r0, [sp, #8]
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dd05      	ble.n	800568c <_dtoa_r+0x84c>
 8005680:	4621      	mov	r1, r4
 8005682:	461a      	mov	r2, r3
 8005684:	4648      	mov	r0, r9
 8005686:	f000 fcb1 	bl	8005fec <__lshift>
 800568a:	4604      	mov	r4, r0
 800568c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d061      	beq.n	8005756 <_dtoa_r+0x916>
 8005692:	9802      	ldr	r0, [sp, #8]
 8005694:	4621      	mov	r1, r4
 8005696:	f000 fd15 	bl	80060c4 <__mcmp>
 800569a:	2800      	cmp	r0, #0
 800569c:	da5b      	bge.n	8005756 <_dtoa_r+0x916>
 800569e:	2300      	movs	r3, #0
 80056a0:	9902      	ldr	r1, [sp, #8]
 80056a2:	220a      	movs	r2, #10
 80056a4:	4648      	mov	r0, r9
 80056a6:	f000 fafd 	bl	8005ca4 <__multadd>
 80056aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ac:	9002      	str	r0, [sp, #8]
 80056ae:	f107 38ff 	add.w	r8, r7, #4294967295
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8177 	beq.w	80059a6 <_dtoa_r+0xb66>
 80056b8:	4629      	mov	r1, r5
 80056ba:	2300      	movs	r3, #0
 80056bc:	220a      	movs	r2, #10
 80056be:	4648      	mov	r0, r9
 80056c0:	f000 faf0 	bl	8005ca4 <__multadd>
 80056c4:	f1bb 0f00 	cmp.w	fp, #0
 80056c8:	4605      	mov	r5, r0
 80056ca:	dc6f      	bgt.n	80057ac <_dtoa_r+0x96c>
 80056cc:	9b07      	ldr	r3, [sp, #28]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	dc49      	bgt.n	8005766 <_dtoa_r+0x926>
 80056d2:	e06b      	b.n	80057ac <_dtoa_r+0x96c>
 80056d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056da:	e73c      	b.n	8005556 <_dtoa_r+0x716>
 80056dc:	3fe00000 	.word	0x3fe00000
 80056e0:	40240000 	.word	0x40240000
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	1e5c      	subs	r4, r3, #1
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	db09      	blt.n	8005702 <_dtoa_r+0x8c2>
 80056ee:	1b1c      	subs	r4, r3, r4
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f6bf af30 	bge.w	8005558 <_dtoa_r+0x718>
 80056f8:	9b00      	ldr	r3, [sp, #0]
 80056fa:	9a03      	ldr	r2, [sp, #12]
 80056fc:	1a9e      	subs	r6, r3, r2
 80056fe:	2300      	movs	r3, #0
 8005700:	e72b      	b.n	800555a <_dtoa_r+0x71a>
 8005702:	9b08      	ldr	r3, [sp, #32]
 8005704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005706:	9408      	str	r4, [sp, #32]
 8005708:	1ae3      	subs	r3, r4, r3
 800570a:	441a      	add	r2, r3
 800570c:	9e00      	ldr	r6, [sp, #0]
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	920d      	str	r2, [sp, #52]	@ 0x34
 8005712:	2400      	movs	r4, #0
 8005714:	e721      	b.n	800555a <_dtoa_r+0x71a>
 8005716:	9c08      	ldr	r4, [sp, #32]
 8005718:	9e00      	ldr	r6, [sp, #0]
 800571a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800571c:	e728      	b.n	8005570 <_dtoa_r+0x730>
 800571e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005722:	e751      	b.n	80055c8 <_dtoa_r+0x788>
 8005724:	9a08      	ldr	r2, [sp, #32]
 8005726:	9902      	ldr	r1, [sp, #8]
 8005728:	e750      	b.n	80055cc <_dtoa_r+0x78c>
 800572a:	f8cd 8008 	str.w	r8, [sp, #8]
 800572e:	e751      	b.n	80055d4 <_dtoa_r+0x794>
 8005730:	2300      	movs	r3, #0
 8005732:	e779      	b.n	8005628 <_dtoa_r+0x7e8>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	e777      	b.n	8005628 <_dtoa_r+0x7e8>
 8005738:	2300      	movs	r3, #0
 800573a:	9308      	str	r3, [sp, #32]
 800573c:	e779      	b.n	8005632 <_dtoa_r+0x7f2>
 800573e:	d093      	beq.n	8005668 <_dtoa_r+0x828>
 8005740:	9a00      	ldr	r2, [sp, #0]
 8005742:	331c      	adds	r3, #28
 8005744:	441a      	add	r2, r3
 8005746:	9200      	str	r2, [sp, #0]
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	441a      	add	r2, r3
 800574c:	441e      	add	r6, r3
 800574e:	9206      	str	r2, [sp, #24]
 8005750:	e78a      	b.n	8005668 <_dtoa_r+0x828>
 8005752:	4603      	mov	r3, r0
 8005754:	e7f4      	b.n	8005740 <_dtoa_r+0x900>
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	46b8      	mov	r8, r7
 800575c:	dc20      	bgt.n	80057a0 <_dtoa_r+0x960>
 800575e:	469b      	mov	fp, r3
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	2b02      	cmp	r3, #2
 8005764:	dd1e      	ble.n	80057a4 <_dtoa_r+0x964>
 8005766:	f1bb 0f00 	cmp.w	fp, #0
 800576a:	f47f adb1 	bne.w	80052d0 <_dtoa_r+0x490>
 800576e:	4621      	mov	r1, r4
 8005770:	465b      	mov	r3, fp
 8005772:	2205      	movs	r2, #5
 8005774:	4648      	mov	r0, r9
 8005776:	f000 fa95 	bl	8005ca4 <__multadd>
 800577a:	4601      	mov	r1, r0
 800577c:	4604      	mov	r4, r0
 800577e:	9802      	ldr	r0, [sp, #8]
 8005780:	f000 fca0 	bl	80060c4 <__mcmp>
 8005784:	2800      	cmp	r0, #0
 8005786:	f77f ada3 	ble.w	80052d0 <_dtoa_r+0x490>
 800578a:	4656      	mov	r6, sl
 800578c:	2331      	movs	r3, #49	@ 0x31
 800578e:	f806 3b01 	strb.w	r3, [r6], #1
 8005792:	f108 0801 	add.w	r8, r8, #1
 8005796:	e59f      	b.n	80052d8 <_dtoa_r+0x498>
 8005798:	9c03      	ldr	r4, [sp, #12]
 800579a:	46b8      	mov	r8, r7
 800579c:	4625      	mov	r5, r4
 800579e:	e7f4      	b.n	800578a <_dtoa_r+0x94a>
 80057a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80057a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8101 	beq.w	80059ae <_dtoa_r+0xb6e>
 80057ac:	2e00      	cmp	r6, #0
 80057ae:	dd05      	ble.n	80057bc <_dtoa_r+0x97c>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4632      	mov	r2, r6
 80057b4:	4648      	mov	r0, r9
 80057b6:	f000 fc19 	bl	8005fec <__lshift>
 80057ba:	4605      	mov	r5, r0
 80057bc:	9b08      	ldr	r3, [sp, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d05c      	beq.n	800587c <_dtoa_r+0xa3c>
 80057c2:	6869      	ldr	r1, [r5, #4]
 80057c4:	4648      	mov	r0, r9
 80057c6:	f000 fa0b 	bl	8005be0 <_Balloc>
 80057ca:	4606      	mov	r6, r0
 80057cc:	b928      	cbnz	r0, 80057da <_dtoa_r+0x99a>
 80057ce:	4b82      	ldr	r3, [pc, #520]	@ (80059d8 <_dtoa_r+0xb98>)
 80057d0:	4602      	mov	r2, r0
 80057d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057d6:	f7ff bb4a 	b.w	8004e6e <_dtoa_r+0x2e>
 80057da:	692a      	ldr	r2, [r5, #16]
 80057dc:	3202      	adds	r2, #2
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	f105 010c 	add.w	r1, r5, #12
 80057e4:	300c      	adds	r0, #12
 80057e6:	f000 fff7 	bl	80067d8 <memcpy>
 80057ea:	2201      	movs	r2, #1
 80057ec:	4631      	mov	r1, r6
 80057ee:	4648      	mov	r0, r9
 80057f0:	f000 fbfc 	bl	8005fec <__lshift>
 80057f4:	f10a 0301 	add.w	r3, sl, #1
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	eb0a 030b 	add.w	r3, sl, fp
 80057fe:	9308      	str	r3, [sp, #32]
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	462f      	mov	r7, r5
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	4605      	mov	r5, r0
 800580c:	9b00      	ldr	r3, [sp, #0]
 800580e:	9802      	ldr	r0, [sp, #8]
 8005810:	4621      	mov	r1, r4
 8005812:	f103 3bff 	add.w	fp, r3, #4294967295
 8005816:	f7ff fa8a 	bl	8004d2e <quorem>
 800581a:	4603      	mov	r3, r0
 800581c:	3330      	adds	r3, #48	@ 0x30
 800581e:	9003      	str	r0, [sp, #12]
 8005820:	4639      	mov	r1, r7
 8005822:	9802      	ldr	r0, [sp, #8]
 8005824:	9309      	str	r3, [sp, #36]	@ 0x24
 8005826:	f000 fc4d 	bl	80060c4 <__mcmp>
 800582a:	462a      	mov	r2, r5
 800582c:	9004      	str	r0, [sp, #16]
 800582e:	4621      	mov	r1, r4
 8005830:	4648      	mov	r0, r9
 8005832:	f000 fc63 	bl	80060fc <__mdiff>
 8005836:	68c2      	ldr	r2, [r0, #12]
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	4606      	mov	r6, r0
 800583c:	bb02      	cbnz	r2, 8005880 <_dtoa_r+0xa40>
 800583e:	4601      	mov	r1, r0
 8005840:	9802      	ldr	r0, [sp, #8]
 8005842:	f000 fc3f 	bl	80060c4 <__mcmp>
 8005846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005848:	4602      	mov	r2, r0
 800584a:	4631      	mov	r1, r6
 800584c:	4648      	mov	r0, r9
 800584e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005850:	9309      	str	r3, [sp, #36]	@ 0x24
 8005852:	f000 fa05 	bl	8005c60 <_Bfree>
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800585a:	9e00      	ldr	r6, [sp, #0]
 800585c:	ea42 0103 	orr.w	r1, r2, r3
 8005860:	9b06      	ldr	r3, [sp, #24]
 8005862:	4319      	orrs	r1, r3
 8005864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005866:	d10d      	bne.n	8005884 <_dtoa_r+0xa44>
 8005868:	2b39      	cmp	r3, #57	@ 0x39
 800586a:	d027      	beq.n	80058bc <_dtoa_r+0xa7c>
 800586c:	9a04      	ldr	r2, [sp, #16]
 800586e:	2a00      	cmp	r2, #0
 8005870:	dd01      	ble.n	8005876 <_dtoa_r+0xa36>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	3331      	adds	r3, #49	@ 0x31
 8005876:	f88b 3000 	strb.w	r3, [fp]
 800587a:	e52e      	b.n	80052da <_dtoa_r+0x49a>
 800587c:	4628      	mov	r0, r5
 800587e:	e7b9      	b.n	80057f4 <_dtoa_r+0x9b4>
 8005880:	2201      	movs	r2, #1
 8005882:	e7e2      	b.n	800584a <_dtoa_r+0xa0a>
 8005884:	9904      	ldr	r1, [sp, #16]
 8005886:	2900      	cmp	r1, #0
 8005888:	db04      	blt.n	8005894 <_dtoa_r+0xa54>
 800588a:	9807      	ldr	r0, [sp, #28]
 800588c:	4301      	orrs	r1, r0
 800588e:	9806      	ldr	r0, [sp, #24]
 8005890:	4301      	orrs	r1, r0
 8005892:	d120      	bne.n	80058d6 <_dtoa_r+0xa96>
 8005894:	2a00      	cmp	r2, #0
 8005896:	ddee      	ble.n	8005876 <_dtoa_r+0xa36>
 8005898:	9902      	ldr	r1, [sp, #8]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2201      	movs	r2, #1
 800589e:	4648      	mov	r0, r9
 80058a0:	f000 fba4 	bl	8005fec <__lshift>
 80058a4:	4621      	mov	r1, r4
 80058a6:	9002      	str	r0, [sp, #8]
 80058a8:	f000 fc0c 	bl	80060c4 <__mcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	dc02      	bgt.n	80058b8 <_dtoa_r+0xa78>
 80058b2:	d1e0      	bne.n	8005876 <_dtoa_r+0xa36>
 80058b4:	07da      	lsls	r2, r3, #31
 80058b6:	d5de      	bpl.n	8005876 <_dtoa_r+0xa36>
 80058b8:	2b39      	cmp	r3, #57	@ 0x39
 80058ba:	d1da      	bne.n	8005872 <_dtoa_r+0xa32>
 80058bc:	2339      	movs	r3, #57	@ 0x39
 80058be:	f88b 3000 	strb.w	r3, [fp]
 80058c2:	4633      	mov	r3, r6
 80058c4:	461e      	mov	r6, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058cc:	2a39      	cmp	r2, #57	@ 0x39
 80058ce:	d04e      	beq.n	800596e <_dtoa_r+0xb2e>
 80058d0:	3201      	adds	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e501      	b.n	80052da <_dtoa_r+0x49a>
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	dd03      	ble.n	80058e2 <_dtoa_r+0xaa2>
 80058da:	2b39      	cmp	r3, #57	@ 0x39
 80058dc:	d0ee      	beq.n	80058bc <_dtoa_r+0xa7c>
 80058de:	3301      	adds	r3, #1
 80058e0:	e7c9      	b.n	8005876 <_dtoa_r+0xa36>
 80058e2:	9a00      	ldr	r2, [sp, #0]
 80058e4:	9908      	ldr	r1, [sp, #32]
 80058e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058ea:	428a      	cmp	r2, r1
 80058ec:	d028      	beq.n	8005940 <_dtoa_r+0xb00>
 80058ee:	9902      	ldr	r1, [sp, #8]
 80058f0:	2300      	movs	r3, #0
 80058f2:	220a      	movs	r2, #10
 80058f4:	4648      	mov	r0, r9
 80058f6:	f000 f9d5 	bl	8005ca4 <__multadd>
 80058fa:	42af      	cmp	r7, r5
 80058fc:	9002      	str	r0, [sp, #8]
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	f04f 020a 	mov.w	r2, #10
 8005906:	4639      	mov	r1, r7
 8005908:	4648      	mov	r0, r9
 800590a:	d107      	bne.n	800591c <_dtoa_r+0xadc>
 800590c:	f000 f9ca 	bl	8005ca4 <__multadd>
 8005910:	4607      	mov	r7, r0
 8005912:	4605      	mov	r5, r0
 8005914:	9b00      	ldr	r3, [sp, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	e777      	b.n	800580c <_dtoa_r+0x9cc>
 800591c:	f000 f9c2 	bl	8005ca4 <__multadd>
 8005920:	4629      	mov	r1, r5
 8005922:	4607      	mov	r7, r0
 8005924:	2300      	movs	r3, #0
 8005926:	220a      	movs	r2, #10
 8005928:	4648      	mov	r0, r9
 800592a:	f000 f9bb 	bl	8005ca4 <__multadd>
 800592e:	4605      	mov	r5, r0
 8005930:	e7f0      	b.n	8005914 <_dtoa_r+0xad4>
 8005932:	f1bb 0f00 	cmp.w	fp, #0
 8005936:	bfcc      	ite	gt
 8005938:	465e      	movgt	r6, fp
 800593a:	2601      	movle	r6, #1
 800593c:	4456      	add	r6, sl
 800593e:	2700      	movs	r7, #0
 8005940:	9902      	ldr	r1, [sp, #8]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	4648      	mov	r0, r9
 8005948:	f000 fb50 	bl	8005fec <__lshift>
 800594c:	4621      	mov	r1, r4
 800594e:	9002      	str	r0, [sp, #8]
 8005950:	f000 fbb8 	bl	80060c4 <__mcmp>
 8005954:	2800      	cmp	r0, #0
 8005956:	dcb4      	bgt.n	80058c2 <_dtoa_r+0xa82>
 8005958:	d102      	bne.n	8005960 <_dtoa_r+0xb20>
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	07db      	lsls	r3, r3, #31
 800595e:	d4b0      	bmi.n	80058c2 <_dtoa_r+0xa82>
 8005960:	4633      	mov	r3, r6
 8005962:	461e      	mov	r6, r3
 8005964:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005968:	2a30      	cmp	r2, #48	@ 0x30
 800596a:	d0fa      	beq.n	8005962 <_dtoa_r+0xb22>
 800596c:	e4b5      	b.n	80052da <_dtoa_r+0x49a>
 800596e:	459a      	cmp	sl, r3
 8005970:	d1a8      	bne.n	80058c4 <_dtoa_r+0xa84>
 8005972:	2331      	movs	r3, #49	@ 0x31
 8005974:	f108 0801 	add.w	r8, r8, #1
 8005978:	f88a 3000 	strb.w	r3, [sl]
 800597c:	e4ad      	b.n	80052da <_dtoa_r+0x49a>
 800597e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005980:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80059dc <_dtoa_r+0xb9c>
 8005984:	b11b      	cbz	r3, 800598e <_dtoa_r+0xb4e>
 8005986:	f10a 0308 	add.w	r3, sl, #8
 800598a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	4650      	mov	r0, sl
 8005990:	b017      	add	sp, #92	@ 0x5c
 8005992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005996:	9b07      	ldr	r3, [sp, #28]
 8005998:	2b01      	cmp	r3, #1
 800599a:	f77f ae2e 	ble.w	80055fa <_dtoa_r+0x7ba>
 800599e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	2001      	movs	r0, #1
 80059a4:	e64d      	b.n	8005642 <_dtoa_r+0x802>
 80059a6:	f1bb 0f00 	cmp.w	fp, #0
 80059aa:	f77f aed9 	ble.w	8005760 <_dtoa_r+0x920>
 80059ae:	4656      	mov	r6, sl
 80059b0:	9802      	ldr	r0, [sp, #8]
 80059b2:	4621      	mov	r1, r4
 80059b4:	f7ff f9bb 	bl	8004d2e <quorem>
 80059b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80059bc:	f806 3b01 	strb.w	r3, [r6], #1
 80059c0:	eba6 020a 	sub.w	r2, r6, sl
 80059c4:	4593      	cmp	fp, r2
 80059c6:	ddb4      	ble.n	8005932 <_dtoa_r+0xaf2>
 80059c8:	9902      	ldr	r1, [sp, #8]
 80059ca:	2300      	movs	r3, #0
 80059cc:	220a      	movs	r2, #10
 80059ce:	4648      	mov	r0, r9
 80059d0:	f000 f968 	bl	8005ca4 <__multadd>
 80059d4:	9002      	str	r0, [sp, #8]
 80059d6:	e7eb      	b.n	80059b0 <_dtoa_r+0xb70>
 80059d8:	08008e34 	.word	0x08008e34
 80059dc:	08008db8 	.word	0x08008db8

080059e0 <_free_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4605      	mov	r5, r0
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d041      	beq.n	8005a6c <_free_r+0x8c>
 80059e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ec:	1f0c      	subs	r4, r1, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb8      	it	lt
 80059f2:	18e4      	addlt	r4, r4, r3
 80059f4:	f000 f8e8 	bl	8005bc8 <__malloc_lock>
 80059f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <_free_r+0x90>)
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x2c>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a08:	f000 b8e4 	b.w	8005bd4 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x42>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1809      	addeq	r1, r1, r0
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x1e>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x4c>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x42>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1850      	adds	r0, r2, r1
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x6c>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	4401      	add	r1, r0
 8005a38:	1850      	adds	r0, r2, r1
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x22>
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	4408      	add	r0, r1
 8005a48:	6010      	str	r0, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x22>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x74>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x22>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x22>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000404 	.word	0x20000404

08005a74 <malloc>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	@ (8005a80 <malloc+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f000 b825 	b.w	8005ac8 <_malloc_r>
 8005a7e:	bf00      	nop
 8005a80:	20000018 	.word	0x20000018

08005a84 <sbrk_aligned>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac4 <sbrk_aligned+0x40>)
 8005a88:	460c      	mov	r4, r1
 8005a8a:	6831      	ldr	r1, [r6, #0]
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b911      	cbnz	r1, 8005a96 <sbrk_aligned+0x12>
 8005a90:	f000 fe92 	bl	80067b8 <_sbrk_r>
 8005a94:	6030      	str	r0, [r6, #0]
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 fe8d 	bl	80067b8 <_sbrk_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d103      	bne.n	8005aaa <sbrk_aligned+0x26>
 8005aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}
 8005aaa:	1cc4      	adds	r4, r0, #3
 8005aac:	f024 0403 	bic.w	r4, r4, #3
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d0f8      	beq.n	8005aa6 <sbrk_aligned+0x22>
 8005ab4:	1a21      	subs	r1, r4, r0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 fe7e 	bl	80067b8 <_sbrk_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d1f2      	bne.n	8005aa6 <sbrk_aligned+0x22>
 8005ac0:	e7ef      	b.n	8005aa2 <sbrk_aligned+0x1e>
 8005ac2:	bf00      	nop
 8005ac4:	20000400 	.word	0x20000400

08005ac8 <_malloc_r>:
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005acc:	1ccd      	adds	r5, r1, #3
 8005ace:	f025 0503 	bic.w	r5, r5, #3
 8005ad2:	3508      	adds	r5, #8
 8005ad4:	2d0c      	cmp	r5, #12
 8005ad6:	bf38      	it	cc
 8005ad8:	250c      	movcc	r5, #12
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	4606      	mov	r6, r0
 8005ade:	db01      	blt.n	8005ae4 <_malloc_r+0x1c>
 8005ae0:	42a9      	cmp	r1, r5
 8005ae2:	d904      	bls.n	8005aee <_malloc_r+0x26>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	6033      	str	r3, [r6, #0]
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc4 <_malloc_r+0xfc>
 8005af2:	f000 f869 	bl	8005bc8 <__malloc_lock>
 8005af6:	f8d8 3000 	ldr.w	r3, [r8]
 8005afa:	461c      	mov	r4, r3
 8005afc:	bb44      	cbnz	r4, 8005b50 <_malloc_r+0x88>
 8005afe:	4629      	mov	r1, r5
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff ffbf 	bl	8005a84 <sbrk_aligned>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	4604      	mov	r4, r0
 8005b0a:	d158      	bne.n	8005bbe <_malloc_r+0xf6>
 8005b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b10:	4627      	mov	r7, r4
 8005b12:	2f00      	cmp	r7, #0
 8005b14:	d143      	bne.n	8005b9e <_malloc_r+0xd6>
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d04b      	beq.n	8005bb2 <_malloc_r+0xea>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4630      	mov	r0, r6
 8005b20:	eb04 0903 	add.w	r9, r4, r3
 8005b24:	f000 fe48 	bl	80067b8 <_sbrk_r>
 8005b28:	4581      	cmp	r9, r0
 8005b2a:	d142      	bne.n	8005bb2 <_malloc_r+0xea>
 8005b2c:	6821      	ldr	r1, [r4, #0]
 8005b2e:	1a6d      	subs	r5, r5, r1
 8005b30:	4629      	mov	r1, r5
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff ffa6 	bl	8005a84 <sbrk_aligned>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d03a      	beq.n	8005bb2 <_malloc_r+0xea>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	442b      	add	r3, r5
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	f8d8 3000 	ldr.w	r3, [r8]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	bb62      	cbnz	r2, 8005ba4 <_malloc_r+0xdc>
 8005b4a:	f8c8 7000 	str.w	r7, [r8]
 8005b4e:	e00f      	b.n	8005b70 <_malloc_r+0xa8>
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	1b52      	subs	r2, r2, r5
 8005b54:	d420      	bmi.n	8005b98 <_malloc_r+0xd0>
 8005b56:	2a0b      	cmp	r2, #11
 8005b58:	d917      	bls.n	8005b8a <_malloc_r+0xc2>
 8005b5a:	1961      	adds	r1, r4, r5
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	6025      	str	r5, [r4, #0]
 8005b60:	bf18      	it	ne
 8005b62:	6059      	strne	r1, [r3, #4]
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	bf08      	it	eq
 8005b68:	f8c8 1000 	streq.w	r1, [r8]
 8005b6c:	5162      	str	r2, [r4, r5]
 8005b6e:	604b      	str	r3, [r1, #4]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f82f 	bl	8005bd4 <__malloc_unlock>
 8005b76:	f104 000b 	add.w	r0, r4, #11
 8005b7a:	1d23      	adds	r3, r4, #4
 8005b7c:	f020 0007 	bic.w	r0, r0, #7
 8005b80:	1ac2      	subs	r2, r0, r3
 8005b82:	bf1c      	itt	ne
 8005b84:	1a1b      	subne	r3, r3, r0
 8005b86:	50a3      	strne	r3, [r4, r2]
 8005b88:	e7af      	b.n	8005aea <_malloc_r+0x22>
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	bf0c      	ite	eq
 8005b90:	f8c8 2000 	streq.w	r2, [r8]
 8005b94:	605a      	strne	r2, [r3, #4]
 8005b96:	e7eb      	b.n	8005b70 <_malloc_r+0xa8>
 8005b98:	4623      	mov	r3, r4
 8005b9a:	6864      	ldr	r4, [r4, #4]
 8005b9c:	e7ae      	b.n	8005afc <_malloc_r+0x34>
 8005b9e:	463c      	mov	r4, r7
 8005ba0:	687f      	ldr	r7, [r7, #4]
 8005ba2:	e7b6      	b.n	8005b12 <_malloc_r+0x4a>
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d1fb      	bne.n	8005ba4 <_malloc_r+0xdc>
 8005bac:	2300      	movs	r3, #0
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e7de      	b.n	8005b70 <_malloc_r+0xa8>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f80c 	bl	8005bd4 <__malloc_unlock>
 8005bbc:	e794      	b.n	8005ae8 <_malloc_r+0x20>
 8005bbe:	6005      	str	r5, [r0, #0]
 8005bc0:	e7d6      	b.n	8005b70 <_malloc_r+0xa8>
 8005bc2:	bf00      	nop
 8005bc4:	20000404 	.word	0x20000404

08005bc8 <__malloc_lock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	@ (8005bd0 <__malloc_lock+0x8>)
 8005bca:	f7ff b8ae 	b.w	8004d2a <__retarget_lock_acquire_recursive>
 8005bce:	bf00      	nop
 8005bd0:	200003fc 	.word	0x200003fc

08005bd4 <__malloc_unlock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	@ (8005bdc <__malloc_unlock+0x8>)
 8005bd6:	f7ff b8a9 	b.w	8004d2c <__retarget_lock_release_recursive>
 8005bda:	bf00      	nop
 8005bdc:	200003fc 	.word	0x200003fc

08005be0 <_Balloc>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	69c6      	ldr	r6, [r0, #28]
 8005be4:	4604      	mov	r4, r0
 8005be6:	460d      	mov	r5, r1
 8005be8:	b976      	cbnz	r6, 8005c08 <_Balloc+0x28>
 8005bea:	2010      	movs	r0, #16
 8005bec:	f7ff ff42 	bl	8005a74 <malloc>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	61e0      	str	r0, [r4, #28]
 8005bf4:	b920      	cbnz	r0, 8005c00 <_Balloc+0x20>
 8005bf6:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <_Balloc+0x78>)
 8005bf8:	4818      	ldr	r0, [pc, #96]	@ (8005c5c <_Balloc+0x7c>)
 8005bfa:	216b      	movs	r1, #107	@ 0x6b
 8005bfc:	f000 fdfa 	bl	80067f4 <__assert_func>
 8005c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c04:	6006      	str	r6, [r0, #0]
 8005c06:	60c6      	str	r6, [r0, #12]
 8005c08:	69e6      	ldr	r6, [r4, #28]
 8005c0a:	68f3      	ldr	r3, [r6, #12]
 8005c0c:	b183      	cbz	r3, 8005c30 <_Balloc+0x50>
 8005c0e:	69e3      	ldr	r3, [r4, #28]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c16:	b9b8      	cbnz	r0, 8005c48 <_Balloc+0x68>
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c1e:	1d72      	adds	r2, r6, #5
 8005c20:	0092      	lsls	r2, r2, #2
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 fe04 	bl	8006830 <_calloc_r>
 8005c28:	b160      	cbz	r0, 8005c44 <_Balloc+0x64>
 8005c2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c2e:	e00e      	b.n	8005c4e <_Balloc+0x6e>
 8005c30:	2221      	movs	r2, #33	@ 0x21
 8005c32:	2104      	movs	r1, #4
 8005c34:	4620      	mov	r0, r4
 8005c36:	f000 fdfb 	bl	8006830 <_calloc_r>
 8005c3a:	69e3      	ldr	r3, [r4, #28]
 8005c3c:	60f0      	str	r0, [r6, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e4      	bne.n	8005c0e <_Balloc+0x2e>
 8005c44:	2000      	movs	r0, #0
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	6802      	ldr	r2, [r0, #0]
 8005c4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c54:	e7f7      	b.n	8005c46 <_Balloc+0x66>
 8005c56:	bf00      	nop
 8005c58:	08008dc5 	.word	0x08008dc5
 8005c5c:	08008e45 	.word	0x08008e45

08005c60 <_Bfree>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	69c6      	ldr	r6, [r0, #28]
 8005c64:	4605      	mov	r5, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b976      	cbnz	r6, 8005c88 <_Bfree+0x28>
 8005c6a:	2010      	movs	r0, #16
 8005c6c:	f7ff ff02 	bl	8005a74 <malloc>
 8005c70:	4602      	mov	r2, r0
 8005c72:	61e8      	str	r0, [r5, #28]
 8005c74:	b920      	cbnz	r0, 8005c80 <_Bfree+0x20>
 8005c76:	4b09      	ldr	r3, [pc, #36]	@ (8005c9c <_Bfree+0x3c>)
 8005c78:	4809      	ldr	r0, [pc, #36]	@ (8005ca0 <_Bfree+0x40>)
 8005c7a:	218f      	movs	r1, #143	@ 0x8f
 8005c7c:	f000 fdba 	bl	80067f4 <__assert_func>
 8005c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c84:	6006      	str	r6, [r0, #0]
 8005c86:	60c6      	str	r6, [r0, #12]
 8005c88:	b13c      	cbz	r4, 8005c9a <_Bfree+0x3a>
 8005c8a:	69eb      	ldr	r3, [r5, #28]
 8005c8c:	6862      	ldr	r2, [r4, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c94:	6021      	str	r1, [r4, #0]
 8005c96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	08008dc5 	.word	0x08008dc5
 8005ca0:	08008e45 	.word	0x08008e45

08005ca4 <__multadd>:
 8005ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca8:	690d      	ldr	r5, [r1, #16]
 8005caa:	4607      	mov	r7, r0
 8005cac:	460c      	mov	r4, r1
 8005cae:	461e      	mov	r6, r3
 8005cb0:	f101 0c14 	add.w	ip, r1, #20
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f8dc 3000 	ldr.w	r3, [ip]
 8005cba:	b299      	uxth	r1, r3
 8005cbc:	fb02 6101 	mla	r1, r2, r1, r6
 8005cc0:	0c1e      	lsrs	r6, r3, #16
 8005cc2:	0c0b      	lsrs	r3, r1, #16
 8005cc4:	fb02 3306 	mla	r3, r2, r6, r3
 8005cc8:	b289      	uxth	r1, r1
 8005cca:	3001      	adds	r0, #1
 8005ccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cd0:	4285      	cmp	r5, r0
 8005cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8005cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cda:	dcec      	bgt.n	8005cb6 <__multadd+0x12>
 8005cdc:	b30e      	cbz	r6, 8005d22 <__multadd+0x7e>
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dc19      	bgt.n	8005d18 <__multadd+0x74>
 8005ce4:	6861      	ldr	r1, [r4, #4]
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	3101      	adds	r1, #1
 8005cea:	f7ff ff79 	bl	8005be0 <_Balloc>
 8005cee:	4680      	mov	r8, r0
 8005cf0:	b928      	cbnz	r0, 8005cfe <__multadd+0x5a>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <__multadd+0x84>)
 8005cf6:	480d      	ldr	r0, [pc, #52]	@ (8005d2c <__multadd+0x88>)
 8005cf8:	21ba      	movs	r1, #186	@ 0xba
 8005cfa:	f000 fd7b 	bl	80067f4 <__assert_func>
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	3202      	adds	r2, #2
 8005d02:	f104 010c 	add.w	r1, r4, #12
 8005d06:	0092      	lsls	r2, r2, #2
 8005d08:	300c      	adds	r0, #12
 8005d0a:	f000 fd65 	bl	80067d8 <memcpy>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4638      	mov	r0, r7
 8005d12:	f7ff ffa5 	bl	8005c60 <_Bfree>
 8005d16:	4644      	mov	r4, r8
 8005d18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	615e      	str	r6, [r3, #20]
 8005d20:	6125      	str	r5, [r4, #16]
 8005d22:	4620      	mov	r0, r4
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	08008e34 	.word	0x08008e34
 8005d2c:	08008e45 	.word	0x08008e45

08005d30 <__hi0bits>:
 8005d30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d34:	4603      	mov	r3, r0
 8005d36:	bf36      	itet	cc
 8005d38:	0403      	lslcc	r3, r0, #16
 8005d3a:	2000      	movcs	r0, #0
 8005d3c:	2010      	movcc	r0, #16
 8005d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d42:	bf3c      	itt	cc
 8005d44:	021b      	lslcc	r3, r3, #8
 8005d46:	3008      	addcc	r0, #8
 8005d48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d4c:	bf3c      	itt	cc
 8005d4e:	011b      	lslcc	r3, r3, #4
 8005d50:	3004      	addcc	r0, #4
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d56:	bf3c      	itt	cc
 8005d58:	009b      	lslcc	r3, r3, #2
 8005d5a:	3002      	addcc	r0, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db05      	blt.n	8005d6c <__hi0bits+0x3c>
 8005d60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d64:	f100 0001 	add.w	r0, r0, #1
 8005d68:	bf08      	it	eq
 8005d6a:	2020      	moveq	r0, #32
 8005d6c:	4770      	bx	lr

08005d6e <__lo0bits>:
 8005d6e:	6803      	ldr	r3, [r0, #0]
 8005d70:	4602      	mov	r2, r0
 8005d72:	f013 0007 	ands.w	r0, r3, #7
 8005d76:	d00b      	beq.n	8005d90 <__lo0bits+0x22>
 8005d78:	07d9      	lsls	r1, r3, #31
 8005d7a:	d421      	bmi.n	8005dc0 <__lo0bits+0x52>
 8005d7c:	0798      	lsls	r0, r3, #30
 8005d7e:	bf49      	itett	mi
 8005d80:	085b      	lsrmi	r3, r3, #1
 8005d82:	089b      	lsrpl	r3, r3, #2
 8005d84:	2001      	movmi	r0, #1
 8005d86:	6013      	strmi	r3, [r2, #0]
 8005d88:	bf5c      	itt	pl
 8005d8a:	6013      	strpl	r3, [r2, #0]
 8005d8c:	2002      	movpl	r0, #2
 8005d8e:	4770      	bx	lr
 8005d90:	b299      	uxth	r1, r3
 8005d92:	b909      	cbnz	r1, 8005d98 <__lo0bits+0x2a>
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	2010      	movs	r0, #16
 8005d98:	b2d9      	uxtb	r1, r3
 8005d9a:	b909      	cbnz	r1, 8005da0 <__lo0bits+0x32>
 8005d9c:	3008      	adds	r0, #8
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	0719      	lsls	r1, r3, #28
 8005da2:	bf04      	itt	eq
 8005da4:	091b      	lsreq	r3, r3, #4
 8005da6:	3004      	addeq	r0, #4
 8005da8:	0799      	lsls	r1, r3, #30
 8005daa:	bf04      	itt	eq
 8005dac:	089b      	lsreq	r3, r3, #2
 8005dae:	3002      	addeq	r0, #2
 8005db0:	07d9      	lsls	r1, r3, #31
 8005db2:	d403      	bmi.n	8005dbc <__lo0bits+0x4e>
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	f100 0001 	add.w	r0, r0, #1
 8005dba:	d003      	beq.n	8005dc4 <__lo0bits+0x56>
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	4770      	bx	lr
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4770      	bx	lr
 8005dc4:	2020      	movs	r0, #32
 8005dc6:	4770      	bx	lr

08005dc8 <__i2b>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	460c      	mov	r4, r1
 8005dcc:	2101      	movs	r1, #1
 8005dce:	f7ff ff07 	bl	8005be0 <_Balloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	b928      	cbnz	r0, 8005de2 <__i2b+0x1a>
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <__i2b+0x24>)
 8005dd8:	4805      	ldr	r0, [pc, #20]	@ (8005df0 <__i2b+0x28>)
 8005dda:	f240 1145 	movw	r1, #325	@ 0x145
 8005dde:	f000 fd09 	bl	80067f4 <__assert_func>
 8005de2:	2301      	movs	r3, #1
 8005de4:	6144      	str	r4, [r0, #20]
 8005de6:	6103      	str	r3, [r0, #16]
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	bf00      	nop
 8005dec:	08008e34 	.word	0x08008e34
 8005df0:	08008e45 	.word	0x08008e45

08005df4 <__multiply>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	4617      	mov	r7, r2
 8005dfa:	690a      	ldr	r2, [r1, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	bfa8      	it	ge
 8005e02:	463b      	movge	r3, r7
 8005e04:	4689      	mov	r9, r1
 8005e06:	bfa4      	itt	ge
 8005e08:	460f      	movge	r7, r1
 8005e0a:	4699      	movge	r9, r3
 8005e0c:	693d      	ldr	r5, [r7, #16]
 8005e0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	eb05 060a 	add.w	r6, r5, sl
 8005e1a:	42b3      	cmp	r3, r6
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	bfb8      	it	lt
 8005e20:	3101      	addlt	r1, #1
 8005e22:	f7ff fedd 	bl	8005be0 <_Balloc>
 8005e26:	b930      	cbnz	r0, 8005e36 <__multiply+0x42>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b41      	ldr	r3, [pc, #260]	@ (8005f30 <__multiply+0x13c>)
 8005e2c:	4841      	ldr	r0, [pc, #260]	@ (8005f34 <__multiply+0x140>)
 8005e2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e32:	f000 fcdf 	bl	80067f4 <__assert_func>
 8005e36:	f100 0414 	add.w	r4, r0, #20
 8005e3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005e3e:	4623      	mov	r3, r4
 8005e40:	2200      	movs	r2, #0
 8005e42:	4573      	cmp	r3, lr
 8005e44:	d320      	bcc.n	8005e88 <__multiply+0x94>
 8005e46:	f107 0814 	add.w	r8, r7, #20
 8005e4a:	f109 0114 	add.w	r1, r9, #20
 8005e4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005e52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	1beb      	subs	r3, r5, r7
 8005e5a:	3b15      	subs	r3, #21
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	3304      	adds	r3, #4
 8005e62:	3715      	adds	r7, #21
 8005e64:	42bd      	cmp	r5, r7
 8005e66:	bf38      	it	cc
 8005e68:	2304      	movcc	r3, #4
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	9b02      	ldr	r3, [sp, #8]
 8005e6e:	9103      	str	r1, [sp, #12]
 8005e70:	428b      	cmp	r3, r1
 8005e72:	d80c      	bhi.n	8005e8e <__multiply+0x9a>
 8005e74:	2e00      	cmp	r6, #0
 8005e76:	dd03      	ble.n	8005e80 <__multiply+0x8c>
 8005e78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d055      	beq.n	8005f2c <__multiply+0x138>
 8005e80:	6106      	str	r6, [r0, #16]
 8005e82:	b005      	add	sp, #20
 8005e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e88:	f843 2b04 	str.w	r2, [r3], #4
 8005e8c:	e7d9      	b.n	8005e42 <__multiply+0x4e>
 8005e8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e92:	f1ba 0f00 	cmp.w	sl, #0
 8005e96:	d01f      	beq.n	8005ed8 <__multiply+0xe4>
 8005e98:	46c4      	mov	ip, r8
 8005e9a:	46a1      	mov	r9, r4
 8005e9c:	2700      	movs	r7, #0
 8005e9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8005ea6:	fa1f fb82 	uxth.w	fp, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	fb0a 330b 	mla	r3, sl, fp, r3
 8005eb0:	443b      	add	r3, r7
 8005eb2:	f8d9 7000 	ldr.w	r7, [r9]
 8005eb6:	0c12      	lsrs	r2, r2, #16
 8005eb8:	0c3f      	lsrs	r7, r7, #16
 8005eba:	fb0a 7202 	mla	r2, sl, r2, r7
 8005ebe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec8:	4565      	cmp	r5, ip
 8005eca:	f849 3b04 	str.w	r3, [r9], #4
 8005ece:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005ed2:	d8e4      	bhi.n	8005e9e <__multiply+0xaa>
 8005ed4:	9b01      	ldr	r3, [sp, #4]
 8005ed6:	50e7      	str	r7, [r4, r3]
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ede:	3104      	adds	r1, #4
 8005ee0:	f1b9 0f00 	cmp.w	r9, #0
 8005ee4:	d020      	beq.n	8005f28 <__multiply+0x134>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	4647      	mov	r7, r8
 8005eea:	46a4      	mov	ip, r4
 8005eec:	f04f 0a00 	mov.w	sl, #0
 8005ef0:	f8b7 b000 	ldrh.w	fp, [r7]
 8005ef4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005ef8:	fb09 220b 	mla	r2, r9, fp, r2
 8005efc:	4452      	add	r2, sl
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f04:	f84c 3b04 	str.w	r3, [ip], #4
 8005f08:	f857 3b04 	ldr.w	r3, [r7], #4
 8005f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f10:	f8bc 3000 	ldrh.w	r3, [ip]
 8005f14:	fb09 330a 	mla	r3, r9, sl, r3
 8005f18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005f1c:	42bd      	cmp	r5, r7
 8005f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f22:	d8e5      	bhi.n	8005ef0 <__multiply+0xfc>
 8005f24:	9a01      	ldr	r2, [sp, #4]
 8005f26:	50a3      	str	r3, [r4, r2]
 8005f28:	3404      	adds	r4, #4
 8005f2a:	e79f      	b.n	8005e6c <__multiply+0x78>
 8005f2c:	3e01      	subs	r6, #1
 8005f2e:	e7a1      	b.n	8005e74 <__multiply+0x80>
 8005f30:	08008e34 	.word	0x08008e34
 8005f34:	08008e45 	.word	0x08008e45

08005f38 <__pow5mult>:
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	f012 0203 	ands.w	r2, r2, #3
 8005f42:	4607      	mov	r7, r0
 8005f44:	460e      	mov	r6, r1
 8005f46:	d007      	beq.n	8005f58 <__pow5mult+0x20>
 8005f48:	4c25      	ldr	r4, [pc, #148]	@ (8005fe0 <__pow5mult+0xa8>)
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f52:	f7ff fea7 	bl	8005ca4 <__multadd>
 8005f56:	4606      	mov	r6, r0
 8005f58:	10ad      	asrs	r5, r5, #2
 8005f5a:	d03d      	beq.n	8005fd8 <__pow5mult+0xa0>
 8005f5c:	69fc      	ldr	r4, [r7, #28]
 8005f5e:	b97c      	cbnz	r4, 8005f80 <__pow5mult+0x48>
 8005f60:	2010      	movs	r0, #16
 8005f62:	f7ff fd87 	bl	8005a74 <malloc>
 8005f66:	4602      	mov	r2, r0
 8005f68:	61f8      	str	r0, [r7, #28]
 8005f6a:	b928      	cbnz	r0, 8005f78 <__pow5mult+0x40>
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe4 <__pow5mult+0xac>)
 8005f6e:	481e      	ldr	r0, [pc, #120]	@ (8005fe8 <__pow5mult+0xb0>)
 8005f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f74:	f000 fc3e 	bl	80067f4 <__assert_func>
 8005f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f7c:	6004      	str	r4, [r0, #0]
 8005f7e:	60c4      	str	r4, [r0, #12]
 8005f80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f88:	b94c      	cbnz	r4, 8005f9e <__pow5mult+0x66>
 8005f8a:	f240 2171 	movw	r1, #625	@ 0x271
 8005f8e:	4638      	mov	r0, r7
 8005f90:	f7ff ff1a 	bl	8005dc8 <__i2b>
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	6003      	str	r3, [r0, #0]
 8005f9e:	f04f 0900 	mov.w	r9, #0
 8005fa2:	07eb      	lsls	r3, r5, #31
 8005fa4:	d50a      	bpl.n	8005fbc <__pow5mult+0x84>
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4638      	mov	r0, r7
 8005fac:	f7ff ff22 	bl	8005df4 <__multiply>
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f7ff fe53 	bl	8005c60 <_Bfree>
 8005fba:	4646      	mov	r6, r8
 8005fbc:	106d      	asrs	r5, r5, #1
 8005fbe:	d00b      	beq.n	8005fd8 <__pow5mult+0xa0>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	b938      	cbnz	r0, 8005fd4 <__pow5mult+0x9c>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4638      	mov	r0, r7
 8005fca:	f7ff ff13 	bl	8005df4 <__multiply>
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f8c0 9000 	str.w	r9, [r0]
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	e7e4      	b.n	8005fa2 <__pow5mult+0x6a>
 8005fd8:	4630      	mov	r0, r6
 8005fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fde:	bf00      	nop
 8005fe0:	08008ef8 	.word	0x08008ef8
 8005fe4:	08008dc5 	.word	0x08008dc5
 8005fe8:	08008e45 	.word	0x08008e45

08005fec <__lshift>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6849      	ldr	r1, [r1, #4]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	4691      	mov	r9, r2
 8006000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006004:	f108 0601 	add.w	r6, r8, #1
 8006008:	42b3      	cmp	r3, r6
 800600a:	db0b      	blt.n	8006024 <__lshift+0x38>
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff fde7 	bl	8005be0 <_Balloc>
 8006012:	4605      	mov	r5, r0
 8006014:	b948      	cbnz	r0, 800602a <__lshift+0x3e>
 8006016:	4602      	mov	r2, r0
 8006018:	4b28      	ldr	r3, [pc, #160]	@ (80060bc <__lshift+0xd0>)
 800601a:	4829      	ldr	r0, [pc, #164]	@ (80060c0 <__lshift+0xd4>)
 800601c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006020:	f000 fbe8 	bl	80067f4 <__assert_func>
 8006024:	3101      	adds	r1, #1
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	e7ee      	b.n	8006008 <__lshift+0x1c>
 800602a:	2300      	movs	r3, #0
 800602c:	f100 0114 	add.w	r1, r0, #20
 8006030:	f100 0210 	add.w	r2, r0, #16
 8006034:	4618      	mov	r0, r3
 8006036:	4553      	cmp	r3, sl
 8006038:	db33      	blt.n	80060a2 <__lshift+0xb6>
 800603a:	6920      	ldr	r0, [r4, #16]
 800603c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006040:	f104 0314 	add.w	r3, r4, #20
 8006044:	f019 091f 	ands.w	r9, r9, #31
 8006048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800604c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006050:	d02b      	beq.n	80060aa <__lshift+0xbe>
 8006052:	f1c9 0e20 	rsb	lr, r9, #32
 8006056:	468a      	mov	sl, r1
 8006058:	2200      	movs	r2, #0
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	fa00 f009 	lsl.w	r0, r0, r9
 8006060:	4310      	orrs	r0, r2
 8006062:	f84a 0b04 	str.w	r0, [sl], #4
 8006066:	f853 2b04 	ldr.w	r2, [r3], #4
 800606a:	459c      	cmp	ip, r3
 800606c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006070:	d8f3      	bhi.n	800605a <__lshift+0x6e>
 8006072:	ebac 0304 	sub.w	r3, ip, r4
 8006076:	3b15      	subs	r3, #21
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	3304      	adds	r3, #4
 800607e:	f104 0015 	add.w	r0, r4, #21
 8006082:	4560      	cmp	r0, ip
 8006084:	bf88      	it	hi
 8006086:	2304      	movhi	r3, #4
 8006088:	50ca      	str	r2, [r1, r3]
 800608a:	b10a      	cbz	r2, 8006090 <__lshift+0xa4>
 800608c:	f108 0602 	add.w	r6, r8, #2
 8006090:	3e01      	subs	r6, #1
 8006092:	4638      	mov	r0, r7
 8006094:	612e      	str	r6, [r5, #16]
 8006096:	4621      	mov	r1, r4
 8006098:	f7ff fde2 	bl	8005c60 <_Bfree>
 800609c:	4628      	mov	r0, r5
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80060a6:	3301      	adds	r3, #1
 80060a8:	e7c5      	b.n	8006036 <__lshift+0x4a>
 80060aa:	3904      	subs	r1, #4
 80060ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80060b4:	459c      	cmp	ip, r3
 80060b6:	d8f9      	bhi.n	80060ac <__lshift+0xc0>
 80060b8:	e7ea      	b.n	8006090 <__lshift+0xa4>
 80060ba:	bf00      	nop
 80060bc:	08008e34 	.word	0x08008e34
 80060c0:	08008e45 	.word	0x08008e45

080060c4 <__mcmp>:
 80060c4:	690a      	ldr	r2, [r1, #16]
 80060c6:	4603      	mov	r3, r0
 80060c8:	6900      	ldr	r0, [r0, #16]
 80060ca:	1a80      	subs	r0, r0, r2
 80060cc:	b530      	push	{r4, r5, lr}
 80060ce:	d10e      	bne.n	80060ee <__mcmp+0x2a>
 80060d0:	3314      	adds	r3, #20
 80060d2:	3114      	adds	r1, #20
 80060d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060e4:	4295      	cmp	r5, r2
 80060e6:	d003      	beq.n	80060f0 <__mcmp+0x2c>
 80060e8:	d205      	bcs.n	80060f6 <__mcmp+0x32>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295
 80060ee:	bd30      	pop	{r4, r5, pc}
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d3f3      	bcc.n	80060dc <__mcmp+0x18>
 80060f4:	e7fb      	b.n	80060ee <__mcmp+0x2a>
 80060f6:	2001      	movs	r0, #1
 80060f8:	e7f9      	b.n	80060ee <__mcmp+0x2a>
	...

080060fc <__mdiff>:
 80060fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	4689      	mov	r9, r1
 8006102:	4606      	mov	r6, r0
 8006104:	4611      	mov	r1, r2
 8006106:	4648      	mov	r0, r9
 8006108:	4614      	mov	r4, r2
 800610a:	f7ff ffdb 	bl	80060c4 <__mcmp>
 800610e:	1e05      	subs	r5, r0, #0
 8006110:	d112      	bne.n	8006138 <__mdiff+0x3c>
 8006112:	4629      	mov	r1, r5
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff fd63 	bl	8005be0 <_Balloc>
 800611a:	4602      	mov	r2, r0
 800611c:	b928      	cbnz	r0, 800612a <__mdiff+0x2e>
 800611e:	4b3f      	ldr	r3, [pc, #252]	@ (800621c <__mdiff+0x120>)
 8006120:	f240 2137 	movw	r1, #567	@ 0x237
 8006124:	483e      	ldr	r0, [pc, #248]	@ (8006220 <__mdiff+0x124>)
 8006126:	f000 fb65 	bl	80067f4 <__assert_func>
 800612a:	2301      	movs	r3, #1
 800612c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006130:	4610      	mov	r0, r2
 8006132:	b003      	add	sp, #12
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	bfbc      	itt	lt
 800613a:	464b      	movlt	r3, r9
 800613c:	46a1      	movlt	r9, r4
 800613e:	4630      	mov	r0, r6
 8006140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006144:	bfba      	itte	lt
 8006146:	461c      	movlt	r4, r3
 8006148:	2501      	movlt	r5, #1
 800614a:	2500      	movge	r5, #0
 800614c:	f7ff fd48 	bl	8005be0 <_Balloc>
 8006150:	4602      	mov	r2, r0
 8006152:	b918      	cbnz	r0, 800615c <__mdiff+0x60>
 8006154:	4b31      	ldr	r3, [pc, #196]	@ (800621c <__mdiff+0x120>)
 8006156:	f240 2145 	movw	r1, #581	@ 0x245
 800615a:	e7e3      	b.n	8006124 <__mdiff+0x28>
 800615c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006160:	6926      	ldr	r6, [r4, #16]
 8006162:	60c5      	str	r5, [r0, #12]
 8006164:	f109 0310 	add.w	r3, r9, #16
 8006168:	f109 0514 	add.w	r5, r9, #20
 800616c:	f104 0e14 	add.w	lr, r4, #20
 8006170:	f100 0b14 	add.w	fp, r0, #20
 8006174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	46d9      	mov	r9, fp
 8006180:	f04f 0c00 	mov.w	ip, #0
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800618a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	fa1f f38a 	uxth.w	r3, sl
 8006194:	4619      	mov	r1, r3
 8006196:	b283      	uxth	r3, r0
 8006198:	1acb      	subs	r3, r1, r3
 800619a:	0c00      	lsrs	r0, r0, #16
 800619c:	4463      	add	r3, ip
 800619e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80061a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061ac:	4576      	cmp	r6, lr
 80061ae:	f849 3b04 	str.w	r3, [r9], #4
 80061b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061b6:	d8e5      	bhi.n	8006184 <__mdiff+0x88>
 80061b8:	1b33      	subs	r3, r6, r4
 80061ba:	3b15      	subs	r3, #21
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	3415      	adds	r4, #21
 80061c2:	3304      	adds	r3, #4
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	bf38      	it	cc
 80061c8:	2304      	movcc	r3, #4
 80061ca:	441d      	add	r5, r3
 80061cc:	445b      	add	r3, fp
 80061ce:	461e      	mov	r6, r3
 80061d0:	462c      	mov	r4, r5
 80061d2:	4544      	cmp	r4, r8
 80061d4:	d30e      	bcc.n	80061f4 <__mdiff+0xf8>
 80061d6:	f108 0103 	add.w	r1, r8, #3
 80061da:	1b49      	subs	r1, r1, r5
 80061dc:	f021 0103 	bic.w	r1, r1, #3
 80061e0:	3d03      	subs	r5, #3
 80061e2:	45a8      	cmp	r8, r5
 80061e4:	bf38      	it	cc
 80061e6:	2100      	movcc	r1, #0
 80061e8:	440b      	add	r3, r1
 80061ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061ee:	b191      	cbz	r1, 8006216 <__mdiff+0x11a>
 80061f0:	6117      	str	r7, [r2, #16]
 80061f2:	e79d      	b.n	8006130 <__mdiff+0x34>
 80061f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80061f8:	46e6      	mov	lr, ip
 80061fa:	0c08      	lsrs	r0, r1, #16
 80061fc:	fa1c fc81 	uxtah	ip, ip, r1
 8006200:	4471      	add	r1, lr
 8006202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006206:	b289      	uxth	r1, r1
 8006208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800620c:	f846 1b04 	str.w	r1, [r6], #4
 8006210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006214:	e7dd      	b.n	80061d2 <__mdiff+0xd6>
 8006216:	3f01      	subs	r7, #1
 8006218:	e7e7      	b.n	80061ea <__mdiff+0xee>
 800621a:	bf00      	nop
 800621c:	08008e34 	.word	0x08008e34
 8006220:	08008e45 	.word	0x08008e45

08006224 <__d2b>:
 8006224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006228:	460f      	mov	r7, r1
 800622a:	2101      	movs	r1, #1
 800622c:	ec59 8b10 	vmov	r8, r9, d0
 8006230:	4616      	mov	r6, r2
 8006232:	f7ff fcd5 	bl	8005be0 <_Balloc>
 8006236:	4604      	mov	r4, r0
 8006238:	b930      	cbnz	r0, 8006248 <__d2b+0x24>
 800623a:	4602      	mov	r2, r0
 800623c:	4b23      	ldr	r3, [pc, #140]	@ (80062cc <__d2b+0xa8>)
 800623e:	4824      	ldr	r0, [pc, #144]	@ (80062d0 <__d2b+0xac>)
 8006240:	f240 310f 	movw	r1, #783	@ 0x30f
 8006244:	f000 fad6 	bl	80067f4 <__assert_func>
 8006248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800624c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006250:	b10d      	cbz	r5, 8006256 <__d2b+0x32>
 8006252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	f1b8 0300 	subs.w	r3, r8, #0
 800625c:	d023      	beq.n	80062a6 <__d2b+0x82>
 800625e:	4668      	mov	r0, sp
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	f7ff fd84 	bl	8005d6e <__lo0bits>
 8006266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800626a:	b1d0      	cbz	r0, 80062a2 <__d2b+0x7e>
 800626c:	f1c0 0320 	rsb	r3, r0, #32
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	430b      	orrs	r3, r1
 8006276:	40c2      	lsrs	r2, r0
 8006278:	6163      	str	r3, [r4, #20]
 800627a:	9201      	str	r2, [sp, #4]
 800627c:	9b01      	ldr	r3, [sp, #4]
 800627e:	61a3      	str	r3, [r4, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf0c      	ite	eq
 8006284:	2201      	moveq	r2, #1
 8006286:	2202      	movne	r2, #2
 8006288:	6122      	str	r2, [r4, #16]
 800628a:	b1a5      	cbz	r5, 80062b6 <__d2b+0x92>
 800628c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006290:	4405      	add	r5, r0
 8006292:	603d      	str	r5, [r7, #0]
 8006294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006298:	6030      	str	r0, [r6, #0]
 800629a:	4620      	mov	r0, r4
 800629c:	b003      	add	sp, #12
 800629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a2:	6161      	str	r1, [r4, #20]
 80062a4:	e7ea      	b.n	800627c <__d2b+0x58>
 80062a6:	a801      	add	r0, sp, #4
 80062a8:	f7ff fd61 	bl	8005d6e <__lo0bits>
 80062ac:	9b01      	ldr	r3, [sp, #4]
 80062ae:	6163      	str	r3, [r4, #20]
 80062b0:	3020      	adds	r0, #32
 80062b2:	2201      	movs	r2, #1
 80062b4:	e7e8      	b.n	8006288 <__d2b+0x64>
 80062b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062be:	6038      	str	r0, [r7, #0]
 80062c0:	6918      	ldr	r0, [r3, #16]
 80062c2:	f7ff fd35 	bl	8005d30 <__hi0bits>
 80062c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062ca:	e7e5      	b.n	8006298 <__d2b+0x74>
 80062cc:	08008e34 	.word	0x08008e34
 80062d0:	08008e45 	.word	0x08008e45

080062d4 <__sfputc_r>:
 80062d4:	6893      	ldr	r3, [r2, #8]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	b410      	push	{r4}
 80062dc:	6093      	str	r3, [r2, #8]
 80062de:	da08      	bge.n	80062f2 <__sfputc_r+0x1e>
 80062e0:	6994      	ldr	r4, [r2, #24]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	db01      	blt.n	80062ea <__sfputc_r+0x16>
 80062e6:	290a      	cmp	r1, #10
 80062e8:	d103      	bne.n	80062f2 <__sfputc_r+0x1e>
 80062ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ee:	f7fe bc0a 	b.w	8004b06 <__swbuf_r>
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	1c58      	adds	r0, r3, #1
 80062f6:	6010      	str	r0, [r2, #0]
 80062f8:	7019      	strb	r1, [r3, #0]
 80062fa:	4608      	mov	r0, r1
 80062fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006300:	4770      	bx	lr

08006302 <__sfputs_r>:
 8006302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006304:	4606      	mov	r6, r0
 8006306:	460f      	mov	r7, r1
 8006308:	4614      	mov	r4, r2
 800630a:	18d5      	adds	r5, r2, r3
 800630c:	42ac      	cmp	r4, r5
 800630e:	d101      	bne.n	8006314 <__sfputs_r+0x12>
 8006310:	2000      	movs	r0, #0
 8006312:	e007      	b.n	8006324 <__sfputs_r+0x22>
 8006314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006318:	463a      	mov	r2, r7
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ffda 	bl	80062d4 <__sfputc_r>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d1f3      	bne.n	800630c <__sfputs_r+0xa>
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006328 <_vfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	460d      	mov	r5, r1
 800632e:	b09d      	sub	sp, #116	@ 0x74
 8006330:	4614      	mov	r4, r2
 8006332:	4698      	mov	r8, r3
 8006334:	4606      	mov	r6, r0
 8006336:	b118      	cbz	r0, 8006340 <_vfiprintf_r+0x18>
 8006338:	6a03      	ldr	r3, [r0, #32]
 800633a:	b90b      	cbnz	r3, 8006340 <_vfiprintf_r+0x18>
 800633c:	f7fe fa9c 	bl	8004878 <__sinit>
 8006340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006342:	07d9      	lsls	r1, r3, #31
 8006344:	d405      	bmi.n	8006352 <_vfiprintf_r+0x2a>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	059a      	lsls	r2, r3, #22
 800634a:	d402      	bmi.n	8006352 <_vfiprintf_r+0x2a>
 800634c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800634e:	f7fe fcec 	bl	8004d2a <__retarget_lock_acquire_recursive>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	071b      	lsls	r3, r3, #28
 8006356:	d501      	bpl.n	800635c <_vfiprintf_r+0x34>
 8006358:	692b      	ldr	r3, [r5, #16]
 800635a:	b99b      	cbnz	r3, 8006384 <_vfiprintf_r+0x5c>
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f7fe fc10 	bl	8004b84 <__swsetup_r>
 8006364:	b170      	cbz	r0, 8006384 <_vfiprintf_r+0x5c>
 8006366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006368:	07dc      	lsls	r4, r3, #31
 800636a:	d504      	bpl.n	8006376 <_vfiprintf_r+0x4e>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b01d      	add	sp, #116	@ 0x74
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	0598      	lsls	r0, r3, #22
 800637a:	d4f7      	bmi.n	800636c <_vfiprintf_r+0x44>
 800637c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800637e:	f7fe fcd5 	bl	8004d2c <__retarget_lock_release_recursive>
 8006382:	e7f3      	b.n	800636c <_vfiprintf_r+0x44>
 8006384:	2300      	movs	r3, #0
 8006386:	9309      	str	r3, [sp, #36]	@ 0x24
 8006388:	2320      	movs	r3, #32
 800638a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800638e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006392:	2330      	movs	r3, #48	@ 0x30
 8006394:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006544 <_vfiprintf_r+0x21c>
 8006398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800639c:	f04f 0901 	mov.w	r9, #1
 80063a0:	4623      	mov	r3, r4
 80063a2:	469a      	mov	sl, r3
 80063a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a8:	b10a      	cbz	r2, 80063ae <_vfiprintf_r+0x86>
 80063aa:	2a25      	cmp	r2, #37	@ 0x25
 80063ac:	d1f9      	bne.n	80063a2 <_vfiprintf_r+0x7a>
 80063ae:	ebba 0b04 	subs.w	fp, sl, r4
 80063b2:	d00b      	beq.n	80063cc <_vfiprintf_r+0xa4>
 80063b4:	465b      	mov	r3, fp
 80063b6:	4622      	mov	r2, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7ff ffa1 	bl	8006302 <__sfputs_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	f000 80a7 	beq.w	8006514 <_vfiprintf_r+0x1ec>
 80063c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063c8:	445a      	add	r2, fp
 80063ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80063cc:	f89a 3000 	ldrb.w	r3, [sl]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 809f 	beq.w	8006514 <_vfiprintf_r+0x1ec>
 80063d6:	2300      	movs	r3, #0
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e0:	f10a 0a01 	add.w	sl, sl, #1
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	9307      	str	r3, [sp, #28]
 80063e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ee:	4654      	mov	r4, sl
 80063f0:	2205      	movs	r2, #5
 80063f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f6:	4853      	ldr	r0, [pc, #332]	@ (8006544 <_vfiprintf_r+0x21c>)
 80063f8:	f7f9 ff0a 	bl	8000210 <memchr>
 80063fc:	9a04      	ldr	r2, [sp, #16]
 80063fe:	b9d8      	cbnz	r0, 8006438 <_vfiprintf_r+0x110>
 8006400:	06d1      	lsls	r1, r2, #27
 8006402:	bf44      	itt	mi
 8006404:	2320      	movmi	r3, #32
 8006406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800640a:	0713      	lsls	r3, r2, #28
 800640c:	bf44      	itt	mi
 800640e:	232b      	movmi	r3, #43	@ 0x2b
 8006410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006414:	f89a 3000 	ldrb.w	r3, [sl]
 8006418:	2b2a      	cmp	r3, #42	@ 0x2a
 800641a:	d015      	beq.n	8006448 <_vfiprintf_r+0x120>
 800641c:	9a07      	ldr	r2, [sp, #28]
 800641e:	4654      	mov	r4, sl
 8006420:	2000      	movs	r0, #0
 8006422:	f04f 0c0a 	mov.w	ip, #10
 8006426:	4621      	mov	r1, r4
 8006428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800642c:	3b30      	subs	r3, #48	@ 0x30
 800642e:	2b09      	cmp	r3, #9
 8006430:	d94b      	bls.n	80064ca <_vfiprintf_r+0x1a2>
 8006432:	b1b0      	cbz	r0, 8006462 <_vfiprintf_r+0x13a>
 8006434:	9207      	str	r2, [sp, #28]
 8006436:	e014      	b.n	8006462 <_vfiprintf_r+0x13a>
 8006438:	eba0 0308 	sub.w	r3, r0, r8
 800643c:	fa09 f303 	lsl.w	r3, r9, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	46a2      	mov	sl, r4
 8006446:	e7d2      	b.n	80063ee <_vfiprintf_r+0xc6>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1d19      	adds	r1, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	9103      	str	r1, [sp, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfbb      	ittet	lt
 8006454:	425b      	neglt	r3, r3
 8006456:	f042 0202 	orrlt.w	r2, r2, #2
 800645a:	9307      	strge	r3, [sp, #28]
 800645c:	9307      	strlt	r3, [sp, #28]
 800645e:	bfb8      	it	lt
 8006460:	9204      	strlt	r2, [sp, #16]
 8006462:	7823      	ldrb	r3, [r4, #0]
 8006464:	2b2e      	cmp	r3, #46	@ 0x2e
 8006466:	d10a      	bne.n	800647e <_vfiprintf_r+0x156>
 8006468:	7863      	ldrb	r3, [r4, #1]
 800646a:	2b2a      	cmp	r3, #42	@ 0x2a
 800646c:	d132      	bne.n	80064d4 <_vfiprintf_r+0x1ac>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	9203      	str	r2, [sp, #12]
 8006476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800647a:	3402      	adds	r4, #2
 800647c:	9305      	str	r3, [sp, #20]
 800647e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006554 <_vfiprintf_r+0x22c>
 8006482:	7821      	ldrb	r1, [r4, #0]
 8006484:	2203      	movs	r2, #3
 8006486:	4650      	mov	r0, sl
 8006488:	f7f9 fec2 	bl	8000210 <memchr>
 800648c:	b138      	cbz	r0, 800649e <_vfiprintf_r+0x176>
 800648e:	9b04      	ldr	r3, [sp, #16]
 8006490:	eba0 000a 	sub.w	r0, r0, sl
 8006494:	2240      	movs	r2, #64	@ 0x40
 8006496:	4082      	lsls	r2, r0
 8006498:	4313      	orrs	r3, r2
 800649a:	3401      	adds	r4, #1
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a2:	4829      	ldr	r0, [pc, #164]	@ (8006548 <_vfiprintf_r+0x220>)
 80064a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064a8:	2206      	movs	r2, #6
 80064aa:	f7f9 feb1 	bl	8000210 <memchr>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d03f      	beq.n	8006532 <_vfiprintf_r+0x20a>
 80064b2:	4b26      	ldr	r3, [pc, #152]	@ (800654c <_vfiprintf_r+0x224>)
 80064b4:	bb1b      	cbnz	r3, 80064fe <_vfiprintf_r+0x1d6>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	3307      	adds	r3, #7
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	3308      	adds	r3, #8
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c4:	443b      	add	r3, r7
 80064c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064c8:	e76a      	b.n	80063a0 <_vfiprintf_r+0x78>
 80064ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ce:	460c      	mov	r4, r1
 80064d0:	2001      	movs	r0, #1
 80064d2:	e7a8      	b.n	8006426 <_vfiprintf_r+0xfe>
 80064d4:	2300      	movs	r3, #0
 80064d6:	3401      	adds	r4, #1
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	4619      	mov	r1, r3
 80064dc:	f04f 0c0a 	mov.w	ip, #10
 80064e0:	4620      	mov	r0, r4
 80064e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e6:	3a30      	subs	r2, #48	@ 0x30
 80064e8:	2a09      	cmp	r2, #9
 80064ea:	d903      	bls.n	80064f4 <_vfiprintf_r+0x1cc>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0c6      	beq.n	800647e <_vfiprintf_r+0x156>
 80064f0:	9105      	str	r1, [sp, #20]
 80064f2:	e7c4      	b.n	800647e <_vfiprintf_r+0x156>
 80064f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f8:	4604      	mov	r4, r0
 80064fa:	2301      	movs	r3, #1
 80064fc:	e7f0      	b.n	80064e0 <_vfiprintf_r+0x1b8>
 80064fe:	ab03      	add	r3, sp, #12
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	462a      	mov	r2, r5
 8006504:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <_vfiprintf_r+0x228>)
 8006506:	a904      	add	r1, sp, #16
 8006508:	4630      	mov	r0, r6
 800650a:	f7fd fd73 	bl	8003ff4 <_printf_float>
 800650e:	4607      	mov	r7, r0
 8006510:	1c78      	adds	r0, r7, #1
 8006512:	d1d6      	bne.n	80064c2 <_vfiprintf_r+0x19a>
 8006514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006516:	07d9      	lsls	r1, r3, #31
 8006518:	d405      	bmi.n	8006526 <_vfiprintf_r+0x1fe>
 800651a:	89ab      	ldrh	r3, [r5, #12]
 800651c:	059a      	lsls	r2, r3, #22
 800651e:	d402      	bmi.n	8006526 <_vfiprintf_r+0x1fe>
 8006520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006522:	f7fe fc03 	bl	8004d2c <__retarget_lock_release_recursive>
 8006526:	89ab      	ldrh	r3, [r5, #12]
 8006528:	065b      	lsls	r3, r3, #25
 800652a:	f53f af1f 	bmi.w	800636c <_vfiprintf_r+0x44>
 800652e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006530:	e71e      	b.n	8006370 <_vfiprintf_r+0x48>
 8006532:	ab03      	add	r3, sp, #12
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	462a      	mov	r2, r5
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <_vfiprintf_r+0x228>)
 800653a:	a904      	add	r1, sp, #16
 800653c:	4630      	mov	r0, r6
 800653e:	f7fd fff1 	bl	8004524 <_printf_i>
 8006542:	e7e4      	b.n	800650e <_vfiprintf_r+0x1e6>
 8006544:	08008e9e 	.word	0x08008e9e
 8006548:	08008ea8 	.word	0x08008ea8
 800654c:	08003ff5 	.word	0x08003ff5
 8006550:	08006303 	.word	0x08006303
 8006554:	08008ea4 	.word	0x08008ea4

08006558 <__sflush_r>:
 8006558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	0716      	lsls	r6, r2, #28
 8006562:	4605      	mov	r5, r0
 8006564:	460c      	mov	r4, r1
 8006566:	d454      	bmi.n	8006612 <__sflush_r+0xba>
 8006568:	684b      	ldr	r3, [r1, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	dc02      	bgt.n	8006574 <__sflush_r+0x1c>
 800656e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	dd48      	ble.n	8006606 <__sflush_r+0xae>
 8006574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006576:	2e00      	cmp	r6, #0
 8006578:	d045      	beq.n	8006606 <__sflush_r+0xae>
 800657a:	2300      	movs	r3, #0
 800657c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006580:	682f      	ldr	r7, [r5, #0]
 8006582:	6a21      	ldr	r1, [r4, #32]
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	d030      	beq.n	80065ea <__sflush_r+0x92>
 8006588:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	0759      	lsls	r1, r3, #29
 800658e:	d505      	bpl.n	800659c <__sflush_r+0x44>
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006596:	b10b      	cbz	r3, 800659c <__sflush_r+0x44>
 8006598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800659a:	1ad2      	subs	r2, r2, r3
 800659c:	2300      	movs	r3, #0
 800659e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065a0:	6a21      	ldr	r1, [r4, #32]
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b0      	blx	r6
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	d106      	bne.n	80065ba <__sflush_r+0x62>
 80065ac:	6829      	ldr	r1, [r5, #0]
 80065ae:	291d      	cmp	r1, #29
 80065b0:	d82b      	bhi.n	800660a <__sflush_r+0xb2>
 80065b2:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <__sflush_r+0x104>)
 80065b4:	40ca      	lsrs	r2, r1
 80065b6:	07d6      	lsls	r6, r2, #31
 80065b8:	d527      	bpl.n	800660a <__sflush_r+0xb2>
 80065ba:	2200      	movs	r2, #0
 80065bc:	6062      	str	r2, [r4, #4]
 80065be:	04d9      	lsls	r1, r3, #19
 80065c0:	6922      	ldr	r2, [r4, #16]
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	d504      	bpl.n	80065d0 <__sflush_r+0x78>
 80065c6:	1c42      	adds	r2, r0, #1
 80065c8:	d101      	bne.n	80065ce <__sflush_r+0x76>
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	b903      	cbnz	r3, 80065d0 <__sflush_r+0x78>
 80065ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80065d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d2:	602f      	str	r7, [r5, #0]
 80065d4:	b1b9      	cbz	r1, 8006606 <__sflush_r+0xae>
 80065d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065da:	4299      	cmp	r1, r3
 80065dc:	d002      	beq.n	80065e4 <__sflush_r+0x8c>
 80065de:	4628      	mov	r0, r5
 80065e0:	f7ff f9fe 	bl	80059e0 <_free_r>
 80065e4:	2300      	movs	r3, #0
 80065e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80065e8:	e00d      	b.n	8006606 <__sflush_r+0xae>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b0      	blx	r6
 80065f0:	4602      	mov	r2, r0
 80065f2:	1c50      	adds	r0, r2, #1
 80065f4:	d1c9      	bne.n	800658a <__sflush_r+0x32>
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0c6      	beq.n	800658a <__sflush_r+0x32>
 80065fc:	2b1d      	cmp	r3, #29
 80065fe:	d001      	beq.n	8006604 <__sflush_r+0xac>
 8006600:	2b16      	cmp	r3, #22
 8006602:	d11e      	bne.n	8006642 <__sflush_r+0xea>
 8006604:	602f      	str	r7, [r5, #0]
 8006606:	2000      	movs	r0, #0
 8006608:	e022      	b.n	8006650 <__sflush_r+0xf8>
 800660a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660e:	b21b      	sxth	r3, r3
 8006610:	e01b      	b.n	800664a <__sflush_r+0xf2>
 8006612:	690f      	ldr	r7, [r1, #16]
 8006614:	2f00      	cmp	r7, #0
 8006616:	d0f6      	beq.n	8006606 <__sflush_r+0xae>
 8006618:	0793      	lsls	r3, r2, #30
 800661a:	680e      	ldr	r6, [r1, #0]
 800661c:	bf08      	it	eq
 800661e:	694b      	ldreq	r3, [r1, #20]
 8006620:	600f      	str	r7, [r1, #0]
 8006622:	bf18      	it	ne
 8006624:	2300      	movne	r3, #0
 8006626:	eba6 0807 	sub.w	r8, r6, r7
 800662a:	608b      	str	r3, [r1, #8]
 800662c:	f1b8 0f00 	cmp.w	r8, #0
 8006630:	dde9      	ble.n	8006606 <__sflush_r+0xae>
 8006632:	6a21      	ldr	r1, [r4, #32]
 8006634:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006636:	4643      	mov	r3, r8
 8006638:	463a      	mov	r2, r7
 800663a:	4628      	mov	r0, r5
 800663c:	47b0      	blx	r6
 800663e:	2800      	cmp	r0, #0
 8006640:	dc08      	bgt.n	8006654 <__sflush_r+0xfc>
 8006642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800664a:	81a3      	strh	r3, [r4, #12]
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	4407      	add	r7, r0
 8006656:	eba8 0800 	sub.w	r8, r8, r0
 800665a:	e7e7      	b.n	800662c <__sflush_r+0xd4>
 800665c:	20400001 	.word	0x20400001

08006660 <_fflush_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	690b      	ldr	r3, [r1, #16]
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	b913      	cbnz	r3, 8006670 <_fflush_r+0x10>
 800666a:	2500      	movs	r5, #0
 800666c:	4628      	mov	r0, r5
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	b118      	cbz	r0, 800667a <_fflush_r+0x1a>
 8006672:	6a03      	ldr	r3, [r0, #32]
 8006674:	b90b      	cbnz	r3, 800667a <_fflush_r+0x1a>
 8006676:	f7fe f8ff 	bl	8004878 <__sinit>
 800667a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f3      	beq.n	800666a <_fflush_r+0xa>
 8006682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006684:	07d0      	lsls	r0, r2, #31
 8006686:	d404      	bmi.n	8006692 <_fflush_r+0x32>
 8006688:	0599      	lsls	r1, r3, #22
 800668a:	d402      	bmi.n	8006692 <_fflush_r+0x32>
 800668c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800668e:	f7fe fb4c 	bl	8004d2a <__retarget_lock_acquire_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	4621      	mov	r1, r4
 8006696:	f7ff ff5f 	bl	8006558 <__sflush_r>
 800669a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800669c:	07da      	lsls	r2, r3, #31
 800669e:	4605      	mov	r5, r0
 80066a0:	d4e4      	bmi.n	800666c <_fflush_r+0xc>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	059b      	lsls	r3, r3, #22
 80066a6:	d4e1      	bmi.n	800666c <_fflush_r+0xc>
 80066a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066aa:	f7fe fb3f 	bl	8004d2c <__retarget_lock_release_recursive>
 80066ae:	e7dd      	b.n	800666c <_fflush_r+0xc>

080066b0 <__swhatbuf_r>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	2900      	cmp	r1, #0
 80066ba:	b096      	sub	sp, #88	@ 0x58
 80066bc:	4615      	mov	r5, r2
 80066be:	461e      	mov	r6, r3
 80066c0:	da0d      	bge.n	80066de <__swhatbuf_r+0x2e>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066c8:	f04f 0100 	mov.w	r1, #0
 80066cc:	bf14      	ite	ne
 80066ce:	2340      	movne	r3, #64	@ 0x40
 80066d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066d4:	2000      	movs	r0, #0
 80066d6:	6031      	str	r1, [r6, #0]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	b016      	add	sp, #88	@ 0x58
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	466a      	mov	r2, sp
 80066e0:	f000 f848 	bl	8006774 <_fstat_r>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	dbec      	blt.n	80066c2 <__swhatbuf_r+0x12>
 80066e8:	9901      	ldr	r1, [sp, #4]
 80066ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066f2:	4259      	negs	r1, r3
 80066f4:	4159      	adcs	r1, r3
 80066f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066fa:	e7eb      	b.n	80066d4 <__swhatbuf_r+0x24>

080066fc <__smakebuf_r>:
 80066fc:	898b      	ldrh	r3, [r1, #12]
 80066fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006700:	079d      	lsls	r5, r3, #30
 8006702:	4606      	mov	r6, r0
 8006704:	460c      	mov	r4, r1
 8006706:	d507      	bpl.n	8006718 <__smakebuf_r+0x1c>
 8006708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	2301      	movs	r3, #1
 8006712:	6163      	str	r3, [r4, #20]
 8006714:	b003      	add	sp, #12
 8006716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006718:	ab01      	add	r3, sp, #4
 800671a:	466a      	mov	r2, sp
 800671c:	f7ff ffc8 	bl	80066b0 <__swhatbuf_r>
 8006720:	9f00      	ldr	r7, [sp, #0]
 8006722:	4605      	mov	r5, r0
 8006724:	4639      	mov	r1, r7
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff f9ce 	bl	8005ac8 <_malloc_r>
 800672c:	b948      	cbnz	r0, 8006742 <__smakebuf_r+0x46>
 800672e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006732:	059a      	lsls	r2, r3, #22
 8006734:	d4ee      	bmi.n	8006714 <__smakebuf_r+0x18>
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	e7e2      	b.n	8006708 <__smakebuf_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	6020      	str	r0, [r4, #0]
 8006746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006752:	b15b      	cbz	r3, 800676c <__smakebuf_r+0x70>
 8006754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006758:	4630      	mov	r0, r6
 800675a:	f000 f81d 	bl	8006798 <_isatty_r>
 800675e:	b128      	cbz	r0, 800676c <__smakebuf_r+0x70>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	431d      	orrs	r5, r3
 8006770:	81a5      	strh	r5, [r4, #12]
 8006772:	e7cf      	b.n	8006714 <__smakebuf_r+0x18>

08006774 <_fstat_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	@ (8006794 <_fstat_r+0x20>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f7fb f99b 	bl	8001abc <_fstat>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d102      	bne.n	8006790 <_fstat_r+0x1c>
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	b103      	cbz	r3, 8006790 <_fstat_r+0x1c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	200003f8 	.word	0x200003f8

08006798 <_isatty_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	@ (80067b4 <_isatty_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fb f99a 	bl	8001adc <_isatty>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_isatty_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_isatty_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	200003f8 	.word	0x200003f8

080067b8 <_sbrk_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	@ (80067d4 <_sbrk_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fb f9a2 	bl	8001b0c <_sbrk>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_sbrk_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_sbrk_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	200003f8 	.word	0x200003f8

080067d8 <memcpy>:
 80067d8:	440a      	add	r2, r1
 80067da:	4291      	cmp	r1, r2
 80067dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e0:	d100      	bne.n	80067e4 <memcpy+0xc>
 80067e2:	4770      	bx	lr
 80067e4:	b510      	push	{r4, lr}
 80067e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ee:	4291      	cmp	r1, r2
 80067f0:	d1f9      	bne.n	80067e6 <memcpy+0xe>
 80067f2:	bd10      	pop	{r4, pc}

080067f4 <__assert_func>:
 80067f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067f6:	4614      	mov	r4, r2
 80067f8:	461a      	mov	r2, r3
 80067fa:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <__assert_func+0x2c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4605      	mov	r5, r0
 8006800:	68d8      	ldr	r0, [r3, #12]
 8006802:	b14c      	cbz	r4, 8006818 <__assert_func+0x24>
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <__assert_func+0x30>)
 8006806:	9100      	str	r1, [sp, #0]
 8006808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800680c:	4906      	ldr	r1, [pc, #24]	@ (8006828 <__assert_func+0x34>)
 800680e:	462b      	mov	r3, r5
 8006810:	f000 f842 	bl	8006898 <fiprintf>
 8006814:	f000 f852 	bl	80068bc <abort>
 8006818:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__assert_func+0x38>)
 800681a:	461c      	mov	r4, r3
 800681c:	e7f3      	b.n	8006806 <__assert_func+0x12>
 800681e:	bf00      	nop
 8006820:	20000018 	.word	0x20000018
 8006824:	08008eb9 	.word	0x08008eb9
 8006828:	08008ec6 	.word	0x08008ec6
 800682c:	08008ef4 	.word	0x08008ef4

08006830 <_calloc_r>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	fba1 5402 	umull	r5, r4, r1, r2
 8006836:	b934      	cbnz	r4, 8006846 <_calloc_r+0x16>
 8006838:	4629      	mov	r1, r5
 800683a:	f7ff f945 	bl	8005ac8 <_malloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	b928      	cbnz	r0, 800684e <_calloc_r+0x1e>
 8006842:	4630      	mov	r0, r6
 8006844:	bd70      	pop	{r4, r5, r6, pc}
 8006846:	220c      	movs	r2, #12
 8006848:	6002      	str	r2, [r0, #0]
 800684a:	2600      	movs	r6, #0
 800684c:	e7f9      	b.n	8006842 <_calloc_r+0x12>
 800684e:	462a      	mov	r2, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7fe f9ed 	bl	8004c30 <memset>
 8006856:	e7f4      	b.n	8006842 <_calloc_r+0x12>

08006858 <__ascii_mbtowc>:
 8006858:	b082      	sub	sp, #8
 800685a:	b901      	cbnz	r1, 800685e <__ascii_mbtowc+0x6>
 800685c:	a901      	add	r1, sp, #4
 800685e:	b142      	cbz	r2, 8006872 <__ascii_mbtowc+0x1a>
 8006860:	b14b      	cbz	r3, 8006876 <__ascii_mbtowc+0x1e>
 8006862:	7813      	ldrb	r3, [r2, #0]
 8006864:	600b      	str	r3, [r1, #0]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	1e10      	subs	r0, r2, #0
 800686a:	bf18      	it	ne
 800686c:	2001      	movne	r0, #1
 800686e:	b002      	add	sp, #8
 8006870:	4770      	bx	lr
 8006872:	4610      	mov	r0, r2
 8006874:	e7fb      	b.n	800686e <__ascii_mbtowc+0x16>
 8006876:	f06f 0001 	mvn.w	r0, #1
 800687a:	e7f8      	b.n	800686e <__ascii_mbtowc+0x16>

0800687c <__ascii_wctomb>:
 800687c:	4603      	mov	r3, r0
 800687e:	4608      	mov	r0, r1
 8006880:	b141      	cbz	r1, 8006894 <__ascii_wctomb+0x18>
 8006882:	2aff      	cmp	r2, #255	@ 0xff
 8006884:	d904      	bls.n	8006890 <__ascii_wctomb+0x14>
 8006886:	228a      	movs	r2, #138	@ 0x8a
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	4770      	bx	lr
 8006890:	700a      	strb	r2, [r1, #0]
 8006892:	2001      	movs	r0, #1
 8006894:	4770      	bx	lr
	...

08006898 <fiprintf>:
 8006898:	b40e      	push	{r1, r2, r3}
 800689a:	b503      	push	{r0, r1, lr}
 800689c:	4601      	mov	r1, r0
 800689e:	ab03      	add	r3, sp, #12
 80068a0:	4805      	ldr	r0, [pc, #20]	@ (80068b8 <fiprintf+0x20>)
 80068a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a6:	6800      	ldr	r0, [r0, #0]
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	f7ff fd3d 	bl	8006328 <_vfiprintf_r>
 80068ae:	b002      	add	sp, #8
 80068b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b4:	b003      	add	sp, #12
 80068b6:	4770      	bx	lr
 80068b8:	20000018 	.word	0x20000018

080068bc <abort>:
 80068bc:	b508      	push	{r3, lr}
 80068be:	2006      	movs	r0, #6
 80068c0:	f000 f82c 	bl	800691c <raise>
 80068c4:	2001      	movs	r0, #1
 80068c6:	f7fb f8c5 	bl	8001a54 <_exit>

080068ca <_raise_r>:
 80068ca:	291f      	cmp	r1, #31
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4605      	mov	r5, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	d904      	bls.n	80068de <_raise_r+0x14>
 80068d4:	2316      	movs	r3, #22
 80068d6:	6003      	str	r3, [r0, #0]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068e0:	b112      	cbz	r2, 80068e8 <_raise_r+0x1e>
 80068e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068e6:	b94b      	cbnz	r3, 80068fc <_raise_r+0x32>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f831 	bl	8006950 <_getpid_r>
 80068ee:	4622      	mov	r2, r4
 80068f0:	4601      	mov	r1, r0
 80068f2:	4628      	mov	r0, r5
 80068f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f8:	f000 b818 	b.w	800692c <_kill_r>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d00a      	beq.n	8006916 <_raise_r+0x4c>
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	d103      	bne.n	800690c <_raise_r+0x42>
 8006904:	2316      	movs	r3, #22
 8006906:	6003      	str	r3, [r0, #0]
 8006908:	2001      	movs	r0, #1
 800690a:	e7e7      	b.n	80068dc <_raise_r+0x12>
 800690c:	2100      	movs	r1, #0
 800690e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006912:	4620      	mov	r0, r4
 8006914:	4798      	blx	r3
 8006916:	2000      	movs	r0, #0
 8006918:	e7e0      	b.n	80068dc <_raise_r+0x12>
	...

0800691c <raise>:
 800691c:	4b02      	ldr	r3, [pc, #8]	@ (8006928 <raise+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f7ff bfd2 	b.w	80068ca <_raise_r>
 8006926:	bf00      	nop
 8006928:	20000018 	.word	0x20000018

0800692c <_kill_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	@ (800694c <_kill_r+0x20>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	f7fb f87b 	bl	8001a34 <_kill>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d102      	bne.n	8006948 <_kill_r+0x1c>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b103      	cbz	r3, 8006948 <_kill_r+0x1c>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	200003f8 	.word	0x200003f8

08006950 <_getpid_r>:
 8006950:	f7fb b868 	b.w	8001a24 <_getpid>

08006954 <atan2>:
 8006954:	f000 bbac 	b.w	80070b0 <__ieee754_atan2>

08006958 <pow>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	ed2d 8b02 	vpush	{d8}
 800695e:	eeb0 8a40 	vmov.f32	s16, s0
 8006962:	eef0 8a60 	vmov.f32	s17, s1
 8006966:	ec55 4b11 	vmov	r4, r5, d1
 800696a:	f000 fc69 	bl	8007240 <__ieee754_pow>
 800696e:	4622      	mov	r2, r4
 8006970:	462b      	mov	r3, r5
 8006972:	4620      	mov	r0, r4
 8006974:	4629      	mov	r1, r5
 8006976:	ec57 6b10 	vmov	r6, r7, d0
 800697a:	f7fa f8f7 	bl	8000b6c <__aeabi_dcmpun>
 800697e:	2800      	cmp	r0, #0
 8006980:	d13b      	bne.n	80069fa <pow+0xa2>
 8006982:	ec51 0b18 	vmov	r0, r1, d8
 8006986:	2200      	movs	r2, #0
 8006988:	2300      	movs	r3, #0
 800698a:	f7fa f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800698e:	b1b8      	cbz	r0, 80069c0 <pow+0x68>
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7fa f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 800699c:	2800      	cmp	r0, #0
 800699e:	d146      	bne.n	8006a2e <pow+0xd6>
 80069a0:	ec45 4b10 	vmov	d0, r4, r5
 80069a4:	f000 f91c 	bl	8006be0 <finite>
 80069a8:	b338      	cbz	r0, 80069fa <pow+0xa2>
 80069aa:	2200      	movs	r2, #0
 80069ac:	2300      	movs	r3, #0
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	f7fa f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80069b6:	b300      	cbz	r0, 80069fa <pow+0xa2>
 80069b8:	f7fe f98c 	bl	8004cd4 <__errno>
 80069bc:	2322      	movs	r3, #34	@ 0x22
 80069be:	e01b      	b.n	80069f8 <pow+0xa0>
 80069c0:	ec47 6b10 	vmov	d0, r6, r7
 80069c4:	f000 f90c 	bl	8006be0 <finite>
 80069c8:	b9e0      	cbnz	r0, 8006a04 <pow+0xac>
 80069ca:	eeb0 0a48 	vmov.f32	s0, s16
 80069ce:	eef0 0a68 	vmov.f32	s1, s17
 80069d2:	f000 f905 	bl	8006be0 <finite>
 80069d6:	b1a8      	cbz	r0, 8006a04 <pow+0xac>
 80069d8:	ec45 4b10 	vmov	d0, r4, r5
 80069dc:	f000 f900 	bl	8006be0 <finite>
 80069e0:	b180      	cbz	r0, 8006a04 <pow+0xac>
 80069e2:	4632      	mov	r2, r6
 80069e4:	463b      	mov	r3, r7
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	f7fa f8bf 	bl	8000b6c <__aeabi_dcmpun>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d0e2      	beq.n	80069b8 <pow+0x60>
 80069f2:	f7fe f96f 	bl	8004cd4 <__errno>
 80069f6:	2321      	movs	r3, #33	@ 0x21
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	ecbd 8b02 	vpop	{d8}
 80069fe:	ec47 6b10 	vmov	d0, r6, r7
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	2200      	movs	r2, #0
 8006a06:	2300      	movs	r3, #0
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7fa f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d0f2      	beq.n	80069fa <pow+0xa2>
 8006a14:	eeb0 0a48 	vmov.f32	s0, s16
 8006a18:	eef0 0a68 	vmov.f32	s1, s17
 8006a1c:	f000 f8e0 	bl	8006be0 <finite>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d0ea      	beq.n	80069fa <pow+0xa2>
 8006a24:	ec45 4b10 	vmov	d0, r4, r5
 8006a28:	f000 f8da 	bl	8006be0 <finite>
 8006a2c:	e7c3      	b.n	80069b6 <pow+0x5e>
 8006a2e:	4f01      	ldr	r7, [pc, #4]	@ (8006a34 <pow+0xdc>)
 8006a30:	2600      	movs	r6, #0
 8006a32:	e7e2      	b.n	80069fa <pow+0xa2>
 8006a34:	3ff00000 	.word	0x3ff00000

08006a38 <sqrt>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	ed2d 8b02 	vpush	{d8}
 8006a3e:	ec55 4b10 	vmov	r4, r5, d0
 8006a42:	f000 f8d9 	bl	8006bf8 <__ieee754_sqrt>
 8006a46:	4622      	mov	r2, r4
 8006a48:	462b      	mov	r3, r5
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8006a52:	eef0 8a60 	vmov.f32	s17, s1
 8006a56:	f7fa f889 	bl	8000b6c <__aeabi_dcmpun>
 8006a5a:	b990      	cbnz	r0, 8006a82 <sqrt+0x4a>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7fa f85a 	bl	8000b1c <__aeabi_dcmplt>
 8006a68:	b158      	cbz	r0, 8006a82 <sqrt+0x4a>
 8006a6a:	f7fe f933 	bl	8004cd4 <__errno>
 8006a6e:	2321      	movs	r3, #33	@ 0x21
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	4610      	mov	r0, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f7f9 ff07 	bl	800088c <__aeabi_ddiv>
 8006a7e:	ec41 0b18 	vmov	d8, r0, r1
 8006a82:	eeb0 0a48 	vmov.f32	s0, s16
 8006a86:	eef0 0a68 	vmov.f32	s1, s17
 8006a8a:	ecbd 8b02 	vpop	{d8}
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}

08006a90 <cos>:
 8006a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a92:	ec53 2b10 	vmov	r2, r3, d0
 8006a96:	4826      	ldr	r0, [pc, #152]	@ (8006b30 <cos+0xa0>)
 8006a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a9c:	4281      	cmp	r1, r0
 8006a9e:	d806      	bhi.n	8006aae <cos+0x1e>
 8006aa0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006b28 <cos+0x98>
 8006aa4:	b005      	add	sp, #20
 8006aa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aaa:	f000 b97d 	b.w	8006da8 <__kernel_cos>
 8006aae:	4821      	ldr	r0, [pc, #132]	@ (8006b34 <cos+0xa4>)
 8006ab0:	4281      	cmp	r1, r0
 8006ab2:	d908      	bls.n	8006ac6 <cos+0x36>
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f7f9 fc06 	bl	80002c8 <__aeabi_dsub>
 8006abc:	ec41 0b10 	vmov	d0, r0, r1
 8006ac0:	b005      	add	sp, #20
 8006ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ac6:	4668      	mov	r0, sp
 8006ac8:	f001 f906 	bl	8007cd8 <__ieee754_rem_pio2>
 8006acc:	f000 0003 	and.w	r0, r0, #3
 8006ad0:	2801      	cmp	r0, #1
 8006ad2:	d00b      	beq.n	8006aec <cos+0x5c>
 8006ad4:	2802      	cmp	r0, #2
 8006ad6:	d015      	beq.n	8006b04 <cos+0x74>
 8006ad8:	b9d8      	cbnz	r0, 8006b12 <cos+0x82>
 8006ada:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ade:	ed9d 0b00 	vldr	d0, [sp]
 8006ae2:	f000 f961 	bl	8006da8 <__kernel_cos>
 8006ae6:	ec51 0b10 	vmov	r0, r1, d0
 8006aea:	e7e7      	b.n	8006abc <cos+0x2c>
 8006aec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006af0:	ed9d 0b00 	vldr	d0, [sp]
 8006af4:	f000 fa20 	bl	8006f38 <__kernel_sin>
 8006af8:	ec53 2b10 	vmov	r2, r3, d0
 8006afc:	4610      	mov	r0, r2
 8006afe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006b02:	e7db      	b.n	8006abc <cos+0x2c>
 8006b04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b08:	ed9d 0b00 	vldr	d0, [sp]
 8006b0c:	f000 f94c 	bl	8006da8 <__kernel_cos>
 8006b10:	e7f2      	b.n	8006af8 <cos+0x68>
 8006b12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b16:	ed9d 0b00 	vldr	d0, [sp]
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f000 fa0c 	bl	8006f38 <__kernel_sin>
 8006b20:	e7e1      	b.n	8006ae6 <cos+0x56>
 8006b22:	bf00      	nop
 8006b24:	f3af 8000 	nop.w
	...
 8006b30:	3fe921fb 	.word	0x3fe921fb
 8006b34:	7fefffff 	.word	0x7fefffff

08006b38 <sin>:
 8006b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b3a:	ec53 2b10 	vmov	r2, r3, d0
 8006b3e:	4826      	ldr	r0, [pc, #152]	@ (8006bd8 <sin+0xa0>)
 8006b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b44:	4281      	cmp	r1, r0
 8006b46:	d807      	bhi.n	8006b58 <sin+0x20>
 8006b48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006bd0 <sin+0x98>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	b005      	add	sp, #20
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	f000 b9f0 	b.w	8006f38 <__kernel_sin>
 8006b58:	4820      	ldr	r0, [pc, #128]	@ (8006bdc <sin+0xa4>)
 8006b5a:	4281      	cmp	r1, r0
 8006b5c:	d908      	bls.n	8006b70 <sin+0x38>
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7f9 fbb1 	bl	80002c8 <__aeabi_dsub>
 8006b66:	ec41 0b10 	vmov	d0, r0, r1
 8006b6a:	b005      	add	sp, #20
 8006b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b70:	4668      	mov	r0, sp
 8006b72:	f001 f8b1 	bl	8007cd8 <__ieee754_rem_pio2>
 8006b76:	f000 0003 	and.w	r0, r0, #3
 8006b7a:	2801      	cmp	r0, #1
 8006b7c:	d00c      	beq.n	8006b98 <sin+0x60>
 8006b7e:	2802      	cmp	r0, #2
 8006b80:	d011      	beq.n	8006ba6 <sin+0x6e>
 8006b82:	b9e8      	cbnz	r0, 8006bc0 <sin+0x88>
 8006b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b88:	ed9d 0b00 	vldr	d0, [sp]
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f000 f9d3 	bl	8006f38 <__kernel_sin>
 8006b92:	ec51 0b10 	vmov	r0, r1, d0
 8006b96:	e7e6      	b.n	8006b66 <sin+0x2e>
 8006b98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b9c:	ed9d 0b00 	vldr	d0, [sp]
 8006ba0:	f000 f902 	bl	8006da8 <__kernel_cos>
 8006ba4:	e7f5      	b.n	8006b92 <sin+0x5a>
 8006ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006baa:	ed9d 0b00 	vldr	d0, [sp]
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 f9c2 	bl	8006f38 <__kernel_sin>
 8006bb4:	ec53 2b10 	vmov	r2, r3, d0
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006bbe:	e7d2      	b.n	8006b66 <sin+0x2e>
 8006bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bc4:	ed9d 0b00 	vldr	d0, [sp]
 8006bc8:	f000 f8ee 	bl	8006da8 <__kernel_cos>
 8006bcc:	e7f2      	b.n	8006bb4 <sin+0x7c>
 8006bce:	bf00      	nop
	...
 8006bd8:	3fe921fb 	.word	0x3fe921fb
 8006bdc:	7fefffff 	.word	0x7fefffff

08006be0 <finite>:
 8006be0:	b082      	sub	sp, #8
 8006be2:	ed8d 0b00 	vstr	d0, [sp]
 8006be6:	9801      	ldr	r0, [sp, #4]
 8006be8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006bec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006bf0:	0fc0      	lsrs	r0, r0, #31
 8006bf2:	b002      	add	sp, #8
 8006bf4:	4770      	bx	lr
	...

08006bf8 <__ieee754_sqrt>:
 8006bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	4a66      	ldr	r2, [pc, #408]	@ (8006d98 <__ieee754_sqrt+0x1a0>)
 8006bfe:	ec55 4b10 	vmov	r4, r5, d0
 8006c02:	43aa      	bics	r2, r5
 8006c04:	462b      	mov	r3, r5
 8006c06:	4621      	mov	r1, r4
 8006c08:	d110      	bne.n	8006c2c <__ieee754_sqrt+0x34>
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 fd12 	bl	8000638 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fb56 	bl	80002cc <__adddf3>
 8006c20:	4604      	mov	r4, r0
 8006c22:	460d      	mov	r5, r1
 8006c24:	ec45 4b10 	vmov	d0, r4, r5
 8006c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	dc0e      	bgt.n	8006c4e <__ieee754_sqrt+0x56>
 8006c30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006c34:	4322      	orrs	r2, r4
 8006c36:	d0f5      	beq.n	8006c24 <__ieee754_sqrt+0x2c>
 8006c38:	b19d      	cbz	r5, 8006c62 <__ieee754_sqrt+0x6a>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fb42 	bl	80002c8 <__aeabi_dsub>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	f7f9 fe20 	bl	800088c <__aeabi_ddiv>
 8006c4c:	e7e8      	b.n	8006c20 <__ieee754_sqrt+0x28>
 8006c4e:	152a      	asrs	r2, r5, #20
 8006c50:	d115      	bne.n	8006c7e <__ieee754_sqrt+0x86>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e009      	b.n	8006c6a <__ieee754_sqrt+0x72>
 8006c56:	0acb      	lsrs	r3, r1, #11
 8006c58:	3a15      	subs	r2, #21
 8006c5a:	0549      	lsls	r1, r1, #21
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0fa      	beq.n	8006c56 <__ieee754_sqrt+0x5e>
 8006c60:	e7f7      	b.n	8006c52 <__ieee754_sqrt+0x5a>
 8006c62:	462a      	mov	r2, r5
 8006c64:	e7fa      	b.n	8006c5c <__ieee754_sqrt+0x64>
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	3001      	adds	r0, #1
 8006c6a:	02dc      	lsls	r4, r3, #11
 8006c6c:	d5fb      	bpl.n	8006c66 <__ieee754_sqrt+0x6e>
 8006c6e:	1e44      	subs	r4, r0, #1
 8006c70:	1b12      	subs	r2, r2, r4
 8006c72:	f1c0 0420 	rsb	r4, r0, #32
 8006c76:	fa21 f404 	lsr.w	r4, r1, r4
 8006c7a:	4323      	orrs	r3, r4
 8006c7c:	4081      	lsls	r1, r0
 8006c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c82:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c8a:	07d2      	lsls	r2, r2, #31
 8006c8c:	bf5c      	itt	pl
 8006c8e:	005b      	lslpl	r3, r3, #1
 8006c90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c98:	bf58      	it	pl
 8006c9a:	0049      	lslpl	r1, r1, #1
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006ca2:	107f      	asrs	r7, r7, #1
 8006ca4:	0049      	lsls	r1, r1, #1
 8006ca6:	2016      	movs	r0, #22
 8006ca8:	4632      	mov	r2, r6
 8006caa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006cae:	1915      	adds	r5, r2, r4
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	bfde      	ittt	le
 8006cb4:	192a      	addle	r2, r5, r4
 8006cb6:	1b5b      	suble	r3, r3, r5
 8006cb8:	1936      	addle	r6, r6, r4
 8006cba:	0fcd      	lsrs	r5, r1, #31
 8006cbc:	3801      	subs	r0, #1
 8006cbe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006cc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006cc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006cca:	d1f0      	bne.n	8006cae <__ieee754_sqrt+0xb6>
 8006ccc:	4605      	mov	r5, r0
 8006cce:	2420      	movs	r4, #32
 8006cd0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	eb0c 0e00 	add.w	lr, ip, r0
 8006cda:	dc02      	bgt.n	8006ce2 <__ieee754_sqrt+0xea>
 8006cdc:	d113      	bne.n	8006d06 <__ieee754_sqrt+0x10e>
 8006cde:	458e      	cmp	lr, r1
 8006ce0:	d811      	bhi.n	8006d06 <__ieee754_sqrt+0x10e>
 8006ce2:	f1be 0f00 	cmp.w	lr, #0
 8006ce6:	eb0e 000c 	add.w	r0, lr, ip
 8006cea:	da3f      	bge.n	8006d6c <__ieee754_sqrt+0x174>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	db3d      	blt.n	8006d6c <__ieee754_sqrt+0x174>
 8006cf0:	f102 0801 	add.w	r8, r2, #1
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	458e      	cmp	lr, r1
 8006cf8:	bf88      	it	hi
 8006cfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006cfe:	eba1 010e 	sub.w	r1, r1, lr
 8006d02:	4465      	add	r5, ip
 8006d04:	4642      	mov	r2, r8
 8006d06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006d0a:	3c01      	subs	r4, #1
 8006d0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006d10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006d18:	d1dc      	bne.n	8006cd4 <__ieee754_sqrt+0xdc>
 8006d1a:	4319      	orrs	r1, r3
 8006d1c:	d01b      	beq.n	8006d56 <__ieee754_sqrt+0x15e>
 8006d1e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006d9c <__ieee754_sqrt+0x1a4>
 8006d22:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006da0 <__ieee754_sqrt+0x1a8>
 8006d26:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d2e:	f7f9 facb 	bl	80002c8 <__aeabi_dsub>
 8006d32:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 fef7 	bl	8000b30 <__aeabi_dcmple>
 8006d42:	b140      	cbz	r0, 8006d56 <__ieee754_sqrt+0x15e>
 8006d44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006d48:	e9da 0100 	ldrd	r0, r1, [sl]
 8006d4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006d50:	d10e      	bne.n	8006d70 <__ieee754_sqrt+0x178>
 8006d52:	3601      	adds	r6, #1
 8006d54:	4625      	mov	r5, r4
 8006d56:	1073      	asrs	r3, r6, #1
 8006d58:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d5c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006d60:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006d64:	086b      	lsrs	r3, r5, #1
 8006d66:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006d6a:	e759      	b.n	8006c20 <__ieee754_sqrt+0x28>
 8006d6c:	4690      	mov	r8, r2
 8006d6e:	e7c1      	b.n	8006cf4 <__ieee754_sqrt+0xfc>
 8006d70:	f7f9 faac 	bl	80002cc <__adddf3>
 8006d74:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8006d84:	b120      	cbz	r0, 8006d90 <__ieee754_sqrt+0x198>
 8006d86:	1cab      	adds	r3, r5, #2
 8006d88:	bf08      	it	eq
 8006d8a:	3601      	addeq	r6, #1
 8006d8c:	3502      	adds	r5, #2
 8006d8e:	e7e2      	b.n	8006d56 <__ieee754_sqrt+0x15e>
 8006d90:	1c6b      	adds	r3, r5, #1
 8006d92:	f023 0501 	bic.w	r5, r3, #1
 8006d96:	e7de      	b.n	8006d56 <__ieee754_sqrt+0x15e>
 8006d98:	7ff00000 	.word	0x7ff00000
 8006d9c:	08009108 	.word	0x08009108
 8006da0:	08009100 	.word	0x08009100
 8006da4:	00000000 	.word	0x00000000

08006da8 <__kernel_cos>:
 8006da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	ec57 6b10 	vmov	r6, r7, d0
 8006db0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006db4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006db8:	ed8d 1b00 	vstr	d1, [sp]
 8006dbc:	d206      	bcs.n	8006dcc <__kernel_cos+0x24>
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fee9 	bl	8000b98 <__aeabi_d2iz>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f000 8088 	beq.w	8006edc <__kernel_cos+0x134>
 8006dcc:	4632      	mov	r2, r6
 8006dce:	463b      	mov	r3, r7
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fc30 	bl	8000638 <__aeabi_dmul>
 8006dd8:	4b51      	ldr	r3, [pc, #324]	@ (8006f20 <__kernel_cos+0x178>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	f7f9 fc2a 	bl	8000638 <__aeabi_dmul>
 8006de4:	a340      	add	r3, pc, #256	@ (adr r3, 8006ee8 <__kernel_cos+0x140>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	4682      	mov	sl, r0
 8006dec:	468b      	mov	fp, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fc21 	bl	8000638 <__aeabi_dmul>
 8006df6:	a33e      	add	r3, pc, #248	@ (adr r3, 8006ef0 <__kernel_cos+0x148>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa66 	bl	80002cc <__adddf3>
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	f7f9 fc18 	bl	8000638 <__aeabi_dmul>
 8006e08:	a33b      	add	r3, pc, #236	@ (adr r3, 8006ef8 <__kernel_cos+0x150>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa5b 	bl	80002c8 <__aeabi_dsub>
 8006e12:	4622      	mov	r2, r4
 8006e14:	462b      	mov	r3, r5
 8006e16:	f7f9 fc0f 	bl	8000638 <__aeabi_dmul>
 8006e1a:	a339      	add	r3, pc, #228	@ (adr r3, 8006f00 <__kernel_cos+0x158>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 fa54 	bl	80002cc <__adddf3>
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fc06 	bl	8000638 <__aeabi_dmul>
 8006e2c:	a336      	add	r3, pc, #216	@ (adr r3, 8006f08 <__kernel_cos+0x160>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 fa49 	bl	80002c8 <__aeabi_dsub>
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	f7f9 fbfd 	bl	8000638 <__aeabi_dmul>
 8006e3e:	a334      	add	r3, pc, #208	@ (adr r3, 8006f10 <__kernel_cos+0x168>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fa42 	bl	80002cc <__adddf3>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	f7f9 fbf4 	bl	8000638 <__aeabi_dmul>
 8006e50:	4622      	mov	r2, r4
 8006e52:	462b      	mov	r3, r5
 8006e54:	f7f9 fbf0 	bl	8000638 <__aeabi_dmul>
 8006e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fbe8 	bl	8000638 <__aeabi_dmul>
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7f9 fa2a 	bl	80002c8 <__aeabi_dsub>
 8006e74:	4b2b      	ldr	r3, [pc, #172]	@ (8006f24 <__kernel_cos+0x17c>)
 8006e76:	4598      	cmp	r8, r3
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	d810      	bhi.n	8006ea0 <__kernel_cos+0xf8>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4650      	mov	r0, sl
 8006e84:	4659      	mov	r1, fp
 8006e86:	f7f9 fa1f 	bl	80002c8 <__aeabi_dsub>
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4926      	ldr	r1, [pc, #152]	@ (8006f28 <__kernel_cos+0x180>)
 8006e8e:	4602      	mov	r2, r0
 8006e90:	2000      	movs	r0, #0
 8006e92:	f7f9 fa19 	bl	80002c8 <__aeabi_dsub>
 8006e96:	ec41 0b10 	vmov	d0, r0, r1
 8006e9a:	b003      	add	sp, #12
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	4b22      	ldr	r3, [pc, #136]	@ (8006f2c <__kernel_cos+0x184>)
 8006ea2:	4921      	ldr	r1, [pc, #132]	@ (8006f28 <__kernel_cos+0x180>)
 8006ea4:	4598      	cmp	r8, r3
 8006ea6:	bf8c      	ite	hi
 8006ea8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006f30 <__kernel_cos+0x188>)
 8006eaa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006eae:	2400      	movs	r4, #0
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7f9 fa07 	bl	80002c8 <__aeabi_dsub>
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	4689      	mov	r9, r1
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	f7f9 f9ff 	bl	80002c8 <__aeabi_dsub>
 8006eca:	4632      	mov	r2, r6
 8006ecc:	463b      	mov	r3, r7
 8006ece:	f7f9 f9fb 	bl	80002c8 <__aeabi_dsub>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	e7da      	b.n	8006e92 <__kernel_cos+0xea>
 8006edc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006f18 <__kernel_cos+0x170>
 8006ee0:	e7db      	b.n	8006e9a <__kernel_cos+0xf2>
 8006ee2:	bf00      	nop
 8006ee4:	f3af 8000 	nop.w
 8006ee8:	be8838d4 	.word	0xbe8838d4
 8006eec:	bda8fae9 	.word	0xbda8fae9
 8006ef0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ef4:	3e21ee9e 	.word	0x3e21ee9e
 8006ef8:	809c52ad 	.word	0x809c52ad
 8006efc:	3e927e4f 	.word	0x3e927e4f
 8006f00:	19cb1590 	.word	0x19cb1590
 8006f04:	3efa01a0 	.word	0x3efa01a0
 8006f08:	16c15177 	.word	0x16c15177
 8006f0c:	3f56c16c 	.word	0x3f56c16c
 8006f10:	5555554c 	.word	0x5555554c
 8006f14:	3fa55555 	.word	0x3fa55555
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	3ff00000 	.word	0x3ff00000
 8006f20:	3fe00000 	.word	0x3fe00000
 8006f24:	3fd33332 	.word	0x3fd33332
 8006f28:	3ff00000 	.word	0x3ff00000
 8006f2c:	3fe90000 	.word	0x3fe90000
 8006f30:	3fd20000 	.word	0x3fd20000
 8006f34:	00000000 	.word	0x00000000

08006f38 <__kernel_sin>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	ec55 4b10 	vmov	r4, r5, d0
 8006f40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006f44:	b085      	sub	sp, #20
 8006f46:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006f4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006f4e:	4680      	mov	r8, r0
 8006f50:	d205      	bcs.n	8006f5e <__kernel_sin+0x26>
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fe1f 	bl	8000b98 <__aeabi_d2iz>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d052      	beq.n	8007004 <__kernel_sin+0xcc>
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 fb67 	bl	8000638 <__aeabi_dmul>
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7f9 fb5f 	bl	8000638 <__aeabi_dmul>
 8006f7a:	a342      	add	r3, pc, #264	@ (adr r3, 8007084 <__kernel_sin+0x14c>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	e9cd 0100 	strd	r0, r1, [sp]
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	a33f      	add	r3, pc, #252	@ (adr r3, 800708c <__kernel_sin+0x154>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f999 	bl	80002c8 <__aeabi_dsub>
 8006f96:	4652      	mov	r2, sl
 8006f98:	465b      	mov	r3, fp
 8006f9a:	f7f9 fb4d 	bl	8000638 <__aeabi_dmul>
 8006f9e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007094 <__kernel_sin+0x15c>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 f992 	bl	80002cc <__adddf3>
 8006fa8:	4652      	mov	r2, sl
 8006faa:	465b      	mov	r3, fp
 8006fac:	f7f9 fb44 	bl	8000638 <__aeabi_dmul>
 8006fb0:	a33a      	add	r3, pc, #232	@ (adr r3, 800709c <__kernel_sin+0x164>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 f987 	bl	80002c8 <__aeabi_dsub>
 8006fba:	4652      	mov	r2, sl
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	f7f9 fb3b 	bl	8000638 <__aeabi_dmul>
 8006fc2:	a338      	add	r3, pc, #224	@ (adr r3, 80070a4 <__kernel_sin+0x16c>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f980 	bl	80002cc <__adddf3>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d11b      	bne.n	800700e <__kernel_sin+0xd6>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4650      	mov	r0, sl
 8006fdc:	4659      	mov	r1, fp
 8006fde:	f7f9 fb2b 	bl	8000638 <__aeabi_dmul>
 8006fe2:	a325      	add	r3, pc, #148	@ (adr r3, 8007078 <__kernel_sin+0x140>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f96e 	bl	80002c8 <__aeabi_dsub>
 8006fec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff0:	f7f9 fb22 	bl	8000638 <__aeabi_dmul>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	f7f9 f966 	bl	80002cc <__adddf3>
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	ec45 4b10 	vmov	d0, r4, r5
 8007008:	b005      	add	sp, #20
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007012:	4b1b      	ldr	r3, [pc, #108]	@ (8007080 <__kernel_sin+0x148>)
 8007014:	2200      	movs	r2, #0
 8007016:	f7f9 fb0f 	bl	8000638 <__aeabi_dmul>
 800701a:	4632      	mov	r2, r6
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	463b      	mov	r3, r7
 8007022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007026:	f7f9 fb07 	bl	8000638 <__aeabi_dmul>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	f7f9 f949 	bl	80002c8 <__aeabi_dsub>
 8007036:	4652      	mov	r2, sl
 8007038:	465b      	mov	r3, fp
 800703a:	f7f9 fafd 	bl	8000638 <__aeabi_dmul>
 800703e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007042:	f7f9 f941 	bl	80002c8 <__aeabi_dsub>
 8007046:	a30c      	add	r3, pc, #48	@ (adr r3, 8007078 <__kernel_sin+0x140>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	4606      	mov	r6, r0
 800704e:	460f      	mov	r7, r1
 8007050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007054:	f7f9 faf0 	bl	8000638 <__aeabi_dmul>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4630      	mov	r0, r6
 800705e:	4639      	mov	r1, r7
 8007060:	f7f9 f934 	bl	80002cc <__adddf3>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4620      	mov	r0, r4
 800706a:	4629      	mov	r1, r5
 800706c:	f7f9 f92c 	bl	80002c8 <__aeabi_dsub>
 8007070:	e7c6      	b.n	8007000 <__kernel_sin+0xc8>
 8007072:	bf00      	nop
 8007074:	f3af 8000 	nop.w
 8007078:	55555549 	.word	0x55555549
 800707c:	3fc55555 	.word	0x3fc55555
 8007080:	3fe00000 	.word	0x3fe00000
 8007084:	5acfd57c 	.word	0x5acfd57c
 8007088:	3de5d93a 	.word	0x3de5d93a
 800708c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007090:	3e5ae5e6 	.word	0x3e5ae5e6
 8007094:	57b1fe7d 	.word	0x57b1fe7d
 8007098:	3ec71de3 	.word	0x3ec71de3
 800709c:	19c161d5 	.word	0x19c161d5
 80070a0:	3f2a01a0 	.word	0x3f2a01a0
 80070a4:	1110f8a6 	.word	0x1110f8a6
 80070a8:	3f811111 	.word	0x3f811111
 80070ac:	00000000 	.word	0x00000000

080070b0 <__ieee754_atan2>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	ec57 6b11 	vmov	r6, r7, d1
 80070b8:	4273      	negs	r3, r6
 80070ba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007238 <__ieee754_atan2+0x188>
 80070be:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80070c2:	4333      	orrs	r3, r6
 80070c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80070c8:	4543      	cmp	r3, r8
 80070ca:	ec51 0b10 	vmov	r0, r1, d0
 80070ce:	4635      	mov	r5, r6
 80070d0:	d809      	bhi.n	80070e6 <__ieee754_atan2+0x36>
 80070d2:	4244      	negs	r4, r0
 80070d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070d8:	4304      	orrs	r4, r0
 80070da:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80070de:	4544      	cmp	r4, r8
 80070e0:	468e      	mov	lr, r1
 80070e2:	4681      	mov	r9, r0
 80070e4:	d907      	bls.n	80070f6 <__ieee754_atan2+0x46>
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	f7f9 f8ef 	bl	80002cc <__adddf3>
 80070ee:	ec41 0b10 	vmov	d0, r0, r1
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80070fa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80070fe:	4334      	orrs	r4, r6
 8007100:	d103      	bne.n	800710a <__ieee754_atan2+0x5a>
 8007102:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007106:	f000 bfe3 	b.w	80080d0 <atan>
 800710a:	17bc      	asrs	r4, r7, #30
 800710c:	f004 0402 	and.w	r4, r4, #2
 8007110:	ea53 0909 	orrs.w	r9, r3, r9
 8007114:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007118:	d107      	bne.n	800712a <__ieee754_atan2+0x7a>
 800711a:	2c02      	cmp	r4, #2
 800711c:	d05f      	beq.n	80071de <__ieee754_atan2+0x12e>
 800711e:	2c03      	cmp	r4, #3
 8007120:	d1e5      	bne.n	80070ee <__ieee754_atan2+0x3e>
 8007122:	a143      	add	r1, pc, #268	@ (adr r1, 8007230 <__ieee754_atan2+0x180>)
 8007124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007128:	e7e1      	b.n	80070ee <__ieee754_atan2+0x3e>
 800712a:	4315      	orrs	r5, r2
 800712c:	d106      	bne.n	800713c <__ieee754_atan2+0x8c>
 800712e:	f1be 0f00 	cmp.w	lr, #0
 8007132:	db5f      	blt.n	80071f4 <__ieee754_atan2+0x144>
 8007134:	a136      	add	r1, pc, #216	@ (adr r1, 8007210 <__ieee754_atan2+0x160>)
 8007136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800713a:	e7d8      	b.n	80070ee <__ieee754_atan2+0x3e>
 800713c:	4542      	cmp	r2, r8
 800713e:	d10f      	bne.n	8007160 <__ieee754_atan2+0xb0>
 8007140:	4293      	cmp	r3, r2
 8007142:	f104 34ff 	add.w	r4, r4, #4294967295
 8007146:	d107      	bne.n	8007158 <__ieee754_atan2+0xa8>
 8007148:	2c02      	cmp	r4, #2
 800714a:	d84c      	bhi.n	80071e6 <__ieee754_atan2+0x136>
 800714c:	4b36      	ldr	r3, [pc, #216]	@ (8007228 <__ieee754_atan2+0x178>)
 800714e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007156:	e7ca      	b.n	80070ee <__ieee754_atan2+0x3e>
 8007158:	2c02      	cmp	r4, #2
 800715a:	d848      	bhi.n	80071ee <__ieee754_atan2+0x13e>
 800715c:	4b33      	ldr	r3, [pc, #204]	@ (800722c <__ieee754_atan2+0x17c>)
 800715e:	e7f6      	b.n	800714e <__ieee754_atan2+0x9e>
 8007160:	4543      	cmp	r3, r8
 8007162:	d0e4      	beq.n	800712e <__ieee754_atan2+0x7e>
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800716a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800716e:	da1e      	bge.n	80071ae <__ieee754_atan2+0xfe>
 8007170:	2f00      	cmp	r7, #0
 8007172:	da01      	bge.n	8007178 <__ieee754_atan2+0xc8>
 8007174:	323c      	adds	r2, #60	@ 0x3c
 8007176:	db1e      	blt.n	80071b6 <__ieee754_atan2+0x106>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 fb86 	bl	800088c <__aeabi_ddiv>
 8007180:	ec41 0b10 	vmov	d0, r0, r1
 8007184:	f001 f93c 	bl	8008400 <fabs>
 8007188:	f000 ffa2 	bl	80080d0 <atan>
 800718c:	ec51 0b10 	vmov	r0, r1, d0
 8007190:	2c01      	cmp	r4, #1
 8007192:	d013      	beq.n	80071bc <__ieee754_atan2+0x10c>
 8007194:	2c02      	cmp	r4, #2
 8007196:	d015      	beq.n	80071c4 <__ieee754_atan2+0x114>
 8007198:	2c00      	cmp	r4, #0
 800719a:	d0a8      	beq.n	80070ee <__ieee754_atan2+0x3e>
 800719c:	a318      	add	r3, pc, #96	@ (adr r3, 8007200 <__ieee754_atan2+0x150>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 f891 	bl	80002c8 <__aeabi_dsub>
 80071a6:	a318      	add	r3, pc, #96	@ (adr r3, 8007208 <__ieee754_atan2+0x158>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	e014      	b.n	80071d8 <__ieee754_atan2+0x128>
 80071ae:	a118      	add	r1, pc, #96	@ (adr r1, 8007210 <__ieee754_atan2+0x160>)
 80071b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071b4:	e7ec      	b.n	8007190 <__ieee754_atan2+0xe0>
 80071b6:	2000      	movs	r0, #0
 80071b8:	2100      	movs	r1, #0
 80071ba:	e7e9      	b.n	8007190 <__ieee754_atan2+0xe0>
 80071bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071c0:	4619      	mov	r1, r3
 80071c2:	e794      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007200 <__ieee754_atan2+0x150>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f7f9 f87d 	bl	80002c8 <__aeabi_dsub>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	a10d      	add	r1, pc, #52	@ (adr r1, 8007208 <__ieee754_atan2+0x158>)
 80071d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d8:	f7f9 f876 	bl	80002c8 <__aeabi_dsub>
 80071dc:	e787      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071de:	a10a      	add	r1, pc, #40	@ (adr r1, 8007208 <__ieee754_atan2+0x158>)
 80071e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071e4:	e783      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071e6:	a10c      	add	r1, pc, #48	@ (adr r1, 8007218 <__ieee754_atan2+0x168>)
 80071e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ec:	e77f      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071ee:	2000      	movs	r0, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	e77c      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071f4:	a10a      	add	r1, pc, #40	@ (adr r1, 8007220 <__ieee754_atan2+0x170>)
 80071f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fa:	e778      	b.n	80070ee <__ieee754_atan2+0x3e>
 80071fc:	f3af 8000 	nop.w
 8007200:	33145c07 	.word	0x33145c07
 8007204:	3ca1a626 	.word	0x3ca1a626
 8007208:	54442d18 	.word	0x54442d18
 800720c:	400921fb 	.word	0x400921fb
 8007210:	54442d18 	.word	0x54442d18
 8007214:	3ff921fb 	.word	0x3ff921fb
 8007218:	54442d18 	.word	0x54442d18
 800721c:	3fe921fb 	.word	0x3fe921fb
 8007220:	54442d18 	.word	0x54442d18
 8007224:	bff921fb 	.word	0xbff921fb
 8007228:	08009128 	.word	0x08009128
 800722c:	08009110 	.word	0x08009110
 8007230:	54442d18 	.word	0x54442d18
 8007234:	c00921fb 	.word	0xc00921fb
 8007238:	7ff00000 	.word	0x7ff00000
 800723c:	00000000 	.word	0x00000000

08007240 <__ieee754_pow>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	b091      	sub	sp, #68	@ 0x44
 8007246:	ed8d 1b00 	vstr	d1, [sp]
 800724a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800724e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007252:	ea5a 0001 	orrs.w	r0, sl, r1
 8007256:	ec57 6b10 	vmov	r6, r7, d0
 800725a:	d113      	bne.n	8007284 <__ieee754_pow+0x44>
 800725c:	19b3      	adds	r3, r6, r6
 800725e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007262:	4152      	adcs	r2, r2
 8007264:	4298      	cmp	r0, r3
 8007266:	4b9a      	ldr	r3, [pc, #616]	@ (80074d0 <__ieee754_pow+0x290>)
 8007268:	4193      	sbcs	r3, r2
 800726a:	f080 84ee 	bcs.w	8007c4a <__ieee754_pow+0xa0a>
 800726e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007272:	4630      	mov	r0, r6
 8007274:	4639      	mov	r1, r7
 8007276:	f7f9 f829 	bl	80002cc <__adddf3>
 800727a:	ec41 0b10 	vmov	d0, r0, r1
 800727e:	b011      	add	sp, #68	@ 0x44
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	4a93      	ldr	r2, [pc, #588]	@ (80074d4 <__ieee754_pow+0x294>)
 8007286:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800728a:	4295      	cmp	r5, r2
 800728c:	46b8      	mov	r8, r7
 800728e:	4633      	mov	r3, r6
 8007290:	d80a      	bhi.n	80072a8 <__ieee754_pow+0x68>
 8007292:	d104      	bne.n	800729e <__ieee754_pow+0x5e>
 8007294:	2e00      	cmp	r6, #0
 8007296:	d1ea      	bne.n	800726e <__ieee754_pow+0x2e>
 8007298:	45aa      	cmp	sl, r5
 800729a:	d8e8      	bhi.n	800726e <__ieee754_pow+0x2e>
 800729c:	e001      	b.n	80072a2 <__ieee754_pow+0x62>
 800729e:	4592      	cmp	sl, r2
 80072a0:	d802      	bhi.n	80072a8 <__ieee754_pow+0x68>
 80072a2:	4592      	cmp	sl, r2
 80072a4:	d10f      	bne.n	80072c6 <__ieee754_pow+0x86>
 80072a6:	b171      	cbz	r1, 80072c6 <__ieee754_pow+0x86>
 80072a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80072ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80072b0:	ea58 0803 	orrs.w	r8, r8, r3
 80072b4:	d1db      	bne.n	800726e <__ieee754_pow+0x2e>
 80072b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80072ba:	18db      	adds	r3, r3, r3
 80072bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80072c0:	4152      	adcs	r2, r2
 80072c2:	4598      	cmp	r8, r3
 80072c4:	e7cf      	b.n	8007266 <__ieee754_pow+0x26>
 80072c6:	f1b8 0f00 	cmp.w	r8, #0
 80072ca:	46ab      	mov	fp, r5
 80072cc:	da43      	bge.n	8007356 <__ieee754_pow+0x116>
 80072ce:	4a82      	ldr	r2, [pc, #520]	@ (80074d8 <__ieee754_pow+0x298>)
 80072d0:	4592      	cmp	sl, r2
 80072d2:	d856      	bhi.n	8007382 <__ieee754_pow+0x142>
 80072d4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80072d8:	4592      	cmp	sl, r2
 80072da:	f240 84c5 	bls.w	8007c68 <__ieee754_pow+0xa28>
 80072de:	ea4f 522a 	mov.w	r2, sl, asr #20
 80072e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80072e6:	2a14      	cmp	r2, #20
 80072e8:	dd18      	ble.n	800731c <__ieee754_pow+0xdc>
 80072ea:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80072ee:	fa21 f402 	lsr.w	r4, r1, r2
 80072f2:	fa04 f202 	lsl.w	r2, r4, r2
 80072f6:	428a      	cmp	r2, r1
 80072f8:	f040 84b6 	bne.w	8007c68 <__ieee754_pow+0xa28>
 80072fc:	f004 0401 	and.w	r4, r4, #1
 8007300:	f1c4 0402 	rsb	r4, r4, #2
 8007304:	2900      	cmp	r1, #0
 8007306:	d159      	bne.n	80073bc <__ieee754_pow+0x17c>
 8007308:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800730c:	d148      	bne.n	80073a0 <__ieee754_pow+0x160>
 800730e:	4632      	mov	r2, r6
 8007310:	463b      	mov	r3, r7
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f9 f98f 	bl	8000638 <__aeabi_dmul>
 800731a:	e7ae      	b.n	800727a <__ieee754_pow+0x3a>
 800731c:	2900      	cmp	r1, #0
 800731e:	d14c      	bne.n	80073ba <__ieee754_pow+0x17a>
 8007320:	f1c2 0214 	rsb	r2, r2, #20
 8007324:	fa4a f402 	asr.w	r4, sl, r2
 8007328:	fa04 f202 	lsl.w	r2, r4, r2
 800732c:	4552      	cmp	r2, sl
 800732e:	f040 8498 	bne.w	8007c62 <__ieee754_pow+0xa22>
 8007332:	f004 0401 	and.w	r4, r4, #1
 8007336:	f1c4 0402 	rsb	r4, r4, #2
 800733a:	4a68      	ldr	r2, [pc, #416]	@ (80074dc <__ieee754_pow+0x29c>)
 800733c:	4592      	cmp	sl, r2
 800733e:	d1e3      	bne.n	8007308 <__ieee754_pow+0xc8>
 8007340:	f1b9 0f00 	cmp.w	r9, #0
 8007344:	f280 8489 	bge.w	8007c5a <__ieee754_pow+0xa1a>
 8007348:	4964      	ldr	r1, [pc, #400]	@ (80074dc <__ieee754_pow+0x29c>)
 800734a:	4632      	mov	r2, r6
 800734c:	463b      	mov	r3, r7
 800734e:	2000      	movs	r0, #0
 8007350:	f7f9 fa9c 	bl	800088c <__aeabi_ddiv>
 8007354:	e791      	b.n	800727a <__ieee754_pow+0x3a>
 8007356:	2400      	movs	r4, #0
 8007358:	bb81      	cbnz	r1, 80073bc <__ieee754_pow+0x17c>
 800735a:	4a5e      	ldr	r2, [pc, #376]	@ (80074d4 <__ieee754_pow+0x294>)
 800735c:	4592      	cmp	sl, r2
 800735e:	d1ec      	bne.n	800733a <__ieee754_pow+0xfa>
 8007360:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007364:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007368:	431a      	orrs	r2, r3
 800736a:	f000 846e 	beq.w	8007c4a <__ieee754_pow+0xa0a>
 800736e:	4b5c      	ldr	r3, [pc, #368]	@ (80074e0 <__ieee754_pow+0x2a0>)
 8007370:	429d      	cmp	r5, r3
 8007372:	d908      	bls.n	8007386 <__ieee754_pow+0x146>
 8007374:	f1b9 0f00 	cmp.w	r9, #0
 8007378:	f280 846b 	bge.w	8007c52 <__ieee754_pow+0xa12>
 800737c:	2000      	movs	r0, #0
 800737e:	2100      	movs	r1, #0
 8007380:	e77b      	b.n	800727a <__ieee754_pow+0x3a>
 8007382:	2402      	movs	r4, #2
 8007384:	e7e8      	b.n	8007358 <__ieee754_pow+0x118>
 8007386:	f1b9 0f00 	cmp.w	r9, #0
 800738a:	f04f 0000 	mov.w	r0, #0
 800738e:	f04f 0100 	mov.w	r1, #0
 8007392:	f6bf af72 	bge.w	800727a <__ieee754_pow+0x3a>
 8007396:	e9dd 0300 	ldrd	r0, r3, [sp]
 800739a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800739e:	e76c      	b.n	800727a <__ieee754_pow+0x3a>
 80073a0:	4a50      	ldr	r2, [pc, #320]	@ (80074e4 <__ieee754_pow+0x2a4>)
 80073a2:	4591      	cmp	r9, r2
 80073a4:	d10a      	bne.n	80073bc <__ieee754_pow+0x17c>
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	db07      	blt.n	80073bc <__ieee754_pow+0x17c>
 80073ac:	ec47 6b10 	vmov	d0, r6, r7
 80073b0:	b011      	add	sp, #68	@ 0x44
 80073b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	f7ff bc1f 	b.w	8006bf8 <__ieee754_sqrt>
 80073ba:	2400      	movs	r4, #0
 80073bc:	ec47 6b10 	vmov	d0, r6, r7
 80073c0:	9302      	str	r3, [sp, #8]
 80073c2:	f001 f81d 	bl	8008400 <fabs>
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	ec51 0b10 	vmov	r0, r1, d0
 80073cc:	bb43      	cbnz	r3, 8007420 <__ieee754_pow+0x1e0>
 80073ce:	4b43      	ldr	r3, [pc, #268]	@ (80074dc <__ieee754_pow+0x29c>)
 80073d0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d000      	beq.n	80073da <__ieee754_pow+0x19a>
 80073d8:	bb15      	cbnz	r5, 8007420 <__ieee754_pow+0x1e0>
 80073da:	f1b9 0f00 	cmp.w	r9, #0
 80073de:	da05      	bge.n	80073ec <__ieee754_pow+0x1ac>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	2000      	movs	r0, #0
 80073e6:	493d      	ldr	r1, [pc, #244]	@ (80074dc <__ieee754_pow+0x29c>)
 80073e8:	f7f9 fa50 	bl	800088c <__aeabi_ddiv>
 80073ec:	f1b8 0f00 	cmp.w	r8, #0
 80073f0:	f6bf af43 	bge.w	800727a <__ieee754_pow+0x3a>
 80073f4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80073f8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80073fc:	4325      	orrs	r5, r4
 80073fe:	d108      	bne.n	8007412 <__ieee754_pow+0x1d2>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	f7f8 ff5e 	bl	80002c8 <__aeabi_dsub>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	e79e      	b.n	8007350 <__ieee754_pow+0x110>
 8007412:	2c01      	cmp	r4, #1
 8007414:	f47f af31 	bne.w	800727a <__ieee754_pow+0x3a>
 8007418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800741c:	4619      	mov	r1, r3
 800741e:	e72c      	b.n	800727a <__ieee754_pow+0x3a>
 8007420:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007424:	3b01      	subs	r3, #1
 8007426:	ea53 0204 	orrs.w	r2, r3, r4
 800742a:	d102      	bne.n	8007432 <__ieee754_pow+0x1f2>
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	e7e8      	b.n	8007404 <__ieee754_pow+0x1c4>
 8007432:	3c01      	subs	r4, #1
 8007434:	431c      	orrs	r4, r3
 8007436:	d016      	beq.n	8007466 <__ieee754_pow+0x226>
 8007438:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80074c0 <__ieee754_pow+0x280>
 800743c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007440:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007444:	f240 8110 	bls.w	8007668 <__ieee754_pow+0x428>
 8007448:	4b27      	ldr	r3, [pc, #156]	@ (80074e8 <__ieee754_pow+0x2a8>)
 800744a:	459a      	cmp	sl, r3
 800744c:	4b24      	ldr	r3, [pc, #144]	@ (80074e0 <__ieee754_pow+0x2a0>)
 800744e:	d916      	bls.n	800747e <__ieee754_pow+0x23e>
 8007450:	429d      	cmp	r5, r3
 8007452:	d80b      	bhi.n	800746c <__ieee754_pow+0x22c>
 8007454:	f1b9 0f00 	cmp.w	r9, #0
 8007458:	da0b      	bge.n	8007472 <__ieee754_pow+0x232>
 800745a:	2000      	movs	r0, #0
 800745c:	b011      	add	sp, #68	@ 0x44
 800745e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007462:	f001 b885 	b.w	8008570 <__math_oflow>
 8007466:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80074c8 <__ieee754_pow+0x288>
 800746a:	e7e7      	b.n	800743c <__ieee754_pow+0x1fc>
 800746c:	f1b9 0f00 	cmp.w	r9, #0
 8007470:	dcf3      	bgt.n	800745a <__ieee754_pow+0x21a>
 8007472:	2000      	movs	r0, #0
 8007474:	b011      	add	sp, #68	@ 0x44
 8007476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f001 b871 	b.w	8008560 <__math_uflow>
 800747e:	429d      	cmp	r5, r3
 8007480:	d20c      	bcs.n	800749c <__ieee754_pow+0x25c>
 8007482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	f7f9 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800748e:	3800      	subs	r0, #0
 8007490:	bf18      	it	ne
 8007492:	2001      	movne	r0, #1
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	daec      	bge.n	8007474 <__ieee754_pow+0x234>
 800749a:	e7df      	b.n	800745c <__ieee754_pow+0x21c>
 800749c:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <__ieee754_pow+0x29c>)
 800749e:	429d      	cmp	r5, r3
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	d922      	bls.n	80074ec <__ieee754_pow+0x2ac>
 80074a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074aa:	2300      	movs	r3, #0
 80074ac:	f7f9 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80074b0:	3800      	subs	r0, #0
 80074b2:	bf18      	it	ne
 80074b4:	2001      	movne	r0, #1
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	dccf      	bgt.n	800745c <__ieee754_pow+0x21c>
 80074bc:	e7da      	b.n	8007474 <__ieee754_pow+0x234>
 80074be:	bf00      	nop
 80074c0:	00000000 	.word	0x00000000
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	00000000 	.word	0x00000000
 80074cc:	bff00000 	.word	0xbff00000
 80074d0:	fff00000 	.word	0xfff00000
 80074d4:	7ff00000 	.word	0x7ff00000
 80074d8:	433fffff 	.word	0x433fffff
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	3fefffff 	.word	0x3fefffff
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	43f00000 	.word	0x43f00000
 80074ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007658 <__ieee754_pow+0x418>)
 80074ee:	f7f8 feeb 	bl	80002c8 <__aeabi_dsub>
 80074f2:	a351      	add	r3, pc, #324	@ (adr r3, 8007638 <__ieee754_pow+0x3f8>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 f89c 	bl	8000638 <__aeabi_dmul>
 8007500:	a34f      	add	r3, pc, #316	@ (adr r3, 8007640 <__ieee754_pow+0x400>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	f7f9 f893 	bl	8000638 <__aeabi_dmul>
 8007512:	4b52      	ldr	r3, [pc, #328]	@ (800765c <__ieee754_pow+0x41c>)
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	2200      	movs	r2, #0
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	f7f9 f88b 	bl	8000638 <__aeabi_dmul>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	a148      	add	r1, pc, #288	@ (adr r1, 8007648 <__ieee754_pow+0x408>)
 8007528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752c:	f7f8 fecc 	bl	80002c8 <__aeabi_dsub>
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	f7f9 f880 	bl	8000638 <__aeabi_dmul>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	2000      	movs	r0, #0
 800753e:	4948      	ldr	r1, [pc, #288]	@ (8007660 <__ieee754_pow+0x420>)
 8007540:	f7f8 fec2 	bl	80002c8 <__aeabi_dsub>
 8007544:	4622      	mov	r2, r4
 8007546:	4680      	mov	r8, r0
 8007548:	4689      	mov	r9, r1
 800754a:	462b      	mov	r3, r5
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f9 f872 	bl	8000638 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f9 f86c 	bl	8000638 <__aeabi_dmul>
 8007560:	a33b      	add	r3, pc, #236	@ (adr r3, 8007650 <__ieee754_pow+0x410>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f9 f867 	bl	8000638 <__aeabi_dmul>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4650      	mov	r0, sl
 8007570:	4659      	mov	r1, fp
 8007572:	f7f8 fea9 	bl	80002c8 <__aeabi_dsub>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4680      	mov	r8, r0
 800757c:	4689      	mov	r9, r1
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	f7f8 fea3 	bl	80002cc <__adddf3>
 8007586:	2400      	movs	r4, #0
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	4620      	mov	r0, r4
 800758e:	460d      	mov	r5, r1
 8007590:	f7f8 fe9a 	bl	80002c8 <__aeabi_dsub>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f8 fe94 	bl	80002c8 <__aeabi_dsub>
 80075a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075a8:	2300      	movs	r3, #0
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80075b0:	4606      	mov	r6, r0
 80075b2:	460f      	mov	r7, r1
 80075b4:	465b      	mov	r3, fp
 80075b6:	4652      	mov	r2, sl
 80075b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075bc:	f7f8 fe84 	bl	80002c8 <__aeabi_dsub>
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f7f9 f838 	bl	8000638 <__aeabi_dmul>
 80075c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f9 f830 	bl	8000638 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fe74 	bl	80002cc <__adddf3>
 80075e4:	465b      	mov	r3, fp
 80075e6:	4606      	mov	r6, r0
 80075e8:	460f      	mov	r7, r1
 80075ea:	4652      	mov	r2, sl
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f9 f822 	bl	8000638 <__aeabi_dmul>
 80075f4:	460b      	mov	r3, r1
 80075f6:	4602      	mov	r2, r0
 80075f8:	4680      	mov	r8, r0
 80075fa:	4689      	mov	r9, r1
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f8 fe64 	bl	80002cc <__adddf3>
 8007604:	4b17      	ldr	r3, [pc, #92]	@ (8007664 <__ieee754_pow+0x424>)
 8007606:	4299      	cmp	r1, r3
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	468b      	mov	fp, r1
 800760e:	f340 820b 	ble.w	8007a28 <__ieee754_pow+0x7e8>
 8007612:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007616:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800761a:	4303      	orrs	r3, r0
 800761c:	f000 81ea 	beq.w	80079f4 <__ieee754_pow+0x7b4>
 8007620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	f7f9 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800762c:	3800      	subs	r0, #0
 800762e:	bf18      	it	ne
 8007630:	2001      	movne	r0, #1
 8007632:	e713      	b.n	800745c <__ieee754_pow+0x21c>
 8007634:	f3af 8000 	nop.w
 8007638:	60000000 	.word	0x60000000
 800763c:	3ff71547 	.word	0x3ff71547
 8007640:	f85ddf44 	.word	0xf85ddf44
 8007644:	3e54ae0b 	.word	0x3e54ae0b
 8007648:	55555555 	.word	0x55555555
 800764c:	3fd55555 	.word	0x3fd55555
 8007650:	652b82fe 	.word	0x652b82fe
 8007654:	3ff71547 	.word	0x3ff71547
 8007658:	3ff00000 	.word	0x3ff00000
 800765c:	3fd00000 	.word	0x3fd00000
 8007660:	3fe00000 	.word	0x3fe00000
 8007664:	408fffff 	.word	0x408fffff
 8007668:	4bd5      	ldr	r3, [pc, #852]	@ (80079c0 <__ieee754_pow+0x780>)
 800766a:	ea08 0303 	and.w	r3, r8, r3
 800766e:	2200      	movs	r2, #0
 8007670:	b92b      	cbnz	r3, 800767e <__ieee754_pow+0x43e>
 8007672:	4bd4      	ldr	r3, [pc, #848]	@ (80079c4 <__ieee754_pow+0x784>)
 8007674:	f7f8 ffe0 	bl	8000638 <__aeabi_dmul>
 8007678:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800767c:	468b      	mov	fp, r1
 800767e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007682:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007686:	4413      	add	r3, r2
 8007688:	930a      	str	r3, [sp, #40]	@ 0x28
 800768a:	4bcf      	ldr	r3, [pc, #828]	@ (80079c8 <__ieee754_pow+0x788>)
 800768c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007690:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007694:	459b      	cmp	fp, r3
 8007696:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800769a:	dd08      	ble.n	80076ae <__ieee754_pow+0x46e>
 800769c:	4bcb      	ldr	r3, [pc, #812]	@ (80079cc <__ieee754_pow+0x78c>)
 800769e:	459b      	cmp	fp, r3
 80076a0:	f340 81a5 	ble.w	80079ee <__ieee754_pow+0x7ae>
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	3301      	adds	r3, #1
 80076a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076aa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80076b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076b8:	4bc5      	ldr	r3, [pc, #788]	@ (80079d0 <__ieee754_pow+0x790>)
 80076ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076be:	ed93 7b00 	vldr	d7, [r3]
 80076c2:	4629      	mov	r1, r5
 80076c4:	ec53 2b17 	vmov	r2, r3, d7
 80076c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80076cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076d0:	f7f8 fdfa 	bl	80002c8 <__aeabi_dsub>
 80076d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076e0:	f7f8 fdf4 	bl	80002cc <__adddf3>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	2000      	movs	r0, #0
 80076ea:	49ba      	ldr	r1, [pc, #744]	@ (80079d4 <__ieee754_pow+0x794>)
 80076ec:	f7f9 f8ce 	bl	800088c <__aeabi_ddiv>
 80076f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f8 ff9c 	bl	8000638 <__aeabi_dmul>
 8007700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007704:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007708:	106d      	asrs	r5, r5, #1
 800770a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800770e:	f04f 0b00 	mov.w	fp, #0
 8007712:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007716:	4661      	mov	r1, ip
 8007718:	2200      	movs	r2, #0
 800771a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800771e:	4658      	mov	r0, fp
 8007720:	46e1      	mov	r9, ip
 8007722:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007726:	4614      	mov	r4, r2
 8007728:	461d      	mov	r5, r3
 800772a:	f7f8 ff85 	bl	8000638 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4630      	mov	r0, r6
 8007734:	4639      	mov	r1, r7
 8007736:	f7f8 fdc7 	bl	80002c8 <__aeabi_dsub>
 800773a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773e:	4606      	mov	r6, r0
 8007740:	460f      	mov	r7, r1
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f8 fdbf 	bl	80002c8 <__aeabi_dsub>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007752:	f7f8 fdb9 	bl	80002c8 <__aeabi_dsub>
 8007756:	465a      	mov	r2, fp
 8007758:	464b      	mov	r3, r9
 800775a:	f7f8 ff6d 	bl	8000638 <__aeabi_dmul>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 fdaf 	bl	80002c8 <__aeabi_dsub>
 800776a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800776e:	f7f8 ff63 	bl	8000638 <__aeabi_dmul>
 8007772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007776:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800777a:	4610      	mov	r0, r2
 800777c:	4619      	mov	r1, r3
 800777e:	f7f8 ff5b 	bl	8000638 <__aeabi_dmul>
 8007782:	a37d      	add	r3, pc, #500	@ (adr r3, 8007978 <__ieee754_pow+0x738>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	f7f8 ff54 	bl	8000638 <__aeabi_dmul>
 8007790:	a37b      	add	r3, pc, #492	@ (adr r3, 8007980 <__ieee754_pow+0x740>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fd99 	bl	80002cc <__adddf3>
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f7f8 ff4b 	bl	8000638 <__aeabi_dmul>
 80077a2:	a379      	add	r3, pc, #484	@ (adr r3, 8007988 <__ieee754_pow+0x748>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fd90 	bl	80002cc <__adddf3>
 80077ac:	4622      	mov	r2, r4
 80077ae:	462b      	mov	r3, r5
 80077b0:	f7f8 ff42 	bl	8000638 <__aeabi_dmul>
 80077b4:	a376      	add	r3, pc, #472	@ (adr r3, 8007990 <__ieee754_pow+0x750>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 fd87 	bl	80002cc <__adddf3>
 80077be:	4622      	mov	r2, r4
 80077c0:	462b      	mov	r3, r5
 80077c2:	f7f8 ff39 	bl	8000638 <__aeabi_dmul>
 80077c6:	a374      	add	r3, pc, #464	@ (adr r3, 8007998 <__ieee754_pow+0x758>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f7f8 fd7e 	bl	80002cc <__adddf3>
 80077d0:	4622      	mov	r2, r4
 80077d2:	462b      	mov	r3, r5
 80077d4:	f7f8 ff30 	bl	8000638 <__aeabi_dmul>
 80077d8:	a371      	add	r3, pc, #452	@ (adr r3, 80079a0 <__ieee754_pow+0x760>)
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 fd75 	bl	80002cc <__adddf3>
 80077e2:	4622      	mov	r2, r4
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	462b      	mov	r3, r5
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f7f8 ff23 	bl	8000638 <__aeabi_dmul>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4630      	mov	r0, r6
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f8 ff1d 	bl	8000638 <__aeabi_dmul>
 80077fe:	465a      	mov	r2, fp
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	464b      	mov	r3, r9
 8007806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800780a:	f7f8 fd5f 	bl	80002cc <__adddf3>
 800780e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007812:	f7f8 ff11 	bl	8000638 <__aeabi_dmul>
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	f7f8 fd57 	bl	80002cc <__adddf3>
 800781e:	465a      	mov	r2, fp
 8007820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007824:	464b      	mov	r3, r9
 8007826:	4658      	mov	r0, fp
 8007828:	4649      	mov	r1, r9
 800782a:	f7f8 ff05 	bl	8000638 <__aeabi_dmul>
 800782e:	4b6a      	ldr	r3, [pc, #424]	@ (80079d8 <__ieee754_pow+0x798>)
 8007830:	2200      	movs	r2, #0
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	f7f8 fd49 	bl	80002cc <__adddf3>
 800783a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800783e:	f7f8 fd45 	bl	80002cc <__adddf3>
 8007842:	46d8      	mov	r8, fp
 8007844:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007848:	460d      	mov	r5, r1
 800784a:	465a      	mov	r2, fp
 800784c:	460b      	mov	r3, r1
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	465c      	mov	r4, fp
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	4b5d      	ldr	r3, [pc, #372]	@ (80079d8 <__ieee754_pow+0x798>)
 8007862:	2200      	movs	r2, #0
 8007864:	4620      	mov	r0, r4
 8007866:	4629      	mov	r1, r5
 8007868:	f7f8 fd2e 	bl	80002c8 <__aeabi_dsub>
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	f7f8 fd2a 	bl	80002c8 <__aeabi_dsub>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800787c:	f7f8 fd24 	bl	80002c8 <__aeabi_dsub>
 8007880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007884:	f7f8 fed8 	bl	8000638 <__aeabi_dmul>
 8007888:	4622      	mov	r2, r4
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	462b      	mov	r3, r5
 8007890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007894:	f7f8 fed0 	bl	8000638 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4630      	mov	r0, r6
 800789e:	4639      	mov	r1, r7
 80078a0:	f7f8 fd14 	bl	80002cc <__adddf3>
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f8 fd0c 	bl	80002cc <__adddf3>
 80078b4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80078b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80079a8 <__ieee754_pow+0x768>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	4658      	mov	r0, fp
 80078c0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80078c4:	460d      	mov	r5, r1
 80078c6:	f7f8 feb7 	bl	8000638 <__aeabi_dmul>
 80078ca:	465c      	mov	r4, fp
 80078cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fcf6 	bl	80002c8 <__aeabi_dsub>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f8 fcf0 	bl	80002c8 <__aeabi_dsub>
 80078e8:	a331      	add	r3, pc, #196	@ (adr r3, 80079b0 <__ieee754_pow+0x770>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fea3 	bl	8000638 <__aeabi_dmul>
 80078f2:	a331      	add	r3, pc, #196	@ (adr r3, 80079b8 <__ieee754_pow+0x778>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4606      	mov	r6, r0
 80078fa:	460f      	mov	r7, r1
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fe9a 	bl	8000638 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f8 fcde 	bl	80002cc <__adddf3>
 8007910:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007912:	4b32      	ldr	r3, [pc, #200]	@ (80079dc <__ieee754_pow+0x79c>)
 8007914:	4413      	add	r3, r2
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcd7 	bl	80002cc <__adddf3>
 800791e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007922:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007924:	f7f8 fe1e 	bl	8000564 <__aeabi_i2d>
 8007928:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800792a:	4b2d      	ldr	r3, [pc, #180]	@ (80079e0 <__ieee754_pow+0x7a0>)
 800792c:	4413      	add	r3, r2
 800792e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007932:	4606      	mov	r6, r0
 8007934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007938:	460f      	mov	r7, r1
 800793a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800793e:	f7f8 fcc5 	bl	80002cc <__adddf3>
 8007942:	4642      	mov	r2, r8
 8007944:	464b      	mov	r3, r9
 8007946:	f7f8 fcc1 	bl	80002cc <__adddf3>
 800794a:	4632      	mov	r2, r6
 800794c:	463b      	mov	r3, r7
 800794e:	f7f8 fcbd 	bl	80002cc <__adddf3>
 8007952:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007956:	4632      	mov	r2, r6
 8007958:	463b      	mov	r3, r7
 800795a:	4658      	mov	r0, fp
 800795c:	460d      	mov	r5, r1
 800795e:	f7f8 fcb3 	bl	80002c8 <__aeabi_dsub>
 8007962:	4642      	mov	r2, r8
 8007964:	464b      	mov	r3, r9
 8007966:	f7f8 fcaf 	bl	80002c8 <__aeabi_dsub>
 800796a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796e:	f7f8 fcab 	bl	80002c8 <__aeabi_dsub>
 8007972:	465c      	mov	r4, fp
 8007974:	e036      	b.n	80079e4 <__ieee754_pow+0x7a4>
 8007976:	bf00      	nop
 8007978:	4a454eef 	.word	0x4a454eef
 800797c:	3fca7e28 	.word	0x3fca7e28
 8007980:	93c9db65 	.word	0x93c9db65
 8007984:	3fcd864a 	.word	0x3fcd864a
 8007988:	a91d4101 	.word	0xa91d4101
 800798c:	3fd17460 	.word	0x3fd17460
 8007990:	518f264d 	.word	0x518f264d
 8007994:	3fd55555 	.word	0x3fd55555
 8007998:	db6fabff 	.word	0xdb6fabff
 800799c:	3fdb6db6 	.word	0x3fdb6db6
 80079a0:	33333303 	.word	0x33333303
 80079a4:	3fe33333 	.word	0x3fe33333
 80079a8:	e0000000 	.word	0xe0000000
 80079ac:	3feec709 	.word	0x3feec709
 80079b0:	dc3a03fd 	.word	0xdc3a03fd
 80079b4:	3feec709 	.word	0x3feec709
 80079b8:	145b01f5 	.word	0x145b01f5
 80079bc:	be3e2fe0 	.word	0xbe3e2fe0
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	43400000 	.word	0x43400000
 80079c8:	0003988e 	.word	0x0003988e
 80079cc:	000bb679 	.word	0x000bb679
 80079d0:	08009160 	.word	0x08009160
 80079d4:	3ff00000 	.word	0x3ff00000
 80079d8:	40080000 	.word	0x40080000
 80079dc:	08009140 	.word	0x08009140
 80079e0:	08009150 	.word	0x08009150
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ec:	e5d6      	b.n	800759c <__ieee754_pow+0x35c>
 80079ee:	f04f 0a01 	mov.w	sl, #1
 80079f2:	e65e      	b.n	80076b2 <__ieee754_pow+0x472>
 80079f4:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007ccc <__ieee754_pow+0xa8c>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fc65 	bl	80002cc <__adddf3>
 8007a02:	4642      	mov	r2, r8
 8007a04:	e9cd 0100 	strd	r0, r1, [sp]
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7f8 fc5b 	bl	80002c8 <__aeabi_dsub>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a1a:	f7f9 f89d 	bl	8000b58 <__aeabi_dcmpgt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f47f adfe 	bne.w	8007620 <__ieee754_pow+0x3e0>
 8007a24:	4ba2      	ldr	r3, [pc, #648]	@ (8007cb0 <__ieee754_pow+0xa70>)
 8007a26:	e022      	b.n	8007a6e <__ieee754_pow+0x82e>
 8007a28:	4ca2      	ldr	r4, [pc, #648]	@ (8007cb4 <__ieee754_pow+0xa74>)
 8007a2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	d919      	bls.n	8007a66 <__ieee754_pow+0x826>
 8007a32:	4ba1      	ldr	r3, [pc, #644]	@ (8007cb8 <__ieee754_pow+0xa78>)
 8007a34:	440b      	add	r3, r1
 8007a36:	4303      	orrs	r3, r0
 8007a38:	d009      	beq.n	8007a4e <__ieee754_pow+0x80e>
 8007a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	f7f9 f86b 	bl	8000b1c <__aeabi_dcmplt>
 8007a46:	3800      	subs	r0, #0
 8007a48:	bf18      	it	ne
 8007a4a:	2001      	movne	r0, #1
 8007a4c:	e512      	b.n	8007474 <__ieee754_pow+0x234>
 8007a4e:	4642      	mov	r2, r8
 8007a50:	464b      	mov	r3, r9
 8007a52:	f7f8 fc39 	bl	80002c8 <__aeabi_dsub>
 8007a56:	4632      	mov	r2, r6
 8007a58:	463b      	mov	r3, r7
 8007a5a:	f7f9 f873 	bl	8000b44 <__aeabi_dcmpge>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d1eb      	bne.n	8007a3a <__ieee754_pow+0x7fa>
 8007a62:	4b96      	ldr	r3, [pc, #600]	@ (8007cbc <__ieee754_pow+0xa7c>)
 8007a64:	e003      	b.n	8007a6e <__ieee754_pow+0x82e>
 8007a66:	4a96      	ldr	r2, [pc, #600]	@ (8007cc0 <__ieee754_pow+0xa80>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	f240 80e7 	bls.w	8007c3c <__ieee754_pow+0x9fc>
 8007a6e:	151b      	asrs	r3, r3, #20
 8007a70:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007a74:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007a78:	fa4a fa03 	asr.w	sl, sl, r3
 8007a7c:	44da      	add	sl, fp
 8007a7e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007a82:	4890      	ldr	r0, [pc, #576]	@ (8007cc4 <__ieee754_pow+0xa84>)
 8007a84:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007a88:	4108      	asrs	r0, r1
 8007a8a:	ea00 030a 	and.w	r3, r0, sl
 8007a8e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007a92:	f1c1 0114 	rsb	r1, r1, #20
 8007a96:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007a9a:	fa4a fa01 	asr.w	sl, sl, r1
 8007a9e:	f1bb 0f00 	cmp.w	fp, #0
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	f04f 0200 	mov.w	r2, #0
 8007aaa:	bfb8      	it	lt
 8007aac:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ab0:	f7f8 fc0a 	bl	80002c8 <__aeabi_dsub>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4689      	mov	r9, r1
 8007ab8:	4632      	mov	r2, r6
 8007aba:	463b      	mov	r3, r7
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f8 fc04 	bl	80002cc <__adddf3>
 8007ac4:	2400      	movs	r4, #0
 8007ac6:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c70 <__ieee754_pow+0xa30>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	4620      	mov	r0, r4
 8007ace:	460d      	mov	r5, r1
 8007ad0:	f7f8 fdb2 	bl	8000638 <__aeabi_dmul>
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8007ada:	464b      	mov	r3, r9
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7f8 fbf2 	bl	80002c8 <__aeabi_dsub>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fbec 	bl	80002c8 <__aeabi_dsub>
 8007af0:	a361      	add	r3, pc, #388	@ (adr r3, 8007c78 <__ieee754_pow+0xa38>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fd9f 	bl	8000638 <__aeabi_dmul>
 8007afa:	a361      	add	r3, pc, #388	@ (adr r3, 8007c80 <__ieee754_pow+0xa40>)
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	4680      	mov	r8, r0
 8007b02:	4689      	mov	r9, r1
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7f8 fd96 	bl	8000638 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fbda 	bl	80002cc <__adddf3>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b24:	f7f8 fbd2 	bl	80002cc <__adddf3>
 8007b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4689      	mov	r9, r1
 8007b30:	f7f8 fbca 	bl	80002c8 <__aeabi_dsub>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7f8 fbc4 	bl	80002c8 <__aeabi_dsub>
 8007b40:	4642      	mov	r2, r8
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	464b      	mov	r3, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	f7f8 fd74 	bl	8000638 <__aeabi_dmul>
 8007b50:	a34d      	add	r3, pc, #308	@ (adr r3, 8007c88 <__ieee754_pow+0xa48>)
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	4604      	mov	r4, r0
 8007b58:	460d      	mov	r5, r1
 8007b5a:	f7f8 fd6d 	bl	8000638 <__aeabi_dmul>
 8007b5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007c90 <__ieee754_pow+0xa50>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fbb0 	bl	80002c8 <__aeabi_dsub>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	f7f8 fd64 	bl	8000638 <__aeabi_dmul>
 8007b70:	a349      	add	r3, pc, #292	@ (adr r3, 8007c98 <__ieee754_pow+0xa58>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 fba9 	bl	80002cc <__adddf3>
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	f7f8 fd5b 	bl	8000638 <__aeabi_dmul>
 8007b82:	a347      	add	r3, pc, #284	@ (adr r3, 8007ca0 <__ieee754_pow+0xa60>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fb9e 	bl	80002c8 <__aeabi_dsub>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f7f8 fd52 	bl	8000638 <__aeabi_dmul>
 8007b94:	a344      	add	r3, pc, #272	@ (adr r3, 8007ca8 <__ieee754_pow+0xa68>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb97 	bl	80002cc <__adddf3>
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	f7f8 fd49 	bl	8000638 <__aeabi_dmul>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb8b 	bl	80002c8 <__aeabi_dsub>
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fd3b 	bl	8000638 <__aeabi_dmul>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 fb7a 	bl	80002c8 <__aeabi_dsub>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bdc:	f7f8 fe56 	bl	800088c <__aeabi_ddiv>
 8007be0:	4632      	mov	r2, r6
 8007be2:	4604      	mov	r4, r0
 8007be4:	460d      	mov	r5, r1
 8007be6:	463b      	mov	r3, r7
 8007be8:	4640      	mov	r0, r8
 8007bea:	4649      	mov	r1, r9
 8007bec:	f7f8 fd24 	bl	8000638 <__aeabi_dmul>
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	f7f8 fb6a 	bl	80002cc <__adddf3>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 fb62 	bl	80002c8 <__aeabi_dsub>
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	f7f8 fb5e 	bl	80002c8 <__aeabi_dsub>
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4602      	mov	r2, r0
 8007c10:	492d      	ldr	r1, [pc, #180]	@ (8007cc8 <__ieee754_pow+0xa88>)
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7f8 fb58 	bl	80002c8 <__aeabi_dsub>
 8007c18:	ec41 0b10 	vmov	d0, r0, r1
 8007c1c:	ee10 3a90 	vmov	r3, s1
 8007c20:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c28:	da0b      	bge.n	8007c42 <__ieee754_pow+0xa02>
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	f000 fbf0 	bl	8008410 <scalbn>
 8007c30:	ec51 0b10 	vmov	r0, r1, d0
 8007c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c38:	f7ff bb6d 	b.w	8007316 <__ieee754_pow+0xd6>
 8007c3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007c40:	e73a      	b.n	8007ab8 <__ieee754_pow+0x878>
 8007c42:	ec51 0b10 	vmov	r0, r1, d0
 8007c46:	4619      	mov	r1, r3
 8007c48:	e7f4      	b.n	8007c34 <__ieee754_pow+0x9f4>
 8007c4a:	491f      	ldr	r1, [pc, #124]	@ (8007cc8 <__ieee754_pow+0xa88>)
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f7ff bb14 	b.w	800727a <__ieee754_pow+0x3a>
 8007c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c56:	f7ff bb10 	b.w	800727a <__ieee754_pow+0x3a>
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7ff bb0c 	b.w	800727a <__ieee754_pow+0x3a>
 8007c62:	460c      	mov	r4, r1
 8007c64:	f7ff bb69 	b.w	800733a <__ieee754_pow+0xfa>
 8007c68:	2400      	movs	r4, #0
 8007c6a:	f7ff bb4b 	b.w	8007304 <__ieee754_pow+0xc4>
 8007c6e:	bf00      	nop
 8007c70:	00000000 	.word	0x00000000
 8007c74:	3fe62e43 	.word	0x3fe62e43
 8007c78:	fefa39ef 	.word	0xfefa39ef
 8007c7c:	3fe62e42 	.word	0x3fe62e42
 8007c80:	0ca86c39 	.word	0x0ca86c39
 8007c84:	be205c61 	.word	0xbe205c61
 8007c88:	72bea4d0 	.word	0x72bea4d0
 8007c8c:	3e663769 	.word	0x3e663769
 8007c90:	c5d26bf1 	.word	0xc5d26bf1
 8007c94:	3ebbbd41 	.word	0x3ebbbd41
 8007c98:	af25de2c 	.word	0xaf25de2c
 8007c9c:	3f11566a 	.word	0x3f11566a
 8007ca0:	16bebd93 	.word	0x16bebd93
 8007ca4:	3f66c16c 	.word	0x3f66c16c
 8007ca8:	5555553e 	.word	0x5555553e
 8007cac:	3fc55555 	.word	0x3fc55555
 8007cb0:	40900000 	.word	0x40900000
 8007cb4:	4090cbff 	.word	0x4090cbff
 8007cb8:	3f6f3400 	.word	0x3f6f3400
 8007cbc:	4090cc00 	.word	0x4090cc00
 8007cc0:	3fe00000 	.word	0x3fe00000
 8007cc4:	fff00000 	.word	0xfff00000
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	652b82fe 	.word	0x652b82fe
 8007cd0:	3c971547 	.word	0x3c971547
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <__ieee754_rem_pio2>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	ec57 6b10 	vmov	r6, r7, d0
 8007ce0:	4bc5      	ldr	r3, [pc, #788]	@ (8007ff8 <__ieee754_rem_pio2+0x320>)
 8007ce2:	b08d      	sub	sp, #52	@ 0x34
 8007ce4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ce8:	4598      	cmp	r8, r3
 8007cea:	4604      	mov	r4, r0
 8007cec:	9704      	str	r7, [sp, #16]
 8007cee:	d807      	bhi.n	8007d00 <__ieee754_rem_pio2+0x28>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	ed80 0b00 	vstr	d0, [r0]
 8007cf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	e028      	b.n	8007d52 <__ieee754_rem_pio2+0x7a>
 8007d00:	4bbe      	ldr	r3, [pc, #760]	@ (8007ffc <__ieee754_rem_pio2+0x324>)
 8007d02:	4598      	cmp	r8, r3
 8007d04:	d878      	bhi.n	8007df8 <__ieee754_rem_pio2+0x120>
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	4dbd      	ldr	r5, [pc, #756]	@ (8008000 <__ieee754_rem_pio2+0x328>)
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	4639      	mov	r1, r7
 8007d16:	dd38      	ble.n	8007d8a <__ieee754_rem_pio2+0xb2>
 8007d18:	f7f8 fad6 	bl	80002c8 <__aeabi_dsub>
 8007d1c:	45a8      	cmp	r8, r5
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	d01a      	beq.n	8007d5a <__ieee754_rem_pio2+0x82>
 8007d24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 facd 	bl	80002c8 <__aeabi_dsub>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4680      	mov	r8, r0
 8007d34:	4689      	mov	r9, r1
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fac5 	bl	80002c8 <__aeabi_dsub>
 8007d3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 fac0 	bl	80002c8 <__aeabi_dsub>
 8007d48:	e9c4 8900 	strd	r8, r9, [r4]
 8007d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d50:	2501      	movs	r5, #1
 8007d52:	4628      	mov	r0, r5
 8007d54:	b00d      	add	sp, #52	@ 0x34
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fab2 	bl	80002c8 <__aeabi_dsub>
 8007d64:	a39c      	add	r3, pc, #624	@ (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	f7f8 faab 	bl	80002c8 <__aeabi_dsub>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4680      	mov	r8, r0
 8007d78:	4689      	mov	r9, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 faa3 	bl	80002c8 <__aeabi_dsub>
 8007d82:	a395      	add	r3, pc, #596	@ (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	e7dc      	b.n	8007d44 <__ieee754_rem_pio2+0x6c>
 8007d8a:	f7f8 fa9f 	bl	80002cc <__adddf3>
 8007d8e:	45a8      	cmp	r8, r5
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	d018      	beq.n	8007dc8 <__ieee754_rem_pio2+0xf0>
 8007d96:	a38c      	add	r3, pc, #560	@ (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f7f8 fa96 	bl	80002cc <__adddf3>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa8c 	bl	80002c8 <__aeabi_dsub>
 8007db0:	a385      	add	r3, pc, #532	@ (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa89 	bl	80002cc <__adddf3>
 8007dba:	f04f 35ff 	mov.w	r5, #4294967295
 8007dbe:	e9c4 8900 	strd	r8, r9, [r4]
 8007dc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007dc6:	e7c4      	b.n	8007d52 <__ieee754_rem_pio2+0x7a>
 8007dc8:	a381      	add	r3, pc, #516	@ (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa7d 	bl	80002cc <__adddf3>
 8007dd2:	a381      	add	r3, pc, #516	@ (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	4606      	mov	r6, r0
 8007dda:	460f      	mov	r7, r1
 8007ddc:	f7f8 fa76 	bl	80002cc <__adddf3>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fa6c 	bl	80002c8 <__aeabi_dsub>
 8007df0:	a379      	add	r3, pc, #484	@ (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e7de      	b.n	8007db6 <__ieee754_rem_pio2+0xde>
 8007df8:	4b82      	ldr	r3, [pc, #520]	@ (8008004 <__ieee754_rem_pio2+0x32c>)
 8007dfa:	4598      	cmp	r8, r3
 8007dfc:	f200 80d1 	bhi.w	8007fa2 <__ieee754_rem_pio2+0x2ca>
 8007e00:	f000 fafe 	bl	8008400 <fabs>
 8007e04:	ec57 6b10 	vmov	r6, r7, d0
 8007e08:	a375      	add	r3, pc, #468	@ (adr r3, 8007fe0 <__ieee754_rem_pio2+0x308>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fc11 	bl	8000638 <__aeabi_dmul>
 8007e16:	4b7c      	ldr	r3, [pc, #496]	@ (8008008 <__ieee754_rem_pio2+0x330>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fa57 	bl	80002cc <__adddf3>
 8007e1e:	f7f8 febb 	bl	8000b98 <__aeabi_d2iz>
 8007e22:	4605      	mov	r5, r0
 8007e24:	f7f8 fb9e 	bl	8000564 <__aeabi_i2d>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e30:	a363      	add	r3, pc, #396	@ (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fbff 	bl	8000638 <__aeabi_dmul>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4630      	mov	r0, r6
 8007e40:	4639      	mov	r1, r7
 8007e42:	f7f8 fa41 	bl	80002c8 <__aeabi_dsub>
 8007e46:	a360      	add	r3, pc, #384	@ (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	4682      	mov	sl, r0
 8007e4e:	468b      	mov	fp, r1
 8007e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e54:	f7f8 fbf0 	bl	8000638 <__aeabi_dmul>
 8007e58:	2d1f      	cmp	r5, #31
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	dc0c      	bgt.n	8007e7a <__ieee754_rem_pio2+0x1a2>
 8007e60:	4b6a      	ldr	r3, [pc, #424]	@ (800800c <__ieee754_rem_pio2+0x334>)
 8007e62:	1e6a      	subs	r2, r5, #1
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	4543      	cmp	r3, r8
 8007e6a:	d006      	beq.n	8007e7a <__ieee754_rem_pio2+0x1a2>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	f7f8 fa28 	bl	80002c8 <__aeabi_dsub>
 8007e78:	e00e      	b.n	8007e98 <__ieee754_rem_pio2+0x1c0>
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	f7f8 fa21 	bl	80002c8 <__aeabi_dsub>
 8007e86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	dc02      	bgt.n	8007e9e <__ieee754_rem_pio2+0x1c6>
 8007e98:	e9c4 0100 	strd	r0, r1, [r4]
 8007e9c:	e039      	b.n	8007f12 <__ieee754_rem_pio2+0x23a>
 8007e9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea8:	f7f8 fbc6 	bl	8000638 <__aeabi_dmul>
 8007eac:	4606      	mov	r6, r0
 8007eae:	460f      	mov	r7, r1
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	4659      	mov	r1, fp
 8007eb8:	f7f8 fa06 	bl	80002c8 <__aeabi_dsub>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	4689      	mov	r9, r1
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	4659      	mov	r1, fp
 8007ec8:	f7f8 f9fe 	bl	80002c8 <__aeabi_dsub>
 8007ecc:	4632      	mov	r2, r6
 8007ece:	463b      	mov	r3, r7
 8007ed0:	f7f8 f9fa 	bl	80002c8 <__aeabi_dsub>
 8007ed4:	a340      	add	r3, pc, #256	@ (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	4606      	mov	r6, r0
 8007edc:	460f      	mov	r7, r1
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fba9 	bl	8000638 <__aeabi_dmul>
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	463b      	mov	r3, r7
 8007eea:	f7f8 f9ed 	bl	80002c8 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 f9e5 	bl	80002c8 <__aeabi_dsub>
 8007efe:	9a05      	ldr	r2, [sp, #20]
 8007f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b31      	cmp	r3, #49	@ 0x31
 8007f08:	dc20      	bgt.n	8007f4c <__ieee754_rem_pio2+0x274>
 8007f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8007f0e:	46c2      	mov	sl, r8
 8007f10:	46cb      	mov	fp, r9
 8007f12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007f16:	4650      	mov	r0, sl
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 f9d3 	bl	80002c8 <__aeabi_dsub>
 8007f22:	463b      	mov	r3, r7
 8007f24:	4632      	mov	r2, r6
 8007f26:	f7f8 f9cf 	bl	80002c8 <__aeabi_dsub>
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f32:	f6bf af0e 	bge.w	8007d52 <__ieee754_rem_pio2+0x7a>
 8007f36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f40:	f8c4 8000 	str.w	r8, [r4]
 8007f44:	60a0      	str	r0, [r4, #8]
 8007f46:	60e3      	str	r3, [r4, #12]
 8007f48:	426d      	negs	r5, r5
 8007f4a:	e702      	b.n	8007d52 <__ieee754_rem_pio2+0x7a>
 8007f4c:	a326      	add	r3, pc, #152	@ (adr r3, 8007fe8 <__ieee754_rem_pio2+0x310>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f56:	f7f8 fb6f 	bl	8000638 <__aeabi_dmul>
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4640      	mov	r0, r8
 8007f64:	4649      	mov	r1, r9
 8007f66:	f7f8 f9af 	bl	80002c8 <__aeabi_dsub>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4682      	mov	sl, r0
 8007f70:	468b      	mov	fp, r1
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 f9a7 	bl	80002c8 <__aeabi_dsub>
 8007f7a:	4632      	mov	r2, r6
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	f7f8 f9a3 	bl	80002c8 <__aeabi_dsub>
 8007f82:	a31b      	add	r3, pc, #108	@ (adr r3, 8007ff0 <__ieee754_rem_pio2+0x318>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	4606      	mov	r6, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f90:	f7f8 fb52 	bl	8000638 <__aeabi_dmul>
 8007f94:	4632      	mov	r2, r6
 8007f96:	463b      	mov	r3, r7
 8007f98:	f7f8 f996 	bl	80002c8 <__aeabi_dsub>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	e764      	b.n	8007e6c <__ieee754_rem_pio2+0x194>
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008010 <__ieee754_rem_pio2+0x338>)
 8007fa4:	4598      	cmp	r8, r3
 8007fa6:	d935      	bls.n	8008014 <__ieee754_rem_pio2+0x33c>
 8007fa8:	4632      	mov	r2, r6
 8007faa:	463b      	mov	r3, r7
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f98a 	bl	80002c8 <__aeabi_dsub>
 8007fb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fb8:	e9c4 0100 	strd	r0, r1, [r4]
 8007fbc:	e69e      	b.n	8007cfc <__ieee754_rem_pio2+0x24>
 8007fbe:	bf00      	nop
 8007fc0:	54400000 	.word	0x54400000
 8007fc4:	3ff921fb 	.word	0x3ff921fb
 8007fc8:	1a626331 	.word	0x1a626331
 8007fcc:	3dd0b461 	.word	0x3dd0b461
 8007fd0:	1a600000 	.word	0x1a600000
 8007fd4:	3dd0b461 	.word	0x3dd0b461
 8007fd8:	2e037073 	.word	0x2e037073
 8007fdc:	3ba3198a 	.word	0x3ba3198a
 8007fe0:	6dc9c883 	.word	0x6dc9c883
 8007fe4:	3fe45f30 	.word	0x3fe45f30
 8007fe8:	2e000000 	.word	0x2e000000
 8007fec:	3ba3198a 	.word	0x3ba3198a
 8007ff0:	252049c1 	.word	0x252049c1
 8007ff4:	397b839a 	.word	0x397b839a
 8007ff8:	3fe921fb 	.word	0x3fe921fb
 8007ffc:	4002d97b 	.word	0x4002d97b
 8008000:	3ff921fb 	.word	0x3ff921fb
 8008004:	413921fb 	.word	0x413921fb
 8008008:	3fe00000 	.word	0x3fe00000
 800800c:	08009170 	.word	0x08009170
 8008010:	7fefffff 	.word	0x7fefffff
 8008014:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008018:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800801c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008020:	4630      	mov	r0, r6
 8008022:	460f      	mov	r7, r1
 8008024:	f7f8 fdb8 	bl	8000b98 <__aeabi_d2iz>
 8008028:	f7f8 fa9c 	bl	8000564 <__aeabi_i2d>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008038:	f7f8 f946 	bl	80002c8 <__aeabi_dsub>
 800803c:	4b22      	ldr	r3, [pc, #136]	@ (80080c8 <__ieee754_rem_pio2+0x3f0>)
 800803e:	2200      	movs	r2, #0
 8008040:	f7f8 fafa 	bl	8000638 <__aeabi_dmul>
 8008044:	460f      	mov	r7, r1
 8008046:	4606      	mov	r6, r0
 8008048:	f7f8 fda6 	bl	8000b98 <__aeabi_d2iz>
 800804c:	f7f8 fa8a 	bl	8000564 <__aeabi_i2d>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800805c:	f7f8 f934 	bl	80002c8 <__aeabi_dsub>
 8008060:	4b19      	ldr	r3, [pc, #100]	@ (80080c8 <__ieee754_rem_pio2+0x3f0>)
 8008062:	2200      	movs	r2, #0
 8008064:	f7f8 fae8 	bl	8000638 <__aeabi_dmul>
 8008068:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800806c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008070:	f04f 0803 	mov.w	r8, #3
 8008074:	2600      	movs	r6, #0
 8008076:	2700      	movs	r7, #0
 8008078:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	46c2      	mov	sl, r8
 8008082:	f108 38ff 	add.w	r8, r8, #4294967295
 8008086:	f7f8 fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 800808a:	2800      	cmp	r0, #0
 800808c:	d1f4      	bne.n	8008078 <__ieee754_rem_pio2+0x3a0>
 800808e:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <__ieee754_rem_pio2+0x3f4>)
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	2302      	movs	r3, #2
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	462a      	mov	r2, r5
 8008098:	4653      	mov	r3, sl
 800809a:	4621      	mov	r1, r4
 800809c:	a806      	add	r0, sp, #24
 800809e:	f000 fa6f 	bl	8008580 <__kernel_rem_pio2>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	4605      	mov	r5, r0
 80080a8:	f6bf ae53 	bge.w	8007d52 <__ieee754_rem_pio2+0x7a>
 80080ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80080b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080b4:	e9c4 2300 	strd	r2, r3, [r4]
 80080b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80080bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80080c4:	e740      	b.n	8007f48 <__ieee754_rem_pio2+0x270>
 80080c6:	bf00      	nop
 80080c8:	41700000 	.word	0x41700000
 80080cc:	080091f0 	.word	0x080091f0

080080d0 <atan>:
 80080d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	ec55 4b10 	vmov	r4, r5, d0
 80080d8:	4bbf      	ldr	r3, [pc, #764]	@ (80083d8 <atan+0x308>)
 80080da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80080de:	429e      	cmp	r6, r3
 80080e0:	46ab      	mov	fp, r5
 80080e2:	d918      	bls.n	8008116 <atan+0x46>
 80080e4:	4bbd      	ldr	r3, [pc, #756]	@ (80083dc <atan+0x30c>)
 80080e6:	429e      	cmp	r6, r3
 80080e8:	d801      	bhi.n	80080ee <atan+0x1e>
 80080ea:	d109      	bne.n	8008100 <atan+0x30>
 80080ec:	b144      	cbz	r4, 8008100 <atan+0x30>
 80080ee:	4622      	mov	r2, r4
 80080f0:	462b      	mov	r3, r5
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 f8e9 	bl	80002cc <__adddf3>
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	e006      	b.n	800810e <atan+0x3e>
 8008100:	f1bb 0f00 	cmp.w	fp, #0
 8008104:	f340 812b 	ble.w	800835e <atan+0x28e>
 8008108:	a597      	add	r5, pc, #604	@ (adr r5, 8008368 <atan+0x298>)
 800810a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800810e:	ec45 4b10 	vmov	d0, r4, r5
 8008112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	4bb2      	ldr	r3, [pc, #712]	@ (80083e0 <atan+0x310>)
 8008118:	429e      	cmp	r6, r3
 800811a:	d813      	bhi.n	8008144 <atan+0x74>
 800811c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008120:	429e      	cmp	r6, r3
 8008122:	d80c      	bhi.n	800813e <atan+0x6e>
 8008124:	a392      	add	r3, pc, #584	@ (adr r3, 8008370 <atan+0x2a0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 f8cd 	bl	80002cc <__adddf3>
 8008132:	4bac      	ldr	r3, [pc, #688]	@ (80083e4 <atan+0x314>)
 8008134:	2200      	movs	r2, #0
 8008136:	f7f8 fd0f 	bl	8000b58 <__aeabi_dcmpgt>
 800813a:	2800      	cmp	r0, #0
 800813c:	d1e7      	bne.n	800810e <atan+0x3e>
 800813e:	f04f 3aff 	mov.w	sl, #4294967295
 8008142:	e029      	b.n	8008198 <atan+0xc8>
 8008144:	f000 f95c 	bl	8008400 <fabs>
 8008148:	4ba7      	ldr	r3, [pc, #668]	@ (80083e8 <atan+0x318>)
 800814a:	429e      	cmp	r6, r3
 800814c:	ec55 4b10 	vmov	r4, r5, d0
 8008150:	f200 80bc 	bhi.w	80082cc <atan+0x1fc>
 8008154:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008158:	429e      	cmp	r6, r3
 800815a:	f200 809e 	bhi.w	800829a <atan+0x1ca>
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f8b1 	bl	80002cc <__adddf3>
 800816a:	4b9e      	ldr	r3, [pc, #632]	@ (80083e4 <atan+0x314>)
 800816c:	2200      	movs	r2, #0
 800816e:	f7f8 f8ab 	bl	80002c8 <__aeabi_dsub>
 8008172:	2200      	movs	r2, #0
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 f8a4 	bl	80002cc <__adddf3>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4630      	mov	r0, r6
 800818a:	4639      	mov	r1, r7
 800818c:	f7f8 fb7e 	bl	800088c <__aeabi_ddiv>
 8008190:	f04f 0a00 	mov.w	sl, #0
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	4622      	mov	r2, r4
 800819a:	462b      	mov	r3, r5
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4680      	mov	r8, r0
 80081aa:	4689      	mov	r9, r1
 80081ac:	f7f8 fa44 	bl	8000638 <__aeabi_dmul>
 80081b0:	a371      	add	r3, pc, #452	@ (adr r3, 8008378 <atan+0x2a8>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	f7f8 fa3d 	bl	8000638 <__aeabi_dmul>
 80081be:	a370      	add	r3, pc, #448	@ (adr r3, 8008380 <atan+0x2b0>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f7f8 f882 	bl	80002cc <__adddf3>
 80081c8:	4632      	mov	r2, r6
 80081ca:	463b      	mov	r3, r7
 80081cc:	f7f8 fa34 	bl	8000638 <__aeabi_dmul>
 80081d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8008388 <atan+0x2b8>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 f879 	bl	80002cc <__adddf3>
 80081da:	4632      	mov	r2, r6
 80081dc:	463b      	mov	r3, r7
 80081de:	f7f8 fa2b 	bl	8000638 <__aeabi_dmul>
 80081e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008390 <atan+0x2c0>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 f870 	bl	80002cc <__adddf3>
 80081ec:	4632      	mov	r2, r6
 80081ee:	463b      	mov	r3, r7
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	a368      	add	r3, pc, #416	@ (adr r3, 8008398 <atan+0x2c8>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f8 f867 	bl	80002cc <__adddf3>
 80081fe:	4632      	mov	r2, r6
 8008200:	463b      	mov	r3, r7
 8008202:	f7f8 fa19 	bl	8000638 <__aeabi_dmul>
 8008206:	a366      	add	r3, pc, #408	@ (adr r3, 80083a0 <atan+0x2d0>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f85e 	bl	80002cc <__adddf3>
 8008210:	4642      	mov	r2, r8
 8008212:	464b      	mov	r3, r9
 8008214:	f7f8 fa10 	bl	8000638 <__aeabi_dmul>
 8008218:	a363      	add	r3, pc, #396	@ (adr r3, 80083a8 <atan+0x2d8>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	4680      	mov	r8, r0
 8008220:	4689      	mov	r9, r1
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 fa07 	bl	8000638 <__aeabi_dmul>
 800822a:	a361      	add	r3, pc, #388	@ (adr r3, 80083b0 <atan+0x2e0>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f84a 	bl	80002c8 <__aeabi_dsub>
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	f7f8 f9fe 	bl	8000638 <__aeabi_dmul>
 800823c:	a35e      	add	r3, pc, #376	@ (adr r3, 80083b8 <atan+0x2e8>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f841 	bl	80002c8 <__aeabi_dsub>
 8008246:	4632      	mov	r2, r6
 8008248:	463b      	mov	r3, r7
 800824a:	f7f8 f9f5 	bl	8000638 <__aeabi_dmul>
 800824e:	a35c      	add	r3, pc, #368	@ (adr r3, 80083c0 <atan+0x2f0>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f838 	bl	80002c8 <__aeabi_dsub>
 8008258:	4632      	mov	r2, r6
 800825a:	463b      	mov	r3, r7
 800825c:	f7f8 f9ec 	bl	8000638 <__aeabi_dmul>
 8008260:	a359      	add	r3, pc, #356	@ (adr r3, 80083c8 <atan+0x2f8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f82f 	bl	80002c8 <__aeabi_dsub>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	f7f8 f9e3 	bl	8000638 <__aeabi_dmul>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f8 f827 	bl	80002cc <__adddf3>
 800827e:	4622      	mov	r2, r4
 8008280:	462b      	mov	r3, r5
 8008282:	f7f8 f9d9 	bl	8000638 <__aeabi_dmul>
 8008286:	f1ba 3fff 	cmp.w	sl, #4294967295
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	d148      	bne.n	8008322 <atan+0x252>
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f818 	bl	80002c8 <__aeabi_dsub>
 8008298:	e72f      	b.n	80080fa <atan+0x2a>
 800829a:	4b52      	ldr	r3, [pc, #328]	@ (80083e4 <atan+0x314>)
 800829c:	2200      	movs	r2, #0
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 f811 	bl	80002c8 <__aeabi_dsub>
 80082a6:	4b4f      	ldr	r3, [pc, #316]	@ (80083e4 <atan+0x314>)
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f8 f80b 	bl	80002cc <__adddf3>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	f7f8 fae5 	bl	800088c <__aeabi_ddiv>
 80082c2:	f04f 0a01 	mov.w	sl, #1
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	e765      	b.n	8008198 <atan+0xc8>
 80082cc:	4b47      	ldr	r3, [pc, #284]	@ (80083ec <atan+0x31c>)
 80082ce:	429e      	cmp	r6, r3
 80082d0:	d21c      	bcs.n	800830c <atan+0x23c>
 80082d2:	4b47      	ldr	r3, [pc, #284]	@ (80083f0 <atan+0x320>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f7 fff5 	bl	80002c8 <__aeabi_dsub>
 80082de:	4b44      	ldr	r3, [pc, #272]	@ (80083f0 <atan+0x320>)
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	2200      	movs	r2, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 f9a5 	bl	8000638 <__aeabi_dmul>
 80082ee:	4b3d      	ldr	r3, [pc, #244]	@ (80083e4 <atan+0x314>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	f7f7 ffeb 	bl	80002cc <__adddf3>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 fac5 	bl	800088c <__aeabi_ddiv>
 8008302:	f04f 0a02 	mov.w	sl, #2
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	e745      	b.n	8008198 <atan+0xc8>
 800830c:	4622      	mov	r2, r4
 800830e:	462b      	mov	r3, r5
 8008310:	4938      	ldr	r1, [pc, #224]	@ (80083f4 <atan+0x324>)
 8008312:	2000      	movs	r0, #0
 8008314:	f7f8 faba 	bl	800088c <__aeabi_ddiv>
 8008318:	f04f 0a03 	mov.w	sl, #3
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	e73a      	b.n	8008198 <atan+0xc8>
 8008322:	4b35      	ldr	r3, [pc, #212]	@ (80083f8 <atan+0x328>)
 8008324:	4e35      	ldr	r6, [pc, #212]	@ (80083fc <atan+0x32c>)
 8008326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f7 ffcb 	bl	80002c8 <__aeabi_dsub>
 8008332:	4622      	mov	r2, r4
 8008334:	462b      	mov	r3, r5
 8008336:	f7f7 ffc7 	bl	80002c8 <__aeabi_dsub>
 800833a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008346:	f7f7 ffbf 	bl	80002c8 <__aeabi_dsub>
 800834a:	f1bb 0f00 	cmp.w	fp, #0
 800834e:	4604      	mov	r4, r0
 8008350:	460d      	mov	r5, r1
 8008352:	f6bf aedc 	bge.w	800810e <atan+0x3e>
 8008356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800835a:	461d      	mov	r5, r3
 800835c:	e6d7      	b.n	800810e <atan+0x3e>
 800835e:	a51c      	add	r5, pc, #112	@ (adr r5, 80083d0 <atan+0x300>)
 8008360:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008364:	e6d3      	b.n	800810e <atan+0x3e>
 8008366:	bf00      	nop
 8008368:	54442d18 	.word	0x54442d18
 800836c:	3ff921fb 	.word	0x3ff921fb
 8008370:	8800759c 	.word	0x8800759c
 8008374:	7e37e43c 	.word	0x7e37e43c
 8008378:	e322da11 	.word	0xe322da11
 800837c:	3f90ad3a 	.word	0x3f90ad3a
 8008380:	24760deb 	.word	0x24760deb
 8008384:	3fa97b4b 	.word	0x3fa97b4b
 8008388:	a0d03d51 	.word	0xa0d03d51
 800838c:	3fb10d66 	.word	0x3fb10d66
 8008390:	c54c206e 	.word	0xc54c206e
 8008394:	3fb745cd 	.word	0x3fb745cd
 8008398:	920083ff 	.word	0x920083ff
 800839c:	3fc24924 	.word	0x3fc24924
 80083a0:	5555550d 	.word	0x5555550d
 80083a4:	3fd55555 	.word	0x3fd55555
 80083a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80083ac:	bfa2b444 	.word	0xbfa2b444
 80083b0:	52defd9a 	.word	0x52defd9a
 80083b4:	3fadde2d 	.word	0x3fadde2d
 80083b8:	af749a6d 	.word	0xaf749a6d
 80083bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80083c0:	fe231671 	.word	0xfe231671
 80083c4:	3fbc71c6 	.word	0x3fbc71c6
 80083c8:	9998ebc4 	.word	0x9998ebc4
 80083cc:	3fc99999 	.word	0x3fc99999
 80083d0:	54442d18 	.word	0x54442d18
 80083d4:	bff921fb 	.word	0xbff921fb
 80083d8:	440fffff 	.word	0x440fffff
 80083dc:	7ff00000 	.word	0x7ff00000
 80083e0:	3fdbffff 	.word	0x3fdbffff
 80083e4:	3ff00000 	.word	0x3ff00000
 80083e8:	3ff2ffff 	.word	0x3ff2ffff
 80083ec:	40038000 	.word	0x40038000
 80083f0:	3ff80000 	.word	0x3ff80000
 80083f4:	bff00000 	.word	0xbff00000
 80083f8:	080092f8 	.word	0x080092f8
 80083fc:	08009318 	.word	0x08009318

08008400 <fabs>:
 8008400:	ec51 0b10 	vmov	r0, r1, d0
 8008404:	4602      	mov	r2, r0
 8008406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800840a:	ec43 2b10 	vmov	d0, r2, r3
 800840e:	4770      	bx	lr

08008410 <scalbn>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	ec55 4b10 	vmov	r4, r5, d0
 8008416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800841a:	4606      	mov	r6, r0
 800841c:	462b      	mov	r3, r5
 800841e:	b991      	cbnz	r1, 8008446 <scalbn+0x36>
 8008420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008424:	4323      	orrs	r3, r4
 8008426:	d03b      	beq.n	80084a0 <scalbn+0x90>
 8008428:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <scalbn+0xe8>)
 800842a:	4620      	mov	r0, r4
 800842c:	4629      	mov	r1, r5
 800842e:	2200      	movs	r2, #0
 8008430:	f7f8 f902 	bl	8000638 <__aeabi_dmul>
 8008434:	4b31      	ldr	r3, [pc, #196]	@ (80084fc <scalbn+0xec>)
 8008436:	429e      	cmp	r6, r3
 8008438:	4604      	mov	r4, r0
 800843a:	460d      	mov	r5, r1
 800843c:	da0f      	bge.n	800845e <scalbn+0x4e>
 800843e:	a326      	add	r3, pc, #152	@ (adr r3, 80084d8 <scalbn+0xc8>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	e01e      	b.n	8008484 <scalbn+0x74>
 8008446:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800844a:	4291      	cmp	r1, r2
 800844c:	d10b      	bne.n	8008466 <scalbn+0x56>
 800844e:	4622      	mov	r2, r4
 8008450:	4620      	mov	r0, r4
 8008452:	4629      	mov	r1, r5
 8008454:	f7f7 ff3a 	bl	80002cc <__adddf3>
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	e020      	b.n	80084a0 <scalbn+0x90>
 800845e:	460b      	mov	r3, r1
 8008460:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008464:	3936      	subs	r1, #54	@ 0x36
 8008466:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800846a:	4296      	cmp	r6, r2
 800846c:	dd0d      	ble.n	800848a <scalbn+0x7a>
 800846e:	2d00      	cmp	r5, #0
 8008470:	a11b      	add	r1, pc, #108	@ (adr r1, 80084e0 <scalbn+0xd0>)
 8008472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008476:	da02      	bge.n	800847e <scalbn+0x6e>
 8008478:	a11b      	add	r1, pc, #108	@ (adr r1, 80084e8 <scalbn+0xd8>)
 800847a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800847e:	a318      	add	r3, pc, #96	@ (adr r3, 80084e0 <scalbn+0xd0>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f8 f8d8 	bl	8000638 <__aeabi_dmul>
 8008488:	e7e6      	b.n	8008458 <scalbn+0x48>
 800848a:	1872      	adds	r2, r6, r1
 800848c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008490:	428a      	cmp	r2, r1
 8008492:	dcec      	bgt.n	800846e <scalbn+0x5e>
 8008494:	2a00      	cmp	r2, #0
 8008496:	dd06      	ble.n	80084a6 <scalbn+0x96>
 8008498:	f36f 531e 	bfc	r3, #20, #11
 800849c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084a0:	ec45 4b10 	vmov	d0, r4, r5
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80084aa:	da08      	bge.n	80084be <scalbn+0xae>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80084d8 <scalbn+0xc8>)
 80084b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b4:	dac3      	bge.n	800843e <scalbn+0x2e>
 80084b6:	a10e      	add	r1, pc, #56	@ (adr r1, 80084f0 <scalbn+0xe0>)
 80084b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084bc:	e7bf      	b.n	800843e <scalbn+0x2e>
 80084be:	3236      	adds	r2, #54	@ 0x36
 80084c0:	f36f 531e 	bfc	r3, #20, #11
 80084c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084c8:	4620      	mov	r0, r4
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <scalbn+0xf0>)
 80084cc:	4629      	mov	r1, r5
 80084ce:	2200      	movs	r2, #0
 80084d0:	e7d8      	b.n	8008484 <scalbn+0x74>
 80084d2:	bf00      	nop
 80084d4:	f3af 8000 	nop.w
 80084d8:	c2f8f359 	.word	0xc2f8f359
 80084dc:	01a56e1f 	.word	0x01a56e1f
 80084e0:	8800759c 	.word	0x8800759c
 80084e4:	7e37e43c 	.word	0x7e37e43c
 80084e8:	8800759c 	.word	0x8800759c
 80084ec:	fe37e43c 	.word	0xfe37e43c
 80084f0:	c2f8f359 	.word	0xc2f8f359
 80084f4:	81a56e1f 	.word	0x81a56e1f
 80084f8:	43500000 	.word	0x43500000
 80084fc:	ffff3cb0 	.word	0xffff3cb0
 8008500:	3c900000 	.word	0x3c900000

08008504 <with_errno>:
 8008504:	b510      	push	{r4, lr}
 8008506:	ed2d 8b02 	vpush	{d8}
 800850a:	eeb0 8a40 	vmov.f32	s16, s0
 800850e:	eef0 8a60 	vmov.f32	s17, s1
 8008512:	4604      	mov	r4, r0
 8008514:	f7fc fbde 	bl	8004cd4 <__errno>
 8008518:	eeb0 0a48 	vmov.f32	s0, s16
 800851c:	eef0 0a68 	vmov.f32	s1, s17
 8008520:	ecbd 8b02 	vpop	{d8}
 8008524:	6004      	str	r4, [r0, #0]
 8008526:	bd10      	pop	{r4, pc}

08008528 <xflow>:
 8008528:	4603      	mov	r3, r0
 800852a:	b507      	push	{r0, r1, r2, lr}
 800852c:	ec51 0b10 	vmov	r0, r1, d0
 8008530:	b183      	cbz	r3, 8008554 <xflow+0x2c>
 8008532:	4602      	mov	r2, r0
 8008534:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008538:	e9cd 2300 	strd	r2, r3, [sp]
 800853c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008540:	f7f8 f87a 	bl	8000638 <__aeabi_dmul>
 8008544:	ec41 0b10 	vmov	d0, r0, r1
 8008548:	2022      	movs	r0, #34	@ 0x22
 800854a:	b003      	add	sp, #12
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	f7ff bfd8 	b.w	8008504 <with_errno>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	e7ee      	b.n	8008538 <xflow+0x10>
 800855a:	0000      	movs	r0, r0
 800855c:	0000      	movs	r0, r0
	...

08008560 <__math_uflow>:
 8008560:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008568 <__math_uflow+0x8>
 8008564:	f7ff bfe0 	b.w	8008528 <xflow>
 8008568:	00000000 	.word	0x00000000
 800856c:	10000000 	.word	0x10000000

08008570 <__math_oflow>:
 8008570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008578 <__math_oflow+0x8>
 8008574:	f7ff bfd8 	b.w	8008528 <xflow>
 8008578:	00000000 	.word	0x00000000
 800857c:	70000000 	.word	0x70000000

08008580 <__kernel_rem_pio2>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	ed2d 8b02 	vpush	{d8}
 8008588:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800858c:	f112 0f14 	cmn.w	r2, #20
 8008590:	9306      	str	r3, [sp, #24]
 8008592:	9104      	str	r1, [sp, #16]
 8008594:	4bc2      	ldr	r3, [pc, #776]	@ (80088a0 <__kernel_rem_pio2+0x320>)
 8008596:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008598:	9008      	str	r0, [sp, #32]
 800859a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	9b06      	ldr	r3, [sp, #24]
 80085a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085a6:	bfa8      	it	ge
 80085a8:	1ed4      	subge	r4, r2, #3
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	bfb2      	itee	lt
 80085ae:	2400      	movlt	r4, #0
 80085b0:	2318      	movge	r3, #24
 80085b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80085b6:	f06f 0317 	mvn.w	r3, #23
 80085ba:	fb04 3303 	mla	r3, r4, r3, r3
 80085be:	eb03 0b02 	add.w	fp, r3, r2
 80085c2:	9b00      	ldr	r3, [sp, #0]
 80085c4:	9a05      	ldr	r2, [sp, #20]
 80085c6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8008890 <__kernel_rem_pio2+0x310>
 80085ca:	eb03 0802 	add.w	r8, r3, r2
 80085ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80085d0:	1aa7      	subs	r7, r4, r2
 80085d2:	ae20      	add	r6, sp, #128	@ 0x80
 80085d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80085d8:	2500      	movs	r5, #0
 80085da:	4545      	cmp	r5, r8
 80085dc:	dd12      	ble.n	8008604 <__kernel_rem_pio2+0x84>
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	aa20      	add	r2, sp, #128	@ 0x80
 80085e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80085e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80085ea:	2700      	movs	r7, #0
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	429f      	cmp	r7, r3
 80085f0:	dc2e      	bgt.n	8008650 <__kernel_rem_pio2+0xd0>
 80085f2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8008890 <__kernel_rem_pio2+0x310>
 80085f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085fe:	46a8      	mov	r8, r5
 8008600:	2600      	movs	r6, #0
 8008602:	e01b      	b.n	800863c <__kernel_rem_pio2+0xbc>
 8008604:	42ef      	cmn	r7, r5
 8008606:	d407      	bmi.n	8008618 <__kernel_rem_pio2+0x98>
 8008608:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800860c:	f7f7 ffaa 	bl	8000564 <__aeabi_i2d>
 8008610:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008614:	3501      	adds	r5, #1
 8008616:	e7e0      	b.n	80085da <__kernel_rem_pio2+0x5a>
 8008618:	ec51 0b18 	vmov	r0, r1, d8
 800861c:	e7f8      	b.n	8008610 <__kernel_rem_pio2+0x90>
 800861e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8008622:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008626:	f7f8 f807 	bl	8000638 <__aeabi_dmul>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008632:	f7f7 fe4b 	bl	80002cc <__adddf3>
 8008636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800863a:	3601      	adds	r6, #1
 800863c:	9b05      	ldr	r3, [sp, #20]
 800863e:	429e      	cmp	r6, r3
 8008640:	dded      	ble.n	800861e <__kernel_rem_pio2+0x9e>
 8008642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008646:	3701      	adds	r7, #1
 8008648:	ecaa 7b02 	vstmia	sl!, {d7}
 800864c:	3508      	adds	r5, #8
 800864e:	e7cd      	b.n	80085ec <__kernel_rem_pio2+0x6c>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	f8dd 8000 	ldr.w	r8, [sp]
 8008656:	aa0c      	add	r2, sp, #48	@ 0x30
 8008658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800865c:	930a      	str	r3, [sp, #40]	@ 0x28
 800865e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008660:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800866a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800866c:	ab98      	add	r3, sp, #608	@ 0x260
 800866e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008672:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008676:	ed8d 7b02 	vstr	d7, [sp, #8]
 800867a:	ac0c      	add	r4, sp, #48	@ 0x30
 800867c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800867e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008682:	46a1      	mov	r9, r4
 8008684:	46c2      	mov	sl, r8
 8008686:	f1ba 0f00 	cmp.w	sl, #0
 800868a:	dc77      	bgt.n	800877c <__kernel_rem_pio2+0x1fc>
 800868c:	4658      	mov	r0, fp
 800868e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008692:	f7ff febd 	bl	8008410 <scalbn>
 8008696:	ec57 6b10 	vmov	r6, r7, d0
 800869a:	2200      	movs	r2, #0
 800869c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f7 ffc8 	bl	8000638 <__aeabi_dmul>
 80086a8:	ec41 0b10 	vmov	d0, r0, r1
 80086ac:	f000 fab8 	bl	8008c20 <floor>
 80086b0:	4b7c      	ldr	r3, [pc, #496]	@ (80088a4 <__kernel_rem_pio2+0x324>)
 80086b2:	ec51 0b10 	vmov	r0, r1, d0
 80086b6:	2200      	movs	r2, #0
 80086b8:	f7f7 ffbe 	bl	8000638 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	460f      	mov	r7, r1
 80086ca:	4606      	mov	r6, r0
 80086cc:	f7f8 fa64 	bl	8000b98 <__aeabi_d2iz>
 80086d0:	9002      	str	r0, [sp, #8]
 80086d2:	f7f7 ff47 	bl	8000564 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4630      	mov	r0, r6
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f7 fdf3 	bl	80002c8 <__aeabi_dsub>
 80086e2:	f1bb 0f00 	cmp.w	fp, #0
 80086e6:	4606      	mov	r6, r0
 80086e8:	460f      	mov	r7, r1
 80086ea:	dd6c      	ble.n	80087c6 <__kernel_rem_pio2+0x246>
 80086ec:	f108 31ff 	add.w	r1, r8, #4294967295
 80086f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80086f2:	9d02      	ldr	r5, [sp, #8]
 80086f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086f8:	f1cb 0018 	rsb	r0, fp, #24
 80086fc:	fa43 f200 	asr.w	r2, r3, r0
 8008700:	4415      	add	r5, r2
 8008702:	4082      	lsls	r2, r0
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	aa0c      	add	r2, sp, #48	@ 0x30
 8008708:	9502      	str	r5, [sp, #8]
 800870a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800870e:	f1cb 0217 	rsb	r2, fp, #23
 8008712:	fa43 f902 	asr.w	r9, r3, r2
 8008716:	f1b9 0f00 	cmp.w	r9, #0
 800871a:	dd64      	ble.n	80087e6 <__kernel_rem_pio2+0x266>
 800871c:	9b02      	ldr	r3, [sp, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	3301      	adds	r3, #1
 8008722:	9302      	str	r3, [sp, #8]
 8008724:	4615      	mov	r5, r2
 8008726:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800872a:	4590      	cmp	r8, r2
 800872c:	f300 80a1 	bgt.w	8008872 <__kernel_rem_pio2+0x2f2>
 8008730:	f1bb 0f00 	cmp.w	fp, #0
 8008734:	dd07      	ble.n	8008746 <__kernel_rem_pio2+0x1c6>
 8008736:	f1bb 0f01 	cmp.w	fp, #1
 800873a:	f000 80c1 	beq.w	80088c0 <__kernel_rem_pio2+0x340>
 800873e:	f1bb 0f02 	cmp.w	fp, #2
 8008742:	f000 80c8 	beq.w	80088d6 <__kernel_rem_pio2+0x356>
 8008746:	f1b9 0f02 	cmp.w	r9, #2
 800874a:	d14c      	bne.n	80087e6 <__kernel_rem_pio2+0x266>
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	4955      	ldr	r1, [pc, #340]	@ (80088a8 <__kernel_rem_pio2+0x328>)
 8008752:	2000      	movs	r0, #0
 8008754:	f7f7 fdb8 	bl	80002c8 <__aeabi_dsub>
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	2d00      	cmp	r5, #0
 800875e:	d042      	beq.n	80087e6 <__kernel_rem_pio2+0x266>
 8008760:	4658      	mov	r0, fp
 8008762:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8008898 <__kernel_rem_pio2+0x318>
 8008766:	f7ff fe53 	bl	8008410 <scalbn>
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	ec53 2b10 	vmov	r2, r3, d0
 8008772:	f7f7 fda9 	bl	80002c8 <__aeabi_dsub>
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	e034      	b.n	80087e6 <__kernel_rem_pio2+0x266>
 800877c:	4b4b      	ldr	r3, [pc, #300]	@ (80088ac <__kernel_rem_pio2+0x32c>)
 800877e:	2200      	movs	r2, #0
 8008780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008784:	f7f7 ff58 	bl	8000638 <__aeabi_dmul>
 8008788:	f7f8 fa06 	bl	8000b98 <__aeabi_d2iz>
 800878c:	f7f7 feea 	bl	8000564 <__aeabi_i2d>
 8008790:	4b47      	ldr	r3, [pc, #284]	@ (80088b0 <__kernel_rem_pio2+0x330>)
 8008792:	2200      	movs	r2, #0
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	f7f7 ff4e 	bl	8000638 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087a4:	f7f7 fd90 	bl	80002c8 <__aeabi_dsub>
 80087a8:	f7f8 f9f6 	bl	8000b98 <__aeabi_d2iz>
 80087ac:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80087b0:	f849 0b04 	str.w	r0, [r9], #4
 80087b4:	4639      	mov	r1, r7
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7f7 fd88 	bl	80002cc <__adddf3>
 80087bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c4:	e75f      	b.n	8008686 <__kernel_rem_pio2+0x106>
 80087c6:	d107      	bne.n	80087d8 <__kernel_rem_pio2+0x258>
 80087c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80087cc:	aa0c      	add	r2, sp, #48	@ 0x30
 80087ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80087d6:	e79e      	b.n	8008716 <__kernel_rem_pio2+0x196>
 80087d8:	4b36      	ldr	r3, [pc, #216]	@ (80088b4 <__kernel_rem_pio2+0x334>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f8 f9b2 	bl	8000b44 <__aeabi_dcmpge>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d143      	bne.n	800886c <__kernel_rem_pio2+0x2ec>
 80087e4:	4681      	mov	r9, r0
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	4630      	mov	r0, r6
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f8 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f000 80c1 	beq.w	800897a <__kernel_rem_pio2+0x3fa>
 80087f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80087fc:	2200      	movs	r2, #0
 80087fe:	9900      	ldr	r1, [sp, #0]
 8008800:	428b      	cmp	r3, r1
 8008802:	da70      	bge.n	80088e6 <__kernel_rem_pio2+0x366>
 8008804:	2a00      	cmp	r2, #0
 8008806:	f000 808b 	beq.w	8008920 <__kernel_rem_pio2+0x3a0>
 800880a:	f108 38ff 	add.w	r8, r8, #4294967295
 800880e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008810:	f1ab 0b18 	sub.w	fp, fp, #24
 8008814:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f6      	beq.n	800880a <__kernel_rem_pio2+0x28a>
 800881c:	4658      	mov	r0, fp
 800881e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8008898 <__kernel_rem_pio2+0x318>
 8008822:	f7ff fdf5 	bl	8008410 <scalbn>
 8008826:	f108 0301 	add.w	r3, r8, #1
 800882a:	00da      	lsls	r2, r3, #3
 800882c:	9205      	str	r2, [sp, #20]
 800882e:	ec55 4b10 	vmov	r4, r5, d0
 8008832:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008834:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80088ac <__kernel_rem_pio2+0x32c>
 8008838:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800883c:	4646      	mov	r6, r8
 800883e:	f04f 0a00 	mov.w	sl, #0
 8008842:	2e00      	cmp	r6, #0
 8008844:	f280 80d1 	bge.w	80089ea <__kernel_rem_pio2+0x46a>
 8008848:	4644      	mov	r4, r8
 800884a:	2c00      	cmp	r4, #0
 800884c:	f2c0 80ff 	blt.w	8008a4e <__kernel_rem_pio2+0x4ce>
 8008850:	4b19      	ldr	r3, [pc, #100]	@ (80088b8 <__kernel_rem_pio2+0x338>)
 8008852:	461f      	mov	r7, r3
 8008854:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008856:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800885a:	9306      	str	r3, [sp, #24]
 800885c:	f04f 0a00 	mov.w	sl, #0
 8008860:	f04f 0b00 	mov.w	fp, #0
 8008864:	2600      	movs	r6, #0
 8008866:	eba8 0504 	sub.w	r5, r8, r4
 800886a:	e0e4      	b.n	8008a36 <__kernel_rem_pio2+0x4b6>
 800886c:	f04f 0902 	mov.w	r9, #2
 8008870:	e754      	b.n	800871c <__kernel_rem_pio2+0x19c>
 8008872:	f854 3b04 	ldr.w	r3, [r4], #4
 8008876:	bb0d      	cbnz	r5, 80088bc <__kernel_rem_pio2+0x33c>
 8008878:	b123      	cbz	r3, 8008884 <__kernel_rem_pio2+0x304>
 800887a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800887e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008882:	2301      	movs	r3, #1
 8008884:	3201      	adds	r2, #1
 8008886:	461d      	mov	r5, r3
 8008888:	e74f      	b.n	800872a <__kernel_rem_pio2+0x1aa>
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w
	...
 800889c:	3ff00000 	.word	0x3ff00000
 80088a0:	08009378 	.word	0x08009378
 80088a4:	40200000 	.word	0x40200000
 80088a8:	3ff00000 	.word	0x3ff00000
 80088ac:	3e700000 	.word	0x3e700000
 80088b0:	41700000 	.word	0x41700000
 80088b4:	3fe00000 	.word	0x3fe00000
 80088b8:	08009338 	.word	0x08009338
 80088bc:	1acb      	subs	r3, r1, r3
 80088be:	e7de      	b.n	800887e <__kernel_rem_pio2+0x2fe>
 80088c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80088c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80088c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80088ce:	a90c      	add	r1, sp, #48	@ 0x30
 80088d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80088d4:	e737      	b.n	8008746 <__kernel_rem_pio2+0x1c6>
 80088d6:	f108 32ff 	add.w	r2, r8, #4294967295
 80088da:	ab0c      	add	r3, sp, #48	@ 0x30
 80088dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80088e4:	e7f3      	b.n	80088ce <__kernel_rem_pio2+0x34e>
 80088e6:	a90c      	add	r1, sp, #48	@ 0x30
 80088e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	430a      	orrs	r2, r1
 80088f0:	e785      	b.n	80087fe <__kernel_rem_pio2+0x27e>
 80088f2:	3401      	adds	r4, #1
 80088f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	d0fa      	beq.n	80088f2 <__kernel_rem_pio2+0x372>
 80088fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008902:	eb0d 0503 	add.w	r5, sp, r3
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	aa20      	add	r2, sp, #128	@ 0x80
 800890a:	4443      	add	r3, r8
 800890c:	f108 0701 	add.w	r7, r8, #1
 8008910:	3d98      	subs	r5, #152	@ 0x98
 8008912:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008916:	4444      	add	r4, r8
 8008918:	42bc      	cmp	r4, r7
 800891a:	da04      	bge.n	8008926 <__kernel_rem_pio2+0x3a6>
 800891c:	46a0      	mov	r8, r4
 800891e:	e6a2      	b.n	8008666 <__kernel_rem_pio2+0xe6>
 8008920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008922:	2401      	movs	r4, #1
 8008924:	e7e6      	b.n	80088f4 <__kernel_rem_pio2+0x374>
 8008926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008928:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800892c:	f7f7 fe1a 	bl	8000564 <__aeabi_i2d>
 8008930:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8008bf0 <__kernel_rem_pio2+0x670>
 8008934:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008938:	ed8d 7b02 	vstr	d7, [sp, #8]
 800893c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008940:	46b2      	mov	sl, r6
 8008942:	f04f 0800 	mov.w	r8, #0
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	4598      	cmp	r8, r3
 800894a:	dd05      	ble.n	8008958 <__kernel_rem_pio2+0x3d8>
 800894c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008950:	3701      	adds	r7, #1
 8008952:	eca5 7b02 	vstmia	r5!, {d7}
 8008956:	e7df      	b.n	8008918 <__kernel_rem_pio2+0x398>
 8008958:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800895c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_dmul>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896c:	f7f7 fcae 	bl	80002cc <__adddf3>
 8008970:	f108 0801 	add.w	r8, r8, #1
 8008974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008978:	e7e5      	b.n	8008946 <__kernel_rem_pio2+0x3c6>
 800897a:	f1cb 0000 	rsb	r0, fp, #0
 800897e:	ec47 6b10 	vmov	d0, r6, r7
 8008982:	f7ff fd45 	bl	8008410 <scalbn>
 8008986:	ec55 4b10 	vmov	r4, r5, d0
 800898a:	4b9b      	ldr	r3, [pc, #620]	@ (8008bf8 <__kernel_rem_pio2+0x678>)
 800898c:	2200      	movs	r2, #0
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f8d7 	bl	8000b44 <__aeabi_dcmpge>
 8008996:	b300      	cbz	r0, 80089da <__kernel_rem_pio2+0x45a>
 8008998:	4b98      	ldr	r3, [pc, #608]	@ (8008bfc <__kernel_rem_pio2+0x67c>)
 800899a:	2200      	movs	r2, #0
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f7 fe4a 	bl	8000638 <__aeabi_dmul>
 80089a4:	f7f8 f8f8 	bl	8000b98 <__aeabi_d2iz>
 80089a8:	4606      	mov	r6, r0
 80089aa:	f7f7 fddb 	bl	8000564 <__aeabi_i2d>
 80089ae:	4b92      	ldr	r3, [pc, #584]	@ (8008bf8 <__kernel_rem_pio2+0x678>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fe41 	bl	8000638 <__aeabi_dmul>
 80089b6:	460b      	mov	r3, r1
 80089b8:	4602      	mov	r2, r0
 80089ba:	4629      	mov	r1, r5
 80089bc:	4620      	mov	r0, r4
 80089be:	f7f7 fc83 	bl	80002c8 <__aeabi_dsub>
 80089c2:	f7f8 f8e9 	bl	8000b98 <__aeabi_d2iz>
 80089c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80089c8:	f10b 0b18 	add.w	fp, fp, #24
 80089cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80089d0:	f108 0801 	add.w	r8, r8, #1
 80089d4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80089d8:	e720      	b.n	800881c <__kernel_rem_pio2+0x29c>
 80089da:	4620      	mov	r0, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	f7f8 f8db 	bl	8000b98 <__aeabi_d2iz>
 80089e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80089e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80089e8:	e718      	b.n	800881c <__kernel_rem_pio2+0x29c>
 80089ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80089ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089f0:	f7f7 fdb8 	bl	8000564 <__aeabi_i2d>
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	f7f7 fe1e 	bl	8000638 <__aeabi_dmul>
 80089fc:	4652      	mov	r2, sl
 80089fe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008a02:	465b      	mov	r3, fp
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fe16 	bl	8000638 <__aeabi_dmul>
 8008a0c:	3e01      	subs	r6, #1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	e716      	b.n	8008842 <__kernel_rem_pio2+0x2c2>
 8008a14:	9906      	ldr	r1, [sp, #24]
 8008a16:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008a1a:	9106      	str	r1, [sp, #24]
 8008a1c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008a20:	f7f7 fe0a 	bl	8000638 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4650      	mov	r0, sl
 8008a2a:	4659      	mov	r1, fp
 8008a2c:	f7f7 fc4e 	bl	80002cc <__adddf3>
 8008a30:	3601      	adds	r6, #1
 8008a32:	4682      	mov	sl, r0
 8008a34:	468b      	mov	fp, r1
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	429e      	cmp	r6, r3
 8008a3a:	dc01      	bgt.n	8008a40 <__kernel_rem_pio2+0x4c0>
 8008a3c:	42ae      	cmp	r6, r5
 8008a3e:	dde9      	ble.n	8008a14 <__kernel_rem_pio2+0x494>
 8008a40:	ab48      	add	r3, sp, #288	@ 0x120
 8008a42:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a46:	e9c5 ab00 	strd	sl, fp, [r5]
 8008a4a:	3c01      	subs	r4, #1
 8008a4c:	e6fd      	b.n	800884a <__kernel_rem_pio2+0x2ca>
 8008a4e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	dc0b      	bgt.n	8008a6c <__kernel_rem_pio2+0x4ec>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc35      	bgt.n	8008ac4 <__kernel_rem_pio2+0x544>
 8008a58:	d059      	beq.n	8008b0e <__kernel_rem_pio2+0x58e>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	f003 0007 	and.w	r0, r3, #7
 8008a60:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008a64:	ecbd 8b02 	vpop	{d8}
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d1f3      	bne.n	8008a5a <__kernel_rem_pio2+0x4da>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a78:	eb0d 0403 	add.w	r4, sp, r3
 8008a7c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008a80:	4625      	mov	r5, r4
 8008a82:	46c2      	mov	sl, r8
 8008a84:	f1ba 0f00 	cmp.w	sl, #0
 8008a88:	dc69      	bgt.n	8008b5e <__kernel_rem_pio2+0x5de>
 8008a8a:	4645      	mov	r5, r8
 8008a8c:	2d01      	cmp	r5, #1
 8008a8e:	f300 8087 	bgt.w	8008ba0 <__kernel_rem_pio2+0x620>
 8008a92:	9c05      	ldr	r4, [sp, #20]
 8008a94:	ab48      	add	r3, sp, #288	@ 0x120
 8008a96:	441c      	add	r4, r3
 8008a98:	2000      	movs	r0, #0
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f1b8 0f01 	cmp.w	r8, #1
 8008aa0:	f300 809c 	bgt.w	8008bdc <__kernel_rem_pio2+0x65c>
 8008aa4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8008aa8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	f040 80a6 	bne.w	8008c00 <__kernel_rem_pio2+0x680>
 8008ab4:	9b04      	ldr	r3, [sp, #16]
 8008ab6:	e9c3 5600 	strd	r5, r6, [r3]
 8008aba:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008abe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008ac2:	e7ca      	b.n	8008a5a <__kernel_rem_pio2+0x4da>
 8008ac4:	9d05      	ldr	r5, [sp, #20]
 8008ac6:	ab48      	add	r3, sp, #288	@ 0x120
 8008ac8:	441d      	add	r5, r3
 8008aca:	4644      	mov	r4, r8
 8008acc:	2000      	movs	r0, #0
 8008ace:	2100      	movs	r1, #0
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	da35      	bge.n	8008b40 <__kernel_rem_pio2+0x5c0>
 8008ad4:	f1b9 0f00 	cmp.w	r9, #0
 8008ad8:	d038      	beq.n	8008b4c <__kernel_rem_pio2+0x5cc>
 8008ada:	4602      	mov	r2, r0
 8008adc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ae0:	9c04      	ldr	r4, [sp, #16]
 8008ae2:	e9c4 2300 	strd	r2, r3, [r4]
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008aee:	f7f7 fbeb 	bl	80002c8 <__aeabi_dsub>
 8008af2:	ad4a      	add	r5, sp, #296	@ 0x128
 8008af4:	2401      	movs	r4, #1
 8008af6:	45a0      	cmp	r8, r4
 8008af8:	da2b      	bge.n	8008b52 <__kernel_rem_pio2+0x5d2>
 8008afa:	f1b9 0f00 	cmp.w	r9, #0
 8008afe:	d002      	beq.n	8008b06 <__kernel_rem_pio2+0x586>
 8008b00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b04:	4619      	mov	r1, r3
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b0c:	e7a5      	b.n	8008a5a <__kernel_rem_pio2+0x4da>
 8008b0e:	9c05      	ldr	r4, [sp, #20]
 8008b10:	ab48      	add	r3, sp, #288	@ 0x120
 8008b12:	441c      	add	r4, r3
 8008b14:	2000      	movs	r0, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	da09      	bge.n	8008b32 <__kernel_rem_pio2+0x5b2>
 8008b1e:	f1b9 0f00 	cmp.w	r9, #0
 8008b22:	d002      	beq.n	8008b2a <__kernel_rem_pio2+0x5aa>
 8008b24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b28:	4619      	mov	r1, r3
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	e9c3 0100 	strd	r0, r1, [r3]
 8008b30:	e793      	b.n	8008a5a <__kernel_rem_pio2+0x4da>
 8008b32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b36:	f7f7 fbc9 	bl	80002cc <__adddf3>
 8008b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b3e:	e7eb      	b.n	8008b18 <__kernel_rem_pio2+0x598>
 8008b40:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008b44:	f7f7 fbc2 	bl	80002cc <__adddf3>
 8008b48:	3c01      	subs	r4, #1
 8008b4a:	e7c1      	b.n	8008ad0 <__kernel_rem_pio2+0x550>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	e7c6      	b.n	8008ae0 <__kernel_rem_pio2+0x560>
 8008b52:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008b56:	f7f7 fbb9 	bl	80002cc <__adddf3>
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	e7cb      	b.n	8008af6 <__kernel_rem_pio2+0x576>
 8008b5e:	ed35 7b02 	vldmdb	r5!, {d7}
 8008b62:	ed8d 7b00 	vstr	d7, [sp]
 8008b66:	ed95 7b02 	vldr	d7, [r5, #8]
 8008b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b6e:	ec53 2b17 	vmov	r2, r3, d7
 8008b72:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b76:	f7f7 fba9 	bl	80002cc <__adddf3>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b86:	f7f7 fb9f 	bl	80002c8 <__aeabi_dsub>
 8008b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b8e:	f7f7 fb9d 	bl	80002cc <__adddf3>
 8008b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b96:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008b9a:	e9c5 6700 	strd	r6, r7, [r5]
 8008b9e:	e771      	b.n	8008a84 <__kernel_rem_pio2+0x504>
 8008ba0:	ed34 7b02 	vldmdb	r4!, {d7}
 8008ba4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008ba8:	ec51 0b17 	vmov	r0, r1, d7
 8008bac:	4652      	mov	r2, sl
 8008bae:	465b      	mov	r3, fp
 8008bb0:	ed8d 7b00 	vstr	d7, [sp]
 8008bb4:	f7f7 fb8a 	bl	80002cc <__adddf3>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bc4:	f7f7 fb80 	bl	80002c8 <__aeabi_dsub>
 8008bc8:	4652      	mov	r2, sl
 8008bca:	465b      	mov	r3, fp
 8008bcc:	f7f7 fb7e 	bl	80002cc <__adddf3>
 8008bd0:	3d01      	subs	r5, #1
 8008bd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008bd6:	e9c4 6700 	strd	r6, r7, [r4]
 8008bda:	e757      	b.n	8008a8c <__kernel_rem_pio2+0x50c>
 8008bdc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008be0:	f7f7 fb74 	bl	80002cc <__adddf3>
 8008be4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008be8:	e758      	b.n	8008a9c <__kernel_rem_pio2+0x51c>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
	...
 8008bf8:	41700000 	.word	0x41700000
 8008bfc:	3e700000 	.word	0x3e700000
 8008c00:	9b04      	ldr	r3, [sp, #16]
 8008c02:	9a04      	ldr	r2, [sp, #16]
 8008c04:	601d      	str	r5, [r3, #0]
 8008c06:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8008c0a:	605c      	str	r4, [r3, #4]
 8008c0c:	609f      	str	r7, [r3, #8]
 8008c0e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8008c12:	60d3      	str	r3, [r2, #12]
 8008c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c18:	6110      	str	r0, [r2, #16]
 8008c1a:	6153      	str	r3, [r2, #20]
 8008c1c:	e71d      	b.n	8008a5a <__kernel_rem_pio2+0x4da>
 8008c1e:	bf00      	nop

08008c20 <floor>:
 8008c20:	ec51 0b10 	vmov	r0, r1, d0
 8008c24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008c30:	2e13      	cmp	r6, #19
 8008c32:	460c      	mov	r4, r1
 8008c34:	4605      	mov	r5, r0
 8008c36:	4680      	mov	r8, r0
 8008c38:	dc34      	bgt.n	8008ca4 <floor+0x84>
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	da17      	bge.n	8008c6e <floor+0x4e>
 8008c3e:	a332      	add	r3, pc, #200	@ (adr r3, 8008d08 <floor+0xe8>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 fb42 	bl	80002cc <__adddf3>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f7f7 ff84 	bl	8000b58 <__aeabi_dcmpgt>
 8008c50:	b150      	cbz	r0, 8008c68 <floor+0x48>
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	da55      	bge.n	8008d02 <floor+0xe2>
 8008c56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008c5a:	432c      	orrs	r4, r5
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	42ac      	cmp	r4, r5
 8008c60:	4c2b      	ldr	r4, [pc, #172]	@ (8008d10 <floor+0xf0>)
 8008c62:	bf08      	it	eq
 8008c64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	e023      	b.n	8008cb6 <floor+0x96>
 8008c6e:	4f29      	ldr	r7, [pc, #164]	@ (8008d14 <floor+0xf4>)
 8008c70:	4137      	asrs	r7, r6
 8008c72:	ea01 0307 	and.w	r3, r1, r7
 8008c76:	4303      	orrs	r3, r0
 8008c78:	d01d      	beq.n	8008cb6 <floor+0x96>
 8008c7a:	a323      	add	r3, pc, #140	@ (adr r3, 8008d08 <floor+0xe8>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fb24 	bl	80002cc <__adddf3>
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	f7f7 ff66 	bl	8000b58 <__aeabi_dcmpgt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d0eb      	beq.n	8008c68 <floor+0x48>
 8008c90:	2c00      	cmp	r4, #0
 8008c92:	bfbe      	ittt	lt
 8008c94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008c98:	4133      	asrlt	r3, r6
 8008c9a:	18e4      	addlt	r4, r4, r3
 8008c9c:	ea24 0407 	bic.w	r4, r4, r7
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	e7e1      	b.n	8008c68 <floor+0x48>
 8008ca4:	2e33      	cmp	r6, #51	@ 0x33
 8008ca6:	dd0a      	ble.n	8008cbe <floor+0x9e>
 8008ca8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008cac:	d103      	bne.n	8008cb6 <floor+0x96>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	f7f7 fb0b 	bl	80002cc <__adddf3>
 8008cb6:	ec41 0b10 	vmov	d0, r0, r1
 8008cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008cc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008cc6:	40df      	lsrs	r7, r3
 8008cc8:	4207      	tst	r7, r0
 8008cca:	d0f4      	beq.n	8008cb6 <floor+0x96>
 8008ccc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d08 <floor+0xe8>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fafb 	bl	80002cc <__adddf3>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f7f7 ff3d 	bl	8000b58 <__aeabi_dcmpgt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0c2      	beq.n	8008c68 <floor+0x48>
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	da0a      	bge.n	8008cfc <floor+0xdc>
 8008ce6:	2e14      	cmp	r6, #20
 8008ce8:	d101      	bne.n	8008cee <floor+0xce>
 8008cea:	3401      	adds	r4, #1
 8008cec:	e006      	b.n	8008cfc <floor+0xdc>
 8008cee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	40b3      	lsls	r3, r6
 8008cf6:	441d      	add	r5, r3
 8008cf8:	4545      	cmp	r5, r8
 8008cfa:	d3f6      	bcc.n	8008cea <floor+0xca>
 8008cfc:	ea25 0507 	bic.w	r5, r5, r7
 8008d00:	e7b2      	b.n	8008c68 <floor+0x48>
 8008d02:	2500      	movs	r5, #0
 8008d04:	462c      	mov	r4, r5
 8008d06:	e7af      	b.n	8008c68 <floor+0x48>
 8008d08:	8800759c 	.word	0x8800759c
 8008d0c:	7e37e43c 	.word	0x7e37e43c
 8008d10:	bff00000 	.word	0xbff00000
 8008d14:	000fffff 	.word	0x000fffff

08008d18 <_init>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr

08008d24 <_fini>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr
