
20250311_meka5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08009cf8  08009cf8  0000acf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a340  0800a340  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a340  0800a340  0000b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a348  0800a348  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a348  0800a348  0000b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a34c  0800a34c  0000b34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a350  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001d4  0800a524  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800a524  0000c498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f974  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002639  00000000  00000000  0001bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0d  00000000  00000000  0001eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023829  00000000  00000000  0001fafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cba  00000000  00000000  00043326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d01  00000000  00000000  00054fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  00128d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0012ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ce0 	.word	0x08009ce0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009ce0 	.word	0x08009ce0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <STprintf+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fd79 	bl	8005a5c <setbuf>
	Huart = huart;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <STprintf+0x28>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	200001f0 	.word	0x200001f0

08000f80 <_write>:

int _write(int file,char *ptr,int len){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <_write+0x28>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	f003 f830 	bl	8003ffc <HAL_UART_Transmit>
	return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	FAF = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <getDataIT+0x20>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	@ (8000fd0 <getDataIT+0x24>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f003 f8a7 	bl	8004112 <HAL_UART_Receive_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000201 	.word	0x20000201
 8000fd0:	200001ff 	.word	0x200001ff

08000fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	FAF = 1;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <HAL_UART_RxCpltCallback+0x94>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2baf      	cmp	r3, #175	@ 0xaf
 8000fe8:	d106      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 8000ff0:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001000:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b09      	cmp	r3, #9
 8001008:	dd02      	ble.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 8001022:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800102c:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	d10f      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800103e:	f000 f821 	bl	8001084 <ChSUM>
 8001042:	4603      	mov	r3, r0
 8001044:	2bed      	cmp	r3, #237	@ 0xed
 8001046:	d103      	bne.n	8001050 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <HAL_UART_RxCpltCallback+0xac>)
 800104c:	f000 f846 	bl	80010dc <AddStruct>
			}
			GIcount = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f003 f859 	bl	8004112 <HAL_UART_Receive_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000201 	.word	0x20000201
 800106c:	200001ff 	.word	0x200001ff
 8001070:	20000200 	.word	0x20000200
 8001074:	2000021c 	.word	0x2000021c
 8001078:	20000220 	.word	0x20000220
 800107c:	200001f4 	.word	0x200001f4
 8001080:	20000204 	.word	0x20000204

08001084 <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	330a      	adds	r3, #10
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2bed      	cmp	r3, #237	@ 0xed
 8001094:	d11b      	bne.n	80010ce <ChSUM+0x4a>
		uint8_t revsum = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e009      	b.n	80010b4 <ChSUM+0x30>
			revsum += (int)Adata[i];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4413      	add	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	ddf2      	ble.n	80010a0 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3309      	adds	r3, #9
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d101      	bne.n	80010ca <ChSUM+0x46>
			return 0xed;
 80010c6:	23ed      	movs	r3, #237	@ 0xed
 80010c8:	e002      	b.n	80010d0 <ChSUM+0x4c>
		}else{
			return 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 80010ce:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8bb 	bl	8001262 <StructInit>
	Udata->LX = Adata[1];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	789a      	ldrb	r2, [r3, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	795a      	ldrb	r2, [r3, #5]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	78da      	ldrb	r2, [r3, #3]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	791a      	ldrb	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	799a      	ldrb	r2, [r3, #6]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3307      	adds	r3, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <AddStruct+0x54>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <AddStruct+0x68>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3307      	adds	r3, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <AddStruct+0x7c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3307      	adds	r3, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <AddStruct+0x90>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3307      	adds	r3, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <AddStruct+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3307      	adds	r3, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <AddStruct+0xb8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3307      	adds	r3, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <AddStruct+0xcc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3307      	adds	r3, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da02      	bge.n	80011ba <AddStruct+0xde>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3308      	adds	r3, #8
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <AddStruct+0xf2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3308      	adds	r3, #8
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <AddStruct+0x106>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <AddStruct+0x11a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3308      	adds	r3, #8
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <AddStruct+0x12e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <AddStruct+0x142>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <AddStruct+0x156>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3308      	adds	r3, #8
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <AddStruct+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3308      	adds	r3, #8
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <AddStruct+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	755a      	strb	r2, [r3, #21]

	return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <StructInit>:

void StructInit(getdata* Udata){
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	755a      	strb	r2, [r3, #21]

	return;
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 ffdb 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f895 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 fa57 	bl	80017bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800130e:	f000 fa2b 	bl	8001768 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001312:	f000 f8ef 	bl	80014f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001316:	f000 f98b 	bl	8001630 <MX_TIM2_Init>
  MX_UART5_Init();
 800131a:	f000 f9fb 	bl	8001714 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 800131e:	483d      	ldr	r0, [pc, #244]	@ (8001414 <main+0x118>)
 8001320:	f7ff fe18 	bl	8000f54 <STprintf>
  uint8_t Out[8] = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_PWM_Start(&htim1, TIMCH_1);
 800132c:	2100      	movs	r1, #0
 800132e:	483a      	ldr	r0, [pc, #232]	@ (8001418 <main+0x11c>)
 8001330:	f002 f93a 	bl	80035a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIMCH_2);
 8001334:	2104      	movs	r1, #4
 8001336:	4838      	ldr	r0, [pc, #224]	@ (8001418 <main+0x11c>)
 8001338:	f002 f936 	bl	80035a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIMCH_2);
 800133c:	2104      	movs	r1, #4
 800133e:	4837      	ldr	r0, [pc, #220]	@ (800141c <main+0x120>)
 8001340:	f002 f932 	bl	80035a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIMCH_1);
 8001344:	2100      	movs	r1, #0
 8001346:	4835      	ldr	r0, [pc, #212]	@ (800141c <main+0x120>)
 8001348:	f002 f92e 	bl	80035a8 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart5);
 800134c:	4834      	ldr	r0, [pc, #208]	@ (8001420 <main+0x124>)
 800134e:	f7ff fe2d 	bl	8000fac <getDataIT>
//		  AllShowP(data);
//	  }
//	  printf("%d ",FAF);
//	  printf("LX:%+4d LY:%+4d RX:%+4d RY:%+4d \r\n",halfX(data.LX),halfY(data.LY),halfX(data.RX),halfY(data.RY));
//	  HAL_Delay(250);
	  MoveST(Out,data.LX,data.LY,data.RY);
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <main+0x128>)
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <main+0x128>)
 8001358:	785a      	ldrb	r2, [r3, #1]
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <main+0x128>)
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	4638      	mov	r0, r7
 8001360:	f000 fae6 	bl	8001930 <MoveST>
	  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_14, Out[0]);
 8001364:	783b      	ldrb	r3, [r7, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800136c:	482e      	ldr	r0, [pc, #184]	@ (8001428 <main+0x12c>)
 800136e:	f001 fb4f 	bl	8002a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_Pin_7,	Out[1]);
 8001372:	787b      	ldrb	r3, [r7, #1]
 8001374:	461a      	mov	r2, r3
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	482c      	ldr	r0, [pc, #176]	@ (800142c <main+0x130>)
 800137a:	f001 fb49 	bl	8002a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_Pin_4, 	Out[2]);
 800137e:	78bb      	ldrb	r3, [r7, #2]
 8001380:	461a      	mov	r2, r3
 8001382:	2110      	movs	r1, #16
 8001384:	4829      	ldr	r0, [pc, #164]	@ (800142c <main+0x130>)
 8001386:	f001 fb43 	bl	8002a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_Pin_7, 	Out[3]);
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	461a      	mov	r2, r3
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	4825      	ldr	r0, [pc, #148]	@ (8001428 <main+0x12c>)
 8001392:	f001 fb3d 	bl	8002a10 <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_1,0xff - Out[4]);
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <main+0x11c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIMCH_2,0xff - Out[5]);
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <main+0x11c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_2,0xff - Out[6]);
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <main+0x120>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIMCH_1,0xff - Out[7]);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <main+0x120>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	635a      	str	r2, [r3, #52]	@ 0x34
	  printf("左上 %d %2X 右上 %d %2X 左下 %d %2X 右下 %d %2X\r\n",!Out[0],0xff - Out[4],Out[1],Out[5],!Out[2],0xff - Out[6],Out[3],Out[7]);
 80013c6:	783b      	ldrb	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461e      	mov	r6, r3
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	469c      	mov	ip, r3
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	4619      	mov	r1, r3
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80013f6:	78fc      	ldrb	r4, [r7, #3]
 80013f8:	79fd      	ldrb	r5, [r7, #7]
 80013fa:	9504      	str	r5, [sp, #16]
 80013fc:	9403      	str	r4, [sp, #12]
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	9001      	str	r0, [sp, #4]
 8001402:	9100      	str	r1, [sp, #0]
 8001404:	4663      	mov	r3, ip
 8001406:	4631      	mov	r1, r6
 8001408:	4809      	ldr	r0, [pc, #36]	@ (8001430 <main+0x134>)
 800140a:	f004 fb15 	bl	8005a38 <iprintf>
	  HAL_TIM_PWM_Start(&htim1, TIMCH_1);
 800140e:	bf00      	nop
 8001410:	e78c      	b.n	800132c <main+0x30>
 8001412:	bf00      	nop
 8001414:	200002fc 	.word	0x200002fc
 8001418:	20000224 	.word	0x20000224
 800141c:	2000026c 	.word	0x2000026c
 8001420:	200002b4 	.word	0x200002b4
 8001424:	20000204 	.word	0x20000204
 8001428:	40020400 	.word	0x40020400
 800142c:	40020000 	.word	0x40020000
 8001430:	08009cf8 	.word	0x08009cf8

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2234      	movs	r2, #52	@ 0x34
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fc9e 	bl	8005d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <SystemClock_Config+0xb8>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <SystemClock_Config+0xb8>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <SystemClock_Config+0xb8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <SystemClock_Config+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <SystemClock_Config+0xbc>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <SystemClock_Config+0xbc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fd8f 	bl	8002fcc <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014b4:	f000 f9f8 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fab6 	bl	8002a44 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014de:	f000 f9e3 	bl	80018a8 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	@ 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b092      	sub	sp, #72	@ 0x48
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2220      	movs	r2, #32
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fc30 	bl	8005d84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <MX_TIM1_Init+0x134>)
 8001526:	4a41      	ldr	r2, [pc, #260]	@ (800162c <MX_TIM1_Init+0x138>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800152a:	4b3f      	ldr	r3, [pc, #252]	@ (8001628 <MX_TIM1_Init+0x134>)
 800152c:	2204      	movs	r2, #4
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <MX_TIM1_Init+0x134>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001536:	4b3c      	ldr	r3, [pc, #240]	@ (8001628 <MX_TIM1_Init+0x134>)
 8001538:	22ff      	movs	r2, #255	@ 0xff
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <MX_TIM1_Init+0x134>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <MX_TIM1_Init+0x134>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <MX_TIM1_Init+0x134>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154e:	4836      	ldr	r0, [pc, #216]	@ (8001628 <MX_TIM1_Init+0x134>)
 8001550:	f001 ffda 	bl	8003508 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800155a:	f000 f9a5 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001566:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800156a:	4619      	mov	r1, r3
 800156c:	482e      	ldr	r0, [pc, #184]	@ (8001628 <MX_TIM1_Init+0x134>)
 800156e:	f002 fc27 	bl	8003dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001578:	f000 f996 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	@ 0x60
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4821      	ldr	r0, [pc, #132]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015a2:	f002 f8c9 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80015ac:	f000 f97c 	bl	80018a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	2204      	movs	r2, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4817      	ldr	r0, [pc, #92]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015ca:	f002 f8b5 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80015d4:	f000 f968 	bl	80018a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_TIM1_Init+0x134>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001600:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <MX_TIM1_Init+0x134>)
 800160c:	f002 fc54 	bl	8003eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001616:	f000 f947 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800161a:	4803      	ldr	r0, [pc, #12]	@ (8001628 <MX_TIM1_Init+0x134>)
 800161c:	f000 fc28 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3748      	adds	r7, #72	@ 0x48
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000224 	.word	0x20000224
 800162c:	40010000 	.word	0x40010000

08001630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001652:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001654:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <MX_TIM2_Init+0xe0>)
 800165c:	2204      	movs	r2, #4
 800165e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001668:	22ff      	movs	r2, #255	@ 0xff
 800166a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <MX_TIM2_Init+0xe0>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001678:	4825      	ldr	r0, [pc, #148]	@ (8001710 <MX_TIM2_Init+0xe0>)
 800167a:	f001 ff45 	bl	8003508 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001684:	f000 f910 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4619      	mov	r1, r3
 8001696:	481e      	ldr	r0, [pc, #120]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001698:	f002 fb92 	bl	8003dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016a2:	f000 f901 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	@ 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4814      	ldr	r0, [pc, #80]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016be:	f002 f83b 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016c8:	f000 f8ee 	bl	80018a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2204      	movs	r2, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	480b      	ldr	r0, [pc, #44]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016e4:	f002 f828 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80016ee:	f000 f8db 	bl	80018a8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <MX_TIM2_Init+0xe0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001700:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001702:	4803      	ldr	r0, [pc, #12]	@ (8001710 <MX_TIM2_Init+0xe0>)
 8001704:	f000 fbb4 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000026c 	.word	0x2000026c

08001714 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_UART5_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <MX_UART5_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_UART5_Init+0x4c>)
 8001720:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001724:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_UART5_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_UART5_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_UART5_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_UART5_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_UART5_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_UART5_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_UART5_Init+0x4c>)
 800174c:	f002 fc06 	bl	8003f5c <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 f8a7 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002b4 	.word	0x200002b4
 8001764:	40005000 	.word	0x40005000

08001768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f002 fbdc 	bl	8003f5c <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f87d 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200002fc 	.word	0x200002fc
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b31      	ldr	r3, [pc, #196]	@ (800189c <MX_GPIO_Init+0xe0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a30      	ldr	r2, [pc, #192]	@ (800189c <MX_GPIO_Init+0xe0>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <MX_GPIO_Init+0xe0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <MX_GPIO_Init+0xe0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a29      	ldr	r2, [pc, #164]	@ (800189c <MX_GPIO_Init+0xe0>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <MX_GPIO_Init+0xe0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <MX_GPIO_Init+0xe0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <MX_GPIO_Init+0xe0>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <MX_GPIO_Init+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <MX_GPIO_Init+0xe0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a1b      	ldr	r2, [pc, #108]	@ (800189c <MX_GPIO_Init+0xe0>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <MX_GPIO_Init+0xe0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2190      	movs	r1, #144	@ 0x90
 8001846:	4816      	ldr	r0, [pc, #88]	@ (80018a0 <MX_GPIO_Init+0xe4>)
 8001848:	f001 f8e2 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001852:	4814      	ldr	r0, [pc, #80]	@ (80018a4 <MX_GPIO_Init+0xe8>)
 8001854:	f001 f8dc 	bl	8002a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001858:	2390      	movs	r3, #144	@ 0x90
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <MX_GPIO_Init+0xe4>)
 8001870:	f000 ff3a 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8001874:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_GPIO_Init+0xe8>)
 800188e:	f000 ff2b 	bl	80026e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	@ 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <halfX>:
#include <stdio.h>

// L / R , UP / DOWN , DIGITAL / PWM
enum {LUD,RUD,LDD,RDD,LUP,RUP,LDP,RDP};

signed char halfX(uint8_t X){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	if(X > 0x7f - TOLE_VALUE && X < 0x7f + TOLE_VALUE){
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b75      	cmp	r3, #117	@ 0x75
 80018c2:	d904      	bls.n	80018ce <halfX+0x1a>
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b88      	cmp	r3, #136	@ 0x88
 80018c8:	d801      	bhi.n	80018ce <halfX+0x1a>
		return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e008      	b.n	80018e0 <halfX+0x2c>
	}else {
		if(X - 0x7f < -0x7f){
			return -0x7f;
		}else if(X - 0x7f > 0x7f){
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2bff      	cmp	r3, #255	@ 0xff
 80018d2:	d101      	bne.n	80018d8 <halfX+0x24>
			return 0x7f;
 80018d4:	237f      	movs	r3, #127	@ 0x7f
 80018d6:	e003      	b.n	80018e0 <halfX+0x2c>
		}else {
			return X - 0x7f;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	3b7f      	subs	r3, #127	@ 0x7f
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	b25b      	sxtb	r3, r3
		}
	}
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <halfY>:

signed char halfY(uint8_t Y){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	if(Y > 0x7f - TOLE_VALUE && Y < 0x7f + TOLE_VALUE){
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b75      	cmp	r3, #117	@ 0x75
 80018fa:	d904      	bls.n	8001906 <halfY+0x1a>
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b88      	cmp	r3, #136	@ 0x88
 8001900:	d801      	bhi.n	8001906 <halfY+0x1a>
		return 0;
 8001902:	2300      	movs	r3, #0
 8001904:	e00d      	b.n	8001922 <halfY+0x36>
	}else {
		if(0x7f - Y < -0x7f){
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800190c:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001910:	da02      	bge.n	8001918 <halfY+0x2c>
			return -0x7f;
 8001912:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001916:	e004      	b.n	8001922 <halfY+0x36>
		}else if(0x7f - Y > 0x7f){
			return 0x7f;
		}else {
			return 0x7f - Y;
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800191e:	b2db      	uxtb	r3, r3
 8001920:	b25b      	sxtb	r3, r3
		}
	}
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <MoveST>:

void MoveST(uint8_t *Udata,uint8_t stX,uint8_t stY,uint8_t stV){ // Udata[0] 左上 Udata[1] 右上 Udata[2] 左下 Udata[3] 右下
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b0a0      	sub	sp, #128	@ 0x80
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	70fb      	strb	r3, [r7, #3]
 8001942:	460b      	mov	r3, r1
 8001944:	70bb      	strb	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
#define PLUS 45
	signed char PosX;
	signed char PosY;
	double Adata[8] = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2240      	movs	r2, #64	@ 0x40
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fa16 	bl	8005d84 <memset>
	double theta;
	double theta_plus;
	double COS;
	double SIN;

	PosX = halfX(stX);
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffaa 	bl	80018b4 <halfX>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	PosY = halfY(stY);
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ffbf 	bl	80018ec <halfY>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	if(PosX == 0 && PosY == 0){
 8001974:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8001978:	2b00      	cmp	r3, #0
 800197a:	d110      	bne.n	800199e <MoveST+0x6e>
 800197c:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <MoveST+0x6e>
		COS = 0;
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		SIN = 0;
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800199c:	e09a      	b.n	8001ad4 <MoveST+0x1a4>
	}else {
		Z = sqrt(pow(PosX,2) + pow(PosY,2));
 800199e:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdde 	bl	8000564 <__aeabi_i2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ed9f 1bb6 	vldr	d1, [pc, #728]	@ 8001c88 <MoveST+0x358>
 80019b0:	ec43 2b10 	vmov	d0, r2, r3
 80019b4:	f006 f87a 	bl	8007aac <pow>
 80019b8:	ec55 4b10 	vmov	r4, r5, d0
 80019bc:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdcf 	bl	8000564 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ed9f 1baf 	vldr	d1, [pc, #700]	@ 8001c88 <MoveST+0x358>
 80019ce:	ec43 2b10 	vmov	d0, r2, r3
 80019d2:	f006 f86b 	bl	8007aac <pow>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fc75 	bl	80002cc <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	ec43 2b17 	vmov	d7, r2, r3
 80019ea:	eeb0 0a47 	vmov.f32	s0, s14
 80019ee:	eef0 0a67 	vmov.f32	s1, s15
 80019f2:	f006 f8cb 	bl	8007b8c <sqrt>
 80019f6:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
		theta = atan((double)PosY / (double)PosX);
 80019fa:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdb0 	bl	8000564 <__aeabi_i2d>
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fda9 	bl	8000564 <__aeabi_i2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe ff37 	bl	800088c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b17 	vmov	d7, r2, r3
 8001a26:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2a:	eef0 0a67 	vmov.f32	s1, s15
 8001a2e:	f006 f8db 	bl	8007be8 <atan>
 8001a32:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
		if(PosX < 0){
 8001a36:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da0a      	bge.n	8001a54 <MoveST+0x124>
			theta += M_PI;
 8001a3e:	a39c      	add	r3, pc, #624	@ (adr r3, 8001cb0 <MoveST+0x380>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a48:	f7fe fc40 	bl	80002cc <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		}
		if(theta < 0){
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a60:	f7ff f85c 	bl	8000b1c <__aeabi_dcmplt>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <MoveST+0x150>
			theta += 2 * M_PI;
 8001a6a:	a393      	add	r3, pc, #588	@ (adr r3, 8001cb8 <MoveST+0x388>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a74:	f7fe fc2a 	bl	80002cc <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		}
		theta_plus = theta - rad(PLUS);
 8001a80:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8001c90 <MoveST+0x360>
 8001a84:	f000 f970 	bl	8001d68 <rad>
 8001a88:	ec53 2b10 	vmov	r2, r3, d0
 8001a8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a90:	f7fe fc1a 	bl	80002c8 <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		COS = Z * cos(theta_plus);
 8001a9c:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001aa0:	f006 fa3a 	bl	8007f18 <cos>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		SIN = Z * sin(theta_plus);
 8001ab8:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001abc:	f006 fa88 	bl	8007fd0 <sin>
 8001ac0:	ec53 2b10 	vmov	r2, r3, d0
 8001ac4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001ac8:	f7fe fdb6 	bl	8000638 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	}

	Adata[LUP] = COS;
 8001ad4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ad8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	Adata[RDP] = COS;
 8001adc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ae0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
//	}else {
//		Udata[LUP] = (uint8_t)COS;
//		Udata[LUD] = 0;
//	}

	Adata[RUP] = SIN;
 8001ae4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001ae8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	Adata[LDP] = SIN;
 8001aec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001af0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
//	Udata[RDD] = Udata[LUD];
//	Adata[RDP] = Adata[LUP];
//	Adata[LDP] = Adata[RUP];

	double Vroll;
	Vroll = (double)halfY(stV) * RAITO;
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fef8 	bl	80018ec <halfY>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd30 	bl	8000564 <__aeabi_i2d>
 8001b04:	a36e      	add	r3, pc, #440	@ (adr r3, 8001cc0 <MoveST+0x390>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fd95 	bl	8000638 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	if(Vroll < 0){ //left
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001b22:	f7fe fffb 	bl	8000b1c <__aeabi_dcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02b      	beq.n	8001b84 <MoveST+0x254>
		Adata[LUP] += Vroll;
 8001b2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b34:	f7fe fbca 	bl	80002cc <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		Adata[LDP] += Vroll;
 8001b40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b48:	f7fe fbc0 	bl	80002cc <__adddf3>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		Adata[RUP] -= Vroll;
 8001b54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b5c:	f7fe fbb4 	bl	80002c8 <__aeabi_dsub>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		Adata[RDP] -= Vroll;
 8001b68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b70:	f7fe fbaa 	bl	80002c8 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		printf("left  ");
 8001b7c:	4848      	ldr	r0, [pc, #288]	@ (8001ca0 <MoveST+0x370>)
 8001b7e:	f003 ff5b 	bl	8005a38 <iprintf>
 8001b82:	e02a      	b.n	8001bda <MoveST+0x2aa>
	}else{ // right
		Adata[LUP] += Vroll;
 8001b84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b8c:	f7fe fb9e 	bl	80002cc <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		Adata[LDP] += Vroll;
 8001b98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ba0:	f7fe fb94 	bl	80002cc <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		Adata[RUP] -= Vroll;
 8001bac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bb4:	f7fe fb88 	bl	80002c8 <__aeabi_dsub>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		Adata[RDP] -= Vroll;
 8001bc0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bc8:	f7fe fb7e 	bl	80002c8 <__aeabi_dsub>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		printf("right ");
 8001bd4:	4833      	ldr	r0, [pc, #204]	@ (8001ca4 <MoveST+0x374>)
 8001bd6:	f003 ff2f 	bl	8005a38 <iprintf>
	}

	for(int i = 0;i < 4;i++){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bde:	e0af      	b.n	8001d40 <MoveST+0x410>
		if(Adata[i+4] < 0){
 8001be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001be2:	3304      	adds	r3, #4
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	3380      	adds	r3, #128	@ 0x80
 8001be8:	443b      	add	r3, r7
 8001bea:	3b78      	subs	r3, #120	@ 0x78
 8001bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	f7fe ff90 	bl	8000b1c <__aeabi_dcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d062      	beq.n	8001cc8 <MoveST+0x398>
			if(Adata[i+4] < -0x7f){
 8001c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c04:	3304      	adds	r3, #4
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	3380      	adds	r3, #128	@ 0x80
 8001c0a:	443b      	add	r3, r7
 8001c0c:	3b78      	subs	r3, #120	@ 0x78
 8001c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <MoveST+0x378>)
 8001c18:	f7fe ff80 	bl	8000b1c <__aeabi_dcmplt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <MoveST+0x30a>
				Adata[i+4] = -0x7f;
 8001c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c24:	3304      	adds	r3, #4
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	3380      	adds	r3, #128	@ 0x80
 8001c2a:	443b      	add	r3, r7
 8001c2c:	f1a3 0178 	sub.w	r1, r3, #120	@ 0x78
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <MoveST+0x378>)
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
			}
			Udata[i] = 1;
 8001c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
			Udata[i+4] = (uint8_t)(0x7f + Adata[i+4]) * 2;
 8001c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c46:	3304      	adds	r3, #4
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	3380      	adds	r3, #128	@ 0x80
 8001c4c:	443b      	add	r3, r7
 8001c4e:	3b78      	subs	r3, #120	@ 0x78
 8001c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c54:	a310      	add	r3, pc, #64	@ (adr r3, 8001c98 <MoveST+0x368>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fb37 	bl	80002cc <__adddf3>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ffbf 	bl	8000be8 <__aeabi_d2uiz>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c70:	3304      	adds	r3, #4
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	440b      	add	r3, r1
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
			printf("nega ");
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <MoveST+0x37c>)
 8001c7e:	f003 fedb 	bl	8005a38 <iprintf>
 8001c82:	e05a      	b.n	8001d3a <MoveST+0x40a>
 8001c84:	f3af 8000 	nop.w
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40000000 	.word	0x40000000
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40468000 	.word	0x40468000
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	405fc000 	.word	0x405fc000
 8001ca0:	08009d34 	.word	0x08009d34
 8001ca4:	08009d3c 	.word	0x08009d3c
 8001ca8:	c05fc000 	.word	0xc05fc000
 8001cac:	08009d44 	.word	0x08009d44
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	400921fb 	.word	0x400921fb
 8001cb8:	54442d18 	.word	0x54442d18
 8001cbc:	401921fb 	.word	0x401921fb
 8001cc0:	66666666 	.word	0x66666666
 8001cc4:	3fe66666 	.word	0x3fe66666
		}else{
			if(Adata[i+4] > 0x7f){
 8001cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cca:	3304      	adds	r3, #4
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	3380      	adds	r3, #128	@ 0x80
 8001cd0:	443b      	add	r3, r7
 8001cd2:	3b78      	subs	r3, #120	@ 0x78
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	a320      	add	r3, pc, #128	@ (adr r3, 8001d5c <MoveST+0x42c>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <MoveST+0x3d0>
				Adata[i+4] = 0x7f;
 8001ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cea:	3304      	adds	r3, #4
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	3380      	adds	r3, #128	@ 0x80
 8001cf0:	443b      	add	r3, r7
 8001cf2:	f1a3 0178 	sub.w	r1, r3, #120	@ 0x78
 8001cf6:	a319      	add	r3, pc, #100	@ (adr r3, 8001d5c <MoveST+0x42c>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	e9c1 2300 	strd	r2, r3, [r1]
			}
			Udata[i] = 0;
 8001d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
			Udata[i+4] = (uint8_t)Adata[i+4] * 2;
 8001d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	3380      	adds	r3, #128	@ 0x80
 8001d12:	443b      	add	r3, r7
 8001d14:	3b78      	subs	r3, #120	@ 0x78
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe ff63 	bl	8000be8 <__aeabi_d2uiz>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d28:	3304      	adds	r3, #4
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0052      	lsls	r2, r2, #1
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
			printf("posi ");
 8001d34:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <MoveST+0x428>)
 8001d36:	f003 fe7f 	bl	8005a38 <iprintf>
	for(int i = 0;i < 4;i++){
 8001d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	f77f af4c 	ble.w	8001be0 <MoveST+0x2b0>
	}

//	printf("左上 %d %2X 右上 %d %2X 左下 %d %2X 右下 %d %2X %f\r\n",Udata[LUD],Udata[LUP],Udata[RUD],Udata[RUP],Udata[LDD],Udata[LDP],Udata[RDD],Udata[RDP],Vroll);
//	printf("左上 %d %+4f 右上 %d %+4f 左下 %d %+4f 右下 %d %+4f %f\r\n",Udata[LUD],Adata[LUP],Udata[RUD],Adata[RUP],Udata[LDD],Adata[LDP],Udata[RDD],Adata[RDP],Vroll);
//	printf("%f %f %f %f\r\n",COS,SIN,theta,deg(theta));
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3780      	adds	r7, #128	@ 0x80
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	f3af 8000 	nop.w
 8001d58:	08009d4c 	.word	0x08009d4c
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	405fc000 	.word	0x405fc000
 8001d64:	00000000 	.word	0x00000000

08001d68 <rad>:

double deg(double rad){
	return (rad * 180) / M_PI;
}

double rad(double deg){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0b00 	vstr	d0, [r7]
	return (deg * M_PI) / 180;
 8001d72:	a30e      	add	r3, pc, #56	@ (adr r3, 8001dac <rad+0x44>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7c:	f7fe fc5c 	bl	8000638 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <rad+0x40>)
 8001d8e:	f7fe fd7d 	bl	800088c <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9e:	eef0 0a67 	vmov.f32	s1, s15
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40668000 	.word	0x40668000
 8001dac:	54442d18 	.word	0x54442d18
 8001db0:	400921fb 	.word	0x400921fb

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <HAL_TIM_PWM_MspInit+0x64>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e32:	e012      	b.n	8001e5a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3c:	d10d      	bne.n	8001e5a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <HAL_TIM_PWM_MspInit+0x68>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a25      	ldr	r2, [pc, #148]	@ (8001f24 <HAL_TIM_MspPostInit+0xb4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d11f      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4818      	ldr	r0, [pc, #96]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ecc:	f000 fc0c 	bl	80026e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ed0:	e023      	b.n	8001f1a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eda:	d11e      	bne.n	8001f1a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001ef8:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001f16:	f000 fbe7 	bl	80026e8 <HAL_GPIO_Init>
}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	@ 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	@ (8002064 <HAL_UART_MspInit+0x134>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d153      	bne.n	8001ffa <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a43      	ldr	r2, [pc, #268]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a3c      	ldr	r2, [pc, #240]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a35      	ldr	r2, [pc, #212]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b33      	ldr	r3, [pc, #204]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	482a      	ldr	r0, [pc, #168]	@ (800206c <HAL_UART_MspInit+0x13c>)
 8001fc4:	f000 fb90 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4823      	ldr	r0, [pc, #140]	@ (8002070 <HAL_UART_MspInit+0x140>)
 8001fe4:	f000 fb80 	bl	80026e8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2035      	movs	r0, #53	@ 0x35
 8001fee:	f000 fab2 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ff2:	2035      	movs	r0, #53	@ 0x35
 8001ff4:	f000 facb 	bl	800258e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff8:	e030      	b.n	800205c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8002074 <HAL_UART_MspInit+0x144>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12b      	bne.n	800205c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_UART_MspInit+0x138>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <HAL_UART_MspInit+0x138>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <HAL_UART_MspInit+0x138>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_UART_MspInit+0x138>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203c:	230c      	movs	r3, #12
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204c:	2307      	movs	r3, #7
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	@ (8002078 <HAL_UART_MspInit+0x148>)
 8002058:	f000 fb46 	bl	80026e8 <HAL_GPIO_Init>
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40005000 	.word	0x40005000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40004400 	.word	0x40004400
 8002078:	40020000 	.word	0x40020000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <NMI_Handler+0x4>

08002084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <MemManage_Handler+0x4>

08002094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d2:	f000 f945 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <UART5_IRQHandler+0x10>)
 80020e2:	f002 f83b 	bl	800415c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200002b4 	.word	0x200002b4

080020f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_kill>:

int _kill(int pid, int sig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800210a:	f003 fe8d 	bl	8005e28 <__errno>
 800210e:	4603      	mov	r3, r0
 8002110:	2216      	movs	r2, #22
 8002112:	601a      	str	r2, [r3, #0]
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_exit>:

void _exit (int status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ffe7 	bl	8002100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002132:	bf00      	nop
 8002134:	e7fd      	b.n	8002132 <_exit+0x12>

08002136 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e00a      	b.n	800215e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002148:	f3af 8000 	nop.w
 800214c:	4601      	mov	r1, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	60ba      	str	r2, [r7, #8]
 8002154:	b2ca      	uxtb	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf0      	blt.n	8002148 <_read+0x12>
  }

  return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002198:	605a      	str	r2, [r3, #4]
  return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_isatty>:

int _isatty(int file)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f003 fe0e 	bl	8005e28 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	20000344 	.word	0x20000344
 8002240:	20000498 	.word	0x20000498

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800226c:	f7ff ffea 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	@ (80022b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002296:	f003 fdcd 	bl	8005e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7ff f82f 	bl	80012fc <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022ac:	0800a350 	.word	0x0800a350
  ldr r2, =_sbss
 80022b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022b4:	20000498 	.word	0x20000498

080022b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_Init+0x40>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_Init+0x40>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_Init+0x40>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f92b 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fd60 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f943 	bl	80025aa <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f000 f90b 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	@ (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000000 	.word	0x20000000
 8002358:	20000008 	.word	0x20000008
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008
 8002384:	20000348 	.word	0x20000348

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000348 	.word	0x20000348

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	@ (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	@ (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	@ (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	@ (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff feda 	bl	8002388 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d008      	beq.n	80025f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	@ 0x80
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e052      	b.n	800269a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0216 	bic.w	r2, r2, #22
 8002602:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002612:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <HAL_DMA_Abort+0x62>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0208 	bic.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002644:	e013      	b.n	800266e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002646:	f7ff fe9f 	bl	8002388 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d90c      	bls.n	800266e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e015      	b.n	800269a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e4      	bne.n	8002646 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	223f      	movs	r2, #63	@ 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e00c      	b.n	80026da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2205      	movs	r2, #5
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e165      	b.n	80029d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8154 	bne.w	80029ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d005      	beq.n	800273a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002736:	2b02      	cmp	r3, #2
 8002738:	d130      	bne.n	800279c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0201 	and.w	r2, r3, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d017      	beq.n	80027d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d123      	bne.n	800282c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80ae 	beq.w	80029ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b5d      	ldr	r3, [pc, #372]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a5c      	ldr	r2, [pc, #368]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b5a      	ldr	r3, [pc, #360]	@ (80029e8 <HAL_GPIO_Init+0x300>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288a:	4a58      	ldr	r2, [pc, #352]	@ (80029ec <HAL_GPIO_Init+0x304>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	@ (80029f0 <HAL_GPIO_Init+0x308>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x21a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4e      	ldr	r2, [pc, #312]	@ (80029f4 <HAL_GPIO_Init+0x30c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x216>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4d      	ldr	r2, [pc, #308]	@ (80029f8 <HAL_GPIO_Init+0x310>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x212>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4c      	ldr	r2, [pc, #304]	@ (80029fc <HAL_GPIO_Init+0x314>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_GPIO_Init+0x318>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x20a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_GPIO_Init+0x31c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x206>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a49      	ldr	r2, [pc, #292]	@ (8002a08 <HAL_GPIO_Init+0x320>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x202>
 80028e6:	2306      	movs	r3, #6
 80028e8:	e00c      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00a      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x21c>
 8002902:	2300      	movs	r3, #0
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	@ (80029ec <HAL_GPIO_Init+0x304>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002976:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c4:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <HAL_GPIO_Init+0x324>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f67f ae96 	bls.w	8002704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40021400 	.word	0x40021400
 8002a08:	40021800 	.word	0x40021800
 8002a0c:	40013c00 	.word	0x40013c00

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7ff fc28 	bl	8002388 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7ff fc24 	bl	8002388 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f855 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fb88 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08009d54 	.word	0x08009d54
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08009d64 	.word	0x08009d64

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c54:	f7ff ffdc 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0b5b      	lsrs	r3, r3, #13
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	@ (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08009d64 	.word	0x08009d64

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c7c:	b0a6      	sub	sp, #152	@ 0x98
 8002c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9e:	4bc8      	ldr	r3, [pc, #800]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	f200 817e 	bhi.w	8002fa8 <HAL_RCC_GetSysClockFreq+0x330>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002fa9 	.word	0x08002fa9
 8002cbc:	08002fa9 	.word	0x08002fa9
 8002cc0:	08002fa9 	.word	0x08002fa9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002fa9 	.word	0x08002fa9
 8002ccc:	08002fa9 	.word	0x08002fa9
 8002cd0:	08002fa9 	.word	0x08002fa9
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002fa9 	.word	0x08002fa9
 8002cdc:	08002fa9 	.word	0x08002fa9
 8002ce0:	08002fa9 	.word	0x08002fa9
 8002ce4:	08002e63 	.word	0x08002e63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4bb6      	ldr	r3, [pc, #728]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cee:	e15f      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf0:	4bb5      	ldr	r3, [pc, #724]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cf6:	e15b      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4bb1      	ldr	r3, [pc, #708]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d04:	4bae      	ldr	r3, [pc, #696]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4bab      	ldr	r3, [pc, #684]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d24:	2300      	movs	r3, #0
 8002d26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d28:	4ba7      	ldr	r3, [pc, #668]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d2a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d2e:	462a      	mov	r2, r5
 8002d30:	fb03 f202 	mul.w	r2, r3, r2
 8002d34:	2300      	movs	r3, #0
 8002d36:	4621      	mov	r1, r4
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4aa2      	ldr	r2, [pc, #648]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d40:	4621      	mov	r1, r4
 8002d42:	fba1 1202 	umull	r1, r2, r1, r2
 8002d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d48:	460a      	mov	r2, r1
 8002d4a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d4e:	4413      	add	r3, r2
 8002d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d56:	2200      	movs	r2, #0
 8002d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d5a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002d64:	f7fd ff60 	bl	8000c28 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d72:	e064      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d74:	4b92      	ldr	r3, [pc, #584]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d88:	2300      	movs	r3, #0
 8002d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d8c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002d90:	4622      	mov	r2, r4
 8002d92:	462b      	mov	r3, r5
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0159      	lsls	r1, r3, #5
 8002d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da2:	0150      	lsls	r0, r2, #5
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4621      	mov	r1, r4
 8002daa:	1a51      	subs	r1, r2, r1
 8002dac:	6139      	str	r1, [r7, #16]
 8002dae:	4629      	mov	r1, r5
 8002db0:	eb63 0301 	sbc.w	r3, r3, r1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc2:	4659      	mov	r1, fp
 8002dc4:	018b      	lsls	r3, r1, #6
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dcc:	4651      	mov	r1, sl
 8002dce:	018a      	lsls	r2, r1, #6
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd6:	4659      	mov	r1, fp
 8002dd8:	eb63 0901 	sbc.w	r9, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df0:	4690      	mov	r8, r2
 8002df2:	4699      	mov	r9, r3
 8002df4:	4623      	mov	r3, r4
 8002df6:	eb18 0303 	adds.w	r3, r8, r3
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	eb49 0303 	adc.w	r3, r9, r3
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e10:	4629      	mov	r1, r5
 8002e12:	028b      	lsls	r3, r1, #10
 8002e14:	4621      	mov	r1, r4
 8002e16:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	028a      	lsls	r2, r1, #10
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e26:	2200      	movs	r2, #0
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e30:	f7fd fefa 	bl	8000c28 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e3e:	4b60      	ldr	r3, [pc, #384]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002e50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e60:	e0a6      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e62:	4b57      	ldr	r3, [pc, #348]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4b54      	ldr	r3, [pc, #336]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02a      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b51      	ldr	r3, [pc, #324]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e90:	fb03 f201 	mul.w	r2, r3, r1
 8002e94:	2300      	movs	r3, #0
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002ea2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ea8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002eaa:	4413      	add	r3, r2
 8002eac:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eb6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002eb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ebc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002ec0:	f7fd feb2 	bl	8000c28 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ece:	e05b      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efe:	0150      	lsls	r0, r2, #5
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4641      	mov	r1, r8
 8002f06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f24:	ebb2 040a 	subs.w	r4, r2, sl
 8002f28:	eb63 050b 	sbc.w	r5, r3, fp
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	00eb      	lsls	r3, r5, #3
 8002f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3a:	00e2      	lsls	r2, r4, #3
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	4643      	mov	r3, r8
 8002f42:	18e3      	adds	r3, r4, r3
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	464b      	mov	r3, r9
 8002f48:	eb45 0303 	adc.w	r3, r5, r3
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	028b      	lsls	r3, r1, #10
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f64:	4621      	mov	r1, r4
 8002f66:	028a      	lsls	r2, r1, #10
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f70:	2200      	movs	r2, #0
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	61fa      	str	r2, [r7, #28]
 8002f76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7a:	f7fd fe55 	bl	8000c28 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4613      	mov	r3, r2
 8002f84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0f1b      	lsrs	r3, r3, #28
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3798      	adds	r7, #152	@ 0x98
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	017d7840 	.word	0x017d7840

08002fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e28d      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8083 	beq.w	80030f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fec:	4b94      	ldr	r3, [pc, #592]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d019      	beq.n	800302c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ff8:	4b91      	ldr	r3, [pc, #580]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
        || \
 8003000:	2b08      	cmp	r3, #8
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003004:	4b8e      	ldr	r3, [pc, #568]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003010:	d00c      	beq.n	800302c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b8b      	ldr	r3, [pc, #556]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d112      	bne.n	8003044 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800302a:	d10b      	bne.n	8003044 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4b84      	ldr	r3, [pc, #528]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05b      	beq.n	80030f0 <HAL_RCC_OscConfig+0x124>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d157      	bne.n	80030f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e25a      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x90>
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7b      	ldr	r2, [pc, #492]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xcc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xb4>
 8003066:	4b76      	ldr	r3, [pc, #472]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a75      	ldr	r2, [pc, #468]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b73      	ldr	r3, [pc, #460]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a72      	ldr	r2, [pc, #456]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xcc>
 8003080:	4b6f      	ldr	r3, [pc, #444]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6e      	ldr	r2, [pc, #440]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b6c      	ldr	r3, [pc, #432]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7ff f972 	bl	8002388 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff f96e 	bl	8002388 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	@ 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e21f      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b61      	ldr	r3, [pc, #388]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xdc>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f95e 	bl	8002388 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff f95a 	bl	8002388 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e20b      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x104>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06f      	beq.n	80031de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030fe:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800310a:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003112:	2b08      	cmp	r3, #8
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003116:	4b4a      	ldr	r3, [pc, #296]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b44      	ldr	r3, [pc, #272]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b41      	ldr	r3, [pc, #260]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x186>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1d3      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4937      	ldr	r1, [pc, #220]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <HAL_RCC_OscConfig+0x278>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7ff f907 	bl	8002388 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7ff f903 	bl	8002388 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1b4      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b28      	ldr	r3, [pc, #160]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4925      	ldr	r1, [pc, #148]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <HAL_RCC_OscConfig+0x278>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f8e6 	bl	8002388 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7ff f8e2 	bl	8002388 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e193      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d036      	beq.n	8003258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7ff f8c6 	bl	8002388 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003200:	f7ff f8c2 	bl	8002388 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e173      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x234>
 800321e:	e01b      	b.n	8003258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7ff f8af 	bl	8002388 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	e00e      	b.n	800324c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322e:	f7ff f8ab 	bl	8002388 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d907      	bls.n	800324c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e15c      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
 8003240:	40023800 	.word	0x40023800
 8003244:	42470000 	.word	0x42470000
 8003248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b8a      	ldr	r3, [pc, #552]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ea      	bne.n	800322e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8097 	beq.w	8003394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b83      	ldr	r3, [pc, #524]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b7f      	ldr	r3, [pc, #508]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a7e      	ldr	r2, [pc, #504]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
 8003286:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b79      	ldr	r3, [pc, #484]	@ (800347c <HAL_RCC_OscConfig+0x4b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d118      	bne.n	80032d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b76      	ldr	r3, [pc, #472]	@ (800347c <HAL_RCC_OscConfig+0x4b0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a75      	ldr	r2, [pc, #468]	@ (800347c <HAL_RCC_OscConfig+0x4b0>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7ff f86b 	bl	8002388 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7ff f867 	bl	8002388 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e118      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b6c      	ldr	r3, [pc, #432]	@ (800347c <HAL_RCC_OscConfig+0x4b0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x31e>
 80032dc:	4b66      	ldr	r3, [pc, #408]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e0:	4a65      	ldr	r2, [pc, #404]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x358>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x340>
 80032f2:	4b61      	ldr	r3, [pc, #388]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a60      	ldr	r2, [pc, #384]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	4a5d      	ldr	r2, [pc, #372]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	@ 0x70
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x358>
 800330c:	4b5a      	ldr	r3, [pc, #360]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a59      	ldr	r2, [pc, #356]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
 8003318:	4b57      	ldr	r3, [pc, #348]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	4a56      	ldr	r2, [pc, #344]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7ff f82c 	bl	8002388 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7ff f828 	bl	8002388 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0d7      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ee      	beq.n	8003334 <HAL_RCC_OscConfig+0x368>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7ff f816 	bl	8002388 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7ff f812 	bl	8002388 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0c1      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ee      	bne.n	8003360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	4a3a      	ldr	r2, [pc, #232]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80ad 	beq.w	80034f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339e:	4b36      	ldr	r3, [pc, #216]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d060      	beq.n	800346c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d145      	bne.n	800343e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b2:	4b33      	ldr	r3, [pc, #204]	@ (8003480 <HAL_RCC_OscConfig+0x4b4>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe ffe6 	bl	8002388 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe ffe2 	bl	8002388 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e093      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	3b01      	subs	r3, #1
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	491b      	ldr	r1, [pc, #108]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <HAL_RCC_OscConfig+0x4b4>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fe ffb7 	bl	8002388 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe ffb3 	bl	8002388 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e064      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x452>
 800343c:	e05c      	b.n	80034f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <HAL_RCC_OscConfig+0x4b4>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe ffa0 	bl	8002388 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe ff9c 	bl	8002388 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04d      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x480>
 800346a:	e045      	b.n	80034f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e040      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d030      	beq.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d129      	bne.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d122      	bne.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d119      	bne.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d10f      	bne.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e041      	b.n	800359e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe fc68 	bl	8001e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f000 f9b8 	bl	80038bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_TIM_PWM_Start+0x24>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e022      	b.n	8003612 <HAL_TIM_PWM_Start+0x6a>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d109      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x3e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e015      	b.n	8003612 <HAL_TIM_PWM_Start+0x6a>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d109      	bne.n	8003600 <HAL_TIM_PWM_Start+0x58>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e008      	b.n	8003612 <HAL_TIM_PWM_Start+0x6a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07c      	b.n	8003714 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0x82>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003628:	e013      	b.n	8003652 <HAL_TIM_PWM_Start+0xaa>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0x92>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003638:	e00b      	b.n	8003652 <HAL_TIM_PWM_Start+0xaa>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003648:	e003      	b.n	8003652 <HAL_TIM_PWM_Start+0xaa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fb8a 	bl	8003d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2d      	ldr	r2, [pc, #180]	@ (800371c <HAL_TIM_PWM_Start+0x174>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_PWM_Start+0xcc>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2c      	ldr	r2, [pc, #176]	@ (8003720 <HAL_TIM_PWM_Start+0x178>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_TIM_PWM_Start+0xd0>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_TIM_PWM_Start+0xd2>
 8003678:	2300      	movs	r3, #0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a22      	ldr	r2, [pc, #136]	@ (800371c <HAL_TIM_PWM_Start+0x174>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a0:	d01d      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003724 <HAL_TIM_PWM_Start+0x17c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_TIM_PWM_Start+0x180>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_TIM_PWM_Start+0x184>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_TIM_PWM_Start+0x178>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a18      	ldr	r2, [pc, #96]	@ (8003730 <HAL_TIM_PWM_Start+0x188>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIM_PWM_Start+0x136>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a16      	ldr	r2, [pc, #88]	@ (8003734 <HAL_TIM_PWM_Start+0x18c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d010      	beq.n	8003712 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e007      	b.n	8003712 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40014000 	.word	0x40014000
 8003734:	40001800 	.word	0x40001800

08003738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003752:	2302      	movs	r3, #2
 8003754:	e0ae      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	f200 809f 	bhi.w	80038a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003766:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080038a5 	.word	0x080038a5
 8003774:	080038a5 	.word	0x080038a5
 8003778:	080038a5 	.word	0x080038a5
 800377c:	080037e1 	.word	0x080037e1
 8003780:	080038a5 	.word	0x080038a5
 8003784:	080038a5 	.word	0x080038a5
 8003788:	080038a5 	.word	0x080038a5
 800378c:	08003823 	.word	0x08003823
 8003790:	080038a5 	.word	0x080038a5
 8003794:	080038a5 	.word	0x080038a5
 8003798:	080038a5 	.word	0x080038a5
 800379c:	08003863 	.word	0x08003863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f934 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0208 	orr.w	r2, r2, #8
 80037ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	619a      	str	r2, [r3, #24]
      break;
 80037de:	e064      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f984 	bl	8003af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800380a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6999      	ldr	r1, [r3, #24]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	619a      	str	r2, [r3, #24]
      break;
 8003820:	e043      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f9d9 	bl	8003be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0208 	orr.w	r2, r2, #8
 800383c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0204 	bic.w	r2, r2, #4
 800384c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69d9      	ldr	r1, [r3, #28]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	61da      	str	r2, [r3, #28]
      break;
 8003860:	e023      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa2d 	bl	8003cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	021a      	lsls	r2, r3, #8
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	61da      	str	r2, [r3, #28]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
      break;
 80038a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a46      	ldr	r2, [pc, #280]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a43      	ldr	r2, [pc, #268]	@ (80039ec <TIM_Base_SetConfig+0x130>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a42      	ldr	r2, [pc, #264]	@ (80039f0 <TIM_Base_SetConfig+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a41      	ldr	r2, [pc, #260]	@ (80039f4 <TIM_Base_SetConfig+0x138>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a40      	ldr	r2, [pc, #256]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d027      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a32      	ldr	r2, [pc, #200]	@ (80039ec <TIM_Base_SetConfig+0x130>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d023      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a31      	ldr	r2, [pc, #196]	@ (80039f0 <TIM_Base_SetConfig+0x134>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a30      	ldr	r2, [pc, #192]	@ (80039f4 <TIM_Base_SetConfig+0x138>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2f      	ldr	r2, [pc, #188]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2e      	ldr	r2, [pc, #184]	@ (80039fc <TIM_Base_SetConfig+0x140>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2d      	ldr	r2, [pc, #180]	@ (8003a00 <TIM_Base_SetConfig+0x144>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2c      	ldr	r2, [pc, #176]	@ (8003a04 <TIM_Base_SetConfig+0x148>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2b      	ldr	r2, [pc, #172]	@ (8003a08 <TIM_Base_SetConfig+0x14c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2a      	ldr	r2, [pc, #168]	@ (8003a0c <TIM_Base_SetConfig+0x150>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a29      	ldr	r2, [pc, #164]	@ (8003a10 <TIM_Base_SetConfig+0x154>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a10      	ldr	r2, [pc, #64]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a12      	ldr	r2, [pc, #72]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]
  }
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40010400 	.word	0x40010400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800
 8003a08:	40001800 	.word	0x40001800
 8003a0c:	40001c00 	.word	0x40001c00
 8003a10:	40002000 	.word	0x40002000

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f023 0201 	bic.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 0302 	bic.w	r3, r3, #2
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <TIM_OC1_SetConfig+0xd8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_OC1_SetConfig+0x64>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <TIM_OC1_SetConfig+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10c      	bne.n	8003a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0308 	bic.w	r3, r3, #8
 8003a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <TIM_OC1_SetConfig+0xd8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC1_SetConfig+0x8e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <TIM_OC1_SetConfig+0xdc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40010400 	.word	0x40010400

08003af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0210 	bic.w	r2, r3, #16
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <TIM_OC2_SetConfig+0xe4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_OC2_SetConfig+0x68>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a21      	ldr	r2, [pc, #132]	@ (8003bdc <TIM_OC2_SetConfig+0xe8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10d      	bne.n	8003b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	@ (8003bd8 <TIM_OC2_SetConfig+0xe4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC2_SetConfig+0x94>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <TIM_OC2_SetConfig+0xe8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d113      	bne.n	8003bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40010400 	.word	0x40010400

08003be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <TIM_OC3_SetConfig+0xe0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_OC3_SetConfig+0x66>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a20      	ldr	r2, [pc, #128]	@ (8003cc4 <TIM_OC3_SetConfig+0xe4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10d      	bne.n	8003c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a16      	ldr	r2, [pc, #88]	@ (8003cc0 <TIM_OC3_SetConfig+0xe0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC3_SetConfig+0x92>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <TIM_OC3_SetConfig+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d113      	bne.n	8003c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a12      	ldr	r2, [pc, #72]	@ (8003d6c <TIM_OC4_SetConfig+0xa4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC4_SetConfig+0x68>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a11      	ldr	r2, [pc, #68]	@ (8003d70 <TIM_OC4_SetConfig+0xa8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40010400 	.word	0x40010400

08003d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2201      	movs	r2, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e05a      	b.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d01d      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40001800 	.word	0x40001800

08003eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e03d      	b.n	8003f50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd ffd4 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	@ 0x24
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fdbd 	bl	8004b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b20      	cmp	r3, #32
 800401a:	d175      	bne.n	8004108 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x2c>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e06e      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2221      	movs	r2, #33	@ 0x21
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403a:	f7fe f9a5 	bl	8002388 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004054:	d108      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fb1f 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03a      	b.n	800410a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3302      	adds	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e007      	b.n	80040c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2140      	movs	r1, #64	@ 0x40
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 faeb 	bl	80046c0 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b20      	cmp	r3, #32
 800412a:	d112      	bne.n	8004152 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Receive_IT+0x26>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e00b      	b.n	8004154 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	461a      	mov	r2, r3
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fb12 	bl	8004772 <UART_Start_Receive_IT>
 800414e:	4603      	mov	r3, r0
 8004150:	e000      	b.n	8004154 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b0ba      	sub	sp, #232	@ 0xe8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800419a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_UART_IRQHandler+0x66>
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fbf2 	bl	80049a4 <UART_Receive_IT>
      return;
 80041c0:	e25b      	b.n	800467a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80de 	beq.w	8004388 <HAL_UART_IRQHandler+0x22c>
 80041cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80d1 	beq.w	8004388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_UART_IRQHandler+0xae>
 80041f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_UART_IRQHandler+0xd2>
 8004216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_UART_IRQHandler+0xf6>
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f043 0204 	orr.w	r2, r3, #4
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d011      	beq.n	8004282 <HAL_UART_IRQHandler+0x126>
 800425e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0208 	orr.w	r2, r3, #8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 81f2 	beq.w	8004670 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_UART_IRQHandler+0x14e>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb7d 	bl	80049a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_UART_IRQHandler+0x17a>
 80042ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04f      	beq.n	8004376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa85 	bl	80047e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d141      	bne.n	800436e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004316:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800431a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800432e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1d9      	bne.n	80042ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004342:	4a7e      	ldr	r2, [pc, #504]	@ (800453c <HAL_UART_IRQHandler+0x3e0>)
 8004344:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe f9a9 	bl	80026a2 <HAL_DMA_Abort_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004360:	4610      	mov	r0, r2
 8004362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e00e      	b.n	8004384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f994 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e00a      	b.n	8004384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f990 	bl	8004694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	e006      	b.n	8004384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f98c 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004382:	e175      	b.n	8004670 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	bf00      	nop
    return;
 8004386:	e173      	b.n	8004670 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	2b01      	cmp	r3, #1
 800438e:	f040 814f 	bne.w	8004630 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8148 	beq.w	8004630 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8141 	beq.w	8004630 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	f040 80b6 	bne.w	8004540 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8145 	beq.w	8004674 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f080 813e 	bcs.w	8004674 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440a:	f000 8088 	beq.w	800451e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800442c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800443a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800443e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004446:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1d9      	bne.n	800440e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800446a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800447e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004482:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004486:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e1      	bne.n	800445a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e3      	bne.n	8004496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004500:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004502:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800450e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e3      	bne.n	80044dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe f852 	bl	80025c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800452c:	b29b      	uxth	r3, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	b29b      	uxth	r3, r3
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8b7 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800453a:	e09b      	b.n	8004674 <HAL_UART_IRQHandler+0x518>
 800453c:	080048ad 	.word	0x080048ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004548:	b29b      	uxth	r3, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 808e 	beq.w	8004678 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800455c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8089 	beq.w	8004678 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800457c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800458a:	647a      	str	r2, [r7, #68]	@ 0x44
 800458c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e3      	bne.n	8004566 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	623b      	str	r3, [r7, #32]
   return(result);
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e3      	bne.n	800459e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0310 	bic.w	r3, r3, #16
 80045fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004608:	61fa      	str	r2, [r7, #28]
 800460a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	69b9      	ldr	r1, [r7, #24]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	617b      	str	r3, [r7, #20]
   return(result);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e3      	bne.n	80045e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f83d 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800462e:	e023      	b.n	8004678 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_UART_IRQHandler+0x4f4>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f943 	bl	80048d4 <UART_Transmit_IT>
    return;
 800464e:	e014      	b.n	800467a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <HAL_UART_IRQHandler+0x51e>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f983 	bl	8004974 <UART_EndTransmit_IT>
    return;
 800466e:	e004      	b.n	800467a <HAL_UART_IRQHandler+0x51e>
    return;
 8004670:	bf00      	nop
 8004672:	e002      	b.n	800467a <HAL_UART_IRQHandler+0x51e>
      return;
 8004674:	bf00      	nop
 8004676:	e000      	b.n	800467a <HAL_UART_IRQHandler+0x51e>
      return;
 8004678:	bf00      	nop
  }
}
 800467a:	37e8      	adds	r7, #232	@ 0xe8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d0:	e03b      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d037      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fd fe55 	bl	8002388 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e03a      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d023      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b80      	cmp	r3, #128	@ 0x80
 8004706:	d020      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	d01d      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b08      	cmp	r3, #8
 800471a:	d116      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f857 	bl	80047e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2208      	movs	r2, #8
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e00f      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	429a      	cmp	r2, r3
 8004766:	d0b4      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2222      	movs	r2, #34	@ 0x22
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0220 	orr.w	r2, r2, #32
 80047d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b095      	sub	sp, #84	@ 0x54
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800480e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	61fb      	str	r3, [r7, #28]
   return(result);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b01      	cmp	r3, #1
 800485c:	d119      	bne.n	8004892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60bb      	str	r3, [r7, #8]
   return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800487e:	61ba      	str	r2, [r7, #24]
 8004880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048a0:	bf00      	nop
 80048a2:	3754      	adds	r7, #84	@ 0x54
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fee4 	bl	8004694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b21      	cmp	r3, #33	@ 0x21
 80048e6:	d13e      	bne.n	8004966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f0:	d114      	bne.n	800491c <UART_Transmit_IT+0x48>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d110      	bne.n	800491c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]
 800491a:	e008      	b.n	800492e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6211      	str	r1, [r2, #32]
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	e000      	b.n	8004968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800498a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fe73 	bl	8004680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	@ 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b22      	cmp	r3, #34	@ 0x22
 80049b6:	f040 80ae 	bne.w	8004b16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c2:	d117      	bne.n	80049f4 <UART_Receive_IT+0x50>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f2:	e026      	b.n	8004a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d007      	beq.n	8004a18 <UART_Receive_IT+0x74>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <UART_Receive_IT+0x82>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e008      	b.n	8004a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d15d      	bne.n	8004b12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0220 	bic.w	r2, r2, #32
 8004a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d135      	bne.n	8004b08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 0310 	bic.w	r3, r3, #16
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	623a      	str	r2, [r7, #32]
 8004ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d10a      	bne.n	8004afa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fdd1 	bl	80046a8 <HAL_UARTEx_RxEventCallback>
 8004b06:	e002      	b.n	8004b0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fc fa63 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e002      	b.n	8004b18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	@ 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b0c0      	sub	sp, #256	@ 0x100
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	ea40 0301 	orr.w	r3, r0, r1
 8004b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b78:	f021 010c 	bic.w	r1, r1, #12
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b86:	430b      	orrs	r3, r1
 8004b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	ea40 0301 	orr.w	r3, r0, r1
 8004ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b8f      	ldr	r3, [pc, #572]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d005      	beq.n	8004bc0 <UART_SetConfig+0xa0>
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b8d      	ldr	r3, [pc, #564]	@ (8004df0 <UART_SetConfig+0x2d0>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d104      	bne.n	8004bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7fe f846 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bc8:	e003      	b.n	8004bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bca:	f7fe f82d 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8004bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bdc:	f040 810c 	bne.w	8004df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	1891      	adds	r1, r2, r2
 8004bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bfa:	415b      	adcs	r3, r3
 8004bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c02:	4621      	mov	r1, r4
 8004c04:	eb12 0801 	adds.w	r8, r2, r1
 8004c08:	4629      	mov	r1, r5
 8004c0a:	eb43 0901 	adc.w	r9, r3, r1
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c22:	4690      	mov	r8, r2
 8004c24:	4699      	mov	r9, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	eb18 0303 	adds.w	r3, r8, r3
 8004c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c30:	462b      	mov	r3, r5
 8004c32:	eb49 0303 	adc.w	r3, r9, r3
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c4e:	460b      	mov	r3, r1
 8004c50:	18db      	adds	r3, r3, r3
 8004c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c54:	4613      	mov	r3, r2
 8004c56:	eb42 0303 	adc.w	r3, r2, r3
 8004c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c64:	f7fb ffe0 	bl	8000c28 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c90:	415b      	adcs	r3, r3
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c98:	4641      	mov	r1, r8
 8004c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb8:	4692      	mov	sl, r2
 8004cba:	469b      	mov	fp, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	18db      	adds	r3, r3, r3
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cea:	4613      	mov	r3, r2
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cfa:	f7fb ff95 	bl	8000c28 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004d06:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2264      	movs	r2, #100	@ 0x64
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	1acb      	subs	r3, r1, r3
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d1a:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d28:	441c      	add	r4, r3
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d44:	415b      	adcs	r3, r3
 8004d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da0:	460b      	mov	r3, r1
 8004da2:	18db      	adds	r3, r3, r3
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da6:	4613      	mov	r3, r2
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004db6:	f7fb ff37 	bl	8000c28 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	@ 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3332      	adds	r3, #50	@ 0x32
 8004dd2:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4422      	add	r2, r4
 8004de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de8:	e106      	b.n	8004ff8 <UART_SetConfig+0x4d8>
 8004dea:	bf00      	nop
 8004dec:	40011000 	.word	0x40011000
 8004df0:	40011400 	.word	0x40011400
 8004df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	6239      	str	r1, [r7, #32]
 8004e12:	415b      	adcs	r3, r3
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb43 0501 	adc.w	r5, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	00eb      	lsls	r3, r5, #3
 8004e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e32:	00e2      	lsls	r2, r4, #3
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	18e3      	adds	r3, r4, r3
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e40:	464b      	mov	r3, r9
 8004e42:	eb45 0303 	adc.w	r3, r5, r3
 8004e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e66:	4629      	mov	r1, r5
 8004e68:	008b      	lsls	r3, r1, #2
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e70:	4621      	mov	r1, r4
 8004e72:	008a      	lsls	r2, r1, #2
 8004e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e78:	f7fb fed6 	bl	8000c28 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4b60      	ldr	r3, [pc, #384]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004e82:	fba3 2302 	umull	r2, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	011c      	lsls	r4, r3, #4
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	61b9      	str	r1, [r7, #24]
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eac:	4641      	mov	r1, r8
 8004eae:	1851      	adds	r1, r2, r1
 8004eb0:	6139      	str	r1, [r7, #16]
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	414b      	adcs	r3, r1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	00cb      	lsls	r3, r1, #3
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ece:	4651      	mov	r1, sl
 8004ed0:	00ca      	lsls	r2, r1, #3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	eb42 0303 	adc.w	r3, r2, r3
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f04:	4649      	mov	r1, r9
 8004f06:	008b      	lsls	r3, r1, #2
 8004f08:	4641      	mov	r1, r8
 8004f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0e:	4641      	mov	r1, r8
 8004f10:	008a      	lsls	r2, r1, #2
 8004f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f16:	f7fb fe87 	bl	8000c28 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4b38      	ldr	r3, [pc, #224]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004f22:	fba3 2301 	umull	r2, r3, r3, r1
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2264      	movs	r2, #100	@ 0x64
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	1acb      	subs	r3, r1, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	@ 0x32
 8004f34:	4a33      	ldr	r2, [pc, #204]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f40:	441c      	add	r4, r3
 8004f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f46:	2200      	movs	r2, #0
 8004f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	1891      	adds	r1, r2, r2
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f60:	4641      	mov	r1, r8
 8004f62:	1851      	adds	r1, r2, r1
 8004f64:	6039      	str	r1, [r7, #0]
 8004f66:	4649      	mov	r1, r9
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4651      	mov	r1, sl
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f92:	464b      	mov	r3, r9
 8004f94:	460a      	mov	r2, r1
 8004f96:	eb42 0303 	adc.w	r3, r2, r3
 8004f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	008b      	lsls	r3, r1, #2
 8004fb8:	4641      	mov	r1, r8
 8004fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	008a      	lsls	r2, r1, #2
 8004fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fc6:	f7fb fe2f 	bl	8000c28 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	@ 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	@ 0x32
 8004fe2:	4a08      	ldr	r2, [pc, #32]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4422      	add	r2, r4
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ffe:	46bd      	mov	sp, r7
 8005000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005004:	51eb851f 	.word	0x51eb851f

08005008 <__cvt>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	ec57 6b10 	vmov	r6, r7, d0
 8005010:	2f00      	cmp	r7, #0
 8005012:	460c      	mov	r4, r1
 8005014:	4619      	mov	r1, r3
 8005016:	463b      	mov	r3, r7
 8005018:	bfbb      	ittet	lt
 800501a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800501e:	461f      	movlt	r7, r3
 8005020:	2300      	movge	r3, #0
 8005022:	232d      	movlt	r3, #45	@ 0x2d
 8005024:	700b      	strb	r3, [r1, #0]
 8005026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800502c:	4691      	mov	r9, r2
 800502e:	f023 0820 	bic.w	r8, r3, #32
 8005032:	bfbc      	itt	lt
 8005034:	4632      	movlt	r2, r6
 8005036:	4616      	movlt	r6, r2
 8005038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800503c:	d005      	beq.n	800504a <__cvt+0x42>
 800503e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005042:	d100      	bne.n	8005046 <__cvt+0x3e>
 8005044:	3401      	adds	r4, #1
 8005046:	2102      	movs	r1, #2
 8005048:	e000      	b.n	800504c <__cvt+0x44>
 800504a:	2103      	movs	r1, #3
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	ab02      	add	r3, sp, #8
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	ec47 6b10 	vmov	d0, r6, r7
 8005058:	4653      	mov	r3, sl
 800505a:	4622      	mov	r2, r4
 800505c:	f000 ff9c 	bl	8005f98 <_dtoa_r>
 8005060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005064:	4605      	mov	r5, r0
 8005066:	d119      	bne.n	800509c <__cvt+0x94>
 8005068:	f019 0f01 	tst.w	r9, #1
 800506c:	d00e      	beq.n	800508c <__cvt+0x84>
 800506e:	eb00 0904 	add.w	r9, r0, r4
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	4630      	mov	r0, r6
 8005078:	4639      	mov	r1, r7
 800507a:	f7fb fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800507e:	b108      	cbz	r0, 8005084 <__cvt+0x7c>
 8005080:	f8cd 900c 	str.w	r9, [sp, #12]
 8005084:	2230      	movs	r2, #48	@ 0x30
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	454b      	cmp	r3, r9
 800508a:	d31e      	bcc.n	80050ca <__cvt+0xc2>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005090:	1b5b      	subs	r3, r3, r5
 8005092:	4628      	mov	r0, r5
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	b004      	add	sp, #16
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050a0:	eb00 0904 	add.w	r9, r0, r4
 80050a4:	d1e5      	bne.n	8005072 <__cvt+0x6a>
 80050a6:	7803      	ldrb	r3, [r0, #0]
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d10a      	bne.n	80050c2 <__cvt+0xba>
 80050ac:	2200      	movs	r2, #0
 80050ae:	2300      	movs	r3, #0
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb fd28 	bl	8000b08 <__aeabi_dcmpeq>
 80050b8:	b918      	cbnz	r0, 80050c2 <__cvt+0xba>
 80050ba:	f1c4 0401 	rsb	r4, r4, #1
 80050be:	f8ca 4000 	str.w	r4, [sl]
 80050c2:	f8da 3000 	ldr.w	r3, [sl]
 80050c6:	4499      	add	r9, r3
 80050c8:	e7d3      	b.n	8005072 <__cvt+0x6a>
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	9103      	str	r1, [sp, #12]
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e7d9      	b.n	8005086 <__cvt+0x7e>

080050d2 <__exponent>:
 80050d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d4:	2900      	cmp	r1, #0
 80050d6:	bfba      	itte	lt
 80050d8:	4249      	neglt	r1, r1
 80050da:	232d      	movlt	r3, #45	@ 0x2d
 80050dc:	232b      	movge	r3, #43	@ 0x2b
 80050de:	2909      	cmp	r1, #9
 80050e0:	7002      	strb	r2, [r0, #0]
 80050e2:	7043      	strb	r3, [r0, #1]
 80050e4:	dd29      	ble.n	800513a <__exponent+0x68>
 80050e6:	f10d 0307 	add.w	r3, sp, #7
 80050ea:	461d      	mov	r5, r3
 80050ec:	270a      	movs	r7, #10
 80050ee:	461a      	mov	r2, r3
 80050f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80050f4:	fb07 1416 	mls	r4, r7, r6, r1
 80050f8:	3430      	adds	r4, #48	@ 0x30
 80050fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050fe:	460c      	mov	r4, r1
 8005100:	2c63      	cmp	r4, #99	@ 0x63
 8005102:	f103 33ff 	add.w	r3, r3, #4294967295
 8005106:	4631      	mov	r1, r6
 8005108:	dcf1      	bgt.n	80050ee <__exponent+0x1c>
 800510a:	3130      	adds	r1, #48	@ 0x30
 800510c:	1e94      	subs	r4, r2, #2
 800510e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005112:	1c41      	adds	r1, r0, #1
 8005114:	4623      	mov	r3, r4
 8005116:	42ab      	cmp	r3, r5
 8005118:	d30a      	bcc.n	8005130 <__exponent+0x5e>
 800511a:	f10d 0309 	add.w	r3, sp, #9
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	42ac      	cmp	r4, r5
 8005122:	bf88      	it	hi
 8005124:	2300      	movhi	r3, #0
 8005126:	3302      	adds	r3, #2
 8005128:	4403      	add	r3, r0
 800512a:	1a18      	subs	r0, r3, r0
 800512c:	b003      	add	sp, #12
 800512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005130:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005134:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005138:	e7ed      	b.n	8005116 <__exponent+0x44>
 800513a:	2330      	movs	r3, #48	@ 0x30
 800513c:	3130      	adds	r1, #48	@ 0x30
 800513e:	7083      	strb	r3, [r0, #2]
 8005140:	70c1      	strb	r1, [r0, #3]
 8005142:	1d03      	adds	r3, r0, #4
 8005144:	e7f1      	b.n	800512a <__exponent+0x58>
	...

08005148 <_printf_float>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b08d      	sub	sp, #52	@ 0x34
 800514e:	460c      	mov	r4, r1
 8005150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005154:	4616      	mov	r6, r2
 8005156:	461f      	mov	r7, r3
 8005158:	4605      	mov	r5, r0
 800515a:	f000 fe1b 	bl	8005d94 <_localeconv_r>
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f8a4 	bl	80002b0 <strlen>
 8005168:	2300      	movs	r3, #0
 800516a:	930a      	str	r3, [sp, #40]	@ 0x28
 800516c:	f8d8 3000 	ldr.w	r3, [r8]
 8005170:	9005      	str	r0, [sp, #20]
 8005172:	3307      	adds	r3, #7
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	f103 0208 	add.w	r2, r3, #8
 800517c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005180:	f8d4 b000 	ldr.w	fp, [r4]
 8005184:	f8c8 2000 	str.w	r2, [r8]
 8005188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800518c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	f8cd 8018 	str.w	r8, [sp, #24]
 8005196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800519a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519e:	4b9c      	ldr	r3, [pc, #624]	@ (8005410 <_printf_float+0x2c8>)
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	f7fb fce2 	bl	8000b6c <__aeabi_dcmpun>
 80051a8:	bb70      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ae:	4b98      	ldr	r3, [pc, #608]	@ (8005410 <_printf_float+0x2c8>)
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	f7fb fcbc 	bl	8000b30 <__aeabi_dcmple>
 80051b8:	bb30      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fb fcab 	bl	8000b1c <__aeabi_dcmplt>
 80051c6:	b110      	cbz	r0, 80051ce <_printf_float+0x86>
 80051c8:	232d      	movs	r3, #45	@ 0x2d
 80051ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ce:	4a91      	ldr	r2, [pc, #580]	@ (8005414 <_printf_float+0x2cc>)
 80051d0:	4b91      	ldr	r3, [pc, #580]	@ (8005418 <_printf_float+0x2d0>)
 80051d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051d6:	bf8c      	ite	hi
 80051d8:	4690      	movhi	r8, r2
 80051da:	4698      	movls	r8, r3
 80051dc:	2303      	movs	r3, #3
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	f02b 0304 	bic.w	r3, fp, #4
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	9700      	str	r7, [sp, #0]
 80051ec:	4633      	mov	r3, r6
 80051ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f9d2 	bl	800559c <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	f040 808d 	bne.w	8005318 <_printf_float+0x1d0>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	b00d      	add	sp, #52	@ 0x34
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fcac 	bl	8000b6c <__aeabi_dcmpun>
 8005214:	b140      	cbz	r0, 8005228 <_printf_float+0xe0>
 8005216:	464b      	mov	r3, r9
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbc      	itt	lt
 800521c:	232d      	movlt	r3, #45	@ 0x2d
 800521e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005222:	4a7e      	ldr	r2, [pc, #504]	@ (800541c <_printf_float+0x2d4>)
 8005224:	4b7e      	ldr	r3, [pc, #504]	@ (8005420 <_printf_float+0x2d8>)
 8005226:	e7d4      	b.n	80051d2 <_printf_float+0x8a>
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	d13b      	bne.n	80052ac <_printf_float+0x164>
 8005234:	2306      	movs	r3, #6
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800523c:	2300      	movs	r3, #0
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	ab0a      	add	r3, sp, #40	@ 0x28
 8005244:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005248:	ab09      	add	r3, sp, #36	@ 0x24
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	ec49 8b10 	vmov	d0, r8, r9
 8005252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005256:	4628      	mov	r0, r5
 8005258:	f7ff fed6 	bl	8005008 <__cvt>
 800525c:	9b06      	ldr	r3, [sp, #24]
 800525e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005260:	2b47      	cmp	r3, #71	@ 0x47
 8005262:	4680      	mov	r8, r0
 8005264:	d129      	bne.n	80052ba <_printf_float+0x172>
 8005266:	1cc8      	adds	r0, r1, #3
 8005268:	db02      	blt.n	8005270 <_printf_float+0x128>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	4299      	cmp	r1, r3
 800526e:	dd41      	ble.n	80052f4 <_printf_float+0x1ac>
 8005270:	f1aa 0a02 	sub.w	sl, sl, #2
 8005274:	fa5f fa8a 	uxtb.w	sl, sl
 8005278:	3901      	subs	r1, #1
 800527a:	4652      	mov	r2, sl
 800527c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005280:	9109      	str	r1, [sp, #36]	@ 0x24
 8005282:	f7ff ff26 	bl	80050d2 <__exponent>
 8005286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005288:	1813      	adds	r3, r2, r0
 800528a:	2a01      	cmp	r2, #1
 800528c:	4681      	mov	r9, r0
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	dc02      	bgt.n	8005298 <_printf_float+0x150>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	07d2      	lsls	r2, r2, #31
 8005296:	d501      	bpl.n	800529c <_printf_float+0x154>
 8005298:	3301      	adds	r3, #1
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0a2      	beq.n	80051ea <_printf_float+0xa2>
 80052a4:	232d      	movs	r3, #45	@ 0x2d
 80052a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052aa:	e79e      	b.n	80051ea <_printf_float+0xa2>
 80052ac:	9a06      	ldr	r2, [sp, #24]
 80052ae:	2a47      	cmp	r2, #71	@ 0x47
 80052b0:	d1c2      	bne.n	8005238 <_printf_float+0xf0>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1c0      	bne.n	8005238 <_printf_float+0xf0>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7bd      	b.n	8005236 <_printf_float+0xee>
 80052ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052be:	d9db      	bls.n	8005278 <_printf_float+0x130>
 80052c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052c4:	d118      	bne.n	80052f8 <_printf_float+0x1b0>
 80052c6:	2900      	cmp	r1, #0
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	dd0b      	ble.n	80052e4 <_printf_float+0x19c>
 80052cc:	6121      	str	r1, [r4, #16]
 80052ce:	b913      	cbnz	r3, 80052d6 <_printf_float+0x18e>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	07d0      	lsls	r0, r2, #31
 80052d4:	d502      	bpl.n	80052dc <_printf_float+0x194>
 80052d6:	3301      	adds	r3, #1
 80052d8:	440b      	add	r3, r1
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052de:	f04f 0900 	mov.w	r9, #0
 80052e2:	e7db      	b.n	800529c <_printf_float+0x154>
 80052e4:	b913      	cbnz	r3, 80052ec <_printf_float+0x1a4>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	07d2      	lsls	r2, r2, #31
 80052ea:	d501      	bpl.n	80052f0 <_printf_float+0x1a8>
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x192>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f2      	b.n	80052da <_printf_float+0x192>
 80052f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052fa:	4299      	cmp	r1, r3
 80052fc:	db05      	blt.n	800530a <_printf_float+0x1c2>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	6121      	str	r1, [r4, #16]
 8005302:	07d8      	lsls	r0, r3, #31
 8005304:	d5ea      	bpl.n	80052dc <_printf_float+0x194>
 8005306:	1c4b      	adds	r3, r1, #1
 8005308:	e7e7      	b.n	80052da <_printf_float+0x192>
 800530a:	2900      	cmp	r1, #0
 800530c:	bfd4      	ite	le
 800530e:	f1c1 0202 	rsble	r2, r1, #2
 8005312:	2201      	movgt	r2, #1
 8005314:	4413      	add	r3, r2
 8005316:	e7e0      	b.n	80052da <_printf_float+0x192>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	055a      	lsls	r2, r3, #21
 800531c:	d407      	bmi.n	800532e <_printf_float+0x1e6>
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	4642      	mov	r2, r8
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	d12b      	bne.n	8005384 <_printf_float+0x23c>
 800532c:	e767      	b.n	80051fe <_printf_float+0xb6>
 800532e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005332:	f240 80dd 	bls.w	80054f0 <_printf_float+0x3a8>
 8005336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	f7fb fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8005342:	2800      	cmp	r0, #0
 8005344:	d033      	beq.n	80053ae <_printf_float+0x266>
 8005346:	4a37      	ldr	r2, [pc, #220]	@ (8005424 <_printf_float+0x2dc>)
 8005348:	2301      	movs	r3, #1
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f af54 	beq.w	80051fe <_printf_float+0xb6>
 8005356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800535a:	4543      	cmp	r3, r8
 800535c:	db02      	blt.n	8005364 <_printf_float+0x21c>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	07d8      	lsls	r0, r3, #31
 8005362:	d50f      	bpl.n	8005384 <_printf_float+0x23c>
 8005364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f af45 	beq.w	80051fe <_printf_float+0xb6>
 8005374:	f04f 0900 	mov.w	r9, #0
 8005378:	f108 38ff 	add.w	r8, r8, #4294967295
 800537c:	f104 0a1a 	add.w	sl, r4, #26
 8005380:	45c8      	cmp	r8, r9
 8005382:	dc09      	bgt.n	8005398 <_printf_float+0x250>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	079b      	lsls	r3, r3, #30
 8005388:	f100 8103 	bmi.w	8005592 <_printf_float+0x44a>
 800538c:	68e0      	ldr	r0, [r4, #12]
 800538e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005390:	4298      	cmp	r0, r3
 8005392:	bfb8      	it	lt
 8005394:	4618      	movlt	r0, r3
 8005396:	e734      	b.n	8005202 <_printf_float+0xba>
 8005398:	2301      	movs	r3, #1
 800539a:	4652      	mov	r2, sl
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	f43f af2b 	beq.w	80051fe <_printf_float+0xb6>
 80053a8:	f109 0901 	add.w	r9, r9, #1
 80053ac:	e7e8      	b.n	8005380 <_printf_float+0x238>
 80053ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dc39      	bgt.n	8005428 <_printf_float+0x2e0>
 80053b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <_printf_float+0x2dc>)
 80053b6:	2301      	movs	r3, #1
 80053b8:	4631      	mov	r1, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	f43f af1d 	beq.w	80051fe <_printf_float+0xb6>
 80053c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053c8:	ea59 0303 	orrs.w	r3, r9, r3
 80053cc:	d102      	bne.n	80053d4 <_printf_float+0x28c>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07d9      	lsls	r1, r3, #31
 80053d2:	d5d7      	bpl.n	8005384 <_printf_float+0x23c>
 80053d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f af0d 	beq.w	80051fe <_printf_float+0xb6>
 80053e4:	f04f 0a00 	mov.w	sl, #0
 80053e8:	f104 0b1a 	add.w	fp, r4, #26
 80053ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ee:	425b      	negs	r3, r3
 80053f0:	4553      	cmp	r3, sl
 80053f2:	dc01      	bgt.n	80053f8 <_printf_float+0x2b0>
 80053f4:	464b      	mov	r3, r9
 80053f6:	e793      	b.n	8005320 <_printf_float+0x1d8>
 80053f8:	2301      	movs	r3, #1
 80053fa:	465a      	mov	r2, fp
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	f43f aefb 	beq.w	80051fe <_printf_float+0xb6>
 8005408:	f10a 0a01 	add.w	sl, sl, #1
 800540c:	e7ee      	b.n	80053ec <_printf_float+0x2a4>
 800540e:	bf00      	nop
 8005410:	7fefffff 	.word	0x7fefffff
 8005414:	08009d70 	.word	0x08009d70
 8005418:	08009d6c 	.word	0x08009d6c
 800541c:	08009d78 	.word	0x08009d78
 8005420:	08009d74 	.word	0x08009d74
 8005424:	08009d7c 	.word	0x08009d7c
 8005428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800542a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800542e:	4553      	cmp	r3, sl
 8005430:	bfa8      	it	ge
 8005432:	4653      	movge	r3, sl
 8005434:	2b00      	cmp	r3, #0
 8005436:	4699      	mov	r9, r3
 8005438:	dc36      	bgt.n	80054a8 <_printf_float+0x360>
 800543a:	f04f 0b00 	mov.w	fp, #0
 800543e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005442:	f104 021a 	add.w	r2, r4, #26
 8005446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005448:	9306      	str	r3, [sp, #24]
 800544a:	eba3 0309 	sub.w	r3, r3, r9
 800544e:	455b      	cmp	r3, fp
 8005450:	dc31      	bgt.n	80054b6 <_printf_float+0x36e>
 8005452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005454:	459a      	cmp	sl, r3
 8005456:	dc3a      	bgt.n	80054ce <_printf_float+0x386>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07da      	lsls	r2, r3, #31
 800545c:	d437      	bmi.n	80054ce <_printf_float+0x386>
 800545e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005460:	ebaa 0903 	sub.w	r9, sl, r3
 8005464:	9b06      	ldr	r3, [sp, #24]
 8005466:	ebaa 0303 	sub.w	r3, sl, r3
 800546a:	4599      	cmp	r9, r3
 800546c:	bfa8      	it	ge
 800546e:	4699      	movge	r9, r3
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	dc33      	bgt.n	80054de <_printf_float+0x396>
 8005476:	f04f 0800 	mov.w	r8, #0
 800547a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800547e:	f104 0b1a 	add.w	fp, r4, #26
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	ebaa 0303 	sub.w	r3, sl, r3
 8005488:	eba3 0309 	sub.w	r3, r3, r9
 800548c:	4543      	cmp	r3, r8
 800548e:	f77f af79 	ble.w	8005384 <_printf_float+0x23c>
 8005492:	2301      	movs	r3, #1
 8005494:	465a      	mov	r2, fp
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f aeae 	beq.w	80051fe <_printf_float+0xb6>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	e7ec      	b.n	8005482 <_printf_float+0x33a>
 80054a8:	4642      	mov	r2, r8
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1c2      	bne.n	800543a <_printf_float+0x2f2>
 80054b4:	e6a3      	b.n	80051fe <_printf_float+0xb6>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	9206      	str	r2, [sp, #24]
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	f43f ae9c 	beq.w	80051fe <_printf_float+0xb6>
 80054c6:	9a06      	ldr	r2, [sp, #24]
 80054c8:	f10b 0b01 	add.w	fp, fp, #1
 80054cc:	e7bb      	b.n	8005446 <_printf_float+0x2fe>
 80054ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	d1c0      	bne.n	800545e <_printf_float+0x316>
 80054dc:	e68f      	b.n	80051fe <_printf_float+0xb6>
 80054de:	9a06      	ldr	r2, [sp, #24]
 80054e0:	464b      	mov	r3, r9
 80054e2:	4442      	add	r2, r8
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	d1c3      	bne.n	8005476 <_printf_float+0x32e>
 80054ee:	e686      	b.n	80051fe <_printf_float+0xb6>
 80054f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054f4:	f1ba 0f01 	cmp.w	sl, #1
 80054f8:	dc01      	bgt.n	80054fe <_printf_float+0x3b6>
 80054fa:	07db      	lsls	r3, r3, #31
 80054fc:	d536      	bpl.n	800556c <_printf_float+0x424>
 80054fe:	2301      	movs	r3, #1
 8005500:	4642      	mov	r2, r8
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f ae78 	beq.w	80051fe <_printf_float+0xb6>
 800550e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f ae70 	beq.w	80051fe <_printf_float+0xb6>
 800551e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552a:	f7fb faed 	bl	8000b08 <__aeabi_dcmpeq>
 800552e:	b9c0      	cbnz	r0, 8005562 <_printf_float+0x41a>
 8005530:	4653      	mov	r3, sl
 8005532:	f108 0201 	add.w	r2, r8, #1
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	d10c      	bne.n	800555a <_printf_float+0x412>
 8005540:	e65d      	b.n	80051fe <_printf_float+0xb6>
 8005542:	2301      	movs	r3, #1
 8005544:	465a      	mov	r2, fp
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae56 	beq.w	80051fe <_printf_float+0xb6>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	45d0      	cmp	r8, sl
 8005558:	dbf3      	blt.n	8005542 <_printf_float+0x3fa>
 800555a:	464b      	mov	r3, r9
 800555c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005560:	e6df      	b.n	8005322 <_printf_float+0x1da>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 0b1a 	add.w	fp, r4, #26
 800556a:	e7f4      	b.n	8005556 <_printf_float+0x40e>
 800556c:	2301      	movs	r3, #1
 800556e:	4642      	mov	r2, r8
 8005570:	e7e1      	b.n	8005536 <_printf_float+0x3ee>
 8005572:	2301      	movs	r3, #1
 8005574:	464a      	mov	r2, r9
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	f43f ae3e 	beq.w	80051fe <_printf_float+0xb6>
 8005582:	f108 0801 	add.w	r8, r8, #1
 8005586:	68e3      	ldr	r3, [r4, #12]
 8005588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	4543      	cmp	r3, r8
 800558e:	dcf0      	bgt.n	8005572 <_printf_float+0x42a>
 8005590:	e6fc      	b.n	800538c <_printf_float+0x244>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	f104 0919 	add.w	r9, r4, #25
 800559a:	e7f4      	b.n	8005586 <_printf_float+0x43e>

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4698      	mov	r8, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	3b00      	subs	r3, #0
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c8      	blx	r9
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf02      	ittt	eq
 800560e:	68e5      	ldreq	r5, [r4, #12]
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	1aed      	subeq	r5, r5, r3
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4641      	mov	r1, r8
 8005638:	4638      	mov	r0, r7
 800563a:	47c8      	blx	r9
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	@ 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4641      	mov	r1, r8
 800566a:	4638      	mov	r0, r7
 800566c:	47c8      	blx	r9
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005680:	2f78      	cmp	r7, #120	@ 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	@ 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d1 	beq.w	800583c <_printf_i+0x1c4>
 800569a:	2f58      	cmp	r7, #88	@ 0x58
 800569c:	f000 80b8 	beq.w	8005810 <_printf_i+0x198>
 80056a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	@ (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005823 	.word	0x08005823
 80056e8:	0800574f 	.word	0x0800574f
 80056ec:	080057dd 	.word	0x080057dd
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005845 	.word	0x08005845
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	0800574f 	.word	0x0800574f
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057e5 	.word	0x080057e5
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6032      	str	r2, [r6, #0]
 8005718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09c      	b.n	800585e <_printf_i+0x1e6>
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	1d19      	adds	r1, r3, #4
 800572a:	6031      	str	r1, [r6, #0]
 800572c:	0606      	lsls	r6, r0, #24
 800572e:	d501      	bpl.n	8005734 <_printf_i+0xbc>
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	e003      	b.n	800573c <_printf_i+0xc4>
 8005734:	0645      	lsls	r5, r0, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0xb8>
 8005738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800573c:	2d00      	cmp	r5, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xd0>
 8005740:	232d      	movs	r3, #45	@ 0x2d
 8005742:	426d      	negs	r5, r5
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005748:	4858      	ldr	r0, [pc, #352]	@ (80058ac <_printf_i+0x234>)
 800574a:	230a      	movs	r3, #10
 800574c:	e011      	b.n	8005772 <_printf_i+0xfa>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	0608      	lsls	r0, r1, #24
 8005754:	f853 5b04 	ldr.w	r5, [r3], #4
 8005758:	d402      	bmi.n	8005760 <_printf_i+0xe8>
 800575a:	0649      	lsls	r1, r1, #25
 800575c:	bf48      	it	mi
 800575e:	b2ad      	uxthmi	r5, r5
 8005760:	2f6f      	cmp	r7, #111	@ 0x6f
 8005762:	4852      	ldr	r0, [pc, #328]	@ (80058ac <_printf_i+0x234>)
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	bf14      	ite	ne
 8005768:	230a      	movne	r3, #10
 800576a:	2308      	moveq	r3, #8
 800576c:	2100      	movs	r1, #0
 800576e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005772:	6866      	ldr	r6, [r4, #4]
 8005774:	60a6      	str	r6, [r4, #8]
 8005776:	2e00      	cmp	r6, #0
 8005778:	db05      	blt.n	8005786 <_printf_i+0x10e>
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	432e      	orrs	r6, r5
 800577e:	f021 0104 	bic.w	r1, r1, #4
 8005782:	6021      	str	r1, [r4, #0]
 8005784:	d04b      	beq.n	800581e <_printf_i+0x1a6>
 8005786:	4616      	mov	r6, r2
 8005788:	fbb5 f1f3 	udiv	r1, r5, r3
 800578c:	fb03 5711 	mls	r7, r3, r1, r5
 8005790:	5dc7      	ldrb	r7, [r0, r7]
 8005792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005796:	462f      	mov	r7, r5
 8005798:	42bb      	cmp	r3, r7
 800579a:	460d      	mov	r5, r1
 800579c:	d9f4      	bls.n	8005788 <_printf_i+0x110>
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d10b      	bne.n	80057ba <_printf_i+0x142>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	07df      	lsls	r7, r3, #31
 80057a6:	d508      	bpl.n	80057ba <_printf_i+0x142>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	6861      	ldr	r1, [r4, #4]
 80057ac:	4299      	cmp	r1, r3
 80057ae:	bfde      	ittt	le
 80057b0:	2330      	movle	r3, #48	@ 0x30
 80057b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ba:	1b92      	subs	r2, r2, r6
 80057bc:	6122      	str	r2, [r4, #16]
 80057be:	f8cd a000 	str.w	sl, [sp]
 80057c2:	464b      	mov	r3, r9
 80057c4:	aa03      	add	r2, sp, #12
 80057c6:	4621      	mov	r1, r4
 80057c8:	4640      	mov	r0, r8
 80057ca:	f7ff fee7 	bl	800559c <_printf_common>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d14a      	bne.n	8005868 <_printf_i+0x1f0>
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295
 80057d6:	b004      	add	sp, #16
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	f043 0320 	orr.w	r3, r3, #32
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	4832      	ldr	r0, [pc, #200]	@ (80058b0 <_printf_i+0x238>)
 80057e6:	2778      	movs	r7, #120	@ 0x78
 80057e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	6831      	ldr	r1, [r6, #0]
 80057f0:	061f      	lsls	r7, r3, #24
 80057f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80057f6:	d402      	bmi.n	80057fe <_printf_i+0x186>
 80057f8:	065f      	lsls	r7, r3, #25
 80057fa:	bf48      	it	mi
 80057fc:	b2ad      	uxthmi	r5, r5
 80057fe:	6031      	str	r1, [r6, #0]
 8005800:	07d9      	lsls	r1, r3, #31
 8005802:	bf44      	itt	mi
 8005804:	f043 0320 	orrmi.w	r3, r3, #32
 8005808:	6023      	strmi	r3, [r4, #0]
 800580a:	b11d      	cbz	r5, 8005814 <_printf_i+0x19c>
 800580c:	2310      	movs	r3, #16
 800580e:	e7ad      	b.n	800576c <_printf_i+0xf4>
 8005810:	4826      	ldr	r0, [pc, #152]	@ (80058ac <_printf_i+0x234>)
 8005812:	e7e9      	b.n	80057e8 <_printf_i+0x170>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	e7f6      	b.n	800580c <_printf_i+0x194>
 800581e:	4616      	mov	r6, r2
 8005820:	e7bd      	b.n	800579e <_printf_i+0x126>
 8005822:	6833      	ldr	r3, [r6, #0]
 8005824:	6825      	ldr	r5, [r4, #0]
 8005826:	6961      	ldr	r1, [r4, #20]
 8005828:	1d18      	adds	r0, r3, #4
 800582a:	6030      	str	r0, [r6, #0]
 800582c:	062e      	lsls	r6, r5, #24
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	d501      	bpl.n	8005836 <_printf_i+0x1be>
 8005832:	6019      	str	r1, [r3, #0]
 8005834:	e002      	b.n	800583c <_printf_i+0x1c4>
 8005836:	0668      	lsls	r0, r5, #25
 8005838:	d5fb      	bpl.n	8005832 <_printf_i+0x1ba>
 800583a:	8019      	strh	r1, [r3, #0]
 800583c:	2300      	movs	r3, #0
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	4616      	mov	r6, r2
 8005842:	e7bc      	b.n	80057be <_printf_i+0x146>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	6032      	str	r2, [r6, #0]
 800584a:	681e      	ldr	r6, [r3, #0]
 800584c:	6862      	ldr	r2, [r4, #4]
 800584e:	2100      	movs	r1, #0
 8005850:	4630      	mov	r0, r6
 8005852:	f7fa fcdd 	bl	8000210 <memchr>
 8005856:	b108      	cbz	r0, 800585c <_printf_i+0x1e4>
 8005858:	1b80      	subs	r0, r0, r6
 800585a:	6060      	str	r0, [r4, #4]
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	2300      	movs	r3, #0
 8005862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005866:	e7aa      	b.n	80057be <_printf_i+0x146>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	4632      	mov	r2, r6
 800586c:	4649      	mov	r1, r9
 800586e:	4640      	mov	r0, r8
 8005870:	47d0      	blx	sl
 8005872:	3001      	adds	r0, #1
 8005874:	d0ad      	beq.n	80057d2 <_printf_i+0x15a>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	079b      	lsls	r3, r3, #30
 800587a:	d413      	bmi.n	80058a4 <_printf_i+0x22c>
 800587c:	68e0      	ldr	r0, [r4, #12]
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	4298      	cmp	r0, r3
 8005882:	bfb8      	it	lt
 8005884:	4618      	movlt	r0, r3
 8005886:	e7a6      	b.n	80057d6 <_printf_i+0x15e>
 8005888:	2301      	movs	r3, #1
 800588a:	4632      	mov	r2, r6
 800588c:	4649      	mov	r1, r9
 800588e:	4640      	mov	r0, r8
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d09d      	beq.n	80057d2 <_printf_i+0x15a>
 8005896:	3501      	adds	r5, #1
 8005898:	68e3      	ldr	r3, [r4, #12]
 800589a:	9903      	ldr	r1, [sp, #12]
 800589c:	1a5b      	subs	r3, r3, r1
 800589e:	42ab      	cmp	r3, r5
 80058a0:	dcf2      	bgt.n	8005888 <_printf_i+0x210>
 80058a2:	e7eb      	b.n	800587c <_printf_i+0x204>
 80058a4:	2500      	movs	r5, #0
 80058a6:	f104 0619 	add.w	r6, r4, #25
 80058aa:	e7f5      	b.n	8005898 <_printf_i+0x220>
 80058ac:	08009d7e 	.word	0x08009d7e
 80058b0:	08009d8f 	.word	0x08009d8f

080058b4 <std>:
 80058b4:	2300      	movs	r3, #0
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	e9c0 3300 	strd	r3, r3, [r0]
 80058be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c2:	6083      	str	r3, [r0, #8]
 80058c4:	8181      	strh	r1, [r0, #12]
 80058c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80058c8:	81c2      	strh	r2, [r0, #14]
 80058ca:	6183      	str	r3, [r0, #24]
 80058cc:	4619      	mov	r1, r3
 80058ce:	2208      	movs	r2, #8
 80058d0:	305c      	adds	r0, #92	@ 0x5c
 80058d2:	f000 fa57 	bl	8005d84 <memset>
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <std+0x58>)
 80058d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x5c>)
 80058dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x60>)
 80058e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x64>)
 80058e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x68>)
 80058e8:	6224      	str	r4, [r4, #32]
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d006      	beq.n	80058fc <std+0x48>
 80058ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058f2:	4294      	cmp	r4, r2
 80058f4:	d002      	beq.n	80058fc <std+0x48>
 80058f6:	33d0      	adds	r3, #208	@ 0xd0
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d105      	bne.n	8005908 <std+0x54>
 80058fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005904:	f000 baba 	b.w	8005e7c <__retarget_lock_init_recursive>
 8005908:	bd10      	pop	{r4, pc}
 800590a:	bf00      	nop
 800590c:	08005bd5 	.word	0x08005bd5
 8005910:	08005bf7 	.word	0x08005bf7
 8005914:	08005c2f 	.word	0x08005c2f
 8005918:	08005c53 	.word	0x08005c53
 800591c:	2000034c 	.word	0x2000034c

08005920 <stdio_exit_handler>:
 8005920:	4a02      	ldr	r2, [pc, #8]	@ (800592c <stdio_exit_handler+0xc>)
 8005922:	4903      	ldr	r1, [pc, #12]	@ (8005930 <stdio_exit_handler+0x10>)
 8005924:	4803      	ldr	r0, [pc, #12]	@ (8005934 <stdio_exit_handler+0x14>)
 8005926:	f000 b869 	b.w	80059fc <_fwalk_sglue>
 800592a:	bf00      	nop
 800592c:	2000000c 	.word	0x2000000c
 8005930:	080077b9 	.word	0x080077b9
 8005934:	2000001c 	.word	0x2000001c

08005938 <cleanup_stdio>:
 8005938:	6841      	ldr	r1, [r0, #4]
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <cleanup_stdio+0x34>)
 800593c:	4299      	cmp	r1, r3
 800593e:	b510      	push	{r4, lr}
 8005940:	4604      	mov	r4, r0
 8005942:	d001      	beq.n	8005948 <cleanup_stdio+0x10>
 8005944:	f001 ff38 	bl	80077b8 <_fflush_r>
 8005948:	68a1      	ldr	r1, [r4, #8]
 800594a:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <cleanup_stdio+0x38>)
 800594c:	4299      	cmp	r1, r3
 800594e:	d002      	beq.n	8005956 <cleanup_stdio+0x1e>
 8005950:	4620      	mov	r0, r4
 8005952:	f001 ff31 	bl	80077b8 <_fflush_r>
 8005956:	68e1      	ldr	r1, [r4, #12]
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <cleanup_stdio+0x3c>)
 800595a:	4299      	cmp	r1, r3
 800595c:	d004      	beq.n	8005968 <cleanup_stdio+0x30>
 800595e:	4620      	mov	r0, r4
 8005960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005964:	f001 bf28 	b.w	80077b8 <_fflush_r>
 8005968:	bd10      	pop	{r4, pc}
 800596a:	bf00      	nop
 800596c:	2000034c 	.word	0x2000034c
 8005970:	200003b4 	.word	0x200003b4
 8005974:	2000041c 	.word	0x2000041c

08005978 <global_stdio_init.part.0>:
 8005978:	b510      	push	{r4, lr}
 800597a:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <global_stdio_init.part.0+0x30>)
 800597c:	4c0b      	ldr	r4, [pc, #44]	@ (80059ac <global_stdio_init.part.0+0x34>)
 800597e:	4a0c      	ldr	r2, [pc, #48]	@ (80059b0 <global_stdio_init.part.0+0x38>)
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	4620      	mov	r0, r4
 8005984:	2200      	movs	r2, #0
 8005986:	2104      	movs	r1, #4
 8005988:	f7ff ff94 	bl	80058b4 <std>
 800598c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005990:	2201      	movs	r2, #1
 8005992:	2109      	movs	r1, #9
 8005994:	f7ff ff8e 	bl	80058b4 <std>
 8005998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800599c:	2202      	movs	r2, #2
 800599e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a2:	2112      	movs	r1, #18
 80059a4:	f7ff bf86 	b.w	80058b4 <std>
 80059a8:	20000484 	.word	0x20000484
 80059ac:	2000034c 	.word	0x2000034c
 80059b0:	08005921 	.word	0x08005921

080059b4 <__sfp_lock_acquire>:
 80059b4:	4801      	ldr	r0, [pc, #4]	@ (80059bc <__sfp_lock_acquire+0x8>)
 80059b6:	f000 ba62 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	2000048d 	.word	0x2000048d

080059c0 <__sfp_lock_release>:
 80059c0:	4801      	ldr	r0, [pc, #4]	@ (80059c8 <__sfp_lock_release+0x8>)
 80059c2:	f000 ba5d 	b.w	8005e80 <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	2000048d 	.word	0x2000048d

080059cc <__sinit>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4604      	mov	r4, r0
 80059d0:	f7ff fff0 	bl	80059b4 <__sfp_lock_acquire>
 80059d4:	6a23      	ldr	r3, [r4, #32]
 80059d6:	b11b      	cbz	r3, 80059e0 <__sinit+0x14>
 80059d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059dc:	f7ff bff0 	b.w	80059c0 <__sfp_lock_release>
 80059e0:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <__sinit+0x28>)
 80059e2:	6223      	str	r3, [r4, #32]
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <__sinit+0x2c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f5      	bne.n	80059d8 <__sinit+0xc>
 80059ec:	f7ff ffc4 	bl	8005978 <global_stdio_init.part.0>
 80059f0:	e7f2      	b.n	80059d8 <__sinit+0xc>
 80059f2:	bf00      	nop
 80059f4:	08005939 	.word	0x08005939
 80059f8:	20000484 	.word	0x20000484

080059fc <_fwalk_sglue>:
 80059fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a00:	4607      	mov	r7, r0
 8005a02:	4688      	mov	r8, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	2600      	movs	r6, #0
 8005a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a10:	d505      	bpl.n	8005a1e <_fwalk_sglue+0x22>
 8005a12:	6824      	ldr	r4, [r4, #0]
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	d1f7      	bne.n	8005a08 <_fwalk_sglue+0xc>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d907      	bls.n	8005a34 <_fwalk_sglue+0x38>
 8005a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	d003      	beq.n	8005a34 <_fwalk_sglue+0x38>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c0      	blx	r8
 8005a32:	4306      	orrs	r6, r0
 8005a34:	3568      	adds	r5, #104	@ 0x68
 8005a36:	e7e9      	b.n	8005a0c <_fwalk_sglue+0x10>

08005a38 <iprintf>:
 8005a38:	b40f      	push	{r0, r1, r2, r3}
 8005a3a:	b507      	push	{r0, r1, r2, lr}
 8005a3c:	4906      	ldr	r1, [pc, #24]	@ (8005a58 <iprintf+0x20>)
 8005a3e:	ab04      	add	r3, sp, #16
 8005a40:	6808      	ldr	r0, [r1, #0]
 8005a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a46:	6881      	ldr	r1, [r0, #8]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f001 fd19 	bl	8007480 <_vfiprintf_r>
 8005a4e:	b003      	add	sp, #12
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b004      	add	sp, #16
 8005a56:	4770      	bx	lr
 8005a58:	20000018 	.word	0x20000018

08005a5c <setbuf>:
 8005a5c:	fab1 f281 	clz	r2, r1
 8005a60:	0952      	lsrs	r2, r2, #5
 8005a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a66:	0052      	lsls	r2, r2, #1
 8005a68:	f000 b800 	b.w	8005a6c <setvbuf>

08005a6c <setvbuf>:
 8005a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	461d      	mov	r5, r3
 8005a72:	4b57      	ldr	r3, [pc, #348]	@ (8005bd0 <setvbuf+0x164>)
 8005a74:	681f      	ldr	r7, [r3, #0]
 8005a76:	4604      	mov	r4, r0
 8005a78:	460e      	mov	r6, r1
 8005a7a:	4690      	mov	r8, r2
 8005a7c:	b127      	cbz	r7, 8005a88 <setvbuf+0x1c>
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b913      	cbnz	r3, 8005a88 <setvbuf+0x1c>
 8005a82:	4638      	mov	r0, r7
 8005a84:	f7ff ffa2 	bl	80059cc <__sinit>
 8005a88:	f1b8 0f02 	cmp.w	r8, #2
 8005a8c:	d006      	beq.n	8005a9c <setvbuf+0x30>
 8005a8e:	f1b8 0f01 	cmp.w	r8, #1
 8005a92:	f200 809a 	bhi.w	8005bca <setvbuf+0x15e>
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	f2c0 8097 	blt.w	8005bca <setvbuf+0x15e>
 8005a9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a9e:	07d9      	lsls	r1, r3, #31
 8005aa0:	d405      	bmi.n	8005aae <setvbuf+0x42>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	059a      	lsls	r2, r3, #22
 8005aa6:	d402      	bmi.n	8005aae <setvbuf+0x42>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aaa:	f000 f9e8 	bl	8005e7e <__retarget_lock_acquire_recursive>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f001 fe81 	bl	80077b8 <_fflush_r>
 8005ab6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ab8:	b141      	cbz	r1, 8005acc <setvbuf+0x60>
 8005aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	d002      	beq.n	8005ac8 <setvbuf+0x5c>
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f001 f838 	bl	8006b38 <_free_r>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8005acc:	2300      	movs	r3, #0
 8005ace:	61a3      	str	r3, [r4, #24]
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	d503      	bpl.n	8005ae0 <setvbuf+0x74>
 8005ad8:	6921      	ldr	r1, [r4, #16]
 8005ada:	4638      	mov	r0, r7
 8005adc:	f001 f82c 	bl	8006b38 <_free_r>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	f1b8 0f02 	cmp.w	r8, #2
 8005aee:	81a3      	strh	r3, [r4, #12]
 8005af0:	d061      	beq.n	8005bb6 <setvbuf+0x14a>
 8005af2:	ab01      	add	r3, sp, #4
 8005af4:	466a      	mov	r2, sp
 8005af6:	4621      	mov	r1, r4
 8005af8:	4638      	mov	r0, r7
 8005afa:	f001 fe85 	bl	8007808 <__swhatbuf_r>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	4318      	orrs	r0, r3
 8005b02:	81a0      	strh	r0, [r4, #12]
 8005b04:	bb2d      	cbnz	r5, 8005b52 <setvbuf+0xe6>
 8005b06:	9d00      	ldr	r5, [sp, #0]
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f001 f85f 	bl	8006bcc <malloc>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d152      	bne.n	8005bba <setvbuf+0x14e>
 8005b14:	f8dd 9000 	ldr.w	r9, [sp]
 8005b18:	45a9      	cmp	r9, r5
 8005b1a:	d140      	bne.n	8005b9e <setvbuf+0x132>
 8005b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b24:	f043 0202 	orr.w	r2, r3, #2
 8005b28:	81a2      	strh	r2, [r4, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	60a2      	str	r2, [r4, #8]
 8005b2e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005b32:	6022      	str	r2, [r4, #0]
 8005b34:	6122      	str	r2, [r4, #16]
 8005b36:	2201      	movs	r2, #1
 8005b38:	6162      	str	r2, [r4, #20]
 8005b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b3c:	07d6      	lsls	r6, r2, #31
 8005b3e:	d404      	bmi.n	8005b4a <setvbuf+0xde>
 8005b40:	0598      	lsls	r0, r3, #22
 8005b42:	d402      	bmi.n	8005b4a <setvbuf+0xde>
 8005b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b46:	f000 f99b 	bl	8005e80 <__retarget_lock_release_recursive>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	b003      	add	sp, #12
 8005b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	d0d8      	beq.n	8005b08 <setvbuf+0x9c>
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b913      	cbnz	r3, 8005b60 <setvbuf+0xf4>
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	f7ff ff36 	bl	80059cc <__sinit>
 8005b60:	f1b8 0f01 	cmp.w	r8, #1
 8005b64:	bf08      	it	eq
 8005b66:	89a3      	ldrheq	r3, [r4, #12]
 8005b68:	6026      	str	r6, [r4, #0]
 8005b6a:	bf04      	itt	eq
 8005b6c:	f043 0301 	orreq.w	r3, r3, #1
 8005b70:	81a3      	strheq	r3, [r4, #12]
 8005b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b76:	f013 0208 	ands.w	r2, r3, #8
 8005b7a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b7e:	d01e      	beq.n	8005bbe <setvbuf+0x152>
 8005b80:	07d9      	lsls	r1, r3, #31
 8005b82:	bf41      	itttt	mi
 8005b84:	2200      	movmi	r2, #0
 8005b86:	426d      	negmi	r5, r5
 8005b88:	60a2      	strmi	r2, [r4, #8]
 8005b8a:	61a5      	strmi	r5, [r4, #24]
 8005b8c:	bf58      	it	pl
 8005b8e:	60a5      	strpl	r5, [r4, #8]
 8005b90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b92:	07d2      	lsls	r2, r2, #31
 8005b94:	d401      	bmi.n	8005b9a <setvbuf+0x12e>
 8005b96:	059b      	lsls	r3, r3, #22
 8005b98:	d513      	bpl.n	8005bc2 <setvbuf+0x156>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	e7d5      	b.n	8005b4a <setvbuf+0xde>
 8005b9e:	4648      	mov	r0, r9
 8005ba0:	f001 f814 	bl	8006bcc <malloc>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d0b8      	beq.n	8005b1c <setvbuf+0xb0>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	464d      	mov	r5, r9
 8005bb4:	e7cf      	b.n	8005b56 <setvbuf+0xea>
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	e7b2      	b.n	8005b20 <setvbuf+0xb4>
 8005bba:	46a9      	mov	r9, r5
 8005bbc:	e7f5      	b.n	8005baa <setvbuf+0x13e>
 8005bbe:	60a2      	str	r2, [r4, #8]
 8005bc0:	e7e6      	b.n	8005b90 <setvbuf+0x124>
 8005bc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bc4:	f000 f95c 	bl	8005e80 <__retarget_lock_release_recursive>
 8005bc8:	e7e7      	b.n	8005b9a <setvbuf+0x12e>
 8005bca:	f04f 35ff 	mov.w	r5, #4294967295
 8005bce:	e7bc      	b.n	8005b4a <setvbuf+0xde>
 8005bd0:	20000018 	.word	0x20000018

08005bd4 <__sread>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	f000 f900 	bl	8005de0 <_read_r>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	bfab      	itete	ge
 8005be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005be6:	89a3      	ldrhlt	r3, [r4, #12]
 8005be8:	181b      	addge	r3, r3, r0
 8005bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bee:	bfac      	ite	ge
 8005bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bf2:	81a3      	strhlt	r3, [r4, #12]
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <__swrite>:
 8005bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	4605      	mov	r5, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	4616      	mov	r6, r2
 8005c06:	d505      	bpl.n	8005c14 <__swrite+0x1e>
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f000 f8d4 	bl	8005dbc <_lseek_r>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	4628      	mov	r0, r5
 8005c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	f000 b8eb 	b.w	8005e04 <_write_r>

08005c2e <__sseek>:
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	460c      	mov	r4, r1
 8005c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c36:	f000 f8c1 	bl	8005dbc <_lseek_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	bf15      	itete	ne
 8005c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c4a:	81a3      	strheq	r3, [r4, #12]
 8005c4c:	bf18      	it	ne
 8005c4e:	81a3      	strhne	r3, [r4, #12]
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <__sclose>:
 8005c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c56:	f000 b8a1 	b.w	8005d9c <_close_r>

08005c5a <__swbuf_r>:
 8005c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5c:	460e      	mov	r6, r1
 8005c5e:	4614      	mov	r4, r2
 8005c60:	4605      	mov	r5, r0
 8005c62:	b118      	cbz	r0, 8005c6c <__swbuf_r+0x12>
 8005c64:	6a03      	ldr	r3, [r0, #32]
 8005c66:	b90b      	cbnz	r3, 8005c6c <__swbuf_r+0x12>
 8005c68:	f7ff feb0 	bl	80059cc <__sinit>
 8005c6c:	69a3      	ldr	r3, [r4, #24]
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	071a      	lsls	r2, r3, #28
 8005c74:	d501      	bpl.n	8005c7a <__swbuf_r+0x20>
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	b943      	cbnz	r3, 8005c8c <__swbuf_r+0x32>
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f82b 	bl	8005cd8 <__swsetup_r>
 8005c82:	b118      	cbz	r0, 8005c8c <__swbuf_r+0x32>
 8005c84:	f04f 37ff 	mov.w	r7, #4294967295
 8005c88:	4638      	mov	r0, r7
 8005c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	1a98      	subs	r0, r3, r2
 8005c92:	6963      	ldr	r3, [r4, #20]
 8005c94:	b2f6      	uxtb	r6, r6
 8005c96:	4283      	cmp	r3, r0
 8005c98:	4637      	mov	r7, r6
 8005c9a:	dc05      	bgt.n	8005ca8 <__swbuf_r+0x4e>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f001 fd8a 	bl	80077b8 <_fflush_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d1ed      	bne.n	8005c84 <__swbuf_r+0x2a>
 8005ca8:	68a3      	ldr	r3, [r4, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	60a3      	str	r3, [r4, #8]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	6022      	str	r2, [r4, #0]
 8005cb4:	701e      	strb	r6, [r3, #0]
 8005cb6:	6962      	ldr	r2, [r4, #20]
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d004      	beq.n	8005cc8 <__swbuf_r+0x6e>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	07db      	lsls	r3, r3, #31
 8005cc2:	d5e1      	bpl.n	8005c88 <__swbuf_r+0x2e>
 8005cc4:	2e0a      	cmp	r6, #10
 8005cc6:	d1df      	bne.n	8005c88 <__swbuf_r+0x2e>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f001 fd74 	bl	80077b8 <_fflush_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0d9      	beq.n	8005c88 <__swbuf_r+0x2e>
 8005cd4:	e7d6      	b.n	8005c84 <__swbuf_r+0x2a>
	...

08005cd8 <__swsetup_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <__swsetup_r+0xa8>)
 8005cdc:	4605      	mov	r5, r0
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	b118      	cbz	r0, 8005cec <__swsetup_r+0x14>
 8005ce4:	6a03      	ldr	r3, [r0, #32]
 8005ce6:	b90b      	cbnz	r3, 8005cec <__swsetup_r+0x14>
 8005ce8:	f7ff fe70 	bl	80059cc <__sinit>
 8005cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf0:	0719      	lsls	r1, r3, #28
 8005cf2:	d422      	bmi.n	8005d3a <__swsetup_r+0x62>
 8005cf4:	06da      	lsls	r2, r3, #27
 8005cf6:	d407      	bmi.n	8005d08 <__swsetup_r+0x30>
 8005cf8:	2209      	movs	r2, #9
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	e033      	b.n	8005d70 <__swsetup_r+0x98>
 8005d08:	0758      	lsls	r0, r3, #29
 8005d0a:	d512      	bpl.n	8005d32 <__swsetup_r+0x5a>
 8005d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d0e:	b141      	cbz	r1, 8005d22 <__swsetup_r+0x4a>
 8005d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <__swsetup_r+0x46>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 ff0d 	bl	8006b38 <_free_r>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f043 0308 	orr.w	r3, r3, #8
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	b94b      	cbnz	r3, 8005d52 <__swsetup_r+0x7a>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d48:	d003      	beq.n	8005d52 <__swsetup_r+0x7a>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f001 fd81 	bl	8007854 <__smakebuf_r>
 8005d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d56:	f013 0201 	ands.w	r2, r3, #1
 8005d5a:	d00a      	beq.n	8005d72 <__swsetup_r+0x9a>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	60a2      	str	r2, [r4, #8]
 8005d60:	6962      	ldr	r2, [r4, #20]
 8005d62:	4252      	negs	r2, r2
 8005d64:	61a2      	str	r2, [r4, #24]
 8005d66:	6922      	ldr	r2, [r4, #16]
 8005d68:	b942      	cbnz	r2, 8005d7c <__swsetup_r+0xa4>
 8005d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d6e:	d1c5      	bne.n	8005cfc <__swsetup_r+0x24>
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	0799      	lsls	r1, r3, #30
 8005d74:	bf58      	it	pl
 8005d76:	6962      	ldrpl	r2, [r4, #20]
 8005d78:	60a2      	str	r2, [r4, #8]
 8005d7a:	e7f4      	b.n	8005d66 <__swsetup_r+0x8e>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7f7      	b.n	8005d70 <__swsetup_r+0x98>
 8005d80:	20000018 	.word	0x20000018

08005d84 <memset>:
 8005d84:	4402      	add	r2, r0
 8005d86:	4603      	mov	r3, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d100      	bne.n	8005d8e <memset+0xa>
 8005d8c:	4770      	bx	lr
 8005d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d92:	e7f9      	b.n	8005d88 <memset+0x4>

08005d94 <_localeconv_r>:
 8005d94:	4800      	ldr	r0, [pc, #0]	@ (8005d98 <_localeconv_r+0x4>)
 8005d96:	4770      	bx	lr
 8005d98:	20000158 	.word	0x20000158

08005d9c <_close_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_close_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fc f9e2 	bl	8002170 <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_close_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_close_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000488 	.word	0x20000488

08005dbc <_lseek_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_lseek_r+0x20>)
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fc f9f7 	bl	80021be <_lseek>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_lseek_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_lseek_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000488 	.word	0x20000488

08005de0 <_read_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	@ (8005e00 <_read_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fc f9a1 	bl	8002136 <_read>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_read_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_read_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000488 	.word	0x20000488

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	@ (8005e24 <_write_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb f8b4 	bl	8000f80 <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000488 	.word	0x20000488

08005e28 <__errno>:
 8005e28:	4b01      	ldr	r3, [pc, #4]	@ (8005e30 <__errno+0x8>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000018 	.word	0x20000018

08005e34 <__libc_init_array>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4d0d      	ldr	r5, [pc, #52]	@ (8005e6c <__libc_init_array+0x38>)
 8005e38:	4c0d      	ldr	r4, [pc, #52]	@ (8005e70 <__libc_init_array+0x3c>)
 8005e3a:	1b64      	subs	r4, r4, r5
 8005e3c:	10a4      	asrs	r4, r4, #2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	42a6      	cmp	r6, r4
 8005e42:	d109      	bne.n	8005e58 <__libc_init_array+0x24>
 8005e44:	4d0b      	ldr	r5, [pc, #44]	@ (8005e74 <__libc_init_array+0x40>)
 8005e46:	4c0c      	ldr	r4, [pc, #48]	@ (8005e78 <__libc_init_array+0x44>)
 8005e48:	f003 ff4a 	bl	8009ce0 <_init>
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	2600      	movs	r6, #0
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	d105      	bne.n	8005e62 <__libc_init_array+0x2e>
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5c:	4798      	blx	r3
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7ee      	b.n	8005e40 <__libc_init_array+0xc>
 8005e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e66:	4798      	blx	r3
 8005e68:	3601      	adds	r6, #1
 8005e6a:	e7f2      	b.n	8005e52 <__libc_init_array+0x1e>
 8005e6c:	0800a348 	.word	0x0800a348
 8005e70:	0800a348 	.word	0x0800a348
 8005e74:	0800a348 	.word	0x0800a348
 8005e78:	0800a34c 	.word	0x0800a34c

08005e7c <__retarget_lock_init_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__retarget_lock_acquire_recursive>:
 8005e7e:	4770      	bx	lr

08005e80 <__retarget_lock_release_recursive>:
 8005e80:	4770      	bx	lr

08005e82 <quorem>:
 8005e82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	6903      	ldr	r3, [r0, #16]
 8005e88:	690c      	ldr	r4, [r1, #16]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	db7e      	blt.n	8005f8e <quorem+0x10c>
 8005e90:	3c01      	subs	r4, #1
 8005e92:	f101 0814 	add.w	r8, r1, #20
 8005e96:	00a3      	lsls	r3, r4, #2
 8005e98:	f100 0514 	add.w	r5, r0, #20
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eac:	3301      	adds	r3, #1
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb8:	d32e      	bcc.n	8005f18 <quorem+0x96>
 8005eba:	f04f 0a00 	mov.w	sl, #0
 8005ebe:	46c4      	mov	ip, r8
 8005ec0:	46ae      	mov	lr, r5
 8005ec2:	46d3      	mov	fp, sl
 8005ec4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ec8:	b298      	uxth	r0, r3
 8005eca:	fb06 a000 	mla	r0, r6, r0, sl
 8005ece:	0c02      	lsrs	r2, r0, #16
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	fb06 2303 	mla	r3, r6, r3, r2
 8005ed6:	f8de 2000 	ldr.w	r2, [lr]
 8005eda:	b280      	uxth	r0, r0
 8005edc:	b292      	uxth	r2, r2
 8005ede:	1a12      	subs	r2, r2, r0
 8005ee0:	445a      	add	r2, fp
 8005ee2:	f8de 0000 	ldr.w	r0, [lr]
 8005ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ef0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ef4:	b292      	uxth	r2, r2
 8005ef6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005efa:	45e1      	cmp	r9, ip
 8005efc:	f84e 2b04 	str.w	r2, [lr], #4
 8005f00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f04:	d2de      	bcs.n	8005ec4 <quorem+0x42>
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	58eb      	ldr	r3, [r5, r3]
 8005f0a:	b92b      	cbnz	r3, 8005f18 <quorem+0x96>
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	429d      	cmp	r5, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	d32f      	bcc.n	8005f76 <quorem+0xf4>
 8005f16:	613c      	str	r4, [r7, #16]
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f001 f97f 	bl	800721c <__mcmp>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	db25      	blt.n	8005f6e <quorem+0xec>
 8005f22:	4629      	mov	r1, r5
 8005f24:	2000      	movs	r0, #0
 8005f26:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f2a:	f8d1 c000 	ldr.w	ip, [r1]
 8005f2e:	fa1f fe82 	uxth.w	lr, r2
 8005f32:	fa1f f38c 	uxth.w	r3, ip
 8005f36:	eba3 030e 	sub.w	r3, r3, lr
 8005f3a:	4403      	add	r3, r0
 8005f3c:	0c12      	lsrs	r2, r2, #16
 8005f3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4c:	45c1      	cmp	r9, r8
 8005f4e:	f841 3b04 	str.w	r3, [r1], #4
 8005f52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f56:	d2e6      	bcs.n	8005f26 <quorem+0xa4>
 8005f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f60:	b922      	cbnz	r2, 8005f6c <quorem+0xea>
 8005f62:	3b04      	subs	r3, #4
 8005f64:	429d      	cmp	r5, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	d30b      	bcc.n	8005f82 <quorem+0x100>
 8005f6a:	613c      	str	r4, [r7, #16]
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	4630      	mov	r0, r6
 8005f70:	b003      	add	sp, #12
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d1cb      	bne.n	8005f16 <quorem+0x94>
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	e7c6      	b.n	8005f10 <quorem+0x8e>
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	3b04      	subs	r3, #4
 8005f86:	2a00      	cmp	r2, #0
 8005f88:	d1ef      	bne.n	8005f6a <quorem+0xe8>
 8005f8a:	3c01      	subs	r4, #1
 8005f8c:	e7ea      	b.n	8005f64 <quorem+0xe2>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7ee      	b.n	8005f70 <quorem+0xee>
 8005f92:	0000      	movs	r0, r0
 8005f94:	0000      	movs	r0, r0
	...

08005f98 <_dtoa_r>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	69c7      	ldr	r7, [r0, #28]
 8005f9e:	b097      	sub	sp, #92	@ 0x5c
 8005fa0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005fa4:	ec55 4b10 	vmov	r4, r5, d0
 8005fa8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005faa:	9107      	str	r1, [sp, #28]
 8005fac:	4681      	mov	r9, r0
 8005fae:	920c      	str	r2, [sp, #48]	@ 0x30
 8005fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005fb2:	b97f      	cbnz	r7, 8005fd4 <_dtoa_r+0x3c>
 8005fb4:	2010      	movs	r0, #16
 8005fb6:	f000 fe09 	bl	8006bcc <malloc>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	f8c9 001c 	str.w	r0, [r9, #28]
 8005fc0:	b920      	cbnz	r0, 8005fcc <_dtoa_r+0x34>
 8005fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8006268 <_dtoa_r+0x2d0>)
 8005fc4:	21ef      	movs	r1, #239	@ 0xef
 8005fc6:	48a9      	ldr	r0, [pc, #676]	@ (800626c <_dtoa_r+0x2d4>)
 8005fc8:	f001 fcc0 	bl	800794c <__assert_func>
 8005fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005fd0:	6007      	str	r7, [r0, #0]
 8005fd2:	60c7      	str	r7, [r0, #12]
 8005fd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	b159      	cbz	r1, 8005ff4 <_dtoa_r+0x5c>
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	604a      	str	r2, [r1, #4]
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4093      	lsls	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
 8005fe6:	4648      	mov	r0, r9
 8005fe8:	f000 fee6 	bl	8006db8 <_Bfree>
 8005fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	1e2b      	subs	r3, r5, #0
 8005ff6:	bfb9      	ittee	lt
 8005ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ffc:	9305      	strlt	r3, [sp, #20]
 8005ffe:	2300      	movge	r3, #0
 8006000:	6033      	strge	r3, [r6, #0]
 8006002:	9f05      	ldr	r7, [sp, #20]
 8006004:	4b9a      	ldr	r3, [pc, #616]	@ (8006270 <_dtoa_r+0x2d8>)
 8006006:	bfbc      	itt	lt
 8006008:	2201      	movlt	r2, #1
 800600a:	6032      	strlt	r2, [r6, #0]
 800600c:	43bb      	bics	r3, r7
 800600e:	d112      	bne.n	8006036 <_dtoa_r+0x9e>
 8006010:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800601c:	4323      	orrs	r3, r4
 800601e:	f000 855a 	beq.w	8006ad6 <_dtoa_r+0xb3e>
 8006022:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006024:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006284 <_dtoa_r+0x2ec>
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 855c 	beq.w	8006ae6 <_dtoa_r+0xb4e>
 800602e:	f10a 0303 	add.w	r3, sl, #3
 8006032:	f000 bd56 	b.w	8006ae2 <_dtoa_r+0xb4a>
 8006036:	ed9d 7b04 	vldr	d7, [sp, #16]
 800603a:	2200      	movs	r2, #0
 800603c:	ec51 0b17 	vmov	r0, r1, d7
 8006040:	2300      	movs	r3, #0
 8006042:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006046:	f7fa fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800604a:	4680      	mov	r8, r0
 800604c:	b158      	cbz	r0, 8006066 <_dtoa_r+0xce>
 800604e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006050:	2301      	movs	r3, #1
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006056:	b113      	cbz	r3, 800605e <_dtoa_r+0xc6>
 8006058:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800605a:	4b86      	ldr	r3, [pc, #536]	@ (8006274 <_dtoa_r+0x2dc>)
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006288 <_dtoa_r+0x2f0>
 8006062:	f000 bd40 	b.w	8006ae6 <_dtoa_r+0xb4e>
 8006066:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800606a:	aa14      	add	r2, sp, #80	@ 0x50
 800606c:	a915      	add	r1, sp, #84	@ 0x54
 800606e:	4648      	mov	r0, r9
 8006070:	f001 f984 	bl	800737c <__d2b>
 8006074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006078:	9002      	str	r0, [sp, #8]
 800607a:	2e00      	cmp	r6, #0
 800607c:	d078      	beq.n	8006170 <_dtoa_r+0x1d8>
 800607e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006080:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800608c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006098:	4619      	mov	r1, r3
 800609a:	2200      	movs	r2, #0
 800609c:	4b76      	ldr	r3, [pc, #472]	@ (8006278 <_dtoa_r+0x2e0>)
 800609e:	f7fa f913 	bl	80002c8 <__aeabi_dsub>
 80060a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006250 <_dtoa_r+0x2b8>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa fac6 	bl	8000638 <__aeabi_dmul>
 80060ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8006258 <_dtoa_r+0x2c0>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f90b 	bl	80002cc <__adddf3>
 80060b6:	4604      	mov	r4, r0
 80060b8:	4630      	mov	r0, r6
 80060ba:	460d      	mov	r5, r1
 80060bc:	f7fa fa52 	bl	8000564 <__aeabi_i2d>
 80060c0:	a367      	add	r3, pc, #412	@ (adr r3, 8006260 <_dtoa_r+0x2c8>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fa fab7 	bl	8000638 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa f8fb 	bl	80002cc <__adddf3>
 80060d6:	4604      	mov	r4, r0
 80060d8:	460d      	mov	r5, r1
 80060da:	f7fa fd5d 	bl	8000b98 <__aeabi_d2iz>
 80060de:	2200      	movs	r2, #0
 80060e0:	4607      	mov	r7, r0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa fd18 	bl	8000b1c <__aeabi_dcmplt>
 80060ec:	b140      	cbz	r0, 8006100 <_dtoa_r+0x168>
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7fa fa38 	bl	8000564 <__aeabi_i2d>
 80060f4:	4622      	mov	r2, r4
 80060f6:	462b      	mov	r3, r5
 80060f8:	f7fa fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80060fc:	b900      	cbnz	r0, 8006100 <_dtoa_r+0x168>
 80060fe:	3f01      	subs	r7, #1
 8006100:	2f16      	cmp	r7, #22
 8006102:	d852      	bhi.n	80061aa <_dtoa_r+0x212>
 8006104:	4b5d      	ldr	r3, [pc, #372]	@ (800627c <_dtoa_r+0x2e4>)
 8006106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006112:	f7fa fd03 	bl	8000b1c <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d049      	beq.n	80061ae <_dtoa_r+0x216>
 800611a:	3f01      	subs	r7, #1
 800611c:	2300      	movs	r3, #0
 800611e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006120:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006122:	1b9b      	subs	r3, r3, r6
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	bf45      	ittet	mi
 8006128:	f1c3 0301 	rsbmi	r3, r3, #1
 800612c:	9300      	strmi	r3, [sp, #0]
 800612e:	2300      	movpl	r3, #0
 8006130:	2300      	movmi	r3, #0
 8006132:	9206      	str	r2, [sp, #24]
 8006134:	bf54      	ite	pl
 8006136:	9300      	strpl	r3, [sp, #0]
 8006138:	9306      	strmi	r3, [sp, #24]
 800613a:	2f00      	cmp	r7, #0
 800613c:	db39      	blt.n	80061b2 <_dtoa_r+0x21a>
 800613e:	9b06      	ldr	r3, [sp, #24]
 8006140:	970d      	str	r7, [sp, #52]	@ 0x34
 8006142:	443b      	add	r3, r7
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	2300      	movs	r3, #0
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	9b07      	ldr	r3, [sp, #28]
 800614c:	2b09      	cmp	r3, #9
 800614e:	d863      	bhi.n	8006218 <_dtoa_r+0x280>
 8006150:	2b05      	cmp	r3, #5
 8006152:	bfc4      	itt	gt
 8006154:	3b04      	subgt	r3, #4
 8006156:	9307      	strgt	r3, [sp, #28]
 8006158:	9b07      	ldr	r3, [sp, #28]
 800615a:	f1a3 0302 	sub.w	r3, r3, #2
 800615e:	bfcc      	ite	gt
 8006160:	2400      	movgt	r4, #0
 8006162:	2401      	movle	r4, #1
 8006164:	2b03      	cmp	r3, #3
 8006166:	d863      	bhi.n	8006230 <_dtoa_r+0x298>
 8006168:	e8df f003 	tbb	[pc, r3]
 800616c:	2b375452 	.word	0x2b375452
 8006170:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006174:	441e      	add	r6, r3
 8006176:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800617a:	2b20      	cmp	r3, #32
 800617c:	bfc1      	itttt	gt
 800617e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006182:	409f      	lslgt	r7, r3
 8006184:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006188:	fa24 f303 	lsrgt.w	r3, r4, r3
 800618c:	bfd6      	itet	le
 800618e:	f1c3 0320 	rsble	r3, r3, #32
 8006192:	ea47 0003 	orrgt.w	r0, r7, r3
 8006196:	fa04 f003 	lslle.w	r0, r4, r3
 800619a:	f7fa f9d3 	bl	8000544 <__aeabi_ui2d>
 800619e:	2201      	movs	r2, #1
 80061a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061a4:	3e01      	subs	r6, #1
 80061a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80061a8:	e776      	b.n	8006098 <_dtoa_r+0x100>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7b7      	b.n	800611e <_dtoa_r+0x186>
 80061ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80061b0:	e7b6      	b.n	8006120 <_dtoa_r+0x188>
 80061b2:	9b00      	ldr	r3, [sp, #0]
 80061b4:	1bdb      	subs	r3, r3, r7
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	427b      	negs	r3, r7
 80061ba:	9308      	str	r3, [sp, #32]
 80061bc:	2300      	movs	r3, #0
 80061be:	930d      	str	r3, [sp, #52]	@ 0x34
 80061c0:	e7c3      	b.n	800614a <_dtoa_r+0x1b2>
 80061c2:	2301      	movs	r3, #1
 80061c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061c8:	eb07 0b03 	add.w	fp, r7, r3
 80061cc:	f10b 0301 	add.w	r3, fp, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	bfb8      	it	lt
 80061d6:	2301      	movlt	r3, #1
 80061d8:	e006      	b.n	80061e8 <_dtoa_r+0x250>
 80061da:	2301      	movs	r3, #1
 80061dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dd28      	ble.n	8006236 <_dtoa_r+0x29e>
 80061e4:	469b      	mov	fp, r3
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80061ec:	2100      	movs	r1, #0
 80061ee:	2204      	movs	r2, #4
 80061f0:	f102 0514 	add.w	r5, r2, #20
 80061f4:	429d      	cmp	r5, r3
 80061f6:	d926      	bls.n	8006246 <_dtoa_r+0x2ae>
 80061f8:	6041      	str	r1, [r0, #4]
 80061fa:	4648      	mov	r0, r9
 80061fc:	f000 fd9c 	bl	8006d38 <_Balloc>
 8006200:	4682      	mov	sl, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d142      	bne.n	800628c <_dtoa_r+0x2f4>
 8006206:	4b1e      	ldr	r3, [pc, #120]	@ (8006280 <_dtoa_r+0x2e8>)
 8006208:	4602      	mov	r2, r0
 800620a:	f240 11af 	movw	r1, #431	@ 0x1af
 800620e:	e6da      	b.n	8005fc6 <_dtoa_r+0x2e>
 8006210:	2300      	movs	r3, #0
 8006212:	e7e3      	b.n	80061dc <_dtoa_r+0x244>
 8006214:	2300      	movs	r3, #0
 8006216:	e7d5      	b.n	80061c4 <_dtoa_r+0x22c>
 8006218:	2401      	movs	r4, #1
 800621a:	2300      	movs	r3, #0
 800621c:	9307      	str	r3, [sp, #28]
 800621e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006220:	f04f 3bff 	mov.w	fp, #4294967295
 8006224:	2200      	movs	r2, #0
 8006226:	f8cd b00c 	str.w	fp, [sp, #12]
 800622a:	2312      	movs	r3, #18
 800622c:	920c      	str	r2, [sp, #48]	@ 0x30
 800622e:	e7db      	b.n	80061e8 <_dtoa_r+0x250>
 8006230:	2301      	movs	r3, #1
 8006232:	9309      	str	r3, [sp, #36]	@ 0x24
 8006234:	e7f4      	b.n	8006220 <_dtoa_r+0x288>
 8006236:	f04f 0b01 	mov.w	fp, #1
 800623a:	f8cd b00c 	str.w	fp, [sp, #12]
 800623e:	465b      	mov	r3, fp
 8006240:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006244:	e7d0      	b.n	80061e8 <_dtoa_r+0x250>
 8006246:	3101      	adds	r1, #1
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	e7d1      	b.n	80061f0 <_dtoa_r+0x258>
 800624c:	f3af 8000 	nop.w
 8006250:	636f4361 	.word	0x636f4361
 8006254:	3fd287a7 	.word	0x3fd287a7
 8006258:	8b60c8b3 	.word	0x8b60c8b3
 800625c:	3fc68a28 	.word	0x3fc68a28
 8006260:	509f79fb 	.word	0x509f79fb
 8006264:	3fd34413 	.word	0x3fd34413
 8006268:	08009dad 	.word	0x08009dad
 800626c:	08009dc4 	.word	0x08009dc4
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	08009d7d 	.word	0x08009d7d
 8006278:	3ff80000 	.word	0x3ff80000
 800627c:	08009f18 	.word	0x08009f18
 8006280:	08009e1c 	.word	0x08009e1c
 8006284:	08009da9 	.word	0x08009da9
 8006288:	08009d7c 	.word	0x08009d7c
 800628c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006290:	6018      	str	r0, [r3, #0]
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	2b0e      	cmp	r3, #14
 8006296:	f200 80a1 	bhi.w	80063dc <_dtoa_r+0x444>
 800629a:	2c00      	cmp	r4, #0
 800629c:	f000 809e 	beq.w	80063dc <_dtoa_r+0x444>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	dd33      	ble.n	800630c <_dtoa_r+0x374>
 80062a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006518 <_dtoa_r+0x580>)
 80062a6:	f007 020f 	and.w	r2, r7, #15
 80062aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ae:	ed93 7b00 	vldr	d7, [r3]
 80062b2:	05f8      	lsls	r0, r7, #23
 80062b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80062b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062bc:	d516      	bpl.n	80062ec <_dtoa_r+0x354>
 80062be:	4b97      	ldr	r3, [pc, #604]	@ (800651c <_dtoa_r+0x584>)
 80062c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c8:	f7fa fae0 	bl	800088c <__aeabi_ddiv>
 80062cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d0:	f004 040f 	and.w	r4, r4, #15
 80062d4:	2603      	movs	r6, #3
 80062d6:	4d91      	ldr	r5, [pc, #580]	@ (800651c <_dtoa_r+0x584>)
 80062d8:	b954      	cbnz	r4, 80062f0 <_dtoa_r+0x358>
 80062da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80062de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e2:	f7fa fad3 	bl	800088c <__aeabi_ddiv>
 80062e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062ea:	e028      	b.n	800633e <_dtoa_r+0x3a6>
 80062ec:	2602      	movs	r6, #2
 80062ee:	e7f2      	b.n	80062d6 <_dtoa_r+0x33e>
 80062f0:	07e1      	lsls	r1, r4, #31
 80062f2:	d508      	bpl.n	8006306 <_dtoa_r+0x36e>
 80062f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80062f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062fc:	f7fa f99c 	bl	8000638 <__aeabi_dmul>
 8006300:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006304:	3601      	adds	r6, #1
 8006306:	1064      	asrs	r4, r4, #1
 8006308:	3508      	adds	r5, #8
 800630a:	e7e5      	b.n	80062d8 <_dtoa_r+0x340>
 800630c:	f000 80af 	beq.w	800646e <_dtoa_r+0x4d6>
 8006310:	427c      	negs	r4, r7
 8006312:	4b81      	ldr	r3, [pc, #516]	@ (8006518 <_dtoa_r+0x580>)
 8006314:	4d81      	ldr	r5, [pc, #516]	@ (800651c <_dtoa_r+0x584>)
 8006316:	f004 020f 	and.w	r2, r4, #15
 800631a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006326:	f7fa f987 	bl	8000638 <__aeabi_dmul>
 800632a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800632e:	1124      	asrs	r4, r4, #4
 8006330:	2300      	movs	r3, #0
 8006332:	2602      	movs	r6, #2
 8006334:	2c00      	cmp	r4, #0
 8006336:	f040 808f 	bne.w	8006458 <_dtoa_r+0x4c0>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1d3      	bne.n	80062e6 <_dtoa_r+0x34e>
 800633e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006340:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8094 	beq.w	8006472 <_dtoa_r+0x4da>
 800634a:	4b75      	ldr	r3, [pc, #468]	@ (8006520 <_dtoa_r+0x588>)
 800634c:	2200      	movs	r2, #0
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7fa fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8006356:	2800      	cmp	r0, #0
 8006358:	f000 808b 	beq.w	8006472 <_dtoa_r+0x4da>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8087 	beq.w	8006472 <_dtoa_r+0x4da>
 8006364:	f1bb 0f00 	cmp.w	fp, #0
 8006368:	dd34      	ble.n	80063d4 <_dtoa_r+0x43c>
 800636a:	4620      	mov	r0, r4
 800636c:	4b6d      	ldr	r3, [pc, #436]	@ (8006524 <_dtoa_r+0x58c>)
 800636e:	2200      	movs	r2, #0
 8006370:	4629      	mov	r1, r5
 8006372:	f7fa f961 	bl	8000638 <__aeabi_dmul>
 8006376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800637a:	f107 38ff 	add.w	r8, r7, #4294967295
 800637e:	3601      	adds	r6, #1
 8006380:	465c      	mov	r4, fp
 8006382:	4630      	mov	r0, r6
 8006384:	f7fa f8ee 	bl	8000564 <__aeabi_i2d>
 8006388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	4b65      	ldr	r3, [pc, #404]	@ (8006528 <_dtoa_r+0x590>)
 8006392:	2200      	movs	r2, #0
 8006394:	f7f9 ff9a 	bl	80002cc <__adddf3>
 8006398:	4605      	mov	r5, r0
 800639a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800639e:	2c00      	cmp	r4, #0
 80063a0:	d16a      	bne.n	8006478 <_dtoa_r+0x4e0>
 80063a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a6:	4b61      	ldr	r3, [pc, #388]	@ (800652c <_dtoa_r+0x594>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7f9 ff8d 	bl	80002c8 <__aeabi_dsub>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063b6:	462a      	mov	r2, r5
 80063b8:	4633      	mov	r3, r6
 80063ba:	f7fa fbcd 	bl	8000b58 <__aeabi_dcmpgt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	f040 8298 	bne.w	80068f4 <_dtoa_r+0x95c>
 80063c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c8:	462a      	mov	r2, r5
 80063ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80063ce:	f7fa fba5 	bl	8000b1c <__aeabi_dcmplt>
 80063d2:	bb38      	cbnz	r0, 8006424 <_dtoa_r+0x48c>
 80063d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80063d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f2c0 8157 	blt.w	8006692 <_dtoa_r+0x6fa>
 80063e4:	2f0e      	cmp	r7, #14
 80063e6:	f300 8154 	bgt.w	8006692 <_dtoa_r+0x6fa>
 80063ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006518 <_dtoa_r+0x580>)
 80063ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063f0:	ed93 7b00 	vldr	d7, [r3]
 80063f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	ed8d 7b00 	vstr	d7, [sp]
 80063fc:	f280 80e5 	bge.w	80065ca <_dtoa_r+0x632>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f300 80e1 	bgt.w	80065ca <_dtoa_r+0x632>
 8006408:	d10c      	bne.n	8006424 <_dtoa_r+0x48c>
 800640a:	4b48      	ldr	r3, [pc, #288]	@ (800652c <_dtoa_r+0x594>)
 800640c:	2200      	movs	r2, #0
 800640e:	ec51 0b17 	vmov	r0, r1, d7
 8006412:	f7fa f911 	bl	8000638 <__aeabi_dmul>
 8006416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800641a:	f7fa fb93 	bl	8000b44 <__aeabi_dcmpge>
 800641e:	2800      	cmp	r0, #0
 8006420:	f000 8266 	beq.w	80068f0 <_dtoa_r+0x958>
 8006424:	2400      	movs	r4, #0
 8006426:	4625      	mov	r5, r4
 8006428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800642a:	4656      	mov	r6, sl
 800642c:	ea6f 0803 	mvn.w	r8, r3
 8006430:	2700      	movs	r7, #0
 8006432:	4621      	mov	r1, r4
 8006434:	4648      	mov	r0, r9
 8006436:	f000 fcbf 	bl	8006db8 <_Bfree>
 800643a:	2d00      	cmp	r5, #0
 800643c:	f000 80bd 	beq.w	80065ba <_dtoa_r+0x622>
 8006440:	b12f      	cbz	r7, 800644e <_dtoa_r+0x4b6>
 8006442:	42af      	cmp	r7, r5
 8006444:	d003      	beq.n	800644e <_dtoa_r+0x4b6>
 8006446:	4639      	mov	r1, r7
 8006448:	4648      	mov	r0, r9
 800644a:	f000 fcb5 	bl	8006db8 <_Bfree>
 800644e:	4629      	mov	r1, r5
 8006450:	4648      	mov	r0, r9
 8006452:	f000 fcb1 	bl	8006db8 <_Bfree>
 8006456:	e0b0      	b.n	80065ba <_dtoa_r+0x622>
 8006458:	07e2      	lsls	r2, r4, #31
 800645a:	d505      	bpl.n	8006468 <_dtoa_r+0x4d0>
 800645c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006460:	f7fa f8ea 	bl	8000638 <__aeabi_dmul>
 8006464:	3601      	adds	r6, #1
 8006466:	2301      	movs	r3, #1
 8006468:	1064      	asrs	r4, r4, #1
 800646a:	3508      	adds	r5, #8
 800646c:	e762      	b.n	8006334 <_dtoa_r+0x39c>
 800646e:	2602      	movs	r6, #2
 8006470:	e765      	b.n	800633e <_dtoa_r+0x3a6>
 8006472:	9c03      	ldr	r4, [sp, #12]
 8006474:	46b8      	mov	r8, r7
 8006476:	e784      	b.n	8006382 <_dtoa_r+0x3ea>
 8006478:	4b27      	ldr	r3, [pc, #156]	@ (8006518 <_dtoa_r+0x580>)
 800647a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800647c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006484:	4454      	add	r4, sl
 8006486:	2900      	cmp	r1, #0
 8006488:	d054      	beq.n	8006534 <_dtoa_r+0x59c>
 800648a:	4929      	ldr	r1, [pc, #164]	@ (8006530 <_dtoa_r+0x598>)
 800648c:	2000      	movs	r0, #0
 800648e:	f7fa f9fd 	bl	800088c <__aeabi_ddiv>
 8006492:	4633      	mov	r3, r6
 8006494:	462a      	mov	r2, r5
 8006496:	f7f9 ff17 	bl	80002c8 <__aeabi_dsub>
 800649a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800649e:	4656      	mov	r6, sl
 80064a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a4:	f7fa fb78 	bl	8000b98 <__aeabi_d2iz>
 80064a8:	4605      	mov	r5, r0
 80064aa:	f7fa f85b 	bl	8000564 <__aeabi_i2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b6:	f7f9 ff07 	bl	80002c8 <__aeabi_dsub>
 80064ba:	3530      	adds	r5, #48	@ 0x30
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064c4:	f806 5b01 	strb.w	r5, [r6], #1
 80064c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064cc:	f7fa fb26 	bl	8000b1c <__aeabi_dcmplt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d172      	bne.n	80065ba <_dtoa_r+0x622>
 80064d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064d8:	4911      	ldr	r1, [pc, #68]	@ (8006520 <_dtoa_r+0x588>)
 80064da:	2000      	movs	r0, #0
 80064dc:	f7f9 fef4 	bl	80002c8 <__aeabi_dsub>
 80064e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064e4:	f7fa fb1a 	bl	8000b1c <__aeabi_dcmplt>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f040 80b4 	bne.w	8006656 <_dtoa_r+0x6be>
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	f43f af70 	beq.w	80063d4 <_dtoa_r+0x43c>
 80064f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80064f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <_dtoa_r+0x58c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	f7fa f89c 	bl	8000638 <__aeabi_dmul>
 8006500:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <_dtoa_r+0x58c>)
 8006502:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006506:	2200      	movs	r2, #0
 8006508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800650c:	f7fa f894 	bl	8000638 <__aeabi_dmul>
 8006510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006514:	e7c4      	b.n	80064a0 <_dtoa_r+0x508>
 8006516:	bf00      	nop
 8006518:	08009f18 	.word	0x08009f18
 800651c:	08009ef0 	.word	0x08009ef0
 8006520:	3ff00000 	.word	0x3ff00000
 8006524:	40240000 	.word	0x40240000
 8006528:	401c0000 	.word	0x401c0000
 800652c:	40140000 	.word	0x40140000
 8006530:	3fe00000 	.word	0x3fe00000
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	f7fa f87e 	bl	8000638 <__aeabi_dmul>
 800653c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006540:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006542:	4656      	mov	r6, sl
 8006544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006548:	f7fa fb26 	bl	8000b98 <__aeabi_d2iz>
 800654c:	4605      	mov	r5, r0
 800654e:	f7fa f809 	bl	8000564 <__aeabi_i2d>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800655a:	f7f9 feb5 	bl	80002c8 <__aeabi_dsub>
 800655e:	3530      	adds	r5, #48	@ 0x30
 8006560:	f806 5b01 	strb.w	r5, [r6], #1
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	42a6      	cmp	r6, r4
 800656a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	d124      	bne.n	80065be <_dtoa_r+0x626>
 8006574:	4baf      	ldr	r3, [pc, #700]	@ (8006834 <_dtoa_r+0x89c>)
 8006576:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800657a:	f7f9 fea7 	bl	80002cc <__adddf3>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006586:	f7fa fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d163      	bne.n	8006656 <_dtoa_r+0x6be>
 800658e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006592:	49a8      	ldr	r1, [pc, #672]	@ (8006834 <_dtoa_r+0x89c>)
 8006594:	2000      	movs	r0, #0
 8006596:	f7f9 fe97 	bl	80002c8 <__aeabi_dsub>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a2:	f7fa fabb 	bl	8000b1c <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f43f af14 	beq.w	80063d4 <_dtoa_r+0x43c>
 80065ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80065ae:	1e73      	subs	r3, r6, #1
 80065b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065b6:	2b30      	cmp	r3, #48	@ 0x30
 80065b8:	d0f8      	beq.n	80065ac <_dtoa_r+0x614>
 80065ba:	4647      	mov	r7, r8
 80065bc:	e03b      	b.n	8006636 <_dtoa_r+0x69e>
 80065be:	4b9e      	ldr	r3, [pc, #632]	@ (8006838 <_dtoa_r+0x8a0>)
 80065c0:	f7fa f83a 	bl	8000638 <__aeabi_dmul>
 80065c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c8:	e7bc      	b.n	8006544 <_dtoa_r+0x5ac>
 80065ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80065ce:	4656      	mov	r6, sl
 80065d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7fa f958 	bl	800088c <__aeabi_ddiv>
 80065dc:	f7fa fadc 	bl	8000b98 <__aeabi_d2iz>
 80065e0:	4680      	mov	r8, r0
 80065e2:	f7f9 ffbf 	bl	8000564 <__aeabi_i2d>
 80065e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ea:	f7fa f825 	bl	8000638 <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065fa:	f7f9 fe65 	bl	80002c8 <__aeabi_dsub>
 80065fe:	f806 4b01 	strb.w	r4, [r6], #1
 8006602:	9d03      	ldr	r5, [sp, #12]
 8006604:	eba6 040a 	sub.w	r4, r6, sl
 8006608:	42a5      	cmp	r5, r4
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	d133      	bne.n	8006678 <_dtoa_r+0x6e0>
 8006610:	f7f9 fe5c 	bl	80002cc <__adddf3>
 8006614:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	f7fa fa9c 	bl	8000b58 <__aeabi_dcmpgt>
 8006620:	b9c0      	cbnz	r0, 8006654 <_dtoa_r+0x6bc>
 8006622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa fa6d 	bl	8000b08 <__aeabi_dcmpeq>
 800662e:	b110      	cbz	r0, 8006636 <_dtoa_r+0x69e>
 8006630:	f018 0f01 	tst.w	r8, #1
 8006634:	d10e      	bne.n	8006654 <_dtoa_r+0x6bc>
 8006636:	9902      	ldr	r1, [sp, #8]
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fbbd 	bl	8006db8 <_Bfree>
 800663e:	2300      	movs	r3, #0
 8006640:	7033      	strb	r3, [r6, #0]
 8006642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006644:	3701      	adds	r7, #1
 8006646:	601f      	str	r7, [r3, #0]
 8006648:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 824b 	beq.w	8006ae6 <_dtoa_r+0xb4e>
 8006650:	601e      	str	r6, [r3, #0]
 8006652:	e248      	b.n	8006ae6 <_dtoa_r+0xb4e>
 8006654:	46b8      	mov	r8, r7
 8006656:	4633      	mov	r3, r6
 8006658:	461e      	mov	r6, r3
 800665a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800665e:	2a39      	cmp	r2, #57	@ 0x39
 8006660:	d106      	bne.n	8006670 <_dtoa_r+0x6d8>
 8006662:	459a      	cmp	sl, r3
 8006664:	d1f8      	bne.n	8006658 <_dtoa_r+0x6c0>
 8006666:	2230      	movs	r2, #48	@ 0x30
 8006668:	f108 0801 	add.w	r8, r8, #1
 800666c:	f88a 2000 	strb.w	r2, [sl]
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	3201      	adds	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e7a0      	b.n	80065ba <_dtoa_r+0x622>
 8006678:	4b6f      	ldr	r3, [pc, #444]	@ (8006838 <_dtoa_r+0x8a0>)
 800667a:	2200      	movs	r2, #0
 800667c:	f7f9 ffdc 	bl	8000638 <__aeabi_dmul>
 8006680:	2200      	movs	r2, #0
 8006682:	2300      	movs	r3, #0
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	f7fa fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d09f      	beq.n	80065d0 <_dtoa_r+0x638>
 8006690:	e7d1      	b.n	8006636 <_dtoa_r+0x69e>
 8006692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006694:	2a00      	cmp	r2, #0
 8006696:	f000 80ea 	beq.w	800686e <_dtoa_r+0x8d6>
 800669a:	9a07      	ldr	r2, [sp, #28]
 800669c:	2a01      	cmp	r2, #1
 800669e:	f300 80cd 	bgt.w	800683c <_dtoa_r+0x8a4>
 80066a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	f000 80c1 	beq.w	800682c <_dtoa_r+0x894>
 80066aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066ae:	9c08      	ldr	r4, [sp, #32]
 80066b0:	9e00      	ldr	r6, [sp, #0]
 80066b2:	9a00      	ldr	r2, [sp, #0]
 80066b4:	441a      	add	r2, r3
 80066b6:	9200      	str	r2, [sp, #0]
 80066b8:	9a06      	ldr	r2, [sp, #24]
 80066ba:	2101      	movs	r1, #1
 80066bc:	441a      	add	r2, r3
 80066be:	4648      	mov	r0, r9
 80066c0:	9206      	str	r2, [sp, #24]
 80066c2:	f000 fc2d 	bl	8006f20 <__i2b>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b166      	cbz	r6, 80066e4 <_dtoa_r+0x74c>
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd09      	ble.n	80066e4 <_dtoa_r+0x74c>
 80066d0:	42b3      	cmp	r3, r6
 80066d2:	9a00      	ldr	r2, [sp, #0]
 80066d4:	bfa8      	it	ge
 80066d6:	4633      	movge	r3, r6
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	9200      	str	r2, [sp, #0]
 80066dc:	9a06      	ldr	r2, [sp, #24]
 80066de:	1af6      	subs	r6, r6, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	9306      	str	r3, [sp, #24]
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	b30b      	cbz	r3, 800672c <_dtoa_r+0x794>
 80066e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80c6 	beq.w	800687c <_dtoa_r+0x8e4>
 80066f0:	2c00      	cmp	r4, #0
 80066f2:	f000 80c0 	beq.w	8006876 <_dtoa_r+0x8de>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4622      	mov	r2, r4
 80066fa:	4648      	mov	r0, r9
 80066fc:	f000 fcc8 	bl	8007090 <__pow5mult>
 8006700:	9a02      	ldr	r2, [sp, #8]
 8006702:	4601      	mov	r1, r0
 8006704:	4605      	mov	r5, r0
 8006706:	4648      	mov	r0, r9
 8006708:	f000 fc20 	bl	8006f4c <__multiply>
 800670c:	9902      	ldr	r1, [sp, #8]
 800670e:	4680      	mov	r8, r0
 8006710:	4648      	mov	r0, r9
 8006712:	f000 fb51 	bl	8006db8 <_Bfree>
 8006716:	9b08      	ldr	r3, [sp, #32]
 8006718:	1b1b      	subs	r3, r3, r4
 800671a:	9308      	str	r3, [sp, #32]
 800671c:	f000 80b1 	beq.w	8006882 <_dtoa_r+0x8ea>
 8006720:	9a08      	ldr	r2, [sp, #32]
 8006722:	4641      	mov	r1, r8
 8006724:	4648      	mov	r0, r9
 8006726:	f000 fcb3 	bl	8007090 <__pow5mult>
 800672a:	9002      	str	r0, [sp, #8]
 800672c:	2101      	movs	r1, #1
 800672e:	4648      	mov	r0, r9
 8006730:	f000 fbf6 	bl	8006f20 <__i2b>
 8006734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006736:	4604      	mov	r4, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 81d8 	beq.w	8006aee <_dtoa_r+0xb56>
 800673e:	461a      	mov	r2, r3
 8006740:	4601      	mov	r1, r0
 8006742:	4648      	mov	r0, r9
 8006744:	f000 fca4 	bl	8007090 <__pow5mult>
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	2b01      	cmp	r3, #1
 800674c:	4604      	mov	r4, r0
 800674e:	f300 809f 	bgt.w	8006890 <_dtoa_r+0x8f8>
 8006752:	9b04      	ldr	r3, [sp, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 8097 	bne.w	8006888 <_dtoa_r+0x8f0>
 800675a:	9b05      	ldr	r3, [sp, #20]
 800675c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 8093 	bne.w	800688c <_dtoa_r+0x8f4>
 8006766:	9b05      	ldr	r3, [sp, #20]
 8006768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800676c:	0d1b      	lsrs	r3, r3, #20
 800676e:	051b      	lsls	r3, r3, #20
 8006770:	b133      	cbz	r3, 8006780 <_dtoa_r+0x7e8>
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	9b06      	ldr	r3, [sp, #24]
 800677a:	3301      	adds	r3, #1
 800677c:	9306      	str	r3, [sp, #24]
 800677e:	2301      	movs	r3, #1
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 81b8 	beq.w	8006afa <_dtoa_r+0xb62>
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006790:	6918      	ldr	r0, [r3, #16]
 8006792:	f000 fb79 	bl	8006e88 <__hi0bits>
 8006796:	f1c0 0020 	rsb	r0, r0, #32
 800679a:	9b06      	ldr	r3, [sp, #24]
 800679c:	4418      	add	r0, r3
 800679e:	f010 001f 	ands.w	r0, r0, #31
 80067a2:	f000 8082 	beq.w	80068aa <_dtoa_r+0x912>
 80067a6:	f1c0 0320 	rsb	r3, r0, #32
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	dd73      	ble.n	8006896 <_dtoa_r+0x8fe>
 80067ae:	9b00      	ldr	r3, [sp, #0]
 80067b0:	f1c0 001c 	rsb	r0, r0, #28
 80067b4:	4403      	add	r3, r0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	9b06      	ldr	r3, [sp, #24]
 80067ba:	4403      	add	r3, r0
 80067bc:	4406      	add	r6, r0
 80067be:	9306      	str	r3, [sp, #24]
 80067c0:	9b00      	ldr	r3, [sp, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd05      	ble.n	80067d2 <_dtoa_r+0x83a>
 80067c6:	9902      	ldr	r1, [sp, #8]
 80067c8:	461a      	mov	r2, r3
 80067ca:	4648      	mov	r0, r9
 80067cc:	f000 fcba 	bl	8007144 <__lshift>
 80067d0:	9002      	str	r0, [sp, #8]
 80067d2:	9b06      	ldr	r3, [sp, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd05      	ble.n	80067e4 <_dtoa_r+0x84c>
 80067d8:	4621      	mov	r1, r4
 80067da:	461a      	mov	r2, r3
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 fcb1 	bl	8007144 <__lshift>
 80067e2:	4604      	mov	r4, r0
 80067e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d061      	beq.n	80068ae <_dtoa_r+0x916>
 80067ea:	9802      	ldr	r0, [sp, #8]
 80067ec:	4621      	mov	r1, r4
 80067ee:	f000 fd15 	bl	800721c <__mcmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	da5b      	bge.n	80068ae <_dtoa_r+0x916>
 80067f6:	2300      	movs	r3, #0
 80067f8:	9902      	ldr	r1, [sp, #8]
 80067fa:	220a      	movs	r2, #10
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fafd 	bl	8006dfc <__multadd>
 8006802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006804:	9002      	str	r0, [sp, #8]
 8006806:	f107 38ff 	add.w	r8, r7, #4294967295
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8177 	beq.w	8006afe <_dtoa_r+0xb66>
 8006810:	4629      	mov	r1, r5
 8006812:	2300      	movs	r3, #0
 8006814:	220a      	movs	r2, #10
 8006816:	4648      	mov	r0, r9
 8006818:	f000 faf0 	bl	8006dfc <__multadd>
 800681c:	f1bb 0f00 	cmp.w	fp, #0
 8006820:	4605      	mov	r5, r0
 8006822:	dc6f      	bgt.n	8006904 <_dtoa_r+0x96c>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	2b02      	cmp	r3, #2
 8006828:	dc49      	bgt.n	80068be <_dtoa_r+0x926>
 800682a:	e06b      	b.n	8006904 <_dtoa_r+0x96c>
 800682c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800682e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006832:	e73c      	b.n	80066ae <_dtoa_r+0x716>
 8006834:	3fe00000 	.word	0x3fe00000
 8006838:	40240000 	.word	0x40240000
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	1e5c      	subs	r4, r3, #1
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	42a3      	cmp	r3, r4
 8006844:	db09      	blt.n	800685a <_dtoa_r+0x8c2>
 8006846:	1b1c      	subs	r4, r3, r4
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f6bf af30 	bge.w	80066b0 <_dtoa_r+0x718>
 8006850:	9b00      	ldr	r3, [sp, #0]
 8006852:	9a03      	ldr	r2, [sp, #12]
 8006854:	1a9e      	subs	r6, r3, r2
 8006856:	2300      	movs	r3, #0
 8006858:	e72b      	b.n	80066b2 <_dtoa_r+0x71a>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800685e:	9408      	str	r4, [sp, #32]
 8006860:	1ae3      	subs	r3, r4, r3
 8006862:	441a      	add	r2, r3
 8006864:	9e00      	ldr	r6, [sp, #0]
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	920d      	str	r2, [sp, #52]	@ 0x34
 800686a:	2400      	movs	r4, #0
 800686c:	e721      	b.n	80066b2 <_dtoa_r+0x71a>
 800686e:	9c08      	ldr	r4, [sp, #32]
 8006870:	9e00      	ldr	r6, [sp, #0]
 8006872:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006874:	e728      	b.n	80066c8 <_dtoa_r+0x730>
 8006876:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800687a:	e751      	b.n	8006720 <_dtoa_r+0x788>
 800687c:	9a08      	ldr	r2, [sp, #32]
 800687e:	9902      	ldr	r1, [sp, #8]
 8006880:	e750      	b.n	8006724 <_dtoa_r+0x78c>
 8006882:	f8cd 8008 	str.w	r8, [sp, #8]
 8006886:	e751      	b.n	800672c <_dtoa_r+0x794>
 8006888:	2300      	movs	r3, #0
 800688a:	e779      	b.n	8006780 <_dtoa_r+0x7e8>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	e777      	b.n	8006780 <_dtoa_r+0x7e8>
 8006890:	2300      	movs	r3, #0
 8006892:	9308      	str	r3, [sp, #32]
 8006894:	e779      	b.n	800678a <_dtoa_r+0x7f2>
 8006896:	d093      	beq.n	80067c0 <_dtoa_r+0x828>
 8006898:	9a00      	ldr	r2, [sp, #0]
 800689a:	331c      	adds	r3, #28
 800689c:	441a      	add	r2, r3
 800689e:	9200      	str	r2, [sp, #0]
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	441a      	add	r2, r3
 80068a4:	441e      	add	r6, r3
 80068a6:	9206      	str	r2, [sp, #24]
 80068a8:	e78a      	b.n	80067c0 <_dtoa_r+0x828>
 80068aa:	4603      	mov	r3, r0
 80068ac:	e7f4      	b.n	8006898 <_dtoa_r+0x900>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	46b8      	mov	r8, r7
 80068b4:	dc20      	bgt.n	80068f8 <_dtoa_r+0x960>
 80068b6:	469b      	mov	fp, r3
 80068b8:	9b07      	ldr	r3, [sp, #28]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	dd1e      	ble.n	80068fc <_dtoa_r+0x964>
 80068be:	f1bb 0f00 	cmp.w	fp, #0
 80068c2:	f47f adb1 	bne.w	8006428 <_dtoa_r+0x490>
 80068c6:	4621      	mov	r1, r4
 80068c8:	465b      	mov	r3, fp
 80068ca:	2205      	movs	r2, #5
 80068cc:	4648      	mov	r0, r9
 80068ce:	f000 fa95 	bl	8006dfc <__multadd>
 80068d2:	4601      	mov	r1, r0
 80068d4:	4604      	mov	r4, r0
 80068d6:	9802      	ldr	r0, [sp, #8]
 80068d8:	f000 fca0 	bl	800721c <__mcmp>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f77f ada3 	ble.w	8006428 <_dtoa_r+0x490>
 80068e2:	4656      	mov	r6, sl
 80068e4:	2331      	movs	r3, #49	@ 0x31
 80068e6:	f806 3b01 	strb.w	r3, [r6], #1
 80068ea:	f108 0801 	add.w	r8, r8, #1
 80068ee:	e59f      	b.n	8006430 <_dtoa_r+0x498>
 80068f0:	9c03      	ldr	r4, [sp, #12]
 80068f2:	46b8      	mov	r8, r7
 80068f4:	4625      	mov	r5, r4
 80068f6:	e7f4      	b.n	80068e2 <_dtoa_r+0x94a>
 80068f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80068fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8101 	beq.w	8006b06 <_dtoa_r+0xb6e>
 8006904:	2e00      	cmp	r6, #0
 8006906:	dd05      	ble.n	8006914 <_dtoa_r+0x97c>
 8006908:	4629      	mov	r1, r5
 800690a:	4632      	mov	r2, r6
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fc19 	bl	8007144 <__lshift>
 8006912:	4605      	mov	r5, r0
 8006914:	9b08      	ldr	r3, [sp, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d05c      	beq.n	80069d4 <_dtoa_r+0xa3c>
 800691a:	6869      	ldr	r1, [r5, #4]
 800691c:	4648      	mov	r0, r9
 800691e:	f000 fa0b 	bl	8006d38 <_Balloc>
 8006922:	4606      	mov	r6, r0
 8006924:	b928      	cbnz	r0, 8006932 <_dtoa_r+0x99a>
 8006926:	4b82      	ldr	r3, [pc, #520]	@ (8006b30 <_dtoa_r+0xb98>)
 8006928:	4602      	mov	r2, r0
 800692a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800692e:	f7ff bb4a 	b.w	8005fc6 <_dtoa_r+0x2e>
 8006932:	692a      	ldr	r2, [r5, #16]
 8006934:	3202      	adds	r2, #2
 8006936:	0092      	lsls	r2, r2, #2
 8006938:	f105 010c 	add.w	r1, r5, #12
 800693c:	300c      	adds	r0, #12
 800693e:	f000 fff7 	bl	8007930 <memcpy>
 8006942:	2201      	movs	r2, #1
 8006944:	4631      	mov	r1, r6
 8006946:	4648      	mov	r0, r9
 8006948:	f000 fbfc 	bl	8007144 <__lshift>
 800694c:	f10a 0301 	add.w	r3, sl, #1
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	eb0a 030b 	add.w	r3, sl, fp
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	462f      	mov	r7, r5
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	4605      	mov	r5, r0
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	9802      	ldr	r0, [sp, #8]
 8006968:	4621      	mov	r1, r4
 800696a:	f103 3bff 	add.w	fp, r3, #4294967295
 800696e:	f7ff fa88 	bl	8005e82 <quorem>
 8006972:	4603      	mov	r3, r0
 8006974:	3330      	adds	r3, #48	@ 0x30
 8006976:	9003      	str	r0, [sp, #12]
 8006978:	4639      	mov	r1, r7
 800697a:	9802      	ldr	r0, [sp, #8]
 800697c:	9309      	str	r3, [sp, #36]	@ 0x24
 800697e:	f000 fc4d 	bl	800721c <__mcmp>
 8006982:	462a      	mov	r2, r5
 8006984:	9004      	str	r0, [sp, #16]
 8006986:	4621      	mov	r1, r4
 8006988:	4648      	mov	r0, r9
 800698a:	f000 fc63 	bl	8007254 <__mdiff>
 800698e:	68c2      	ldr	r2, [r0, #12]
 8006990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006992:	4606      	mov	r6, r0
 8006994:	bb02      	cbnz	r2, 80069d8 <_dtoa_r+0xa40>
 8006996:	4601      	mov	r1, r0
 8006998:	9802      	ldr	r0, [sp, #8]
 800699a:	f000 fc3f 	bl	800721c <__mcmp>
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	4602      	mov	r2, r0
 80069a2:	4631      	mov	r1, r6
 80069a4:	4648      	mov	r0, r9
 80069a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80069a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069aa:	f000 fa05 	bl	8006db8 <_Bfree>
 80069ae:	9b07      	ldr	r3, [sp, #28]
 80069b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069b2:	9e00      	ldr	r6, [sp, #0]
 80069b4:	ea42 0103 	orr.w	r1, r2, r3
 80069b8:	9b06      	ldr	r3, [sp, #24]
 80069ba:	4319      	orrs	r1, r3
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	d10d      	bne.n	80069dc <_dtoa_r+0xa44>
 80069c0:	2b39      	cmp	r3, #57	@ 0x39
 80069c2:	d027      	beq.n	8006a14 <_dtoa_r+0xa7c>
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	dd01      	ble.n	80069ce <_dtoa_r+0xa36>
 80069ca:	9b03      	ldr	r3, [sp, #12]
 80069cc:	3331      	adds	r3, #49	@ 0x31
 80069ce:	f88b 3000 	strb.w	r3, [fp]
 80069d2:	e52e      	b.n	8006432 <_dtoa_r+0x49a>
 80069d4:	4628      	mov	r0, r5
 80069d6:	e7b9      	b.n	800694c <_dtoa_r+0x9b4>
 80069d8:	2201      	movs	r2, #1
 80069da:	e7e2      	b.n	80069a2 <_dtoa_r+0xa0a>
 80069dc:	9904      	ldr	r1, [sp, #16]
 80069de:	2900      	cmp	r1, #0
 80069e0:	db04      	blt.n	80069ec <_dtoa_r+0xa54>
 80069e2:	9807      	ldr	r0, [sp, #28]
 80069e4:	4301      	orrs	r1, r0
 80069e6:	9806      	ldr	r0, [sp, #24]
 80069e8:	4301      	orrs	r1, r0
 80069ea:	d120      	bne.n	8006a2e <_dtoa_r+0xa96>
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	ddee      	ble.n	80069ce <_dtoa_r+0xa36>
 80069f0:	9902      	ldr	r1, [sp, #8]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2201      	movs	r2, #1
 80069f6:	4648      	mov	r0, r9
 80069f8:	f000 fba4 	bl	8007144 <__lshift>
 80069fc:	4621      	mov	r1, r4
 80069fe:	9002      	str	r0, [sp, #8]
 8006a00:	f000 fc0c 	bl	800721c <__mcmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	9b00      	ldr	r3, [sp, #0]
 8006a08:	dc02      	bgt.n	8006a10 <_dtoa_r+0xa78>
 8006a0a:	d1e0      	bne.n	80069ce <_dtoa_r+0xa36>
 8006a0c:	07da      	lsls	r2, r3, #31
 8006a0e:	d5de      	bpl.n	80069ce <_dtoa_r+0xa36>
 8006a10:	2b39      	cmp	r3, #57	@ 0x39
 8006a12:	d1da      	bne.n	80069ca <_dtoa_r+0xa32>
 8006a14:	2339      	movs	r3, #57	@ 0x39
 8006a16:	f88b 3000 	strb.w	r3, [fp]
 8006a1a:	4633      	mov	r3, r6
 8006a1c:	461e      	mov	r6, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a24:	2a39      	cmp	r2, #57	@ 0x39
 8006a26:	d04e      	beq.n	8006ac6 <_dtoa_r+0xb2e>
 8006a28:	3201      	adds	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e501      	b.n	8006432 <_dtoa_r+0x49a>
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	dd03      	ble.n	8006a3a <_dtoa_r+0xaa2>
 8006a32:	2b39      	cmp	r3, #57	@ 0x39
 8006a34:	d0ee      	beq.n	8006a14 <_dtoa_r+0xa7c>
 8006a36:	3301      	adds	r3, #1
 8006a38:	e7c9      	b.n	80069ce <_dtoa_r+0xa36>
 8006a3a:	9a00      	ldr	r2, [sp, #0]
 8006a3c:	9908      	ldr	r1, [sp, #32]
 8006a3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a42:	428a      	cmp	r2, r1
 8006a44:	d028      	beq.n	8006a98 <_dtoa_r+0xb00>
 8006a46:	9902      	ldr	r1, [sp, #8]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	f000 f9d5 	bl	8006dfc <__multadd>
 8006a52:	42af      	cmp	r7, r5
 8006a54:	9002      	str	r0, [sp, #8]
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	f04f 020a 	mov.w	r2, #10
 8006a5e:	4639      	mov	r1, r7
 8006a60:	4648      	mov	r0, r9
 8006a62:	d107      	bne.n	8006a74 <_dtoa_r+0xadc>
 8006a64:	f000 f9ca 	bl	8006dfc <__multadd>
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	9b00      	ldr	r3, [sp, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	e777      	b.n	8006964 <_dtoa_r+0x9cc>
 8006a74:	f000 f9c2 	bl	8006dfc <__multadd>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	220a      	movs	r2, #10
 8006a80:	4648      	mov	r0, r9
 8006a82:	f000 f9bb 	bl	8006dfc <__multadd>
 8006a86:	4605      	mov	r5, r0
 8006a88:	e7f0      	b.n	8006a6c <_dtoa_r+0xad4>
 8006a8a:	f1bb 0f00 	cmp.w	fp, #0
 8006a8e:	bfcc      	ite	gt
 8006a90:	465e      	movgt	r6, fp
 8006a92:	2601      	movle	r6, #1
 8006a94:	4456      	add	r6, sl
 8006a96:	2700      	movs	r7, #0
 8006a98:	9902      	ldr	r1, [sp, #8]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	4648      	mov	r0, r9
 8006aa0:	f000 fb50 	bl	8007144 <__lshift>
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	9002      	str	r0, [sp, #8]
 8006aa8:	f000 fbb8 	bl	800721c <__mcmp>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	dcb4      	bgt.n	8006a1a <_dtoa_r+0xa82>
 8006ab0:	d102      	bne.n	8006ab8 <_dtoa_r+0xb20>
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	07db      	lsls	r3, r3, #31
 8006ab6:	d4b0      	bmi.n	8006a1a <_dtoa_r+0xa82>
 8006ab8:	4633      	mov	r3, r6
 8006aba:	461e      	mov	r6, r3
 8006abc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ac0:	2a30      	cmp	r2, #48	@ 0x30
 8006ac2:	d0fa      	beq.n	8006aba <_dtoa_r+0xb22>
 8006ac4:	e4b5      	b.n	8006432 <_dtoa_r+0x49a>
 8006ac6:	459a      	cmp	sl, r3
 8006ac8:	d1a8      	bne.n	8006a1c <_dtoa_r+0xa84>
 8006aca:	2331      	movs	r3, #49	@ 0x31
 8006acc:	f108 0801 	add.w	r8, r8, #1
 8006ad0:	f88a 3000 	strb.w	r3, [sl]
 8006ad4:	e4ad      	b.n	8006432 <_dtoa_r+0x49a>
 8006ad6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ad8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006b34 <_dtoa_r+0xb9c>
 8006adc:	b11b      	cbz	r3, 8006ae6 <_dtoa_r+0xb4e>
 8006ade:	f10a 0308 	add.w	r3, sl, #8
 8006ae2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	b017      	add	sp, #92	@ 0x5c
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aee:	9b07      	ldr	r3, [sp, #28]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f77f ae2e 	ble.w	8006752 <_dtoa_r+0x7ba>
 8006af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af8:	9308      	str	r3, [sp, #32]
 8006afa:	2001      	movs	r0, #1
 8006afc:	e64d      	b.n	800679a <_dtoa_r+0x802>
 8006afe:	f1bb 0f00 	cmp.w	fp, #0
 8006b02:	f77f aed9 	ble.w	80068b8 <_dtoa_r+0x920>
 8006b06:	4656      	mov	r6, sl
 8006b08:	9802      	ldr	r0, [sp, #8]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	f7ff f9b9 	bl	8005e82 <quorem>
 8006b10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006b14:	f806 3b01 	strb.w	r3, [r6], #1
 8006b18:	eba6 020a 	sub.w	r2, r6, sl
 8006b1c:	4593      	cmp	fp, r2
 8006b1e:	ddb4      	ble.n	8006a8a <_dtoa_r+0xaf2>
 8006b20:	9902      	ldr	r1, [sp, #8]
 8006b22:	2300      	movs	r3, #0
 8006b24:	220a      	movs	r2, #10
 8006b26:	4648      	mov	r0, r9
 8006b28:	f000 f968 	bl	8006dfc <__multadd>
 8006b2c:	9002      	str	r0, [sp, #8]
 8006b2e:	e7eb      	b.n	8006b08 <_dtoa_r+0xb70>
 8006b30:	08009e1c 	.word	0x08009e1c
 8006b34:	08009da0 	.word	0x08009da0

08006b38 <_free_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d041      	beq.n	8006bc4 <_free_r+0x8c>
 8006b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b44:	1f0c      	subs	r4, r1, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfb8      	it	lt
 8006b4a:	18e4      	addlt	r4, r4, r3
 8006b4c:	f000 f8e8 	bl	8006d20 <__malloc_lock>
 8006b50:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc8 <_free_r+0x90>)
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	b933      	cbnz	r3, 8006b64 <_free_r+0x2c>
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b60:	f000 b8e4 	b.w	8006d2c <__malloc_unlock>
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d908      	bls.n	8006b7a <_free_r+0x42>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	1821      	adds	r1, r4, r0
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf01      	itttt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	1809      	addeq	r1, r1, r0
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	e7ed      	b.n	8006b56 <_free_r+0x1e>
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	b10b      	cbz	r3, 8006b84 <_free_r+0x4c>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d9fa      	bls.n	8006b7a <_free_r+0x42>
 8006b84:	6811      	ldr	r1, [r2, #0]
 8006b86:	1850      	adds	r0, r2, r1
 8006b88:	42a0      	cmp	r0, r4
 8006b8a:	d10b      	bne.n	8006ba4 <_free_r+0x6c>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	4401      	add	r1, r0
 8006b90:	1850      	adds	r0, r2, r1
 8006b92:	4283      	cmp	r3, r0
 8006b94:	6011      	str	r1, [r2, #0]
 8006b96:	d1e0      	bne.n	8006b5a <_free_r+0x22>
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	6053      	str	r3, [r2, #4]
 8006b9e:	4408      	add	r0, r1
 8006ba0:	6010      	str	r0, [r2, #0]
 8006ba2:	e7da      	b.n	8006b5a <_free_r+0x22>
 8006ba4:	d902      	bls.n	8006bac <_free_r+0x74>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	e7d6      	b.n	8006b5a <_free_r+0x22>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	1821      	adds	r1, r4, r0
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf04      	itt	eq
 8006bb4:	6819      	ldreq	r1, [r3, #0]
 8006bb6:	685b      	ldreq	r3, [r3, #4]
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	bf04      	itt	eq
 8006bbc:	1809      	addeq	r1, r1, r0
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	6054      	str	r4, [r2, #4]
 8006bc2:	e7ca      	b.n	8006b5a <_free_r+0x22>
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000494 	.word	0x20000494

08006bcc <malloc>:
 8006bcc:	4b02      	ldr	r3, [pc, #8]	@ (8006bd8 <malloc+0xc>)
 8006bce:	4601      	mov	r1, r0
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	f000 b825 	b.w	8006c20 <_malloc_r>
 8006bd6:	bf00      	nop
 8006bd8:	20000018 	.word	0x20000018

08006bdc <sbrk_aligned>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0f      	ldr	r6, [pc, #60]	@ (8006c1c <sbrk_aligned+0x40>)
 8006be0:	460c      	mov	r4, r1
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	b911      	cbnz	r1, 8006bee <sbrk_aligned+0x12>
 8006be8:	f000 fe92 	bl	8007910 <_sbrk_r>
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 fe8d 	bl	8007910 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d103      	bne.n	8006c02 <sbrk_aligned+0x26>
 8006bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8006bfe:	4620      	mov	r0, r4
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d0f8      	beq.n	8006bfe <sbrk_aligned+0x22>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fe7e 	bl	8007910 <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1f2      	bne.n	8006bfe <sbrk_aligned+0x22>
 8006c18:	e7ef      	b.n	8006bfa <sbrk_aligned+0x1e>
 8006c1a:	bf00      	nop
 8006c1c:	20000490 	.word	0x20000490

08006c20 <_malloc_r>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	1ccd      	adds	r5, r1, #3
 8006c26:	f025 0503 	bic.w	r5, r5, #3
 8006c2a:	3508      	adds	r5, #8
 8006c2c:	2d0c      	cmp	r5, #12
 8006c2e:	bf38      	it	cc
 8006c30:	250c      	movcc	r5, #12
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	4606      	mov	r6, r0
 8006c36:	db01      	blt.n	8006c3c <_malloc_r+0x1c>
 8006c38:	42a9      	cmp	r1, r5
 8006c3a:	d904      	bls.n	8006c46 <_malloc_r+0x26>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	2000      	movs	r0, #0
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d1c <_malloc_r+0xfc>
 8006c4a:	f000 f869 	bl	8006d20 <__malloc_lock>
 8006c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c52:	461c      	mov	r4, r3
 8006c54:	bb44      	cbnz	r4, 8006ca8 <_malloc_r+0x88>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffbf 	bl	8006bdc <sbrk_aligned>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	4604      	mov	r4, r0
 8006c62:	d158      	bne.n	8006d16 <_malloc_r+0xf6>
 8006c64:	f8d8 4000 	ldr.w	r4, [r8]
 8006c68:	4627      	mov	r7, r4
 8006c6a:	2f00      	cmp	r7, #0
 8006c6c:	d143      	bne.n	8006cf6 <_malloc_r+0xd6>
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	d04b      	beq.n	8006d0a <_malloc_r+0xea>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	eb04 0903 	add.w	r9, r4, r3
 8006c7c:	f000 fe48 	bl	8007910 <_sbrk_r>
 8006c80:	4581      	cmp	r9, r0
 8006c82:	d142      	bne.n	8006d0a <_malloc_r+0xea>
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	1a6d      	subs	r5, r5, r1
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffa6 	bl	8006bdc <sbrk_aligned>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d03a      	beq.n	8006d0a <_malloc_r+0xea>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	442b      	add	r3, r5
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	bb62      	cbnz	r2, 8006cfc <_malloc_r+0xdc>
 8006ca2:	f8c8 7000 	str.w	r7, [r8]
 8006ca6:	e00f      	b.n	8006cc8 <_malloc_r+0xa8>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	1b52      	subs	r2, r2, r5
 8006cac:	d420      	bmi.n	8006cf0 <_malloc_r+0xd0>
 8006cae:	2a0b      	cmp	r2, #11
 8006cb0:	d917      	bls.n	8006ce2 <_malloc_r+0xc2>
 8006cb2:	1961      	adds	r1, r4, r5
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	6025      	str	r5, [r4, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	6059      	strne	r1, [r3, #4]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	bf08      	it	eq
 8006cc0:	f8c8 1000 	streq.w	r1, [r8]
 8006cc4:	5162      	str	r2, [r4, r5]
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f82f 	bl	8006d2c <__malloc_unlock>
 8006cce:	f104 000b 	add.w	r0, r4, #11
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	f020 0007 	bic.w	r0, r0, #7
 8006cd8:	1ac2      	subs	r2, r0, r3
 8006cda:	bf1c      	itt	ne
 8006cdc:	1a1b      	subne	r3, r3, r0
 8006cde:	50a3      	strne	r3, [r4, r2]
 8006ce0:	e7af      	b.n	8006c42 <_malloc_r+0x22>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bf0c      	ite	eq
 8006ce8:	f8c8 2000 	streq.w	r2, [r8]
 8006cec:	605a      	strne	r2, [r3, #4]
 8006cee:	e7eb      	b.n	8006cc8 <_malloc_r+0xa8>
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	6864      	ldr	r4, [r4, #4]
 8006cf4:	e7ae      	b.n	8006c54 <_malloc_r+0x34>
 8006cf6:	463c      	mov	r4, r7
 8006cf8:	687f      	ldr	r7, [r7, #4]
 8006cfa:	e7b6      	b.n	8006c6a <_malloc_r+0x4a>
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	d1fb      	bne.n	8006cfc <_malloc_r+0xdc>
 8006d04:	2300      	movs	r3, #0
 8006d06:	6053      	str	r3, [r2, #4]
 8006d08:	e7de      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	6033      	str	r3, [r6, #0]
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 f80c 	bl	8006d2c <__malloc_unlock>
 8006d14:	e794      	b.n	8006c40 <_malloc_r+0x20>
 8006d16:	6005      	str	r5, [r0, #0]
 8006d18:	e7d6      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d1a:	bf00      	nop
 8006d1c:	20000494 	.word	0x20000494

08006d20 <__malloc_lock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__malloc_lock+0x8>)
 8006d22:	f7ff b8ac 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	2000048c 	.word	0x2000048c

08006d2c <__malloc_unlock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	@ (8006d34 <__malloc_unlock+0x8>)
 8006d2e:	f7ff b8a7 	b.w	8005e80 <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	2000048c 	.word	0x2000048c

08006d38 <_Balloc>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	69c6      	ldr	r6, [r0, #28]
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	460d      	mov	r5, r1
 8006d40:	b976      	cbnz	r6, 8006d60 <_Balloc+0x28>
 8006d42:	2010      	movs	r0, #16
 8006d44:	f7ff ff42 	bl	8006bcc <malloc>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	61e0      	str	r0, [r4, #28]
 8006d4c:	b920      	cbnz	r0, 8006d58 <_Balloc+0x20>
 8006d4e:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <_Balloc+0x78>)
 8006d50:	4818      	ldr	r0, [pc, #96]	@ (8006db4 <_Balloc+0x7c>)
 8006d52:	216b      	movs	r1, #107	@ 0x6b
 8006d54:	f000 fdfa 	bl	800794c <__assert_func>
 8006d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d5c:	6006      	str	r6, [r0, #0]
 8006d5e:	60c6      	str	r6, [r0, #12]
 8006d60:	69e6      	ldr	r6, [r4, #28]
 8006d62:	68f3      	ldr	r3, [r6, #12]
 8006d64:	b183      	cbz	r3, 8006d88 <_Balloc+0x50>
 8006d66:	69e3      	ldr	r3, [r4, #28]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d6e:	b9b8      	cbnz	r0, 8006da0 <_Balloc+0x68>
 8006d70:	2101      	movs	r1, #1
 8006d72:	fa01 f605 	lsl.w	r6, r1, r5
 8006d76:	1d72      	adds	r2, r6, #5
 8006d78:	0092      	lsls	r2, r2, #2
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fe04 	bl	8007988 <_calloc_r>
 8006d80:	b160      	cbz	r0, 8006d9c <_Balloc+0x64>
 8006d82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d86:	e00e      	b.n	8006da6 <_Balloc+0x6e>
 8006d88:	2221      	movs	r2, #33	@ 0x21
 8006d8a:	2104      	movs	r1, #4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fdfb 	bl	8007988 <_calloc_r>
 8006d92:	69e3      	ldr	r3, [r4, #28]
 8006d94:	60f0      	str	r0, [r6, #12]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e4      	bne.n	8006d66 <_Balloc+0x2e>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	6802      	ldr	r2, [r0, #0]
 8006da2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006da6:	2300      	movs	r3, #0
 8006da8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dac:	e7f7      	b.n	8006d9e <_Balloc+0x66>
 8006dae:	bf00      	nop
 8006db0:	08009dad 	.word	0x08009dad
 8006db4:	08009e2d 	.word	0x08009e2d

08006db8 <_Bfree>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	69c6      	ldr	r6, [r0, #28]
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	b976      	cbnz	r6, 8006de0 <_Bfree+0x28>
 8006dc2:	2010      	movs	r0, #16
 8006dc4:	f7ff ff02 	bl	8006bcc <malloc>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	61e8      	str	r0, [r5, #28]
 8006dcc:	b920      	cbnz	r0, 8006dd8 <_Bfree+0x20>
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <_Bfree+0x3c>)
 8006dd0:	4809      	ldr	r0, [pc, #36]	@ (8006df8 <_Bfree+0x40>)
 8006dd2:	218f      	movs	r1, #143	@ 0x8f
 8006dd4:	f000 fdba 	bl	800794c <__assert_func>
 8006dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ddc:	6006      	str	r6, [r0, #0]
 8006dde:	60c6      	str	r6, [r0, #12]
 8006de0:	b13c      	cbz	r4, 8006df2 <_Bfree+0x3a>
 8006de2:	69eb      	ldr	r3, [r5, #28]
 8006de4:	6862      	ldr	r2, [r4, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dec:	6021      	str	r1, [r4, #0]
 8006dee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	08009dad 	.word	0x08009dad
 8006df8:	08009e2d 	.word	0x08009e2d

08006dfc <__multadd>:
 8006dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	690d      	ldr	r5, [r1, #16]
 8006e02:	4607      	mov	r7, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	461e      	mov	r6, r3
 8006e08:	f101 0c14 	add.w	ip, r1, #20
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e12:	b299      	uxth	r1, r3
 8006e14:	fb02 6101 	mla	r1, r2, r1, r6
 8006e18:	0c1e      	lsrs	r6, r3, #16
 8006e1a:	0c0b      	lsrs	r3, r1, #16
 8006e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e20:	b289      	uxth	r1, r1
 8006e22:	3001      	adds	r0, #1
 8006e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e28:	4285      	cmp	r5, r0
 8006e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e32:	dcec      	bgt.n	8006e0e <__multadd+0x12>
 8006e34:	b30e      	cbz	r6, 8006e7a <__multadd+0x7e>
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc19      	bgt.n	8006e70 <__multadd+0x74>
 8006e3c:	6861      	ldr	r1, [r4, #4]
 8006e3e:	4638      	mov	r0, r7
 8006e40:	3101      	adds	r1, #1
 8006e42:	f7ff ff79 	bl	8006d38 <_Balloc>
 8006e46:	4680      	mov	r8, r0
 8006e48:	b928      	cbnz	r0, 8006e56 <__multadd+0x5a>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <__multadd+0x84>)
 8006e4e:	480d      	ldr	r0, [pc, #52]	@ (8006e84 <__multadd+0x88>)
 8006e50:	21ba      	movs	r1, #186	@ 0xba
 8006e52:	f000 fd7b 	bl	800794c <__assert_func>
 8006e56:	6922      	ldr	r2, [r4, #16]
 8006e58:	3202      	adds	r2, #2
 8006e5a:	f104 010c 	add.w	r1, r4, #12
 8006e5e:	0092      	lsls	r2, r2, #2
 8006e60:	300c      	adds	r0, #12
 8006e62:	f000 fd65 	bl	8007930 <memcpy>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff ffa5 	bl	8006db8 <_Bfree>
 8006e6e:	4644      	mov	r4, r8
 8006e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e74:	3501      	adds	r5, #1
 8006e76:	615e      	str	r6, [r3, #20]
 8006e78:	6125      	str	r5, [r4, #16]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	08009e1c 	.word	0x08009e1c
 8006e84:	08009e2d 	.word	0x08009e2d

08006e88 <__hi0bits>:
 8006e88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	bf36      	itet	cc
 8006e90:	0403      	lslcc	r3, r0, #16
 8006e92:	2000      	movcs	r0, #0
 8006e94:	2010      	movcc	r0, #16
 8006e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e9a:	bf3c      	itt	cc
 8006e9c:	021b      	lslcc	r3, r3, #8
 8006e9e:	3008      	addcc	r0, #8
 8006ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea4:	bf3c      	itt	cc
 8006ea6:	011b      	lslcc	r3, r3, #4
 8006ea8:	3004      	addcc	r0, #4
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eae:	bf3c      	itt	cc
 8006eb0:	009b      	lslcc	r3, r3, #2
 8006eb2:	3002      	addcc	r0, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	db05      	blt.n	8006ec4 <__hi0bits+0x3c>
 8006eb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ebc:	f100 0001 	add.w	r0, r0, #1
 8006ec0:	bf08      	it	eq
 8006ec2:	2020      	moveq	r0, #32
 8006ec4:	4770      	bx	lr

08006ec6 <__lo0bits>:
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	4602      	mov	r2, r0
 8006eca:	f013 0007 	ands.w	r0, r3, #7
 8006ece:	d00b      	beq.n	8006ee8 <__lo0bits+0x22>
 8006ed0:	07d9      	lsls	r1, r3, #31
 8006ed2:	d421      	bmi.n	8006f18 <__lo0bits+0x52>
 8006ed4:	0798      	lsls	r0, r3, #30
 8006ed6:	bf49      	itett	mi
 8006ed8:	085b      	lsrmi	r3, r3, #1
 8006eda:	089b      	lsrpl	r3, r3, #2
 8006edc:	2001      	movmi	r0, #1
 8006ede:	6013      	strmi	r3, [r2, #0]
 8006ee0:	bf5c      	itt	pl
 8006ee2:	6013      	strpl	r3, [r2, #0]
 8006ee4:	2002      	movpl	r0, #2
 8006ee6:	4770      	bx	lr
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	b909      	cbnz	r1, 8006ef0 <__lo0bits+0x2a>
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	2010      	movs	r0, #16
 8006ef0:	b2d9      	uxtb	r1, r3
 8006ef2:	b909      	cbnz	r1, 8006ef8 <__lo0bits+0x32>
 8006ef4:	3008      	adds	r0, #8
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	0719      	lsls	r1, r3, #28
 8006efa:	bf04      	itt	eq
 8006efc:	091b      	lsreq	r3, r3, #4
 8006efe:	3004      	addeq	r0, #4
 8006f00:	0799      	lsls	r1, r3, #30
 8006f02:	bf04      	itt	eq
 8006f04:	089b      	lsreq	r3, r3, #2
 8006f06:	3002      	addeq	r0, #2
 8006f08:	07d9      	lsls	r1, r3, #31
 8006f0a:	d403      	bmi.n	8006f14 <__lo0bits+0x4e>
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	f100 0001 	add.w	r0, r0, #1
 8006f12:	d003      	beq.n	8006f1c <__lo0bits+0x56>
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4770      	bx	lr
 8006f18:	2000      	movs	r0, #0
 8006f1a:	4770      	bx	lr
 8006f1c:	2020      	movs	r0, #32
 8006f1e:	4770      	bx	lr

08006f20 <__i2b>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	2101      	movs	r1, #1
 8006f26:	f7ff ff07 	bl	8006d38 <_Balloc>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	b928      	cbnz	r0, 8006f3a <__i2b+0x1a>
 8006f2e:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <__i2b+0x24>)
 8006f30:	4805      	ldr	r0, [pc, #20]	@ (8006f48 <__i2b+0x28>)
 8006f32:	f240 1145 	movw	r1, #325	@ 0x145
 8006f36:	f000 fd09 	bl	800794c <__assert_func>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	6144      	str	r4, [r0, #20]
 8006f3e:	6103      	str	r3, [r0, #16]
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	bf00      	nop
 8006f44:	08009e1c 	.word	0x08009e1c
 8006f48:	08009e2d 	.word	0x08009e2d

08006f4c <__multiply>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	4617      	mov	r7, r2
 8006f52:	690a      	ldr	r2, [r1, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	bfa8      	it	ge
 8006f5a:	463b      	movge	r3, r7
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	bfa4      	itt	ge
 8006f60:	460f      	movge	r7, r1
 8006f62:	4699      	movge	r9, r3
 8006f64:	693d      	ldr	r5, [r7, #16]
 8006f66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	eb05 060a 	add.w	r6, r5, sl
 8006f72:	42b3      	cmp	r3, r6
 8006f74:	b085      	sub	sp, #20
 8006f76:	bfb8      	it	lt
 8006f78:	3101      	addlt	r1, #1
 8006f7a:	f7ff fedd 	bl	8006d38 <_Balloc>
 8006f7e:	b930      	cbnz	r0, 8006f8e <__multiply+0x42>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b41      	ldr	r3, [pc, #260]	@ (8007088 <__multiply+0x13c>)
 8006f84:	4841      	ldr	r0, [pc, #260]	@ (800708c <__multiply+0x140>)
 8006f86:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f8a:	f000 fcdf 	bl	800794c <__assert_func>
 8006f8e:	f100 0414 	add.w	r4, r0, #20
 8006f92:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006f96:	4623      	mov	r3, r4
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4573      	cmp	r3, lr
 8006f9c:	d320      	bcc.n	8006fe0 <__multiply+0x94>
 8006f9e:	f107 0814 	add.w	r8, r7, #20
 8006fa2:	f109 0114 	add.w	r1, r9, #20
 8006fa6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006faa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006fae:	9302      	str	r3, [sp, #8]
 8006fb0:	1beb      	subs	r3, r5, r7
 8006fb2:	3b15      	subs	r3, #21
 8006fb4:	f023 0303 	bic.w	r3, r3, #3
 8006fb8:	3304      	adds	r3, #4
 8006fba:	3715      	adds	r7, #21
 8006fbc:	42bd      	cmp	r5, r7
 8006fbe:	bf38      	it	cc
 8006fc0:	2304      	movcc	r3, #4
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	9103      	str	r1, [sp, #12]
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	d80c      	bhi.n	8006fe6 <__multiply+0x9a>
 8006fcc:	2e00      	cmp	r6, #0
 8006fce:	dd03      	ble.n	8006fd8 <__multiply+0x8c>
 8006fd0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d055      	beq.n	8007084 <__multiply+0x138>
 8006fd8:	6106      	str	r6, [r0, #16]
 8006fda:	b005      	add	sp, #20
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	f843 2b04 	str.w	r2, [r3], #4
 8006fe4:	e7d9      	b.n	8006f9a <__multiply+0x4e>
 8006fe6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fea:	f1ba 0f00 	cmp.w	sl, #0
 8006fee:	d01f      	beq.n	8007030 <__multiply+0xe4>
 8006ff0:	46c4      	mov	ip, r8
 8006ff2:	46a1      	mov	r9, r4
 8006ff4:	2700      	movs	r7, #0
 8006ff6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ffa:	f8d9 3000 	ldr.w	r3, [r9]
 8006ffe:	fa1f fb82 	uxth.w	fp, r2
 8007002:	b29b      	uxth	r3, r3
 8007004:	fb0a 330b 	mla	r3, sl, fp, r3
 8007008:	443b      	add	r3, r7
 800700a:	f8d9 7000 	ldr.w	r7, [r9]
 800700e:	0c12      	lsrs	r2, r2, #16
 8007010:	0c3f      	lsrs	r7, r7, #16
 8007012:	fb0a 7202 	mla	r2, sl, r2, r7
 8007016:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800701a:	b29b      	uxth	r3, r3
 800701c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007020:	4565      	cmp	r5, ip
 8007022:	f849 3b04 	str.w	r3, [r9], #4
 8007026:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800702a:	d8e4      	bhi.n	8006ff6 <__multiply+0xaa>
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	50e7      	str	r7, [r4, r3]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007036:	3104      	adds	r1, #4
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	d020      	beq.n	8007080 <__multiply+0x134>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	4647      	mov	r7, r8
 8007042:	46a4      	mov	ip, r4
 8007044:	f04f 0a00 	mov.w	sl, #0
 8007048:	f8b7 b000 	ldrh.w	fp, [r7]
 800704c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007050:	fb09 220b 	mla	r2, r9, fp, r2
 8007054:	4452      	add	r2, sl
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800705c:	f84c 3b04 	str.w	r3, [ip], #4
 8007060:	f857 3b04 	ldr.w	r3, [r7], #4
 8007064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007068:	f8bc 3000 	ldrh.w	r3, [ip]
 800706c:	fb09 330a 	mla	r3, r9, sl, r3
 8007070:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007074:	42bd      	cmp	r5, r7
 8007076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800707a:	d8e5      	bhi.n	8007048 <__multiply+0xfc>
 800707c:	9a01      	ldr	r2, [sp, #4]
 800707e:	50a3      	str	r3, [r4, r2]
 8007080:	3404      	adds	r4, #4
 8007082:	e79f      	b.n	8006fc4 <__multiply+0x78>
 8007084:	3e01      	subs	r6, #1
 8007086:	e7a1      	b.n	8006fcc <__multiply+0x80>
 8007088:	08009e1c 	.word	0x08009e1c
 800708c:	08009e2d 	.word	0x08009e2d

08007090 <__pow5mult>:
 8007090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007094:	4615      	mov	r5, r2
 8007096:	f012 0203 	ands.w	r2, r2, #3
 800709a:	4607      	mov	r7, r0
 800709c:	460e      	mov	r6, r1
 800709e:	d007      	beq.n	80070b0 <__pow5mult+0x20>
 80070a0:	4c25      	ldr	r4, [pc, #148]	@ (8007138 <__pow5mult+0xa8>)
 80070a2:	3a01      	subs	r2, #1
 80070a4:	2300      	movs	r3, #0
 80070a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070aa:	f7ff fea7 	bl	8006dfc <__multadd>
 80070ae:	4606      	mov	r6, r0
 80070b0:	10ad      	asrs	r5, r5, #2
 80070b2:	d03d      	beq.n	8007130 <__pow5mult+0xa0>
 80070b4:	69fc      	ldr	r4, [r7, #28]
 80070b6:	b97c      	cbnz	r4, 80070d8 <__pow5mult+0x48>
 80070b8:	2010      	movs	r0, #16
 80070ba:	f7ff fd87 	bl	8006bcc <malloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	61f8      	str	r0, [r7, #28]
 80070c2:	b928      	cbnz	r0, 80070d0 <__pow5mult+0x40>
 80070c4:	4b1d      	ldr	r3, [pc, #116]	@ (800713c <__pow5mult+0xac>)
 80070c6:	481e      	ldr	r0, [pc, #120]	@ (8007140 <__pow5mult+0xb0>)
 80070c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070cc:	f000 fc3e 	bl	800794c <__assert_func>
 80070d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d4:	6004      	str	r4, [r0, #0]
 80070d6:	60c4      	str	r4, [r0, #12]
 80070d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070e0:	b94c      	cbnz	r4, 80070f6 <__pow5mult+0x66>
 80070e2:	f240 2171 	movw	r1, #625	@ 0x271
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7ff ff1a 	bl	8006f20 <__i2b>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80070f2:	4604      	mov	r4, r0
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	f04f 0900 	mov.w	r9, #0
 80070fa:	07eb      	lsls	r3, r5, #31
 80070fc:	d50a      	bpl.n	8007114 <__pow5mult+0x84>
 80070fe:	4631      	mov	r1, r6
 8007100:	4622      	mov	r2, r4
 8007102:	4638      	mov	r0, r7
 8007104:	f7ff ff22 	bl	8006f4c <__multiply>
 8007108:	4631      	mov	r1, r6
 800710a:	4680      	mov	r8, r0
 800710c:	4638      	mov	r0, r7
 800710e:	f7ff fe53 	bl	8006db8 <_Bfree>
 8007112:	4646      	mov	r6, r8
 8007114:	106d      	asrs	r5, r5, #1
 8007116:	d00b      	beq.n	8007130 <__pow5mult+0xa0>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	b938      	cbnz	r0, 800712c <__pow5mult+0x9c>
 800711c:	4622      	mov	r2, r4
 800711e:	4621      	mov	r1, r4
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff ff13 	bl	8006f4c <__multiply>
 8007126:	6020      	str	r0, [r4, #0]
 8007128:	f8c0 9000 	str.w	r9, [r0]
 800712c:	4604      	mov	r4, r0
 800712e:	e7e4      	b.n	80070fa <__pow5mult+0x6a>
 8007130:	4630      	mov	r0, r6
 8007132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007136:	bf00      	nop
 8007138:	08009ee0 	.word	0x08009ee0
 800713c:	08009dad 	.word	0x08009dad
 8007140:	08009e2d 	.word	0x08009e2d

08007144 <__lshift>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	460c      	mov	r4, r1
 800714a:	6849      	ldr	r1, [r1, #4]
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	4607      	mov	r7, r0
 8007156:	4691      	mov	r9, r2
 8007158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800715c:	f108 0601 	add.w	r6, r8, #1
 8007160:	42b3      	cmp	r3, r6
 8007162:	db0b      	blt.n	800717c <__lshift+0x38>
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff fde7 	bl	8006d38 <_Balloc>
 800716a:	4605      	mov	r5, r0
 800716c:	b948      	cbnz	r0, 8007182 <__lshift+0x3e>
 800716e:	4602      	mov	r2, r0
 8007170:	4b28      	ldr	r3, [pc, #160]	@ (8007214 <__lshift+0xd0>)
 8007172:	4829      	ldr	r0, [pc, #164]	@ (8007218 <__lshift+0xd4>)
 8007174:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007178:	f000 fbe8 	bl	800794c <__assert_func>
 800717c:	3101      	adds	r1, #1
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	e7ee      	b.n	8007160 <__lshift+0x1c>
 8007182:	2300      	movs	r3, #0
 8007184:	f100 0114 	add.w	r1, r0, #20
 8007188:	f100 0210 	add.w	r2, r0, #16
 800718c:	4618      	mov	r0, r3
 800718e:	4553      	cmp	r3, sl
 8007190:	db33      	blt.n	80071fa <__lshift+0xb6>
 8007192:	6920      	ldr	r0, [r4, #16]
 8007194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007198:	f104 0314 	add.w	r3, r4, #20
 800719c:	f019 091f 	ands.w	r9, r9, #31
 80071a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071a8:	d02b      	beq.n	8007202 <__lshift+0xbe>
 80071aa:	f1c9 0e20 	rsb	lr, r9, #32
 80071ae:	468a      	mov	sl, r1
 80071b0:	2200      	movs	r2, #0
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	fa00 f009 	lsl.w	r0, r0, r9
 80071b8:	4310      	orrs	r0, r2
 80071ba:	f84a 0b04 	str.w	r0, [sl], #4
 80071be:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c2:	459c      	cmp	ip, r3
 80071c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071c8:	d8f3      	bhi.n	80071b2 <__lshift+0x6e>
 80071ca:	ebac 0304 	sub.w	r3, ip, r4
 80071ce:	3b15      	subs	r3, #21
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	3304      	adds	r3, #4
 80071d6:	f104 0015 	add.w	r0, r4, #21
 80071da:	4560      	cmp	r0, ip
 80071dc:	bf88      	it	hi
 80071de:	2304      	movhi	r3, #4
 80071e0:	50ca      	str	r2, [r1, r3]
 80071e2:	b10a      	cbz	r2, 80071e8 <__lshift+0xa4>
 80071e4:	f108 0602 	add.w	r6, r8, #2
 80071e8:	3e01      	subs	r6, #1
 80071ea:	4638      	mov	r0, r7
 80071ec:	612e      	str	r6, [r5, #16]
 80071ee:	4621      	mov	r1, r4
 80071f0:	f7ff fde2 	bl	8006db8 <_Bfree>
 80071f4:	4628      	mov	r0, r5
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80071fe:	3301      	adds	r3, #1
 8007200:	e7c5      	b.n	800718e <__lshift+0x4a>
 8007202:	3904      	subs	r1, #4
 8007204:	f853 2b04 	ldr.w	r2, [r3], #4
 8007208:	f841 2f04 	str.w	r2, [r1, #4]!
 800720c:	459c      	cmp	ip, r3
 800720e:	d8f9      	bhi.n	8007204 <__lshift+0xc0>
 8007210:	e7ea      	b.n	80071e8 <__lshift+0xa4>
 8007212:	bf00      	nop
 8007214:	08009e1c 	.word	0x08009e1c
 8007218:	08009e2d 	.word	0x08009e2d

0800721c <__mcmp>:
 800721c:	690a      	ldr	r2, [r1, #16]
 800721e:	4603      	mov	r3, r0
 8007220:	6900      	ldr	r0, [r0, #16]
 8007222:	1a80      	subs	r0, r0, r2
 8007224:	b530      	push	{r4, r5, lr}
 8007226:	d10e      	bne.n	8007246 <__mcmp+0x2a>
 8007228:	3314      	adds	r3, #20
 800722a:	3114      	adds	r1, #20
 800722c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800723c:	4295      	cmp	r5, r2
 800723e:	d003      	beq.n	8007248 <__mcmp+0x2c>
 8007240:	d205      	bcs.n	800724e <__mcmp+0x32>
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	bd30      	pop	{r4, r5, pc}
 8007248:	42a3      	cmp	r3, r4
 800724a:	d3f3      	bcc.n	8007234 <__mcmp+0x18>
 800724c:	e7fb      	b.n	8007246 <__mcmp+0x2a>
 800724e:	2001      	movs	r0, #1
 8007250:	e7f9      	b.n	8007246 <__mcmp+0x2a>
	...

08007254 <__mdiff>:
 8007254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4689      	mov	r9, r1
 800725a:	4606      	mov	r6, r0
 800725c:	4611      	mov	r1, r2
 800725e:	4648      	mov	r0, r9
 8007260:	4614      	mov	r4, r2
 8007262:	f7ff ffdb 	bl	800721c <__mcmp>
 8007266:	1e05      	subs	r5, r0, #0
 8007268:	d112      	bne.n	8007290 <__mdiff+0x3c>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff fd63 	bl	8006d38 <_Balloc>
 8007272:	4602      	mov	r2, r0
 8007274:	b928      	cbnz	r0, 8007282 <__mdiff+0x2e>
 8007276:	4b3f      	ldr	r3, [pc, #252]	@ (8007374 <__mdiff+0x120>)
 8007278:	f240 2137 	movw	r1, #567	@ 0x237
 800727c:	483e      	ldr	r0, [pc, #248]	@ (8007378 <__mdiff+0x124>)
 800727e:	f000 fb65 	bl	800794c <__assert_func>
 8007282:	2301      	movs	r3, #1
 8007284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007288:	4610      	mov	r0, r2
 800728a:	b003      	add	sp, #12
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	bfbc      	itt	lt
 8007292:	464b      	movlt	r3, r9
 8007294:	46a1      	movlt	r9, r4
 8007296:	4630      	mov	r0, r6
 8007298:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800729c:	bfba      	itte	lt
 800729e:	461c      	movlt	r4, r3
 80072a0:	2501      	movlt	r5, #1
 80072a2:	2500      	movge	r5, #0
 80072a4:	f7ff fd48 	bl	8006d38 <_Balloc>
 80072a8:	4602      	mov	r2, r0
 80072aa:	b918      	cbnz	r0, 80072b4 <__mdiff+0x60>
 80072ac:	4b31      	ldr	r3, [pc, #196]	@ (8007374 <__mdiff+0x120>)
 80072ae:	f240 2145 	movw	r1, #581	@ 0x245
 80072b2:	e7e3      	b.n	800727c <__mdiff+0x28>
 80072b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072b8:	6926      	ldr	r6, [r4, #16]
 80072ba:	60c5      	str	r5, [r0, #12]
 80072bc:	f109 0310 	add.w	r3, r9, #16
 80072c0:	f109 0514 	add.w	r5, r9, #20
 80072c4:	f104 0e14 	add.w	lr, r4, #20
 80072c8:	f100 0b14 	add.w	fp, r0, #20
 80072cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	46d9      	mov	r9, fp
 80072d8:	f04f 0c00 	mov.w	ip, #0
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	fa1f f38a 	uxth.w	r3, sl
 80072ec:	4619      	mov	r1, r3
 80072ee:	b283      	uxth	r3, r0
 80072f0:	1acb      	subs	r3, r1, r3
 80072f2:	0c00      	lsrs	r0, r0, #16
 80072f4:	4463      	add	r3, ip
 80072f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007304:	4576      	cmp	r6, lr
 8007306:	f849 3b04 	str.w	r3, [r9], #4
 800730a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800730e:	d8e5      	bhi.n	80072dc <__mdiff+0x88>
 8007310:	1b33      	subs	r3, r6, r4
 8007312:	3b15      	subs	r3, #21
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	3415      	adds	r4, #21
 800731a:	3304      	adds	r3, #4
 800731c:	42a6      	cmp	r6, r4
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	441d      	add	r5, r3
 8007324:	445b      	add	r3, fp
 8007326:	461e      	mov	r6, r3
 8007328:	462c      	mov	r4, r5
 800732a:	4544      	cmp	r4, r8
 800732c:	d30e      	bcc.n	800734c <__mdiff+0xf8>
 800732e:	f108 0103 	add.w	r1, r8, #3
 8007332:	1b49      	subs	r1, r1, r5
 8007334:	f021 0103 	bic.w	r1, r1, #3
 8007338:	3d03      	subs	r5, #3
 800733a:	45a8      	cmp	r8, r5
 800733c:	bf38      	it	cc
 800733e:	2100      	movcc	r1, #0
 8007340:	440b      	add	r3, r1
 8007342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007346:	b191      	cbz	r1, 800736e <__mdiff+0x11a>
 8007348:	6117      	str	r7, [r2, #16]
 800734a:	e79d      	b.n	8007288 <__mdiff+0x34>
 800734c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007350:	46e6      	mov	lr, ip
 8007352:	0c08      	lsrs	r0, r1, #16
 8007354:	fa1c fc81 	uxtah	ip, ip, r1
 8007358:	4471      	add	r1, lr
 800735a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800735e:	b289      	uxth	r1, r1
 8007360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007364:	f846 1b04 	str.w	r1, [r6], #4
 8007368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800736c:	e7dd      	b.n	800732a <__mdiff+0xd6>
 800736e:	3f01      	subs	r7, #1
 8007370:	e7e7      	b.n	8007342 <__mdiff+0xee>
 8007372:	bf00      	nop
 8007374:	08009e1c 	.word	0x08009e1c
 8007378:	08009e2d 	.word	0x08009e2d

0800737c <__d2b>:
 800737c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007380:	460f      	mov	r7, r1
 8007382:	2101      	movs	r1, #1
 8007384:	ec59 8b10 	vmov	r8, r9, d0
 8007388:	4616      	mov	r6, r2
 800738a:	f7ff fcd5 	bl	8006d38 <_Balloc>
 800738e:	4604      	mov	r4, r0
 8007390:	b930      	cbnz	r0, 80073a0 <__d2b+0x24>
 8007392:	4602      	mov	r2, r0
 8007394:	4b23      	ldr	r3, [pc, #140]	@ (8007424 <__d2b+0xa8>)
 8007396:	4824      	ldr	r0, [pc, #144]	@ (8007428 <__d2b+0xac>)
 8007398:	f240 310f 	movw	r1, #783	@ 0x30f
 800739c:	f000 fad6 	bl	800794c <__assert_func>
 80073a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073a8:	b10d      	cbz	r5, 80073ae <__d2b+0x32>
 80073aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	f1b8 0300 	subs.w	r3, r8, #0
 80073b4:	d023      	beq.n	80073fe <__d2b+0x82>
 80073b6:	4668      	mov	r0, sp
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	f7ff fd84 	bl	8006ec6 <__lo0bits>
 80073be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073c2:	b1d0      	cbz	r0, 80073fa <__d2b+0x7e>
 80073c4:	f1c0 0320 	rsb	r3, r0, #32
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	430b      	orrs	r3, r1
 80073ce:	40c2      	lsrs	r2, r0
 80073d0:	6163      	str	r3, [r4, #20]
 80073d2:	9201      	str	r2, [sp, #4]
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	61a3      	str	r3, [r4, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf0c      	ite	eq
 80073dc:	2201      	moveq	r2, #1
 80073de:	2202      	movne	r2, #2
 80073e0:	6122      	str	r2, [r4, #16]
 80073e2:	b1a5      	cbz	r5, 800740e <__d2b+0x92>
 80073e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073e8:	4405      	add	r5, r0
 80073ea:	603d      	str	r5, [r7, #0]
 80073ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073f0:	6030      	str	r0, [r6, #0]
 80073f2:	4620      	mov	r0, r4
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073fa:	6161      	str	r1, [r4, #20]
 80073fc:	e7ea      	b.n	80073d4 <__d2b+0x58>
 80073fe:	a801      	add	r0, sp, #4
 8007400:	f7ff fd61 	bl	8006ec6 <__lo0bits>
 8007404:	9b01      	ldr	r3, [sp, #4]
 8007406:	6163      	str	r3, [r4, #20]
 8007408:	3020      	adds	r0, #32
 800740a:	2201      	movs	r2, #1
 800740c:	e7e8      	b.n	80073e0 <__d2b+0x64>
 800740e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007412:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007416:	6038      	str	r0, [r7, #0]
 8007418:	6918      	ldr	r0, [r3, #16]
 800741a:	f7ff fd35 	bl	8006e88 <__hi0bits>
 800741e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007422:	e7e5      	b.n	80073f0 <__d2b+0x74>
 8007424:	08009e1c 	.word	0x08009e1c
 8007428:	08009e2d 	.word	0x08009e2d

0800742c <__sfputc_r>:
 800742c:	6893      	ldr	r3, [r2, #8]
 800742e:	3b01      	subs	r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	b410      	push	{r4}
 8007434:	6093      	str	r3, [r2, #8]
 8007436:	da08      	bge.n	800744a <__sfputc_r+0x1e>
 8007438:	6994      	ldr	r4, [r2, #24]
 800743a:	42a3      	cmp	r3, r4
 800743c:	db01      	blt.n	8007442 <__sfputc_r+0x16>
 800743e:	290a      	cmp	r1, #10
 8007440:	d103      	bne.n	800744a <__sfputc_r+0x1e>
 8007442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007446:	f7fe bc08 	b.w	8005c5a <__swbuf_r>
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	1c58      	adds	r0, r3, #1
 800744e:	6010      	str	r0, [r2, #0]
 8007450:	7019      	strb	r1, [r3, #0]
 8007452:	4608      	mov	r0, r1
 8007454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007458:	4770      	bx	lr

0800745a <__sfputs_r>:
 800745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	4614      	mov	r4, r2
 8007462:	18d5      	adds	r5, r2, r3
 8007464:	42ac      	cmp	r4, r5
 8007466:	d101      	bne.n	800746c <__sfputs_r+0x12>
 8007468:	2000      	movs	r0, #0
 800746a:	e007      	b.n	800747c <__sfputs_r+0x22>
 800746c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007470:	463a      	mov	r2, r7
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ffda 	bl	800742c <__sfputc_r>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d1f3      	bne.n	8007464 <__sfputs_r+0xa>
 800747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007480 <_vfiprintf_r>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	460d      	mov	r5, r1
 8007486:	b09d      	sub	sp, #116	@ 0x74
 8007488:	4614      	mov	r4, r2
 800748a:	4698      	mov	r8, r3
 800748c:	4606      	mov	r6, r0
 800748e:	b118      	cbz	r0, 8007498 <_vfiprintf_r+0x18>
 8007490:	6a03      	ldr	r3, [r0, #32]
 8007492:	b90b      	cbnz	r3, 8007498 <_vfiprintf_r+0x18>
 8007494:	f7fe fa9a 	bl	80059cc <__sinit>
 8007498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800749a:	07d9      	lsls	r1, r3, #31
 800749c:	d405      	bmi.n	80074aa <_vfiprintf_r+0x2a>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	059a      	lsls	r2, r3, #22
 80074a2:	d402      	bmi.n	80074aa <_vfiprintf_r+0x2a>
 80074a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074a6:	f7fe fcea 	bl	8005e7e <__retarget_lock_acquire_recursive>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	071b      	lsls	r3, r3, #28
 80074ae:	d501      	bpl.n	80074b4 <_vfiprintf_r+0x34>
 80074b0:	692b      	ldr	r3, [r5, #16]
 80074b2:	b99b      	cbnz	r3, 80074dc <_vfiprintf_r+0x5c>
 80074b4:	4629      	mov	r1, r5
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7fe fc0e 	bl	8005cd8 <__swsetup_r>
 80074bc:	b170      	cbz	r0, 80074dc <_vfiprintf_r+0x5c>
 80074be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074c0:	07dc      	lsls	r4, r3, #31
 80074c2:	d504      	bpl.n	80074ce <_vfiprintf_r+0x4e>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	b01d      	add	sp, #116	@ 0x74
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	0598      	lsls	r0, r3, #22
 80074d2:	d4f7      	bmi.n	80074c4 <_vfiprintf_r+0x44>
 80074d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d6:	f7fe fcd3 	bl	8005e80 <__retarget_lock_release_recursive>
 80074da:	e7f3      	b.n	80074c4 <_vfiprintf_r+0x44>
 80074dc:	2300      	movs	r3, #0
 80074de:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e0:	2320      	movs	r3, #32
 80074e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ea:	2330      	movs	r3, #48	@ 0x30
 80074ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800769c <_vfiprintf_r+0x21c>
 80074f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074f4:	f04f 0901 	mov.w	r9, #1
 80074f8:	4623      	mov	r3, r4
 80074fa:	469a      	mov	sl, r3
 80074fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007500:	b10a      	cbz	r2, 8007506 <_vfiprintf_r+0x86>
 8007502:	2a25      	cmp	r2, #37	@ 0x25
 8007504:	d1f9      	bne.n	80074fa <_vfiprintf_r+0x7a>
 8007506:	ebba 0b04 	subs.w	fp, sl, r4
 800750a:	d00b      	beq.n	8007524 <_vfiprintf_r+0xa4>
 800750c:	465b      	mov	r3, fp
 800750e:	4622      	mov	r2, r4
 8007510:	4629      	mov	r1, r5
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff ffa1 	bl	800745a <__sfputs_r>
 8007518:	3001      	adds	r0, #1
 800751a:	f000 80a7 	beq.w	800766c <_vfiprintf_r+0x1ec>
 800751e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007520:	445a      	add	r2, fp
 8007522:	9209      	str	r2, [sp, #36]	@ 0x24
 8007524:	f89a 3000 	ldrb.w	r3, [sl]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 809f 	beq.w	800766c <_vfiprintf_r+0x1ec>
 800752e:	2300      	movs	r3, #0
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007538:	f10a 0a01 	add.w	sl, sl, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007544:	931a      	str	r3, [sp, #104]	@ 0x68
 8007546:	4654      	mov	r4, sl
 8007548:	2205      	movs	r2, #5
 800754a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754e:	4853      	ldr	r0, [pc, #332]	@ (800769c <_vfiprintf_r+0x21c>)
 8007550:	f7f8 fe5e 	bl	8000210 <memchr>
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	b9d8      	cbnz	r0, 8007590 <_vfiprintf_r+0x110>
 8007558:	06d1      	lsls	r1, r2, #27
 800755a:	bf44      	itt	mi
 800755c:	2320      	movmi	r3, #32
 800755e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007562:	0713      	lsls	r3, r2, #28
 8007564:	bf44      	itt	mi
 8007566:	232b      	movmi	r3, #43	@ 0x2b
 8007568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b2a      	cmp	r3, #42	@ 0x2a
 8007572:	d015      	beq.n	80075a0 <_vfiprintf_r+0x120>
 8007574:	9a07      	ldr	r2, [sp, #28]
 8007576:	4654      	mov	r4, sl
 8007578:	2000      	movs	r0, #0
 800757a:	f04f 0c0a 	mov.w	ip, #10
 800757e:	4621      	mov	r1, r4
 8007580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007584:	3b30      	subs	r3, #48	@ 0x30
 8007586:	2b09      	cmp	r3, #9
 8007588:	d94b      	bls.n	8007622 <_vfiprintf_r+0x1a2>
 800758a:	b1b0      	cbz	r0, 80075ba <_vfiprintf_r+0x13a>
 800758c:	9207      	str	r2, [sp, #28]
 800758e:	e014      	b.n	80075ba <_vfiprintf_r+0x13a>
 8007590:	eba0 0308 	sub.w	r3, r0, r8
 8007594:	fa09 f303 	lsl.w	r3, r9, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	46a2      	mov	sl, r4
 800759e:	e7d2      	b.n	8007546 <_vfiprintf_r+0xc6>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	1d19      	adds	r1, r3, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfbb      	ittet	lt
 80075ac:	425b      	neglt	r3, r3
 80075ae:	f042 0202 	orrlt.w	r2, r2, #2
 80075b2:	9307      	strge	r3, [sp, #28]
 80075b4:	9307      	strlt	r3, [sp, #28]
 80075b6:	bfb8      	it	lt
 80075b8:	9204      	strlt	r2, [sp, #16]
 80075ba:	7823      	ldrb	r3, [r4, #0]
 80075bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80075be:	d10a      	bne.n	80075d6 <_vfiprintf_r+0x156>
 80075c0:	7863      	ldrb	r3, [r4, #1]
 80075c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80075c4:	d132      	bne.n	800762c <_vfiprintf_r+0x1ac>
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	9203      	str	r2, [sp, #12]
 80075ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075d2:	3402      	adds	r4, #2
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076ac <_vfiprintf_r+0x22c>
 80075da:	7821      	ldrb	r1, [r4, #0]
 80075dc:	2203      	movs	r2, #3
 80075de:	4650      	mov	r0, sl
 80075e0:	f7f8 fe16 	bl	8000210 <memchr>
 80075e4:	b138      	cbz	r0, 80075f6 <_vfiprintf_r+0x176>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	eba0 000a 	sub.w	r0, r0, sl
 80075ec:	2240      	movs	r2, #64	@ 0x40
 80075ee:	4082      	lsls	r2, r0
 80075f0:	4313      	orrs	r3, r2
 80075f2:	3401      	adds	r4, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fa:	4829      	ldr	r0, [pc, #164]	@ (80076a0 <_vfiprintf_r+0x220>)
 80075fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007600:	2206      	movs	r2, #6
 8007602:	f7f8 fe05 	bl	8000210 <memchr>
 8007606:	2800      	cmp	r0, #0
 8007608:	d03f      	beq.n	800768a <_vfiprintf_r+0x20a>
 800760a:	4b26      	ldr	r3, [pc, #152]	@ (80076a4 <_vfiprintf_r+0x224>)
 800760c:	bb1b      	cbnz	r3, 8007656 <_vfiprintf_r+0x1d6>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3307      	adds	r3, #7
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	3308      	adds	r3, #8
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761c:	443b      	add	r3, r7
 800761e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007620:	e76a      	b.n	80074f8 <_vfiprintf_r+0x78>
 8007622:	fb0c 3202 	mla	r2, ip, r2, r3
 8007626:	460c      	mov	r4, r1
 8007628:	2001      	movs	r0, #1
 800762a:	e7a8      	b.n	800757e <_vfiprintf_r+0xfe>
 800762c:	2300      	movs	r3, #0
 800762e:	3401      	adds	r4, #1
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	4619      	mov	r1, r3
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	4620      	mov	r0, r4
 800763a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800763e:	3a30      	subs	r2, #48	@ 0x30
 8007640:	2a09      	cmp	r2, #9
 8007642:	d903      	bls.n	800764c <_vfiprintf_r+0x1cc>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0c6      	beq.n	80075d6 <_vfiprintf_r+0x156>
 8007648:	9105      	str	r1, [sp, #20]
 800764a:	e7c4      	b.n	80075d6 <_vfiprintf_r+0x156>
 800764c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007650:	4604      	mov	r4, r0
 8007652:	2301      	movs	r3, #1
 8007654:	e7f0      	b.n	8007638 <_vfiprintf_r+0x1b8>
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	462a      	mov	r2, r5
 800765c:	4b12      	ldr	r3, [pc, #72]	@ (80076a8 <_vfiprintf_r+0x228>)
 800765e:	a904      	add	r1, sp, #16
 8007660:	4630      	mov	r0, r6
 8007662:	f7fd fd71 	bl	8005148 <_printf_float>
 8007666:	4607      	mov	r7, r0
 8007668:	1c78      	adds	r0, r7, #1
 800766a:	d1d6      	bne.n	800761a <_vfiprintf_r+0x19a>
 800766c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800766e:	07d9      	lsls	r1, r3, #31
 8007670:	d405      	bmi.n	800767e <_vfiprintf_r+0x1fe>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	059a      	lsls	r2, r3, #22
 8007676:	d402      	bmi.n	800767e <_vfiprintf_r+0x1fe>
 8007678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800767a:	f7fe fc01 	bl	8005e80 <__retarget_lock_release_recursive>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	065b      	lsls	r3, r3, #25
 8007682:	f53f af1f 	bmi.w	80074c4 <_vfiprintf_r+0x44>
 8007686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007688:	e71e      	b.n	80074c8 <_vfiprintf_r+0x48>
 800768a:	ab03      	add	r3, sp, #12
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	462a      	mov	r2, r5
 8007690:	4b05      	ldr	r3, [pc, #20]	@ (80076a8 <_vfiprintf_r+0x228>)
 8007692:	a904      	add	r1, sp, #16
 8007694:	4630      	mov	r0, r6
 8007696:	f7fd ffef 	bl	8005678 <_printf_i>
 800769a:	e7e4      	b.n	8007666 <_vfiprintf_r+0x1e6>
 800769c:	08009e86 	.word	0x08009e86
 80076a0:	08009e90 	.word	0x08009e90
 80076a4:	08005149 	.word	0x08005149
 80076a8:	0800745b 	.word	0x0800745b
 80076ac:	08009e8c 	.word	0x08009e8c

080076b0 <__sflush_r>:
 80076b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	0716      	lsls	r6, r2, #28
 80076ba:	4605      	mov	r5, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	d454      	bmi.n	800776a <__sflush_r+0xba>
 80076c0:	684b      	ldr	r3, [r1, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dc02      	bgt.n	80076cc <__sflush_r+0x1c>
 80076c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dd48      	ble.n	800775e <__sflush_r+0xae>
 80076cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d045      	beq.n	800775e <__sflush_r+0xae>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076d8:	682f      	ldr	r7, [r5, #0]
 80076da:	6a21      	ldr	r1, [r4, #32]
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	d030      	beq.n	8007742 <__sflush_r+0x92>
 80076e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	0759      	lsls	r1, r3, #29
 80076e6:	d505      	bpl.n	80076f4 <__sflush_r+0x44>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076ee:	b10b      	cbz	r3, 80076f4 <__sflush_r+0x44>
 80076f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	2300      	movs	r3, #0
 80076f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f8:	6a21      	ldr	r1, [r4, #32]
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b0      	blx	r6
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	d106      	bne.n	8007712 <__sflush_r+0x62>
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	291d      	cmp	r1, #29
 8007708:	d82b      	bhi.n	8007762 <__sflush_r+0xb2>
 800770a:	4a2a      	ldr	r2, [pc, #168]	@ (80077b4 <__sflush_r+0x104>)
 800770c:	40ca      	lsrs	r2, r1
 800770e:	07d6      	lsls	r6, r2, #31
 8007710:	d527      	bpl.n	8007762 <__sflush_r+0xb2>
 8007712:	2200      	movs	r2, #0
 8007714:	6062      	str	r2, [r4, #4]
 8007716:	04d9      	lsls	r1, r3, #19
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	d504      	bpl.n	8007728 <__sflush_r+0x78>
 800771e:	1c42      	adds	r2, r0, #1
 8007720:	d101      	bne.n	8007726 <__sflush_r+0x76>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b903      	cbnz	r3, 8007728 <__sflush_r+0x78>
 8007726:	6560      	str	r0, [r4, #84]	@ 0x54
 8007728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800772a:	602f      	str	r7, [r5, #0]
 800772c:	b1b9      	cbz	r1, 800775e <__sflush_r+0xae>
 800772e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007732:	4299      	cmp	r1, r3
 8007734:	d002      	beq.n	800773c <__sflush_r+0x8c>
 8007736:	4628      	mov	r0, r5
 8007738:	f7ff f9fe 	bl	8006b38 <_free_r>
 800773c:	2300      	movs	r3, #0
 800773e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007740:	e00d      	b.n	800775e <__sflush_r+0xae>
 8007742:	2301      	movs	r3, #1
 8007744:	4628      	mov	r0, r5
 8007746:	47b0      	blx	r6
 8007748:	4602      	mov	r2, r0
 800774a:	1c50      	adds	r0, r2, #1
 800774c:	d1c9      	bne.n	80076e2 <__sflush_r+0x32>
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0c6      	beq.n	80076e2 <__sflush_r+0x32>
 8007754:	2b1d      	cmp	r3, #29
 8007756:	d001      	beq.n	800775c <__sflush_r+0xac>
 8007758:	2b16      	cmp	r3, #22
 800775a:	d11e      	bne.n	800779a <__sflush_r+0xea>
 800775c:	602f      	str	r7, [r5, #0]
 800775e:	2000      	movs	r0, #0
 8007760:	e022      	b.n	80077a8 <__sflush_r+0xf8>
 8007762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007766:	b21b      	sxth	r3, r3
 8007768:	e01b      	b.n	80077a2 <__sflush_r+0xf2>
 800776a:	690f      	ldr	r7, [r1, #16]
 800776c:	2f00      	cmp	r7, #0
 800776e:	d0f6      	beq.n	800775e <__sflush_r+0xae>
 8007770:	0793      	lsls	r3, r2, #30
 8007772:	680e      	ldr	r6, [r1, #0]
 8007774:	bf08      	it	eq
 8007776:	694b      	ldreq	r3, [r1, #20]
 8007778:	600f      	str	r7, [r1, #0]
 800777a:	bf18      	it	ne
 800777c:	2300      	movne	r3, #0
 800777e:	eba6 0807 	sub.w	r8, r6, r7
 8007782:	608b      	str	r3, [r1, #8]
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	dde9      	ble.n	800775e <__sflush_r+0xae>
 800778a:	6a21      	ldr	r1, [r4, #32]
 800778c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800778e:	4643      	mov	r3, r8
 8007790:	463a      	mov	r2, r7
 8007792:	4628      	mov	r0, r5
 8007794:	47b0      	blx	r6
 8007796:	2800      	cmp	r0, #0
 8007798:	dc08      	bgt.n	80077ac <__sflush_r+0xfc>
 800779a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ac:	4407      	add	r7, r0
 80077ae:	eba8 0800 	sub.w	r8, r8, r0
 80077b2:	e7e7      	b.n	8007784 <__sflush_r+0xd4>
 80077b4:	20400001 	.word	0x20400001

080077b8 <_fflush_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b913      	cbnz	r3, 80077c8 <_fflush_r+0x10>
 80077c2:	2500      	movs	r5, #0
 80077c4:	4628      	mov	r0, r5
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	b118      	cbz	r0, 80077d2 <_fflush_r+0x1a>
 80077ca:	6a03      	ldr	r3, [r0, #32]
 80077cc:	b90b      	cbnz	r3, 80077d2 <_fflush_r+0x1a>
 80077ce:	f7fe f8fd 	bl	80059cc <__sinit>
 80077d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f3      	beq.n	80077c2 <_fflush_r+0xa>
 80077da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077dc:	07d0      	lsls	r0, r2, #31
 80077de:	d404      	bmi.n	80077ea <_fflush_r+0x32>
 80077e0:	0599      	lsls	r1, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_fflush_r+0x32>
 80077e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077e6:	f7fe fb4a 	bl	8005e7e <__retarget_lock_acquire_recursive>
 80077ea:	4628      	mov	r0, r5
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7ff ff5f 	bl	80076b0 <__sflush_r>
 80077f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f4:	07da      	lsls	r2, r3, #31
 80077f6:	4605      	mov	r5, r0
 80077f8:	d4e4      	bmi.n	80077c4 <_fflush_r+0xc>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	d4e1      	bmi.n	80077c4 <_fflush_r+0xc>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f7fe fb3d 	bl	8005e80 <__retarget_lock_release_recursive>
 8007806:	e7dd      	b.n	80077c4 <_fflush_r+0xc>

08007808 <__swhatbuf_r>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	460c      	mov	r4, r1
 800780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007810:	2900      	cmp	r1, #0
 8007812:	b096      	sub	sp, #88	@ 0x58
 8007814:	4615      	mov	r5, r2
 8007816:	461e      	mov	r6, r3
 8007818:	da0d      	bge.n	8007836 <__swhatbuf_r+0x2e>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007820:	f04f 0100 	mov.w	r1, #0
 8007824:	bf14      	ite	ne
 8007826:	2340      	movne	r3, #64	@ 0x40
 8007828:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800782c:	2000      	movs	r0, #0
 800782e:	6031      	str	r1, [r6, #0]
 8007830:	602b      	str	r3, [r5, #0]
 8007832:	b016      	add	sp, #88	@ 0x58
 8007834:	bd70      	pop	{r4, r5, r6, pc}
 8007836:	466a      	mov	r2, sp
 8007838:	f000 f848 	bl	80078cc <_fstat_r>
 800783c:	2800      	cmp	r0, #0
 800783e:	dbec      	blt.n	800781a <__swhatbuf_r+0x12>
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007846:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800784a:	4259      	negs	r1, r3
 800784c:	4159      	adcs	r1, r3
 800784e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007852:	e7eb      	b.n	800782c <__swhatbuf_r+0x24>

08007854 <__smakebuf_r>:
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007858:	079d      	lsls	r5, r3, #30
 800785a:	4606      	mov	r6, r0
 800785c:	460c      	mov	r4, r1
 800785e:	d507      	bpl.n	8007870 <__smakebuf_r+0x1c>
 8007860:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	2301      	movs	r3, #1
 800786a:	6163      	str	r3, [r4, #20]
 800786c:	b003      	add	sp, #12
 800786e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007870:	ab01      	add	r3, sp, #4
 8007872:	466a      	mov	r2, sp
 8007874:	f7ff ffc8 	bl	8007808 <__swhatbuf_r>
 8007878:	9f00      	ldr	r7, [sp, #0]
 800787a:	4605      	mov	r5, r0
 800787c:	4639      	mov	r1, r7
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff f9ce 	bl	8006c20 <_malloc_r>
 8007884:	b948      	cbnz	r0, 800789a <__smakebuf_r+0x46>
 8007886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788a:	059a      	lsls	r2, r3, #22
 800788c:	d4ee      	bmi.n	800786c <__smakebuf_r+0x18>
 800788e:	f023 0303 	bic.w	r3, r3, #3
 8007892:	f043 0302 	orr.w	r3, r3, #2
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	e7e2      	b.n	8007860 <__smakebuf_r+0xc>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	6020      	str	r0, [r4, #0]
 800789e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078aa:	b15b      	cbz	r3, 80078c4 <__smakebuf_r+0x70>
 80078ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 f81d 	bl	80078f0 <_isatty_r>
 80078b6:	b128      	cbz	r0, 80078c4 <__smakebuf_r+0x70>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	431d      	orrs	r5, r3
 80078c8:	81a5      	strh	r5, [r4, #12]
 80078ca:	e7cf      	b.n	800786c <__smakebuf_r+0x18>

080078cc <_fstat_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	@ (80078ec <_fstat_r+0x20>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f7fa fc55 	bl	8002188 <_fstat>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_fstat_r+0x1c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_fstat_r+0x1c>
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	20000488 	.word	0x20000488

080078f0 <_isatty_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	@ (800790c <_isatty_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa fc54 	bl	80021a8 <_isatty>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_isatty_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_isatty_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20000488 	.word	0x20000488

08007910 <_sbrk_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d06      	ldr	r5, [pc, #24]	@ (800792c <_sbrk_r+0x1c>)
 8007914:	2300      	movs	r3, #0
 8007916:	4604      	mov	r4, r0
 8007918:	4608      	mov	r0, r1
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	f7fa fc5c 	bl	80021d8 <_sbrk>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_sbrk_r+0x1a>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_sbrk_r+0x1a>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20000488 	.word	0x20000488

08007930 <memcpy>:
 8007930:	440a      	add	r2, r1
 8007932:	4291      	cmp	r1, r2
 8007934:	f100 33ff 	add.w	r3, r0, #4294967295
 8007938:	d100      	bne.n	800793c <memcpy+0xc>
 800793a:	4770      	bx	lr
 800793c:	b510      	push	{r4, lr}
 800793e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007946:	4291      	cmp	r1, r2
 8007948:	d1f9      	bne.n	800793e <memcpy+0xe>
 800794a:	bd10      	pop	{r4, pc}

0800794c <__assert_func>:
 800794c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800794e:	4614      	mov	r4, r2
 8007950:	461a      	mov	r2, r3
 8007952:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <__assert_func+0x2c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4605      	mov	r5, r0
 8007958:	68d8      	ldr	r0, [r3, #12]
 800795a:	b14c      	cbz	r4, 8007970 <__assert_func+0x24>
 800795c:	4b07      	ldr	r3, [pc, #28]	@ (800797c <__assert_func+0x30>)
 800795e:	9100      	str	r1, [sp, #0]
 8007960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007964:	4906      	ldr	r1, [pc, #24]	@ (8007980 <__assert_func+0x34>)
 8007966:	462b      	mov	r3, r5
 8007968:	f000 f842 	bl	80079f0 <fiprintf>
 800796c:	f000 f852 	bl	8007a14 <abort>
 8007970:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <__assert_func+0x38>)
 8007972:	461c      	mov	r4, r3
 8007974:	e7f3      	b.n	800795e <__assert_func+0x12>
 8007976:	bf00      	nop
 8007978:	20000018 	.word	0x20000018
 800797c:	08009ea1 	.word	0x08009ea1
 8007980:	08009eae 	.word	0x08009eae
 8007984:	08009edc 	.word	0x08009edc

08007988 <_calloc_r>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	fba1 5402 	umull	r5, r4, r1, r2
 800798e:	b934      	cbnz	r4, 800799e <_calloc_r+0x16>
 8007990:	4629      	mov	r1, r5
 8007992:	f7ff f945 	bl	8006c20 <_malloc_r>
 8007996:	4606      	mov	r6, r0
 8007998:	b928      	cbnz	r0, 80079a6 <_calloc_r+0x1e>
 800799a:	4630      	mov	r0, r6
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	220c      	movs	r2, #12
 80079a0:	6002      	str	r2, [r0, #0]
 80079a2:	2600      	movs	r6, #0
 80079a4:	e7f9      	b.n	800799a <_calloc_r+0x12>
 80079a6:	462a      	mov	r2, r5
 80079a8:	4621      	mov	r1, r4
 80079aa:	f7fe f9eb 	bl	8005d84 <memset>
 80079ae:	e7f4      	b.n	800799a <_calloc_r+0x12>

080079b0 <__ascii_mbtowc>:
 80079b0:	b082      	sub	sp, #8
 80079b2:	b901      	cbnz	r1, 80079b6 <__ascii_mbtowc+0x6>
 80079b4:	a901      	add	r1, sp, #4
 80079b6:	b142      	cbz	r2, 80079ca <__ascii_mbtowc+0x1a>
 80079b8:	b14b      	cbz	r3, 80079ce <__ascii_mbtowc+0x1e>
 80079ba:	7813      	ldrb	r3, [r2, #0]
 80079bc:	600b      	str	r3, [r1, #0]
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	1e10      	subs	r0, r2, #0
 80079c2:	bf18      	it	ne
 80079c4:	2001      	movne	r0, #1
 80079c6:	b002      	add	sp, #8
 80079c8:	4770      	bx	lr
 80079ca:	4610      	mov	r0, r2
 80079cc:	e7fb      	b.n	80079c6 <__ascii_mbtowc+0x16>
 80079ce:	f06f 0001 	mvn.w	r0, #1
 80079d2:	e7f8      	b.n	80079c6 <__ascii_mbtowc+0x16>

080079d4 <__ascii_wctomb>:
 80079d4:	4603      	mov	r3, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	b141      	cbz	r1, 80079ec <__ascii_wctomb+0x18>
 80079da:	2aff      	cmp	r2, #255	@ 0xff
 80079dc:	d904      	bls.n	80079e8 <__ascii_wctomb+0x14>
 80079de:	228a      	movs	r2, #138	@ 0x8a
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	4770      	bx	lr
 80079e8:	700a      	strb	r2, [r1, #0]
 80079ea:	2001      	movs	r0, #1
 80079ec:	4770      	bx	lr
	...

080079f0 <fiprintf>:
 80079f0:	b40e      	push	{r1, r2, r3}
 80079f2:	b503      	push	{r0, r1, lr}
 80079f4:	4601      	mov	r1, r0
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	4805      	ldr	r0, [pc, #20]	@ (8007a10 <fiprintf+0x20>)
 80079fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	f7ff fd3d 	bl	8007480 <_vfiprintf_r>
 8007a06:	b002      	add	sp, #8
 8007a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	4770      	bx	lr
 8007a10:	20000018 	.word	0x20000018

08007a14 <abort>:
 8007a14:	b508      	push	{r3, lr}
 8007a16:	2006      	movs	r0, #6
 8007a18:	f000 f82c 	bl	8007a74 <raise>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	f7fa fb7f 	bl	8002120 <_exit>

08007a22 <_raise_r>:
 8007a22:	291f      	cmp	r1, #31
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4605      	mov	r5, r0
 8007a28:	460c      	mov	r4, r1
 8007a2a:	d904      	bls.n	8007a36 <_raise_r+0x14>
 8007a2c:	2316      	movs	r3, #22
 8007a2e:	6003      	str	r3, [r0, #0]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a38:	b112      	cbz	r2, 8007a40 <_raise_r+0x1e>
 8007a3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a3e:	b94b      	cbnz	r3, 8007a54 <_raise_r+0x32>
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 f831 	bl	8007aa8 <_getpid_r>
 8007a46:	4622      	mov	r2, r4
 8007a48:	4601      	mov	r1, r0
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a50:	f000 b818 	b.w	8007a84 <_kill_r>
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d00a      	beq.n	8007a6e <_raise_r+0x4c>
 8007a58:	1c59      	adds	r1, r3, #1
 8007a5a:	d103      	bne.n	8007a64 <_raise_r+0x42>
 8007a5c:	2316      	movs	r3, #22
 8007a5e:	6003      	str	r3, [r0, #0]
 8007a60:	2001      	movs	r0, #1
 8007a62:	e7e7      	b.n	8007a34 <_raise_r+0x12>
 8007a64:	2100      	movs	r1, #0
 8007a66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4798      	blx	r3
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e7e0      	b.n	8007a34 <_raise_r+0x12>
	...

08007a74 <raise>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	@ (8007a80 <raise+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f7ff bfd2 	b.w	8007a22 <_raise_r>
 8007a7e:	bf00      	nop
 8007a80:	20000018 	.word	0x20000018

08007a84 <_kill_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	@ (8007aa4 <_kill_r+0x20>)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	f7fa fb35 	bl	8002100 <_kill>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d102      	bne.n	8007aa0 <_kill_r+0x1c>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b103      	cbz	r3, 8007aa0 <_kill_r+0x1c>
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000488 	.word	0x20000488

08007aa8 <_getpid_r>:
 8007aa8:	f7fa bb22 	b.w	80020f0 <_getpid>

08007aac <pow>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	ed2d 8b02 	vpush	{d8}
 8007ab2:	eeb0 8a40 	vmov.f32	s16, s0
 8007ab6:	eef0 8a60 	vmov.f32	s17, s1
 8007aba:	ec55 4b11 	vmov	r4, r5, d1
 8007abe:	f000 fd43 	bl	8008548 <__ieee754_pow>
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	ec57 6b10 	vmov	r6, r7, d0
 8007ace:	f7f9 f84d 	bl	8000b6c <__aeabi_dcmpun>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d13b      	bne.n	8007b4e <pow+0xa2>
 8007ad6:	ec51 0b18 	vmov	r0, r1, d8
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	f7f9 f813 	bl	8000b08 <__aeabi_dcmpeq>
 8007ae2:	b1b8      	cbz	r0, 8007b14 <pow+0x68>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f9 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d146      	bne.n	8007b82 <pow+0xd6>
 8007af4:	ec45 4b10 	vmov	d0, r4, r5
 8007af8:	f000 fabe 	bl	8008078 <finite>
 8007afc:	b338      	cbz	r0, 8007b4e <pow+0xa2>
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f9 f809 	bl	8000b1c <__aeabi_dcmplt>
 8007b0a:	b300      	cbz	r0, 8007b4e <pow+0xa2>
 8007b0c:	f7fe f98c 	bl	8005e28 <__errno>
 8007b10:	2322      	movs	r3, #34	@ 0x22
 8007b12:	e01b      	b.n	8007b4c <pow+0xa0>
 8007b14:	ec47 6b10 	vmov	d0, r6, r7
 8007b18:	f000 faae 	bl	8008078 <finite>
 8007b1c:	b9e0      	cbnz	r0, 8007b58 <pow+0xac>
 8007b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8007b22:	eef0 0a68 	vmov.f32	s1, s17
 8007b26:	f000 faa7 	bl	8008078 <finite>
 8007b2a:	b1a8      	cbz	r0, 8007b58 <pow+0xac>
 8007b2c:	ec45 4b10 	vmov	d0, r4, r5
 8007b30:	f000 faa2 	bl	8008078 <finite>
 8007b34:	b180      	cbz	r0, 8007b58 <pow+0xac>
 8007b36:	4632      	mov	r2, r6
 8007b38:	463b      	mov	r3, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f9 f815 	bl	8000b6c <__aeabi_dcmpun>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0e2      	beq.n	8007b0c <pow+0x60>
 8007b46:	f7fe f96f 	bl	8005e28 <__errno>
 8007b4a:	2321      	movs	r3, #33	@ 0x21
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	ecbd 8b02 	vpop	{d8}
 8007b52:	ec47 6b10 	vmov	d0, r6, r7
 8007b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 ffd2 	bl	8000b08 <__aeabi_dcmpeq>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d0f2      	beq.n	8007b4e <pow+0xa2>
 8007b68:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6c:	eef0 0a68 	vmov.f32	s1, s17
 8007b70:	f000 fa82 	bl	8008078 <finite>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d0ea      	beq.n	8007b4e <pow+0xa2>
 8007b78:	ec45 4b10 	vmov	d0, r4, r5
 8007b7c:	f000 fa7c 	bl	8008078 <finite>
 8007b80:	e7c3      	b.n	8007b0a <pow+0x5e>
 8007b82:	4f01      	ldr	r7, [pc, #4]	@ (8007b88 <pow+0xdc>)
 8007b84:	2600      	movs	r6, #0
 8007b86:	e7e2      	b.n	8007b4e <pow+0xa2>
 8007b88:	3ff00000 	.word	0x3ff00000

08007b8c <sqrt>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	ed2d 8b02 	vpush	{d8}
 8007b92:	ec55 4b10 	vmov	r4, r5, d0
 8007b96:	f000 fa7b 	bl	8008090 <__ieee754_sqrt>
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	eeb0 8a40 	vmov.f32	s16, s0
 8007ba6:	eef0 8a60 	vmov.f32	s17, s1
 8007baa:	f7f8 ffdf 	bl	8000b6c <__aeabi_dcmpun>
 8007bae:	b990      	cbnz	r0, 8007bd6 <sqrt+0x4a>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 ffb0 	bl	8000b1c <__aeabi_dcmplt>
 8007bbc:	b158      	cbz	r0, 8007bd6 <sqrt+0x4a>
 8007bbe:	f7fe f933 	bl	8005e28 <__errno>
 8007bc2:	2321      	movs	r3, #33	@ 0x21
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7f8 fe5d 	bl	800088c <__aeabi_ddiv>
 8007bd2:	ec41 0b18 	vmov	d8, r0, r1
 8007bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8007bda:	eef0 0a68 	vmov.f32	s1, s17
 8007bde:	ecbd 8b02 	vpop	{d8}
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <atan>:
 8007be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	ec55 4b10 	vmov	r4, r5, d0
 8007bf0:	4bbf      	ldr	r3, [pc, #764]	@ (8007ef0 <atan+0x308>)
 8007bf2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007bf6:	429e      	cmp	r6, r3
 8007bf8:	46ab      	mov	fp, r5
 8007bfa:	d918      	bls.n	8007c2e <atan+0x46>
 8007bfc:	4bbd      	ldr	r3, [pc, #756]	@ (8007ef4 <atan+0x30c>)
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	d801      	bhi.n	8007c06 <atan+0x1e>
 8007c02:	d109      	bne.n	8007c18 <atan+0x30>
 8007c04:	b144      	cbz	r4, 8007c18 <atan+0x30>
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 fb5d 	bl	80002cc <__adddf3>
 8007c12:	4604      	mov	r4, r0
 8007c14:	460d      	mov	r5, r1
 8007c16:	e006      	b.n	8007c26 <atan+0x3e>
 8007c18:	f1bb 0f00 	cmp.w	fp, #0
 8007c1c:	f340 812b 	ble.w	8007e76 <atan+0x28e>
 8007c20:	a597      	add	r5, pc, #604	@ (adr r5, 8007e80 <atan+0x298>)
 8007c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c26:	ec45 4b10 	vmov	d0, r4, r5
 8007c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	4bb2      	ldr	r3, [pc, #712]	@ (8007ef8 <atan+0x310>)
 8007c30:	429e      	cmp	r6, r3
 8007c32:	d813      	bhi.n	8007c5c <atan+0x74>
 8007c34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	d80c      	bhi.n	8007c56 <atan+0x6e>
 8007c3c:	a392      	add	r3, pc, #584	@ (adr r3, 8007e88 <atan+0x2a0>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	4620      	mov	r0, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7f8 fb41 	bl	80002cc <__adddf3>
 8007c4a:	4bac      	ldr	r3, [pc, #688]	@ (8007efc <atan+0x314>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f7f8 ff83 	bl	8000b58 <__aeabi_dcmpgt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d1e7      	bne.n	8007c26 <atan+0x3e>
 8007c56:	f04f 3aff 	mov.w	sl, #4294967295
 8007c5a:	e029      	b.n	8007cb0 <atan+0xc8>
 8007c5c:	f000 f9b0 	bl	8007fc0 <fabs>
 8007c60:	4ba7      	ldr	r3, [pc, #668]	@ (8007f00 <atan+0x318>)
 8007c62:	429e      	cmp	r6, r3
 8007c64:	ec55 4b10 	vmov	r4, r5, d0
 8007c68:	f200 80bc 	bhi.w	8007de4 <atan+0x1fc>
 8007c6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007c70:	429e      	cmp	r6, r3
 8007c72:	f200 809e 	bhi.w	8007db2 <atan+0x1ca>
 8007c76:	4622      	mov	r2, r4
 8007c78:	462b      	mov	r3, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 fb25 	bl	80002cc <__adddf3>
 8007c82:	4b9e      	ldr	r3, [pc, #632]	@ (8007efc <atan+0x314>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7f8 fb1f 	bl	80002c8 <__aeabi_dsub>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c94:	4620      	mov	r0, r4
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7f8 fb18 	bl	80002cc <__adddf3>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fdf2 	bl	800088c <__aeabi_ddiv>
 8007ca8:	f04f 0a00 	mov.w	sl, #0
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7f8 fcbe 	bl	8000638 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	f7f8 fcb8 	bl	8000638 <__aeabi_dmul>
 8007cc8:	a371      	add	r3, pc, #452	@ (adr r3, 8007e90 <atan+0x2a8>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	f7f8 fcb1 	bl	8000638 <__aeabi_dmul>
 8007cd6:	a370      	add	r3, pc, #448	@ (adr r3, 8007e98 <atan+0x2b0>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 faf6 	bl	80002cc <__adddf3>
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	f7f8 fca8 	bl	8000638 <__aeabi_dmul>
 8007ce8:	a36d      	add	r3, pc, #436	@ (adr r3, 8007ea0 <atan+0x2b8>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 faed 	bl	80002cc <__adddf3>
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	f7f8 fc9f 	bl	8000638 <__aeabi_dmul>
 8007cfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ea8 <atan+0x2c0>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fae4 	bl	80002cc <__adddf3>
 8007d04:	4632      	mov	r2, r6
 8007d06:	463b      	mov	r3, r7
 8007d08:	f7f8 fc96 	bl	8000638 <__aeabi_dmul>
 8007d0c:	a368      	add	r3, pc, #416	@ (adr r3, 8007eb0 <atan+0x2c8>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fadb 	bl	80002cc <__adddf3>
 8007d16:	4632      	mov	r2, r6
 8007d18:	463b      	mov	r3, r7
 8007d1a:	f7f8 fc8d 	bl	8000638 <__aeabi_dmul>
 8007d1e:	a366      	add	r3, pc, #408	@ (adr r3, 8007eb8 <atan+0x2d0>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 fad2 	bl	80002cc <__adddf3>
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	f7f8 fc84 	bl	8000638 <__aeabi_dmul>
 8007d30:	a363      	add	r3, pc, #396	@ (adr r3, 8007ec0 <atan+0x2d8>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fc7b 	bl	8000638 <__aeabi_dmul>
 8007d42:	a361      	add	r3, pc, #388	@ (adr r3, 8007ec8 <atan+0x2e0>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 fabe 	bl	80002c8 <__aeabi_dsub>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	f7f8 fc72 	bl	8000638 <__aeabi_dmul>
 8007d54:	a35e      	add	r3, pc, #376	@ (adr r3, 8007ed0 <atan+0x2e8>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fab5 	bl	80002c8 <__aeabi_dsub>
 8007d5e:	4632      	mov	r2, r6
 8007d60:	463b      	mov	r3, r7
 8007d62:	f7f8 fc69 	bl	8000638 <__aeabi_dmul>
 8007d66:	a35c      	add	r3, pc, #368	@ (adr r3, 8007ed8 <atan+0x2f0>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 faac 	bl	80002c8 <__aeabi_dsub>
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	f7f8 fc60 	bl	8000638 <__aeabi_dmul>
 8007d78:	a359      	add	r3, pc, #356	@ (adr r3, 8007ee0 <atan+0x2f8>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 faa3 	bl	80002c8 <__aeabi_dsub>
 8007d82:	4632      	mov	r2, r6
 8007d84:	463b      	mov	r3, r7
 8007d86:	f7f8 fc57 	bl	8000638 <__aeabi_dmul>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fa9b 	bl	80002cc <__adddf3>
 8007d96:	4622      	mov	r2, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	f7f8 fc4d 	bl	8000638 <__aeabi_dmul>
 8007d9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	d148      	bne.n	8007e3a <atan+0x252>
 8007da8:	4620      	mov	r0, r4
 8007daa:	4629      	mov	r1, r5
 8007dac:	f7f8 fa8c 	bl	80002c8 <__aeabi_dsub>
 8007db0:	e72f      	b.n	8007c12 <atan+0x2a>
 8007db2:	4b52      	ldr	r3, [pc, #328]	@ (8007efc <atan+0x314>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fa85 	bl	80002c8 <__aeabi_dsub>
 8007dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8007efc <atan+0x314>)
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	460f      	mov	r7, r1
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa7f 	bl	80002cc <__adddf3>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fd59 	bl	800088c <__aeabi_ddiv>
 8007dda:	f04f 0a01 	mov.w	sl, #1
 8007dde:	4604      	mov	r4, r0
 8007de0:	460d      	mov	r5, r1
 8007de2:	e765      	b.n	8007cb0 <atan+0xc8>
 8007de4:	4b47      	ldr	r3, [pc, #284]	@ (8007f04 <atan+0x31c>)
 8007de6:	429e      	cmp	r6, r3
 8007de8:	d21c      	bcs.n	8007e24 <atan+0x23c>
 8007dea:	4b47      	ldr	r3, [pc, #284]	@ (8007f08 <atan+0x320>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fa69 	bl	80002c8 <__aeabi_dsub>
 8007df6:	4b44      	ldr	r3, [pc, #272]	@ (8007f08 <atan+0x320>)
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fc19 	bl	8000638 <__aeabi_dmul>
 8007e06:	4b3d      	ldr	r3, [pc, #244]	@ (8007efc <atan+0x314>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f7f8 fa5f 	bl	80002cc <__adddf3>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 fd39 	bl	800088c <__aeabi_ddiv>
 8007e1a:	f04f 0a02 	mov.w	sl, #2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	e745      	b.n	8007cb0 <atan+0xc8>
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	4938      	ldr	r1, [pc, #224]	@ (8007f0c <atan+0x324>)
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7f8 fd2e 	bl	800088c <__aeabi_ddiv>
 8007e30:	f04f 0a03 	mov.w	sl, #3
 8007e34:	4604      	mov	r4, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	e73a      	b.n	8007cb0 <atan+0xc8>
 8007e3a:	4b35      	ldr	r3, [pc, #212]	@ (8007f10 <atan+0x328>)
 8007e3c:	4e35      	ldr	r6, [pc, #212]	@ (8007f14 <atan+0x32c>)
 8007e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fa3f 	bl	80002c8 <__aeabi_dsub>
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	f7f8 fa3b 	bl	80002c8 <__aeabi_dsub>
 8007e52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e5e:	f7f8 fa33 	bl	80002c8 <__aeabi_dsub>
 8007e62:	f1bb 0f00 	cmp.w	fp, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f6bf aedc 	bge.w	8007c26 <atan+0x3e>
 8007e6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e72:	461d      	mov	r5, r3
 8007e74:	e6d7      	b.n	8007c26 <atan+0x3e>
 8007e76:	a51c      	add	r5, pc, #112	@ (adr r5, 8007ee8 <atan+0x300>)
 8007e78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e7c:	e6d3      	b.n	8007c26 <atan+0x3e>
 8007e7e:	bf00      	nop
 8007e80:	54442d18 	.word	0x54442d18
 8007e84:	3ff921fb 	.word	0x3ff921fb
 8007e88:	8800759c 	.word	0x8800759c
 8007e8c:	7e37e43c 	.word	0x7e37e43c
 8007e90:	e322da11 	.word	0xe322da11
 8007e94:	3f90ad3a 	.word	0x3f90ad3a
 8007e98:	24760deb 	.word	0x24760deb
 8007e9c:	3fa97b4b 	.word	0x3fa97b4b
 8007ea0:	a0d03d51 	.word	0xa0d03d51
 8007ea4:	3fb10d66 	.word	0x3fb10d66
 8007ea8:	c54c206e 	.word	0xc54c206e
 8007eac:	3fb745cd 	.word	0x3fb745cd
 8007eb0:	920083ff 	.word	0x920083ff
 8007eb4:	3fc24924 	.word	0x3fc24924
 8007eb8:	5555550d 	.word	0x5555550d
 8007ebc:	3fd55555 	.word	0x3fd55555
 8007ec0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ec4:	bfa2b444 	.word	0xbfa2b444
 8007ec8:	52defd9a 	.word	0x52defd9a
 8007ecc:	3fadde2d 	.word	0x3fadde2d
 8007ed0:	af749a6d 	.word	0xaf749a6d
 8007ed4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ed8:	fe231671 	.word	0xfe231671
 8007edc:	3fbc71c6 	.word	0x3fbc71c6
 8007ee0:	9998ebc4 	.word	0x9998ebc4
 8007ee4:	3fc99999 	.word	0x3fc99999
 8007ee8:	54442d18 	.word	0x54442d18
 8007eec:	bff921fb 	.word	0xbff921fb
 8007ef0:	440fffff 	.word	0x440fffff
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	3fdbffff 	.word	0x3fdbffff
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	3ff2ffff 	.word	0x3ff2ffff
 8007f04:	40038000 	.word	0x40038000
 8007f08:	3ff80000 	.word	0x3ff80000
 8007f0c:	bff00000 	.word	0xbff00000
 8007f10:	0800a0e8 	.word	0x0800a0e8
 8007f14:	0800a108 	.word	0x0800a108

08007f18 <cos>:
 8007f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f1a:	ec53 2b10 	vmov	r2, r3, d0
 8007f1e:	4826      	ldr	r0, [pc, #152]	@ (8007fb8 <cos+0xa0>)
 8007f20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f24:	4281      	cmp	r1, r0
 8007f26:	d806      	bhi.n	8007f36 <cos+0x1e>
 8007f28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007fb0 <cos+0x98>
 8007f2c:	b005      	add	sp, #20
 8007f2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f32:	f000 b985 	b.w	8008240 <__kernel_cos>
 8007f36:	4821      	ldr	r0, [pc, #132]	@ (8007fbc <cos+0xa4>)
 8007f38:	4281      	cmp	r1, r0
 8007f3a:	d908      	bls.n	8007f4e <cos+0x36>
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	f7f8 f9c2 	bl	80002c8 <__aeabi_dsub>
 8007f44:	ec41 0b10 	vmov	d0, r0, r1
 8007f48:	b005      	add	sp, #20
 8007f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f4e:	4668      	mov	r0, sp
 8007f50:	f001 f846 	bl	8008fe0 <__ieee754_rem_pio2>
 8007f54:	f000 0003 	and.w	r0, r0, #3
 8007f58:	2801      	cmp	r0, #1
 8007f5a:	d00b      	beq.n	8007f74 <cos+0x5c>
 8007f5c:	2802      	cmp	r0, #2
 8007f5e:	d015      	beq.n	8007f8c <cos+0x74>
 8007f60:	b9d8      	cbnz	r0, 8007f9a <cos+0x82>
 8007f62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f66:	ed9d 0b00 	vldr	d0, [sp]
 8007f6a:	f000 f969 	bl	8008240 <__kernel_cos>
 8007f6e:	ec51 0b10 	vmov	r0, r1, d0
 8007f72:	e7e7      	b.n	8007f44 <cos+0x2c>
 8007f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f78:	ed9d 0b00 	vldr	d0, [sp]
 8007f7c:	f000 fa28 	bl	80083d0 <__kernel_sin>
 8007f80:	ec53 2b10 	vmov	r2, r3, d0
 8007f84:	4610      	mov	r0, r2
 8007f86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007f8a:	e7db      	b.n	8007f44 <cos+0x2c>
 8007f8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f90:	ed9d 0b00 	vldr	d0, [sp]
 8007f94:	f000 f954 	bl	8008240 <__kernel_cos>
 8007f98:	e7f2      	b.n	8007f80 <cos+0x68>
 8007f9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f9e:	ed9d 0b00 	vldr	d0, [sp]
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f000 fa14 	bl	80083d0 <__kernel_sin>
 8007fa8:	e7e1      	b.n	8007f6e <cos+0x56>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
	...
 8007fb8:	3fe921fb 	.word	0x3fe921fb
 8007fbc:	7fefffff 	.word	0x7fefffff

08007fc0 <fabs>:
 8007fc0:	ec51 0b10 	vmov	r0, r1, d0
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007fca:	ec43 2b10 	vmov	d0, r2, r3
 8007fce:	4770      	bx	lr

08007fd0 <sin>:
 8007fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fd2:	ec53 2b10 	vmov	r2, r3, d0
 8007fd6:	4826      	ldr	r0, [pc, #152]	@ (8008070 <sin+0xa0>)
 8007fd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fdc:	4281      	cmp	r1, r0
 8007fde:	d807      	bhi.n	8007ff0 <sin+0x20>
 8007fe0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008068 <sin+0x98>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	b005      	add	sp, #20
 8007fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fec:	f000 b9f0 	b.w	80083d0 <__kernel_sin>
 8007ff0:	4820      	ldr	r0, [pc, #128]	@ (8008074 <sin+0xa4>)
 8007ff2:	4281      	cmp	r1, r0
 8007ff4:	d908      	bls.n	8008008 <sin+0x38>
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7f8 f965 	bl	80002c8 <__aeabi_dsub>
 8007ffe:	ec41 0b10 	vmov	d0, r0, r1
 8008002:	b005      	add	sp, #20
 8008004:	f85d fb04 	ldr.w	pc, [sp], #4
 8008008:	4668      	mov	r0, sp
 800800a:	f000 ffe9 	bl	8008fe0 <__ieee754_rem_pio2>
 800800e:	f000 0003 	and.w	r0, r0, #3
 8008012:	2801      	cmp	r0, #1
 8008014:	d00c      	beq.n	8008030 <sin+0x60>
 8008016:	2802      	cmp	r0, #2
 8008018:	d011      	beq.n	800803e <sin+0x6e>
 800801a:	b9e8      	cbnz	r0, 8008058 <sin+0x88>
 800801c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008020:	ed9d 0b00 	vldr	d0, [sp]
 8008024:	2001      	movs	r0, #1
 8008026:	f000 f9d3 	bl	80083d0 <__kernel_sin>
 800802a:	ec51 0b10 	vmov	r0, r1, d0
 800802e:	e7e6      	b.n	8007ffe <sin+0x2e>
 8008030:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008034:	ed9d 0b00 	vldr	d0, [sp]
 8008038:	f000 f902 	bl	8008240 <__kernel_cos>
 800803c:	e7f5      	b.n	800802a <sin+0x5a>
 800803e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008042:	ed9d 0b00 	vldr	d0, [sp]
 8008046:	2001      	movs	r0, #1
 8008048:	f000 f9c2 	bl	80083d0 <__kernel_sin>
 800804c:	ec53 2b10 	vmov	r2, r3, d0
 8008050:	4610      	mov	r0, r2
 8008052:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008056:	e7d2      	b.n	8007ffe <sin+0x2e>
 8008058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800805c:	ed9d 0b00 	vldr	d0, [sp]
 8008060:	f000 f8ee 	bl	8008240 <__kernel_cos>
 8008064:	e7f2      	b.n	800804c <sin+0x7c>
 8008066:	bf00      	nop
	...
 8008070:	3fe921fb 	.word	0x3fe921fb
 8008074:	7fefffff 	.word	0x7fefffff

08008078 <finite>:
 8008078:	b082      	sub	sp, #8
 800807a:	ed8d 0b00 	vstr	d0, [sp]
 800807e:	9801      	ldr	r0, [sp, #4]
 8008080:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008084:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008088:	0fc0      	lsrs	r0, r0, #31
 800808a:	b002      	add	sp, #8
 800808c:	4770      	bx	lr
	...

08008090 <__ieee754_sqrt>:
 8008090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4a66      	ldr	r2, [pc, #408]	@ (8008230 <__ieee754_sqrt+0x1a0>)
 8008096:	ec55 4b10 	vmov	r4, r5, d0
 800809a:	43aa      	bics	r2, r5
 800809c:	462b      	mov	r3, r5
 800809e:	4621      	mov	r1, r4
 80080a0:	d110      	bne.n	80080c4 <__ieee754_sqrt+0x34>
 80080a2:	4622      	mov	r2, r4
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 fac6 	bl	8000638 <__aeabi_dmul>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4620      	mov	r0, r4
 80080b2:	4629      	mov	r1, r5
 80080b4:	f7f8 f90a 	bl	80002cc <__adddf3>
 80080b8:	4604      	mov	r4, r0
 80080ba:	460d      	mov	r5, r1
 80080bc:	ec45 4b10 	vmov	d0, r4, r5
 80080c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	dc0e      	bgt.n	80080e6 <__ieee754_sqrt+0x56>
 80080c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80080cc:	4322      	orrs	r2, r4
 80080ce:	d0f5      	beq.n	80080bc <__ieee754_sqrt+0x2c>
 80080d0:	b19d      	cbz	r5, 80080fa <__ieee754_sqrt+0x6a>
 80080d2:	4622      	mov	r2, r4
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 f8f6 	bl	80002c8 <__aeabi_dsub>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	f7f8 fbd4 	bl	800088c <__aeabi_ddiv>
 80080e4:	e7e8      	b.n	80080b8 <__ieee754_sqrt+0x28>
 80080e6:	152a      	asrs	r2, r5, #20
 80080e8:	d115      	bne.n	8008116 <__ieee754_sqrt+0x86>
 80080ea:	2000      	movs	r0, #0
 80080ec:	e009      	b.n	8008102 <__ieee754_sqrt+0x72>
 80080ee:	0acb      	lsrs	r3, r1, #11
 80080f0:	3a15      	subs	r2, #21
 80080f2:	0549      	lsls	r1, r1, #21
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0fa      	beq.n	80080ee <__ieee754_sqrt+0x5e>
 80080f8:	e7f7      	b.n	80080ea <__ieee754_sqrt+0x5a>
 80080fa:	462a      	mov	r2, r5
 80080fc:	e7fa      	b.n	80080f4 <__ieee754_sqrt+0x64>
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	3001      	adds	r0, #1
 8008102:	02dc      	lsls	r4, r3, #11
 8008104:	d5fb      	bpl.n	80080fe <__ieee754_sqrt+0x6e>
 8008106:	1e44      	subs	r4, r0, #1
 8008108:	1b12      	subs	r2, r2, r4
 800810a:	f1c0 0420 	rsb	r4, r0, #32
 800810e:	fa21 f404 	lsr.w	r4, r1, r4
 8008112:	4323      	orrs	r3, r4
 8008114:	4081      	lsls	r1, r0
 8008116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800811a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800811e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008122:	07d2      	lsls	r2, r2, #31
 8008124:	bf5c      	itt	pl
 8008126:	005b      	lslpl	r3, r3, #1
 8008128:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800812c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008130:	bf58      	it	pl
 8008132:	0049      	lslpl	r1, r1, #1
 8008134:	2600      	movs	r6, #0
 8008136:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800813a:	107f      	asrs	r7, r7, #1
 800813c:	0049      	lsls	r1, r1, #1
 800813e:	2016      	movs	r0, #22
 8008140:	4632      	mov	r2, r6
 8008142:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008146:	1915      	adds	r5, r2, r4
 8008148:	429d      	cmp	r5, r3
 800814a:	bfde      	ittt	le
 800814c:	192a      	addle	r2, r5, r4
 800814e:	1b5b      	suble	r3, r3, r5
 8008150:	1936      	addle	r6, r6, r4
 8008152:	0fcd      	lsrs	r5, r1, #31
 8008154:	3801      	subs	r0, #1
 8008156:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800815a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800815e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008162:	d1f0      	bne.n	8008146 <__ieee754_sqrt+0xb6>
 8008164:	4605      	mov	r5, r0
 8008166:	2420      	movs	r4, #32
 8008168:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800816c:	4293      	cmp	r3, r2
 800816e:	eb0c 0e00 	add.w	lr, ip, r0
 8008172:	dc02      	bgt.n	800817a <__ieee754_sqrt+0xea>
 8008174:	d113      	bne.n	800819e <__ieee754_sqrt+0x10e>
 8008176:	458e      	cmp	lr, r1
 8008178:	d811      	bhi.n	800819e <__ieee754_sqrt+0x10e>
 800817a:	f1be 0f00 	cmp.w	lr, #0
 800817e:	eb0e 000c 	add.w	r0, lr, ip
 8008182:	da3f      	bge.n	8008204 <__ieee754_sqrt+0x174>
 8008184:	2800      	cmp	r0, #0
 8008186:	db3d      	blt.n	8008204 <__ieee754_sqrt+0x174>
 8008188:	f102 0801 	add.w	r8, r2, #1
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	458e      	cmp	lr, r1
 8008190:	bf88      	it	hi
 8008192:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008196:	eba1 010e 	sub.w	r1, r1, lr
 800819a:	4465      	add	r5, ip
 800819c:	4642      	mov	r2, r8
 800819e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80081a2:	3c01      	subs	r4, #1
 80081a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80081a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80081ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80081b0:	d1dc      	bne.n	800816c <__ieee754_sqrt+0xdc>
 80081b2:	4319      	orrs	r1, r3
 80081b4:	d01b      	beq.n	80081ee <__ieee754_sqrt+0x15e>
 80081b6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008234 <__ieee754_sqrt+0x1a4>
 80081ba:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008238 <__ieee754_sqrt+0x1a8>
 80081be:	e9da 0100 	ldrd	r0, r1, [sl]
 80081c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80081c6:	f7f8 f87f 	bl	80002c8 <__aeabi_dsub>
 80081ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 fcab 	bl	8000b30 <__aeabi_dcmple>
 80081da:	b140      	cbz	r0, 80081ee <__ieee754_sqrt+0x15e>
 80081dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80081e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80081e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80081e8:	d10e      	bne.n	8008208 <__ieee754_sqrt+0x178>
 80081ea:	3601      	adds	r6, #1
 80081ec:	4625      	mov	r5, r4
 80081ee:	1073      	asrs	r3, r6, #1
 80081f0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80081f4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80081f8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80081fc:	086b      	lsrs	r3, r5, #1
 80081fe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008202:	e759      	b.n	80080b8 <__ieee754_sqrt+0x28>
 8008204:	4690      	mov	r8, r2
 8008206:	e7c1      	b.n	800818c <__ieee754_sqrt+0xfc>
 8008208:	f7f8 f860 	bl	80002cc <__adddf3>
 800820c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800821c:	b120      	cbz	r0, 8008228 <__ieee754_sqrt+0x198>
 800821e:	1cab      	adds	r3, r5, #2
 8008220:	bf08      	it	eq
 8008222:	3601      	addeq	r6, #1
 8008224:	3502      	adds	r5, #2
 8008226:	e7e2      	b.n	80081ee <__ieee754_sqrt+0x15e>
 8008228:	1c6b      	adds	r3, r5, #1
 800822a:	f023 0501 	bic.w	r5, r3, #1
 800822e:	e7de      	b.n	80081ee <__ieee754_sqrt+0x15e>
 8008230:	7ff00000 	.word	0x7ff00000
 8008234:	0800a130 	.word	0x0800a130
 8008238:	0800a128 	.word	0x0800a128
 800823c:	00000000 	.word	0x00000000

08008240 <__kernel_cos>:
 8008240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ec57 6b10 	vmov	r6, r7, d0
 8008248:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800824c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008250:	ed8d 1b00 	vstr	d1, [sp]
 8008254:	d206      	bcs.n	8008264 <__kernel_cos+0x24>
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800825e:	2800      	cmp	r0, #0
 8008260:	f000 8088 	beq.w	8008374 <__kernel_cos+0x134>
 8008264:	4632      	mov	r2, r6
 8008266:	463b      	mov	r3, r7
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 f9e4 	bl	8000638 <__aeabi_dmul>
 8008270:	4b51      	ldr	r3, [pc, #324]	@ (80083b8 <__kernel_cos+0x178>)
 8008272:	2200      	movs	r2, #0
 8008274:	4604      	mov	r4, r0
 8008276:	460d      	mov	r5, r1
 8008278:	f7f8 f9de 	bl	8000638 <__aeabi_dmul>
 800827c:	a340      	add	r3, pc, #256	@ (adr r3, 8008380 <__kernel_cos+0x140>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	4682      	mov	sl, r0
 8008284:	468b      	mov	fp, r1
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 f9d5 	bl	8000638 <__aeabi_dmul>
 800828e:	a33e      	add	r3, pc, #248	@ (adr r3, 8008388 <__kernel_cos+0x148>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f7f8 f81a 	bl	80002cc <__adddf3>
 8008298:	4622      	mov	r2, r4
 800829a:	462b      	mov	r3, r5
 800829c:	f7f8 f9cc 	bl	8000638 <__aeabi_dmul>
 80082a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008390 <__kernel_cos+0x150>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f8 f80f 	bl	80002c8 <__aeabi_dsub>
 80082aa:	4622      	mov	r2, r4
 80082ac:	462b      	mov	r3, r5
 80082ae:	f7f8 f9c3 	bl	8000638 <__aeabi_dmul>
 80082b2:	a339      	add	r3, pc, #228	@ (adr r3, 8008398 <__kernel_cos+0x158>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f808 	bl	80002cc <__adddf3>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 f9ba 	bl	8000638 <__aeabi_dmul>
 80082c4:	a336      	add	r3, pc, #216	@ (adr r3, 80083a0 <__kernel_cos+0x160>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 fffd 	bl	80002c8 <__aeabi_dsub>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f8 f9b1 	bl	8000638 <__aeabi_dmul>
 80082d6:	a334      	add	r3, pc, #208	@ (adr r3, 80083a8 <__kernel_cos+0x168>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 fff6 	bl	80002cc <__adddf3>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f9a8 	bl	8000638 <__aeabi_dmul>
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	f7f8 f9a4 	bl	8000638 <__aeabi_dmul>
 80082f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082f4:	4604      	mov	r4, r0
 80082f6:	460d      	mov	r5, r1
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 f99c 	bl	8000638 <__aeabi_dmul>
 8008300:	460b      	mov	r3, r1
 8008302:	4602      	mov	r2, r0
 8008304:	4629      	mov	r1, r5
 8008306:	4620      	mov	r0, r4
 8008308:	f7f7 ffde 	bl	80002c8 <__aeabi_dsub>
 800830c:	4b2b      	ldr	r3, [pc, #172]	@ (80083bc <__kernel_cos+0x17c>)
 800830e:	4598      	cmp	r8, r3
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	d810      	bhi.n	8008338 <__kernel_cos+0xf8>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f7 ffd3 	bl	80002c8 <__aeabi_dsub>
 8008322:	460b      	mov	r3, r1
 8008324:	4926      	ldr	r1, [pc, #152]	@ (80083c0 <__kernel_cos+0x180>)
 8008326:	4602      	mov	r2, r0
 8008328:	2000      	movs	r0, #0
 800832a:	f7f7 ffcd 	bl	80002c8 <__aeabi_dsub>
 800832e:	ec41 0b10 	vmov	d0, r0, r1
 8008332:	b003      	add	sp, #12
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <__kernel_cos+0x184>)
 800833a:	4921      	ldr	r1, [pc, #132]	@ (80083c0 <__kernel_cos+0x180>)
 800833c:	4598      	cmp	r8, r3
 800833e:	bf8c      	ite	hi
 8008340:	4d21      	ldrhi	r5, [pc, #132]	@ (80083c8 <__kernel_cos+0x188>)
 8008342:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008346:	2400      	movs	r4, #0
 8008348:	4622      	mov	r2, r4
 800834a:	462b      	mov	r3, r5
 800834c:	2000      	movs	r0, #0
 800834e:	f7f7 ffbb 	bl	80002c8 <__aeabi_dsub>
 8008352:	4622      	mov	r2, r4
 8008354:	4680      	mov	r8, r0
 8008356:	4689      	mov	r9, r1
 8008358:	462b      	mov	r3, r5
 800835a:	4650      	mov	r0, sl
 800835c:	4659      	mov	r1, fp
 800835e:	f7f7 ffb3 	bl	80002c8 <__aeabi_dsub>
 8008362:	4632      	mov	r2, r6
 8008364:	463b      	mov	r3, r7
 8008366:	f7f7 ffaf 	bl	80002c8 <__aeabi_dsub>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	e7da      	b.n	800832a <__kernel_cos+0xea>
 8008374:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80083b0 <__kernel_cos+0x170>
 8008378:	e7db      	b.n	8008332 <__kernel_cos+0xf2>
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	be8838d4 	.word	0xbe8838d4
 8008384:	bda8fae9 	.word	0xbda8fae9
 8008388:	bdb4b1c4 	.word	0xbdb4b1c4
 800838c:	3e21ee9e 	.word	0x3e21ee9e
 8008390:	809c52ad 	.word	0x809c52ad
 8008394:	3e927e4f 	.word	0x3e927e4f
 8008398:	19cb1590 	.word	0x19cb1590
 800839c:	3efa01a0 	.word	0x3efa01a0
 80083a0:	16c15177 	.word	0x16c15177
 80083a4:	3f56c16c 	.word	0x3f56c16c
 80083a8:	5555554c 	.word	0x5555554c
 80083ac:	3fa55555 	.word	0x3fa55555
 80083b0:	00000000 	.word	0x00000000
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	3fe00000 	.word	0x3fe00000
 80083bc:	3fd33332 	.word	0x3fd33332
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	3fe90000 	.word	0x3fe90000
 80083c8:	3fd20000 	.word	0x3fd20000
 80083cc:	00000000 	.word	0x00000000

080083d0 <__kernel_sin>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	ec55 4b10 	vmov	r4, r5, d0
 80083d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80083dc:	b085      	sub	sp, #20
 80083de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80083e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80083e6:	4680      	mov	r8, r0
 80083e8:	d205      	bcs.n	80083f6 <__kernel_sin+0x26>
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f8 fbd3 	bl	8000b98 <__aeabi_d2iz>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d052      	beq.n	800849c <__kernel_sin+0xcc>
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	4620      	mov	r0, r4
 80083fc:	4629      	mov	r1, r5
 80083fe:	f7f8 f91b 	bl	8000638 <__aeabi_dmul>
 8008402:	4682      	mov	sl, r0
 8008404:	468b      	mov	fp, r1
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	f7f8 f913 	bl	8000638 <__aeabi_dmul>
 8008412:	a342      	add	r3, pc, #264	@ (adr r3, 800851c <__kernel_sin+0x14c>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e9cd 0100 	strd	r0, r1, [sp]
 800841c:	4650      	mov	r0, sl
 800841e:	4659      	mov	r1, fp
 8008420:	f7f8 f90a 	bl	8000638 <__aeabi_dmul>
 8008424:	a33f      	add	r3, pc, #252	@ (adr r3, 8008524 <__kernel_sin+0x154>)
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f7f7 ff4d 	bl	80002c8 <__aeabi_dsub>
 800842e:	4652      	mov	r2, sl
 8008430:	465b      	mov	r3, fp
 8008432:	f7f8 f901 	bl	8000638 <__aeabi_dmul>
 8008436:	a33d      	add	r3, pc, #244	@ (adr r3, 800852c <__kernel_sin+0x15c>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f7f7 ff46 	bl	80002cc <__adddf3>
 8008440:	4652      	mov	r2, sl
 8008442:	465b      	mov	r3, fp
 8008444:	f7f8 f8f8 	bl	8000638 <__aeabi_dmul>
 8008448:	a33a      	add	r3, pc, #232	@ (adr r3, 8008534 <__kernel_sin+0x164>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f7 ff3b 	bl	80002c8 <__aeabi_dsub>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	f7f8 f8ef 	bl	8000638 <__aeabi_dmul>
 800845a:	a338      	add	r3, pc, #224	@ (adr r3, 800853c <__kernel_sin+0x16c>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 ff34 	bl	80002cc <__adddf3>
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	f1b8 0f00 	cmp.w	r8, #0
 800846c:	d11b      	bne.n	80084a6 <__kernel_sin+0xd6>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4650      	mov	r0, sl
 8008474:	4659      	mov	r1, fp
 8008476:	f7f8 f8df 	bl	8000638 <__aeabi_dmul>
 800847a:	a325      	add	r3, pc, #148	@ (adr r3, 8008510 <__kernel_sin+0x140>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f7 ff22 	bl	80002c8 <__aeabi_dsub>
 8008484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4620      	mov	r0, r4
 8008492:	4629      	mov	r1, r5
 8008494:	f7f7 ff1a 	bl	80002cc <__adddf3>
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	ec45 4b10 	vmov	d0, r4, r5
 80084a0:	b005      	add	sp, #20
 80084a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <__kernel_sin+0x148>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	f7f8 f8c3 	bl	8000638 <__aeabi_dmul>
 80084b2:	4632      	mov	r2, r6
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	463b      	mov	r3, r7
 80084ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084be:	f7f8 f8bb 	bl	8000638 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f7 fefd 	bl	80002c8 <__aeabi_dsub>
 80084ce:	4652      	mov	r2, sl
 80084d0:	465b      	mov	r3, fp
 80084d2:	f7f8 f8b1 	bl	8000638 <__aeabi_dmul>
 80084d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084da:	f7f7 fef5 	bl	80002c8 <__aeabi_dsub>
 80084de:	a30c      	add	r3, pc, #48	@ (adr r3, 8008510 <__kernel_sin+0x140>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ec:	f7f8 f8a4 	bl	8000638 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f7 fee8 	bl	80002cc <__adddf3>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4620      	mov	r0, r4
 8008502:	4629      	mov	r1, r5
 8008504:	f7f7 fee0 	bl	80002c8 <__aeabi_dsub>
 8008508:	e7c6      	b.n	8008498 <__kernel_sin+0xc8>
 800850a:	bf00      	nop
 800850c:	f3af 8000 	nop.w
 8008510:	55555549 	.word	0x55555549
 8008514:	3fc55555 	.word	0x3fc55555
 8008518:	3fe00000 	.word	0x3fe00000
 800851c:	5acfd57c 	.word	0x5acfd57c
 8008520:	3de5d93a 	.word	0x3de5d93a
 8008524:	8a2b9ceb 	.word	0x8a2b9ceb
 8008528:	3e5ae5e6 	.word	0x3e5ae5e6
 800852c:	57b1fe7d 	.word	0x57b1fe7d
 8008530:	3ec71de3 	.word	0x3ec71de3
 8008534:	19c161d5 	.word	0x19c161d5
 8008538:	3f2a01a0 	.word	0x3f2a01a0
 800853c:	1110f8a6 	.word	0x1110f8a6
 8008540:	3f811111 	.word	0x3f811111
 8008544:	00000000 	.word	0x00000000

08008548 <__ieee754_pow>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b091      	sub	sp, #68	@ 0x44
 800854e:	ed8d 1b00 	vstr	d1, [sp]
 8008552:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008556:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800855a:	ea5a 0001 	orrs.w	r0, sl, r1
 800855e:	ec57 6b10 	vmov	r6, r7, d0
 8008562:	d113      	bne.n	800858c <__ieee754_pow+0x44>
 8008564:	19b3      	adds	r3, r6, r6
 8008566:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800856a:	4152      	adcs	r2, r2
 800856c:	4298      	cmp	r0, r3
 800856e:	4b9a      	ldr	r3, [pc, #616]	@ (80087d8 <__ieee754_pow+0x290>)
 8008570:	4193      	sbcs	r3, r2
 8008572:	f080 84ee 	bcs.w	8008f52 <__ieee754_pow+0xa0a>
 8008576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857a:	4630      	mov	r0, r6
 800857c:	4639      	mov	r1, r7
 800857e:	f7f7 fea5 	bl	80002cc <__adddf3>
 8008582:	ec41 0b10 	vmov	d0, r0, r1
 8008586:	b011      	add	sp, #68	@ 0x44
 8008588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858c:	4a93      	ldr	r2, [pc, #588]	@ (80087dc <__ieee754_pow+0x294>)
 800858e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8008592:	4295      	cmp	r5, r2
 8008594:	46b8      	mov	r8, r7
 8008596:	4633      	mov	r3, r6
 8008598:	d80a      	bhi.n	80085b0 <__ieee754_pow+0x68>
 800859a:	d104      	bne.n	80085a6 <__ieee754_pow+0x5e>
 800859c:	2e00      	cmp	r6, #0
 800859e:	d1ea      	bne.n	8008576 <__ieee754_pow+0x2e>
 80085a0:	45aa      	cmp	sl, r5
 80085a2:	d8e8      	bhi.n	8008576 <__ieee754_pow+0x2e>
 80085a4:	e001      	b.n	80085aa <__ieee754_pow+0x62>
 80085a6:	4592      	cmp	sl, r2
 80085a8:	d802      	bhi.n	80085b0 <__ieee754_pow+0x68>
 80085aa:	4592      	cmp	sl, r2
 80085ac:	d10f      	bne.n	80085ce <__ieee754_pow+0x86>
 80085ae:	b171      	cbz	r1, 80085ce <__ieee754_pow+0x86>
 80085b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80085b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80085b8:	ea58 0803 	orrs.w	r8, r8, r3
 80085bc:	d1db      	bne.n	8008576 <__ieee754_pow+0x2e>
 80085be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085c2:	18db      	adds	r3, r3, r3
 80085c4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80085c8:	4152      	adcs	r2, r2
 80085ca:	4598      	cmp	r8, r3
 80085cc:	e7cf      	b.n	800856e <__ieee754_pow+0x26>
 80085ce:	f1b8 0f00 	cmp.w	r8, #0
 80085d2:	46ab      	mov	fp, r5
 80085d4:	da43      	bge.n	800865e <__ieee754_pow+0x116>
 80085d6:	4a82      	ldr	r2, [pc, #520]	@ (80087e0 <__ieee754_pow+0x298>)
 80085d8:	4592      	cmp	sl, r2
 80085da:	d856      	bhi.n	800868a <__ieee754_pow+0x142>
 80085dc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80085e0:	4592      	cmp	sl, r2
 80085e2:	f240 84c5 	bls.w	8008f70 <__ieee754_pow+0xa28>
 80085e6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80085ea:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80085ee:	2a14      	cmp	r2, #20
 80085f0:	dd18      	ble.n	8008624 <__ieee754_pow+0xdc>
 80085f2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80085f6:	fa21 f402 	lsr.w	r4, r1, r2
 80085fa:	fa04 f202 	lsl.w	r2, r4, r2
 80085fe:	428a      	cmp	r2, r1
 8008600:	f040 84b6 	bne.w	8008f70 <__ieee754_pow+0xa28>
 8008604:	f004 0401 	and.w	r4, r4, #1
 8008608:	f1c4 0402 	rsb	r4, r4, #2
 800860c:	2900      	cmp	r1, #0
 800860e:	d159      	bne.n	80086c4 <__ieee754_pow+0x17c>
 8008610:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008614:	d148      	bne.n	80086a8 <__ieee754_pow+0x160>
 8008616:	4632      	mov	r2, r6
 8008618:	463b      	mov	r3, r7
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	f7f8 f80b 	bl	8000638 <__aeabi_dmul>
 8008622:	e7ae      	b.n	8008582 <__ieee754_pow+0x3a>
 8008624:	2900      	cmp	r1, #0
 8008626:	d14c      	bne.n	80086c2 <__ieee754_pow+0x17a>
 8008628:	f1c2 0214 	rsb	r2, r2, #20
 800862c:	fa4a f402 	asr.w	r4, sl, r2
 8008630:	fa04 f202 	lsl.w	r2, r4, r2
 8008634:	4552      	cmp	r2, sl
 8008636:	f040 8498 	bne.w	8008f6a <__ieee754_pow+0xa22>
 800863a:	f004 0401 	and.w	r4, r4, #1
 800863e:	f1c4 0402 	rsb	r4, r4, #2
 8008642:	4a68      	ldr	r2, [pc, #416]	@ (80087e4 <__ieee754_pow+0x29c>)
 8008644:	4592      	cmp	sl, r2
 8008646:	d1e3      	bne.n	8008610 <__ieee754_pow+0xc8>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	f280 8489 	bge.w	8008f62 <__ieee754_pow+0xa1a>
 8008650:	4964      	ldr	r1, [pc, #400]	@ (80087e4 <__ieee754_pow+0x29c>)
 8008652:	4632      	mov	r2, r6
 8008654:	463b      	mov	r3, r7
 8008656:	2000      	movs	r0, #0
 8008658:	f7f8 f918 	bl	800088c <__aeabi_ddiv>
 800865c:	e791      	b.n	8008582 <__ieee754_pow+0x3a>
 800865e:	2400      	movs	r4, #0
 8008660:	bb81      	cbnz	r1, 80086c4 <__ieee754_pow+0x17c>
 8008662:	4a5e      	ldr	r2, [pc, #376]	@ (80087dc <__ieee754_pow+0x294>)
 8008664:	4592      	cmp	sl, r2
 8008666:	d1ec      	bne.n	8008642 <__ieee754_pow+0xfa>
 8008668:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800866c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008670:	431a      	orrs	r2, r3
 8008672:	f000 846e 	beq.w	8008f52 <__ieee754_pow+0xa0a>
 8008676:	4b5c      	ldr	r3, [pc, #368]	@ (80087e8 <__ieee754_pow+0x2a0>)
 8008678:	429d      	cmp	r5, r3
 800867a:	d908      	bls.n	800868e <__ieee754_pow+0x146>
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	f280 846b 	bge.w	8008f5a <__ieee754_pow+0xa12>
 8008684:	2000      	movs	r0, #0
 8008686:	2100      	movs	r1, #0
 8008688:	e77b      	b.n	8008582 <__ieee754_pow+0x3a>
 800868a:	2402      	movs	r4, #2
 800868c:	e7e8      	b.n	8008660 <__ieee754_pow+0x118>
 800868e:	f1b9 0f00 	cmp.w	r9, #0
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f04f 0100 	mov.w	r1, #0
 800869a:	f6bf af72 	bge.w	8008582 <__ieee754_pow+0x3a>
 800869e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80086a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80086a6:	e76c      	b.n	8008582 <__ieee754_pow+0x3a>
 80086a8:	4a50      	ldr	r2, [pc, #320]	@ (80087ec <__ieee754_pow+0x2a4>)
 80086aa:	4591      	cmp	r9, r2
 80086ac:	d10a      	bne.n	80086c4 <__ieee754_pow+0x17c>
 80086ae:	f1b8 0f00 	cmp.w	r8, #0
 80086b2:	db07      	blt.n	80086c4 <__ieee754_pow+0x17c>
 80086b4:	ec47 6b10 	vmov	d0, r6, r7
 80086b8:	b011      	add	sp, #68	@ 0x44
 80086ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086be:	f7ff bce7 	b.w	8008090 <__ieee754_sqrt>
 80086c2:	2400      	movs	r4, #0
 80086c4:	ec47 6b10 	vmov	d0, r6, r7
 80086c8:	9302      	str	r3, [sp, #8]
 80086ca:	f7ff fc79 	bl	8007fc0 <fabs>
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	ec51 0b10 	vmov	r0, r1, d0
 80086d4:	bb43      	cbnz	r3, 8008728 <__ieee754_pow+0x1e0>
 80086d6:	4b43      	ldr	r3, [pc, #268]	@ (80087e4 <__ieee754_pow+0x29c>)
 80086d8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80086dc:	429a      	cmp	r2, r3
 80086de:	d000      	beq.n	80086e2 <__ieee754_pow+0x19a>
 80086e0:	bb15      	cbnz	r5, 8008728 <__ieee754_pow+0x1e0>
 80086e2:	f1b9 0f00 	cmp.w	r9, #0
 80086e6:	da05      	bge.n	80086f4 <__ieee754_pow+0x1ac>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	2000      	movs	r0, #0
 80086ee:	493d      	ldr	r1, [pc, #244]	@ (80087e4 <__ieee754_pow+0x29c>)
 80086f0:	f7f8 f8cc 	bl	800088c <__aeabi_ddiv>
 80086f4:	f1b8 0f00 	cmp.w	r8, #0
 80086f8:	f6bf af43 	bge.w	8008582 <__ieee754_pow+0x3a>
 80086fc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008700:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008704:	4325      	orrs	r5, r4
 8008706:	d108      	bne.n	800871a <__ieee754_pow+0x1d2>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4610      	mov	r0, r2
 800870e:	4619      	mov	r1, r3
 8008710:	f7f7 fdda 	bl	80002c8 <__aeabi_dsub>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	e79e      	b.n	8008658 <__ieee754_pow+0x110>
 800871a:	2c01      	cmp	r4, #1
 800871c:	f47f af31 	bne.w	8008582 <__ieee754_pow+0x3a>
 8008720:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008724:	4619      	mov	r1, r3
 8008726:	e72c      	b.n	8008582 <__ieee754_pow+0x3a>
 8008728:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800872c:	3b01      	subs	r3, #1
 800872e:	ea53 0204 	orrs.w	r2, r3, r4
 8008732:	d102      	bne.n	800873a <__ieee754_pow+0x1f2>
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	e7e8      	b.n	800870c <__ieee754_pow+0x1c4>
 800873a:	3c01      	subs	r4, #1
 800873c:	431c      	orrs	r4, r3
 800873e:	d016      	beq.n	800876e <__ieee754_pow+0x226>
 8008740:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80087c8 <__ieee754_pow+0x280>
 8008744:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008748:	ed8d 7b02 	vstr	d7, [sp, #8]
 800874c:	f240 8110 	bls.w	8008970 <__ieee754_pow+0x428>
 8008750:	4b27      	ldr	r3, [pc, #156]	@ (80087f0 <__ieee754_pow+0x2a8>)
 8008752:	459a      	cmp	sl, r3
 8008754:	4b24      	ldr	r3, [pc, #144]	@ (80087e8 <__ieee754_pow+0x2a0>)
 8008756:	d916      	bls.n	8008786 <__ieee754_pow+0x23e>
 8008758:	429d      	cmp	r5, r3
 800875a:	d80b      	bhi.n	8008774 <__ieee754_pow+0x22c>
 800875c:	f1b9 0f00 	cmp.w	r9, #0
 8008760:	da0b      	bge.n	800877a <__ieee754_pow+0x232>
 8008762:	2000      	movs	r0, #0
 8008764:	b011      	add	sp, #68	@ 0x44
 8008766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f000 bee5 	b.w	8009538 <__math_oflow>
 800876e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80087d0 <__ieee754_pow+0x288>
 8008772:	e7e7      	b.n	8008744 <__ieee754_pow+0x1fc>
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	dcf3      	bgt.n	8008762 <__ieee754_pow+0x21a>
 800877a:	2000      	movs	r0, #0
 800877c:	b011      	add	sp, #68	@ 0x44
 800877e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008782:	f000 bed1 	b.w	8009528 <__math_uflow>
 8008786:	429d      	cmp	r5, r3
 8008788:	d20c      	bcs.n	80087a4 <__ieee754_pow+0x25c>
 800878a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	2300      	movs	r3, #0
 8008792:	f7f8 f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8008796:	3800      	subs	r0, #0
 8008798:	bf18      	it	ne
 800879a:	2001      	movne	r0, #1
 800879c:	f1b9 0f00 	cmp.w	r9, #0
 80087a0:	daec      	bge.n	800877c <__ieee754_pow+0x234>
 80087a2:	e7df      	b.n	8008764 <__ieee754_pow+0x21c>
 80087a4:	4b0f      	ldr	r3, [pc, #60]	@ (80087e4 <__ieee754_pow+0x29c>)
 80087a6:	429d      	cmp	r5, r3
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	d922      	bls.n	80087f4 <__ieee754_pow+0x2ac>
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	2300      	movs	r3, #0
 80087b4:	f7f8 f9b2 	bl	8000b1c <__aeabi_dcmplt>
 80087b8:	3800      	subs	r0, #0
 80087ba:	bf18      	it	ne
 80087bc:	2001      	movne	r0, #1
 80087be:	f1b9 0f00 	cmp.w	r9, #0
 80087c2:	dccf      	bgt.n	8008764 <__ieee754_pow+0x21c>
 80087c4:	e7da      	b.n	800877c <__ieee754_pow+0x234>
 80087c6:	bf00      	nop
 80087c8:	00000000 	.word	0x00000000
 80087cc:	3ff00000 	.word	0x3ff00000
 80087d0:	00000000 	.word	0x00000000
 80087d4:	bff00000 	.word	0xbff00000
 80087d8:	fff00000 	.word	0xfff00000
 80087dc:	7ff00000 	.word	0x7ff00000
 80087e0:	433fffff 	.word	0x433fffff
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	3fefffff 	.word	0x3fefffff
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	43f00000 	.word	0x43f00000
 80087f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008960 <__ieee754_pow+0x418>)
 80087f6:	f7f7 fd67 	bl	80002c8 <__aeabi_dsub>
 80087fa:	a351      	add	r3, pc, #324	@ (adr r3, 8008940 <__ieee754_pow+0x3f8>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	f7f7 ff18 	bl	8000638 <__aeabi_dmul>
 8008808:	a34f      	add	r3, pc, #316	@ (adr r3, 8008948 <__ieee754_pow+0x400>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	4620      	mov	r0, r4
 8008814:	4629      	mov	r1, r5
 8008816:	f7f7 ff0f 	bl	8000638 <__aeabi_dmul>
 800881a:	4b52      	ldr	r3, [pc, #328]	@ (8008964 <__ieee754_pow+0x41c>)
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	2200      	movs	r2, #0
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	f7f7 ff07 	bl	8000638 <__aeabi_dmul>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	a148      	add	r1, pc, #288	@ (adr r1, 8008950 <__ieee754_pow+0x408>)
 8008830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008834:	f7f7 fd48 	bl	80002c8 <__aeabi_dsub>
 8008838:	4622      	mov	r2, r4
 800883a:	462b      	mov	r3, r5
 800883c:	f7f7 fefc 	bl	8000638 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	2000      	movs	r0, #0
 8008846:	4948      	ldr	r1, [pc, #288]	@ (8008968 <__ieee754_pow+0x420>)
 8008848:	f7f7 fd3e 	bl	80002c8 <__aeabi_dsub>
 800884c:	4622      	mov	r2, r4
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	462b      	mov	r3, r5
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 feee 	bl	8000638 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fee8 	bl	8000638 <__aeabi_dmul>
 8008868:	a33b      	add	r3, pc, #236	@ (adr r3, 8008958 <__ieee754_pow+0x410>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fee3 	bl	8000638 <__aeabi_dmul>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4650      	mov	r0, sl
 8008878:	4659      	mov	r1, fp
 800887a:	f7f7 fd25 	bl	80002c8 <__aeabi_dsub>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4680      	mov	r8, r0
 8008884:	4689      	mov	r9, r1
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 fd1f 	bl	80002cc <__adddf3>
 800888e:	2400      	movs	r4, #0
 8008890:	4632      	mov	r2, r6
 8008892:	463b      	mov	r3, r7
 8008894:	4620      	mov	r0, r4
 8008896:	460d      	mov	r5, r1
 8008898:	f7f7 fd16 	bl	80002c8 <__aeabi_dsub>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4640      	mov	r0, r8
 80088a2:	4649      	mov	r1, r9
 80088a4:	f7f7 fd10 	bl	80002c8 <__aeabi_dsub>
 80088a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088b0:	2300      	movs	r3, #0
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80088b8:	4606      	mov	r6, r0
 80088ba:	460f      	mov	r7, r1
 80088bc:	465b      	mov	r3, fp
 80088be:	4652      	mov	r2, sl
 80088c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088c4:	f7f7 fd00 	bl	80002c8 <__aeabi_dsub>
 80088c8:	4622      	mov	r2, r4
 80088ca:	462b      	mov	r3, r5
 80088cc:	f7f7 feb4 	bl	8000638 <__aeabi_dmul>
 80088d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088d4:	4680      	mov	r8, r0
 80088d6:	4689      	mov	r9, r1
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f7 feac 	bl	8000638 <__aeabi_dmul>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f7 fcf0 	bl	80002cc <__adddf3>
 80088ec:	465b      	mov	r3, fp
 80088ee:	4606      	mov	r6, r0
 80088f0:	460f      	mov	r7, r1
 80088f2:	4652      	mov	r2, sl
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 fe9e 	bl	8000638 <__aeabi_dmul>
 80088fc:	460b      	mov	r3, r1
 80088fe:	4602      	mov	r2, r0
 8008900:	4680      	mov	r8, r0
 8008902:	4689      	mov	r9, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f7 fce0 	bl	80002cc <__adddf3>
 800890c:	4b17      	ldr	r3, [pc, #92]	@ (800896c <__ieee754_pow+0x424>)
 800890e:	4299      	cmp	r1, r3
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	468b      	mov	fp, r1
 8008916:	f340 820b 	ble.w	8008d30 <__ieee754_pow+0x7e8>
 800891a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800891e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008922:	4303      	orrs	r3, r0
 8008924:	f000 81ea 	beq.w	8008cfc <__ieee754_pow+0x7b4>
 8008928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892c:	2200      	movs	r2, #0
 800892e:	2300      	movs	r3, #0
 8008930:	f7f8 f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8008934:	3800      	subs	r0, #0
 8008936:	bf18      	it	ne
 8008938:	2001      	movne	r0, #1
 800893a:	e713      	b.n	8008764 <__ieee754_pow+0x21c>
 800893c:	f3af 8000 	nop.w
 8008940:	60000000 	.word	0x60000000
 8008944:	3ff71547 	.word	0x3ff71547
 8008948:	f85ddf44 	.word	0xf85ddf44
 800894c:	3e54ae0b 	.word	0x3e54ae0b
 8008950:	55555555 	.word	0x55555555
 8008954:	3fd55555 	.word	0x3fd55555
 8008958:	652b82fe 	.word	0x652b82fe
 800895c:	3ff71547 	.word	0x3ff71547
 8008960:	3ff00000 	.word	0x3ff00000
 8008964:	3fd00000 	.word	0x3fd00000
 8008968:	3fe00000 	.word	0x3fe00000
 800896c:	408fffff 	.word	0x408fffff
 8008970:	4bd5      	ldr	r3, [pc, #852]	@ (8008cc8 <__ieee754_pow+0x780>)
 8008972:	ea08 0303 	and.w	r3, r8, r3
 8008976:	2200      	movs	r2, #0
 8008978:	b92b      	cbnz	r3, 8008986 <__ieee754_pow+0x43e>
 800897a:	4bd4      	ldr	r3, [pc, #848]	@ (8008ccc <__ieee754_pow+0x784>)
 800897c:	f7f7 fe5c 	bl	8000638 <__aeabi_dmul>
 8008980:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008984:	468b      	mov	fp, r1
 8008986:	ea4f 532b 	mov.w	r3, fp, asr #20
 800898a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800898e:	4413      	add	r3, r2
 8008990:	930a      	str	r3, [sp, #40]	@ 0x28
 8008992:	4bcf      	ldr	r3, [pc, #828]	@ (8008cd0 <__ieee754_pow+0x788>)
 8008994:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008998:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800899c:	459b      	cmp	fp, r3
 800899e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80089a2:	dd08      	ble.n	80089b6 <__ieee754_pow+0x46e>
 80089a4:	4bcb      	ldr	r3, [pc, #812]	@ (8008cd4 <__ieee754_pow+0x78c>)
 80089a6:	459b      	cmp	fp, r3
 80089a8:	f340 81a5 	ble.w	8008cf6 <__ieee754_pow+0x7ae>
 80089ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ae:	3301      	adds	r3, #1
 80089b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089b2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80089b6:	f04f 0a00 	mov.w	sl, #0
 80089ba:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80089be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089c0:	4bc5      	ldr	r3, [pc, #788]	@ (8008cd8 <__ieee754_pow+0x790>)
 80089c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089c6:	ed93 7b00 	vldr	d7, [r3]
 80089ca:	4629      	mov	r1, r5
 80089cc:	ec53 2b17 	vmov	r2, r3, d7
 80089d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089d8:	f7f7 fc76 	bl	80002c8 <__aeabi_dsub>
 80089dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1
 80089e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e8:	f7f7 fc70 	bl	80002cc <__adddf3>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	2000      	movs	r0, #0
 80089f2:	49ba      	ldr	r1, [pc, #744]	@ (8008cdc <__ieee754_pow+0x794>)
 80089f4:	f7f7 ff4a 	bl	800088c <__aeabi_ddiv>
 80089f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fe18 	bl	8000638 <__aeabi_dmul>
 8008a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a0c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008a10:	106d      	asrs	r5, r5, #1
 8008a12:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008a16:	f04f 0b00 	mov.w	fp, #0
 8008a1a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008a1e:	4661      	mov	r1, ip
 8008a20:	2200      	movs	r2, #0
 8008a22:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008a26:	4658      	mov	r0, fp
 8008a28:	46e1      	mov	r9, ip
 8008a2a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008a2e:	4614      	mov	r4, r2
 8008a30:	461d      	mov	r5, r3
 8008a32:	f7f7 fe01 	bl	8000638 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	f7f7 fc43 	bl	80002c8 <__aeabi_dsub>
 8008a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a5a:	f7f7 fc35 	bl	80002c8 <__aeabi_dsub>
 8008a5e:	465a      	mov	r2, fp
 8008a60:	464b      	mov	r3, r9
 8008a62:	f7f7 fde9 	bl	8000638 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f7 fc2b 	bl	80002c8 <__aeabi_dsub>
 8008a72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a76:	f7f7 fddf 	bl	8000638 <__aeabi_dmul>
 8008a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a82:	4610      	mov	r0, r2
 8008a84:	4619      	mov	r1, r3
 8008a86:	f7f7 fdd7 	bl	8000638 <__aeabi_dmul>
 8008a8a:	a37d      	add	r3, pc, #500	@ (adr r3, 8008c80 <__ieee754_pow+0x738>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	f7f7 fdd0 	bl	8000638 <__aeabi_dmul>
 8008a98:	a37b      	add	r3, pc, #492	@ (adr r3, 8008c88 <__ieee754_pow+0x740>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fc15 	bl	80002cc <__adddf3>
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	f7f7 fdc7 	bl	8000638 <__aeabi_dmul>
 8008aaa:	a379      	add	r3, pc, #484	@ (adr r3, 8008c90 <__ieee754_pow+0x748>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fc0c 	bl	80002cc <__adddf3>
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	a376      	add	r3, pc, #472	@ (adr r3, 8008c98 <__ieee754_pow+0x750>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fc03 	bl	80002cc <__adddf3>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	f7f7 fdb5 	bl	8000638 <__aeabi_dmul>
 8008ace:	a374      	add	r3, pc, #464	@ (adr r3, 8008ca0 <__ieee754_pow+0x758>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fbfa 	bl	80002cc <__adddf3>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	462b      	mov	r3, r5
 8008adc:	f7f7 fdac 	bl	8000638 <__aeabi_dmul>
 8008ae0:	a371      	add	r3, pc, #452	@ (adr r3, 8008ca8 <__ieee754_pow+0x760>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fbf1 	bl	80002cc <__adddf3>
 8008aea:	4622      	mov	r2, r4
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	462b      	mov	r3, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 fd9f 	bl	8000638 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 fd99 	bl	8000638 <__aeabi_dmul>
 8008b06:	465a      	mov	r2, fp
 8008b08:	4604      	mov	r4, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b12:	f7f7 fbdb 	bl	80002cc <__adddf3>
 8008b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b1a:	f7f7 fd8d 	bl	8000638 <__aeabi_dmul>
 8008b1e:	4622      	mov	r2, r4
 8008b20:	462b      	mov	r3, r5
 8008b22:	f7f7 fbd3 	bl	80002cc <__adddf3>
 8008b26:	465a      	mov	r2, fp
 8008b28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	4658      	mov	r0, fp
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4b6a      	ldr	r3, [pc, #424]	@ (8008ce0 <__ieee754_pow+0x798>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	f7f7 fbc5 	bl	80002cc <__adddf3>
 8008b42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b46:	f7f7 fbc1 	bl	80002cc <__adddf3>
 8008b4a:	46d8      	mov	r8, fp
 8008b4c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008b50:	460d      	mov	r5, r1
 8008b52:	465a      	mov	r2, fp
 8008b54:	460b      	mov	r3, r1
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008b5e:	f7f7 fd6b 	bl	8000638 <__aeabi_dmul>
 8008b62:	465c      	mov	r4, fp
 8008b64:	4680      	mov	r8, r0
 8008b66:	4689      	mov	r9, r1
 8008b68:	4b5d      	ldr	r3, [pc, #372]	@ (8008ce0 <__ieee754_pow+0x798>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	f7f7 fbaa 	bl	80002c8 <__aeabi_dsub>
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	f7f7 fba6 	bl	80002c8 <__aeabi_dsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b84:	f7f7 fba0 	bl	80002c8 <__aeabi_dsub>
 8008b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8c:	f7f7 fd54 	bl	8000638 <__aeabi_dmul>
 8008b90:	4622      	mov	r2, r4
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	462b      	mov	r3, r5
 8008b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b9c:	f7f7 fd4c 	bl	8000638 <__aeabi_dmul>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 fb90 	bl	80002cc <__adddf3>
 8008bac:	4606      	mov	r6, r0
 8008bae:	460f      	mov	r7, r1
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	f7f7 fb88 	bl	80002cc <__adddf3>
 8008bbc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008bc0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008cb0 <__ieee754_pow+0x768>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008bcc:	460d      	mov	r5, r1
 8008bce:	f7f7 fd33 	bl	8000638 <__aeabi_dmul>
 8008bd2:	465c      	mov	r4, fp
 8008bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd8:	4642      	mov	r2, r8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fb72 	bl	80002c8 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 fb6c 	bl	80002c8 <__aeabi_dsub>
 8008bf0:	a331      	add	r3, pc, #196	@ (adr r3, 8008cb8 <__ieee754_pow+0x770>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fd1f 	bl	8000638 <__aeabi_dmul>
 8008bfa:	a331      	add	r3, pc, #196	@ (adr r3, 8008cc0 <__ieee754_pow+0x778>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	4606      	mov	r6, r0
 8008c02:	460f      	mov	r7, r1
 8008c04:	4620      	mov	r0, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f7 fd16 	bl	8000638 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fb5a 	bl	80002cc <__adddf3>
 8008c18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c1a:	4b32      	ldr	r3, [pc, #200]	@ (8008ce4 <__ieee754_pow+0x79c>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f7f7 fb53 	bl	80002cc <__adddf3>
 8008c26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c2c:	f7f7 fc9a 	bl	8000564 <__aeabi_i2d>
 8008c30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c32:	4b2d      	ldr	r3, [pc, #180]	@ (8008ce8 <__ieee754_pow+0x7a0>)
 8008c34:	4413      	add	r3, r2
 8008c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c40:	460f      	mov	r7, r1
 8008c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c46:	f7f7 fb41 	bl	80002cc <__adddf3>
 8008c4a:	4642      	mov	r2, r8
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	f7f7 fb3d 	bl	80002cc <__adddf3>
 8008c52:	4632      	mov	r2, r6
 8008c54:	463b      	mov	r3, r7
 8008c56:	f7f7 fb39 	bl	80002cc <__adddf3>
 8008c5a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008c5e:	4632      	mov	r2, r6
 8008c60:	463b      	mov	r3, r7
 8008c62:	4658      	mov	r0, fp
 8008c64:	460d      	mov	r5, r1
 8008c66:	f7f7 fb2f 	bl	80002c8 <__aeabi_dsub>
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	f7f7 fb2b 	bl	80002c8 <__aeabi_dsub>
 8008c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c76:	f7f7 fb27 	bl	80002c8 <__aeabi_dsub>
 8008c7a:	465c      	mov	r4, fp
 8008c7c:	e036      	b.n	8008cec <__ieee754_pow+0x7a4>
 8008c7e:	bf00      	nop
 8008c80:	4a454eef 	.word	0x4a454eef
 8008c84:	3fca7e28 	.word	0x3fca7e28
 8008c88:	93c9db65 	.word	0x93c9db65
 8008c8c:	3fcd864a 	.word	0x3fcd864a
 8008c90:	a91d4101 	.word	0xa91d4101
 8008c94:	3fd17460 	.word	0x3fd17460
 8008c98:	518f264d 	.word	0x518f264d
 8008c9c:	3fd55555 	.word	0x3fd55555
 8008ca0:	db6fabff 	.word	0xdb6fabff
 8008ca4:	3fdb6db6 	.word	0x3fdb6db6
 8008ca8:	33333303 	.word	0x33333303
 8008cac:	3fe33333 	.word	0x3fe33333
 8008cb0:	e0000000 	.word	0xe0000000
 8008cb4:	3feec709 	.word	0x3feec709
 8008cb8:	dc3a03fd 	.word	0xdc3a03fd
 8008cbc:	3feec709 	.word	0x3feec709
 8008cc0:	145b01f5 	.word	0x145b01f5
 8008cc4:	be3e2fe0 	.word	0xbe3e2fe0
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	43400000 	.word	0x43400000
 8008cd0:	0003988e 	.word	0x0003988e
 8008cd4:	000bb679 	.word	0x000bb679
 8008cd8:	0800a158 	.word	0x0800a158
 8008cdc:	3ff00000 	.word	0x3ff00000
 8008ce0:	40080000 	.word	0x40080000
 8008ce4:	0800a138 	.word	0x0800a138
 8008ce8:	0800a148 	.word	0x0800a148
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cf4:	e5d6      	b.n	80088a4 <__ieee754_pow+0x35c>
 8008cf6:	f04f 0a01 	mov.w	sl, #1
 8008cfa:	e65e      	b.n	80089ba <__ieee754_pow+0x472>
 8008cfc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008fd4 <__ieee754_pow+0xa8c>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	f7f7 fae1 	bl	80002cc <__adddf3>
 8008d0a:	4642      	mov	r2, r8
 8008d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d10:	464b      	mov	r3, r9
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fad7 	bl	80002c8 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d22:	f7f7 ff19 	bl	8000b58 <__aeabi_dcmpgt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f47f adfe 	bne.w	8008928 <__ieee754_pow+0x3e0>
 8008d2c:	4ba2      	ldr	r3, [pc, #648]	@ (8008fb8 <__ieee754_pow+0xa70>)
 8008d2e:	e022      	b.n	8008d76 <__ieee754_pow+0x82e>
 8008d30:	4ca2      	ldr	r4, [pc, #648]	@ (8008fbc <__ieee754_pow+0xa74>)
 8008d32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	d919      	bls.n	8008d6e <__ieee754_pow+0x826>
 8008d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8008fc0 <__ieee754_pow+0xa78>)
 8008d3c:	440b      	add	r3, r1
 8008d3e:	4303      	orrs	r3, r0
 8008d40:	d009      	beq.n	8008d56 <__ieee754_pow+0x80e>
 8008d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f7f7 fee7 	bl	8000b1c <__aeabi_dcmplt>
 8008d4e:	3800      	subs	r0, #0
 8008d50:	bf18      	it	ne
 8008d52:	2001      	movne	r0, #1
 8008d54:	e512      	b.n	800877c <__ieee754_pow+0x234>
 8008d56:	4642      	mov	r2, r8
 8008d58:	464b      	mov	r3, r9
 8008d5a:	f7f7 fab5 	bl	80002c8 <__aeabi_dsub>
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	f7f7 feef 	bl	8000b44 <__aeabi_dcmpge>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d1eb      	bne.n	8008d42 <__ieee754_pow+0x7fa>
 8008d6a:	4b96      	ldr	r3, [pc, #600]	@ (8008fc4 <__ieee754_pow+0xa7c>)
 8008d6c:	e003      	b.n	8008d76 <__ieee754_pow+0x82e>
 8008d6e:	4a96      	ldr	r2, [pc, #600]	@ (8008fc8 <__ieee754_pow+0xa80>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	f240 80e7 	bls.w	8008f44 <__ieee754_pow+0x9fc>
 8008d76:	151b      	asrs	r3, r3, #20
 8008d78:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008d7c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008d80:	fa4a fa03 	asr.w	sl, sl, r3
 8008d84:	44da      	add	sl, fp
 8008d86:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008d8a:	4890      	ldr	r0, [pc, #576]	@ (8008fcc <__ieee754_pow+0xa84>)
 8008d8c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008d90:	4108      	asrs	r0, r1
 8008d92:	ea00 030a 	and.w	r3, r0, sl
 8008d96:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008d9a:	f1c1 0114 	rsb	r1, r1, #20
 8008d9e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008da2:	fa4a fa01 	asr.w	sl, sl, r1
 8008da6:	f1bb 0f00 	cmp.w	fp, #0
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	bfb8      	it	lt
 8008db4:	f1ca 0a00 	rsblt	sl, sl, #0
 8008db8:	f7f7 fa86 	bl	80002c8 <__aeabi_dsub>
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	4689      	mov	r9, r1
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 fa80 	bl	80002cc <__adddf3>
 8008dcc:	2400      	movs	r4, #0
 8008dce:	a36a      	add	r3, pc, #424	@ (adr r3, 8008f78 <__ieee754_pow+0xa30>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	f7f7 fc2e 	bl	8000638 <__aeabi_dmul>
 8008ddc:	4642      	mov	r2, r8
 8008dde:	e9cd 0100 	strd	r0, r1, [sp]
 8008de2:	464b      	mov	r3, r9
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fa6e 	bl	80002c8 <__aeabi_dsub>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fa68 	bl	80002c8 <__aeabi_dsub>
 8008df8:	a361      	add	r3, pc, #388	@ (adr r3, 8008f80 <__ieee754_pow+0xa38>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fc1b 	bl	8000638 <__aeabi_dmul>
 8008e02:	a361      	add	r3, pc, #388	@ (adr r3, 8008f88 <__ieee754_pow+0xa40>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4689      	mov	r9, r1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7f7 fc12 	bl	8000638 <__aeabi_dmul>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 fa56 	bl	80002cc <__adddf3>
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e2c:	f7f7 fa4e 	bl	80002cc <__adddf3>
 8008e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e34:	4680      	mov	r8, r0
 8008e36:	4689      	mov	r9, r1
 8008e38:	f7f7 fa46 	bl	80002c8 <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4620      	mov	r0, r4
 8008e42:	4629      	mov	r1, r5
 8008e44:	f7f7 fa40 	bl	80002c8 <__aeabi_dsub>
 8008e48:	4642      	mov	r2, r8
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	a34d      	add	r3, pc, #308	@ (adr r3, 8008f90 <__ieee754_pow+0xa48>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4604      	mov	r4, r0
 8008e60:	460d      	mov	r5, r1
 8008e62:	f7f7 fbe9 	bl	8000638 <__aeabi_dmul>
 8008e66:	a34c      	add	r3, pc, #304	@ (adr r3, 8008f98 <__ieee754_pow+0xa50>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fa2c 	bl	80002c8 <__aeabi_dsub>
 8008e70:	4622      	mov	r2, r4
 8008e72:	462b      	mov	r3, r5
 8008e74:	f7f7 fbe0 	bl	8000638 <__aeabi_dmul>
 8008e78:	a349      	add	r3, pc, #292	@ (adr r3, 8008fa0 <__ieee754_pow+0xa58>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fa25 	bl	80002cc <__adddf3>
 8008e82:	4622      	mov	r2, r4
 8008e84:	462b      	mov	r3, r5
 8008e86:	f7f7 fbd7 	bl	8000638 <__aeabi_dmul>
 8008e8a:	a347      	add	r3, pc, #284	@ (adr r3, 8008fa8 <__ieee754_pow+0xa60>)
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f7f7 fa1a 	bl	80002c8 <__aeabi_dsub>
 8008e94:	4622      	mov	r2, r4
 8008e96:	462b      	mov	r3, r5
 8008e98:	f7f7 fbce 	bl	8000638 <__aeabi_dmul>
 8008e9c:	a344      	add	r3, pc, #272	@ (adr r3, 8008fb0 <__ieee754_pow+0xa68>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fa13 	bl	80002cc <__adddf3>
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	462b      	mov	r3, r5
 8008eaa:	f7f7 fbc5 	bl	8000638 <__aeabi_dmul>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 fa07 	bl	80002c8 <__aeabi_dsub>
 8008eba:	4604      	mov	r4, r0
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 fbb7 	bl	8000638 <__aeabi_dmul>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ed0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7f7 f9f6 	bl	80002c8 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee4:	f7f7 fcd2 	bl	800088c <__aeabi_ddiv>
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	463b      	mov	r3, r7
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 fba0 	bl	8000638 <__aeabi_dmul>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	f7f7 f9e6 	bl	80002cc <__adddf3>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 f9de 	bl	80002c8 <__aeabi_dsub>
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	f7f7 f9da 	bl	80002c8 <__aeabi_dsub>
 8008f14:	460b      	mov	r3, r1
 8008f16:	4602      	mov	r2, r0
 8008f18:	492d      	ldr	r1, [pc, #180]	@ (8008fd0 <__ieee754_pow+0xa88>)
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f7f7 f9d4 	bl	80002c8 <__aeabi_dsub>
 8008f20:	ec41 0b10 	vmov	d0, r0, r1
 8008f24:	ee10 3a90 	vmov	r3, s1
 8008f28:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f30:	da0b      	bge.n	8008f4a <__ieee754_pow+0xa02>
 8008f32:	4650      	mov	r0, sl
 8008f34:	f000 fa50 	bl	80093d8 <scalbn>
 8008f38:	ec51 0b10 	vmov	r0, r1, d0
 8008f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f40:	f7ff bb6d 	b.w	800861e <__ieee754_pow+0xd6>
 8008f44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008f48:	e73a      	b.n	8008dc0 <__ieee754_pow+0x878>
 8008f4a:	ec51 0b10 	vmov	r0, r1, d0
 8008f4e:	4619      	mov	r1, r3
 8008f50:	e7f4      	b.n	8008f3c <__ieee754_pow+0x9f4>
 8008f52:	491f      	ldr	r1, [pc, #124]	@ (8008fd0 <__ieee754_pow+0xa88>)
 8008f54:	2000      	movs	r0, #0
 8008f56:	f7ff bb14 	b.w	8008582 <__ieee754_pow+0x3a>
 8008f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f5e:	f7ff bb10 	b.w	8008582 <__ieee754_pow+0x3a>
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7ff bb0c 	b.w	8008582 <__ieee754_pow+0x3a>
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	f7ff bb69 	b.w	8008642 <__ieee754_pow+0xfa>
 8008f70:	2400      	movs	r4, #0
 8008f72:	f7ff bb4b 	b.w	800860c <__ieee754_pow+0xc4>
 8008f76:	bf00      	nop
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	3fe62e43 	.word	0x3fe62e43
 8008f80:	fefa39ef 	.word	0xfefa39ef
 8008f84:	3fe62e42 	.word	0x3fe62e42
 8008f88:	0ca86c39 	.word	0x0ca86c39
 8008f8c:	be205c61 	.word	0xbe205c61
 8008f90:	72bea4d0 	.word	0x72bea4d0
 8008f94:	3e663769 	.word	0x3e663769
 8008f98:	c5d26bf1 	.word	0xc5d26bf1
 8008f9c:	3ebbbd41 	.word	0x3ebbbd41
 8008fa0:	af25de2c 	.word	0xaf25de2c
 8008fa4:	3f11566a 	.word	0x3f11566a
 8008fa8:	16bebd93 	.word	0x16bebd93
 8008fac:	3f66c16c 	.word	0x3f66c16c
 8008fb0:	5555553e 	.word	0x5555553e
 8008fb4:	3fc55555 	.word	0x3fc55555
 8008fb8:	40900000 	.word	0x40900000
 8008fbc:	4090cbff 	.word	0x4090cbff
 8008fc0:	3f6f3400 	.word	0x3f6f3400
 8008fc4:	4090cc00 	.word	0x4090cc00
 8008fc8:	3fe00000 	.word	0x3fe00000
 8008fcc:	fff00000 	.word	0xfff00000
 8008fd0:	3ff00000 	.word	0x3ff00000
 8008fd4:	652b82fe 	.word	0x652b82fe
 8008fd8:	3c971547 	.word	0x3c971547
 8008fdc:	00000000 	.word	0x00000000

08008fe0 <__ieee754_rem_pio2>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ec57 6b10 	vmov	r6, r7, d0
 8008fe8:	4bc5      	ldr	r3, [pc, #788]	@ (8009300 <__ieee754_rem_pio2+0x320>)
 8008fea:	b08d      	sub	sp, #52	@ 0x34
 8008fec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008ff0:	4598      	cmp	r8, r3
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	9704      	str	r7, [sp, #16]
 8008ff6:	d807      	bhi.n	8009008 <__ieee754_rem_pio2+0x28>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	ed80 0b00 	vstr	d0, [r0]
 8009000:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009004:	2500      	movs	r5, #0
 8009006:	e028      	b.n	800905a <__ieee754_rem_pio2+0x7a>
 8009008:	4bbe      	ldr	r3, [pc, #760]	@ (8009304 <__ieee754_rem_pio2+0x324>)
 800900a:	4598      	cmp	r8, r3
 800900c:	d878      	bhi.n	8009100 <__ieee754_rem_pio2+0x120>
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	4dbd      	ldr	r5, [pc, #756]	@ (8009308 <__ieee754_rem_pio2+0x328>)
 8009012:	2b00      	cmp	r3, #0
 8009014:	4630      	mov	r0, r6
 8009016:	a3ac      	add	r3, pc, #688	@ (adr r3, 80092c8 <__ieee754_rem_pio2+0x2e8>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	4639      	mov	r1, r7
 800901e:	dd38      	ble.n	8009092 <__ieee754_rem_pio2+0xb2>
 8009020:	f7f7 f952 	bl	80002c8 <__aeabi_dsub>
 8009024:	45a8      	cmp	r8, r5
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	d01a      	beq.n	8009062 <__ieee754_rem_pio2+0x82>
 800902c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x2f0>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f949 	bl	80002c8 <__aeabi_dsub>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 f941 	bl	80002c8 <__aeabi_dsub>
 8009046:	a3a2      	add	r3, pc, #648	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x2f0>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 f93c 	bl	80002c8 <__aeabi_dsub>
 8009050:	e9c4 8900 	strd	r8, r9, [r4]
 8009054:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009058:	2501      	movs	r5, #1
 800905a:	4628      	mov	r0, r5
 800905c:	b00d      	add	sp, #52	@ 0x34
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	a39d      	add	r3, pc, #628	@ (adr r3, 80092d8 <__ieee754_rem_pio2+0x2f8>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 f92e 	bl	80002c8 <__aeabi_dsub>
 800906c:	a39c      	add	r3, pc, #624	@ (adr r3, 80092e0 <__ieee754_rem_pio2+0x300>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	f7f7 f927 	bl	80002c8 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4680      	mov	r8, r0
 8009080:	4689      	mov	r9, r1
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 f91f 	bl	80002c8 <__aeabi_dsub>
 800908a:	a395      	add	r3, pc, #596	@ (adr r3, 80092e0 <__ieee754_rem_pio2+0x300>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	e7dc      	b.n	800904c <__ieee754_rem_pio2+0x6c>
 8009092:	f7f7 f91b 	bl	80002cc <__adddf3>
 8009096:	45a8      	cmp	r8, r5
 8009098:	4606      	mov	r6, r0
 800909a:	460f      	mov	r7, r1
 800909c:	d018      	beq.n	80090d0 <__ieee754_rem_pio2+0xf0>
 800909e:	a38c      	add	r3, pc, #560	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x2f0>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 f912 	bl	80002cc <__adddf3>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	4630      	mov	r0, r6
 80090b2:	4639      	mov	r1, r7
 80090b4:	f7f7 f908 	bl	80002c8 <__aeabi_dsub>
 80090b8:	a385      	add	r3, pc, #532	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x2f0>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f905 	bl	80002cc <__adddf3>
 80090c2:	f04f 35ff 	mov.w	r5, #4294967295
 80090c6:	e9c4 8900 	strd	r8, r9, [r4]
 80090ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090ce:	e7c4      	b.n	800905a <__ieee754_rem_pio2+0x7a>
 80090d0:	a381      	add	r3, pc, #516	@ (adr r3, 80092d8 <__ieee754_rem_pio2+0x2f8>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 f8f9 	bl	80002cc <__adddf3>
 80090da:	a381      	add	r3, pc, #516	@ (adr r3, 80092e0 <__ieee754_rem_pio2+0x300>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4606      	mov	r6, r0
 80090e2:	460f      	mov	r7, r1
 80090e4:	f7f7 f8f2 	bl	80002cc <__adddf3>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f8e8 	bl	80002c8 <__aeabi_dsub>
 80090f8:	a379      	add	r3, pc, #484	@ (adr r3, 80092e0 <__ieee754_rem_pio2+0x300>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	e7de      	b.n	80090be <__ieee754_rem_pio2+0xde>
 8009100:	4b82      	ldr	r3, [pc, #520]	@ (800930c <__ieee754_rem_pio2+0x32c>)
 8009102:	4598      	cmp	r8, r3
 8009104:	f200 80d1 	bhi.w	80092aa <__ieee754_rem_pio2+0x2ca>
 8009108:	f7fe ff5a 	bl	8007fc0 <fabs>
 800910c:	ec57 6b10 	vmov	r6, r7, d0
 8009110:	a375      	add	r3, pc, #468	@ (adr r3, 80092e8 <__ieee754_rem_pio2+0x308>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 fa8d 	bl	8000638 <__aeabi_dmul>
 800911e:	4b7c      	ldr	r3, [pc, #496]	@ (8009310 <__ieee754_rem_pio2+0x330>)
 8009120:	2200      	movs	r2, #0
 8009122:	f7f7 f8d3 	bl	80002cc <__adddf3>
 8009126:	f7f7 fd37 	bl	8000b98 <__aeabi_d2iz>
 800912a:	4605      	mov	r5, r0
 800912c:	f7f7 fa1a 	bl	8000564 <__aeabi_i2d>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009138:	a363      	add	r3, pc, #396	@ (adr r3, 80092c8 <__ieee754_rem_pio2+0x2e8>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fa7b 	bl	8000638 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 f8bd 	bl	80002c8 <__aeabi_dsub>
 800914e:	a360      	add	r3, pc, #384	@ (adr r3, 80092d0 <__ieee754_rem_pio2+0x2f0>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	4682      	mov	sl, r0
 8009156:	468b      	mov	fp, r1
 8009158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915c:	f7f7 fa6c 	bl	8000638 <__aeabi_dmul>
 8009160:	2d1f      	cmp	r5, #31
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	dc0c      	bgt.n	8009182 <__ieee754_rem_pio2+0x1a2>
 8009168:	4b6a      	ldr	r3, [pc, #424]	@ (8009314 <__ieee754_rem_pio2+0x334>)
 800916a:	1e6a      	subs	r2, r5, #1
 800916c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009170:	4543      	cmp	r3, r8
 8009172:	d006      	beq.n	8009182 <__ieee754_rem_pio2+0x1a2>
 8009174:	4632      	mov	r2, r6
 8009176:	463b      	mov	r3, r7
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 f8a4 	bl	80002c8 <__aeabi_dsub>
 8009180:	e00e      	b.n	80091a0 <__ieee754_rem_pio2+0x1c0>
 8009182:	463b      	mov	r3, r7
 8009184:	4632      	mov	r2, r6
 8009186:	4650      	mov	r0, sl
 8009188:	4659      	mov	r1, fp
 800918a:	f7f7 f89d 	bl	80002c8 <__aeabi_dsub>
 800918e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009198:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800919c:	2b10      	cmp	r3, #16
 800919e:	dc02      	bgt.n	80091a6 <__ieee754_rem_pio2+0x1c6>
 80091a0:	e9c4 0100 	strd	r0, r1, [r4]
 80091a4:	e039      	b.n	800921a <__ieee754_rem_pio2+0x23a>
 80091a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80092d8 <__ieee754_rem_pio2+0x2f8>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091b0:	f7f7 fa42 	bl	8000638 <__aeabi_dmul>
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4650      	mov	r0, sl
 80091be:	4659      	mov	r1, fp
 80091c0:	f7f7 f882 	bl	80002c8 <__aeabi_dsub>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4680      	mov	r8, r0
 80091ca:	4689      	mov	r9, r1
 80091cc:	4650      	mov	r0, sl
 80091ce:	4659      	mov	r1, fp
 80091d0:	f7f7 f87a 	bl	80002c8 <__aeabi_dsub>
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	f7f7 f876 	bl	80002c8 <__aeabi_dsub>
 80091dc:	a340      	add	r3, pc, #256	@ (adr r3, 80092e0 <__ieee754_rem_pio2+0x300>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ea:	f7f7 fa25 	bl	8000638 <__aeabi_dmul>
 80091ee:	4632      	mov	r2, r6
 80091f0:	463b      	mov	r3, r7
 80091f2:	f7f7 f869 	bl	80002c8 <__aeabi_dsub>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 f861 	bl	80002c8 <__aeabi_dsub>
 8009206:	9a05      	ldr	r2, [sp, #20]
 8009208:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b31      	cmp	r3, #49	@ 0x31
 8009210:	dc20      	bgt.n	8009254 <__ieee754_rem_pio2+0x274>
 8009212:	e9c4 0100 	strd	r0, r1, [r4]
 8009216:	46c2      	mov	sl, r8
 8009218:	46cb      	mov	fp, r9
 800921a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800921e:	4650      	mov	r0, sl
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	4659      	mov	r1, fp
 8009226:	f7f7 f84f 	bl	80002c8 <__aeabi_dsub>
 800922a:	463b      	mov	r3, r7
 800922c:	4632      	mov	r2, r6
 800922e:	f7f7 f84b 	bl	80002c8 <__aeabi_dsub>
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800923a:	f6bf af0e 	bge.w	800905a <__ieee754_rem_pio2+0x7a>
 800923e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009248:	f8c4 8000 	str.w	r8, [r4]
 800924c:	60a0      	str	r0, [r4, #8]
 800924e:	60e3      	str	r3, [r4, #12]
 8009250:	426d      	negs	r5, r5
 8009252:	e702      	b.n	800905a <__ieee754_rem_pio2+0x7a>
 8009254:	a326      	add	r3, pc, #152	@ (adr r3, 80092f0 <__ieee754_rem_pio2+0x310>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925e:	f7f7 f9eb 	bl	8000638 <__aeabi_dmul>
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f82b 	bl	80002c8 <__aeabi_dsub>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4682      	mov	sl, r0
 8009278:	468b      	mov	fp, r1
 800927a:	4640      	mov	r0, r8
 800927c:	4649      	mov	r1, r9
 800927e:	f7f7 f823 	bl	80002c8 <__aeabi_dsub>
 8009282:	4632      	mov	r2, r6
 8009284:	463b      	mov	r3, r7
 8009286:	f7f7 f81f 	bl	80002c8 <__aeabi_dsub>
 800928a:	a31b      	add	r3, pc, #108	@ (adr r3, 80092f8 <__ieee754_rem_pio2+0x318>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009298:	f7f7 f9ce 	bl	8000638 <__aeabi_dmul>
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	f7f7 f812 	bl	80002c8 <__aeabi_dsub>
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	e764      	b.n	8009174 <__ieee754_rem_pio2+0x194>
 80092aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009318 <__ieee754_rem_pio2+0x338>)
 80092ac:	4598      	cmp	r8, r3
 80092ae:	d935      	bls.n	800931c <__ieee754_rem_pio2+0x33c>
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	4630      	mov	r0, r6
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f7 f806 	bl	80002c8 <__aeabi_dsub>
 80092bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092c0:	e9c4 0100 	strd	r0, r1, [r4]
 80092c4:	e69e      	b.n	8009004 <__ieee754_rem_pio2+0x24>
 80092c6:	bf00      	nop
 80092c8:	54400000 	.word	0x54400000
 80092cc:	3ff921fb 	.word	0x3ff921fb
 80092d0:	1a626331 	.word	0x1a626331
 80092d4:	3dd0b461 	.word	0x3dd0b461
 80092d8:	1a600000 	.word	0x1a600000
 80092dc:	3dd0b461 	.word	0x3dd0b461
 80092e0:	2e037073 	.word	0x2e037073
 80092e4:	3ba3198a 	.word	0x3ba3198a
 80092e8:	6dc9c883 	.word	0x6dc9c883
 80092ec:	3fe45f30 	.word	0x3fe45f30
 80092f0:	2e000000 	.word	0x2e000000
 80092f4:	3ba3198a 	.word	0x3ba3198a
 80092f8:	252049c1 	.word	0x252049c1
 80092fc:	397b839a 	.word	0x397b839a
 8009300:	3fe921fb 	.word	0x3fe921fb
 8009304:	4002d97b 	.word	0x4002d97b
 8009308:	3ff921fb 	.word	0x3ff921fb
 800930c:	413921fb 	.word	0x413921fb
 8009310:	3fe00000 	.word	0x3fe00000
 8009314:	0800a168 	.word	0x0800a168
 8009318:	7fefffff 	.word	0x7fefffff
 800931c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009320:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009324:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009328:	4630      	mov	r0, r6
 800932a:	460f      	mov	r7, r1
 800932c:	f7f7 fc34 	bl	8000b98 <__aeabi_d2iz>
 8009330:	f7f7 f918 	bl	8000564 <__aeabi_i2d>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009340:	f7f6 ffc2 	bl	80002c8 <__aeabi_dsub>
 8009344:	4b22      	ldr	r3, [pc, #136]	@ (80093d0 <__ieee754_rem_pio2+0x3f0>)
 8009346:	2200      	movs	r2, #0
 8009348:	f7f7 f976 	bl	8000638 <__aeabi_dmul>
 800934c:	460f      	mov	r7, r1
 800934e:	4606      	mov	r6, r0
 8009350:	f7f7 fc22 	bl	8000b98 <__aeabi_d2iz>
 8009354:	f7f7 f906 	bl	8000564 <__aeabi_i2d>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4630      	mov	r0, r6
 800935e:	4639      	mov	r1, r7
 8009360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009364:	f7f6 ffb0 	bl	80002c8 <__aeabi_dsub>
 8009368:	4b19      	ldr	r3, [pc, #100]	@ (80093d0 <__ieee754_rem_pio2+0x3f0>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f964 	bl	8000638 <__aeabi_dmul>
 8009370:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009374:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009378:	f04f 0803 	mov.w	r8, #3
 800937c:	2600      	movs	r6, #0
 800937e:	2700      	movs	r7, #0
 8009380:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009384:	4632      	mov	r2, r6
 8009386:	463b      	mov	r3, r7
 8009388:	46c2      	mov	sl, r8
 800938a:	f108 38ff 	add.w	r8, r8, #4294967295
 800938e:	f7f7 fbbb 	bl	8000b08 <__aeabi_dcmpeq>
 8009392:	2800      	cmp	r0, #0
 8009394:	d1f4      	bne.n	8009380 <__ieee754_rem_pio2+0x3a0>
 8009396:	4b0f      	ldr	r3, [pc, #60]	@ (80093d4 <__ieee754_rem_pio2+0x3f4>)
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	2302      	movs	r3, #2
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	462a      	mov	r2, r5
 80093a0:	4653      	mov	r3, sl
 80093a2:	4621      	mov	r1, r4
 80093a4:	a806      	add	r0, sp, #24
 80093a6:	f000 f8cf 	bl	8009548 <__kernel_rem_pio2>
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	4605      	mov	r5, r0
 80093b0:	f6bf ae53 	bge.w	800905a <__ieee754_rem_pio2+0x7a>
 80093b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80093b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093bc:	e9c4 2300 	strd	r2, r3, [r4]
 80093c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80093c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80093cc:	e740      	b.n	8009250 <__ieee754_rem_pio2+0x270>
 80093ce:	bf00      	nop
 80093d0:	41700000 	.word	0x41700000
 80093d4:	0800a1e8 	.word	0x0800a1e8

080093d8 <scalbn>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	ec55 4b10 	vmov	r4, r5, d0
 80093de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80093e2:	4606      	mov	r6, r0
 80093e4:	462b      	mov	r3, r5
 80093e6:	b991      	cbnz	r1, 800940e <scalbn+0x36>
 80093e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80093ec:	4323      	orrs	r3, r4
 80093ee:	d03b      	beq.n	8009468 <scalbn+0x90>
 80093f0:	4b33      	ldr	r3, [pc, #204]	@ (80094c0 <scalbn+0xe8>)
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	2200      	movs	r2, #0
 80093f8:	f7f7 f91e 	bl	8000638 <__aeabi_dmul>
 80093fc:	4b31      	ldr	r3, [pc, #196]	@ (80094c4 <scalbn+0xec>)
 80093fe:	429e      	cmp	r6, r3
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	da0f      	bge.n	8009426 <scalbn+0x4e>
 8009406:	a326      	add	r3, pc, #152	@ (adr r3, 80094a0 <scalbn+0xc8>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	e01e      	b.n	800944c <scalbn+0x74>
 800940e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009412:	4291      	cmp	r1, r2
 8009414:	d10b      	bne.n	800942e <scalbn+0x56>
 8009416:	4622      	mov	r2, r4
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff56 	bl	80002cc <__adddf3>
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	e020      	b.n	8009468 <scalbn+0x90>
 8009426:	460b      	mov	r3, r1
 8009428:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800942c:	3936      	subs	r1, #54	@ 0x36
 800942e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009432:	4296      	cmp	r6, r2
 8009434:	dd0d      	ble.n	8009452 <scalbn+0x7a>
 8009436:	2d00      	cmp	r5, #0
 8009438:	a11b      	add	r1, pc, #108	@ (adr r1, 80094a8 <scalbn+0xd0>)
 800943a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800943e:	da02      	bge.n	8009446 <scalbn+0x6e>
 8009440:	a11b      	add	r1, pc, #108	@ (adr r1, 80094b0 <scalbn+0xd8>)
 8009442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009446:	a318      	add	r3, pc, #96	@ (adr r3, 80094a8 <scalbn+0xd0>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	e7e6      	b.n	8009420 <scalbn+0x48>
 8009452:	1872      	adds	r2, r6, r1
 8009454:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009458:	428a      	cmp	r2, r1
 800945a:	dcec      	bgt.n	8009436 <scalbn+0x5e>
 800945c:	2a00      	cmp	r2, #0
 800945e:	dd06      	ble.n	800946e <scalbn+0x96>
 8009460:	f36f 531e 	bfc	r3, #20, #11
 8009464:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009468:	ec45 4b10 	vmov	d0, r4, r5
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009472:	da08      	bge.n	8009486 <scalbn+0xae>
 8009474:	2d00      	cmp	r5, #0
 8009476:	a10a      	add	r1, pc, #40	@ (adr r1, 80094a0 <scalbn+0xc8>)
 8009478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947c:	dac3      	bge.n	8009406 <scalbn+0x2e>
 800947e:	a10e      	add	r1, pc, #56	@ (adr r1, 80094b8 <scalbn+0xe0>)
 8009480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009484:	e7bf      	b.n	8009406 <scalbn+0x2e>
 8009486:	3236      	adds	r2, #54	@ 0x36
 8009488:	f36f 531e 	bfc	r3, #20, #11
 800948c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009490:	4620      	mov	r0, r4
 8009492:	4b0d      	ldr	r3, [pc, #52]	@ (80094c8 <scalbn+0xf0>)
 8009494:	4629      	mov	r1, r5
 8009496:	2200      	movs	r2, #0
 8009498:	e7d8      	b.n	800944c <scalbn+0x74>
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	c2f8f359 	.word	0xc2f8f359
 80094a4:	01a56e1f 	.word	0x01a56e1f
 80094a8:	8800759c 	.word	0x8800759c
 80094ac:	7e37e43c 	.word	0x7e37e43c
 80094b0:	8800759c 	.word	0x8800759c
 80094b4:	fe37e43c 	.word	0xfe37e43c
 80094b8:	c2f8f359 	.word	0xc2f8f359
 80094bc:	81a56e1f 	.word	0x81a56e1f
 80094c0:	43500000 	.word	0x43500000
 80094c4:	ffff3cb0 	.word	0xffff3cb0
 80094c8:	3c900000 	.word	0x3c900000

080094cc <with_errno>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	ed2d 8b02 	vpush	{d8}
 80094d2:	eeb0 8a40 	vmov.f32	s16, s0
 80094d6:	eef0 8a60 	vmov.f32	s17, s1
 80094da:	4604      	mov	r4, r0
 80094dc:	f7fc fca4 	bl	8005e28 <__errno>
 80094e0:	eeb0 0a48 	vmov.f32	s0, s16
 80094e4:	eef0 0a68 	vmov.f32	s1, s17
 80094e8:	ecbd 8b02 	vpop	{d8}
 80094ec:	6004      	str	r4, [r0, #0]
 80094ee:	bd10      	pop	{r4, pc}

080094f0 <xflow>:
 80094f0:	4603      	mov	r3, r0
 80094f2:	b507      	push	{r0, r1, r2, lr}
 80094f4:	ec51 0b10 	vmov	r0, r1, d0
 80094f8:	b183      	cbz	r3, 800951c <xflow+0x2c>
 80094fa:	4602      	mov	r2, r0
 80094fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009500:	e9cd 2300 	strd	r2, r3, [sp]
 8009504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009508:	f7f7 f896 	bl	8000638 <__aeabi_dmul>
 800950c:	ec41 0b10 	vmov	d0, r0, r1
 8009510:	2022      	movs	r0, #34	@ 0x22
 8009512:	b003      	add	sp, #12
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	f7ff bfd8 	b.w	80094cc <with_errno>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	e7ee      	b.n	8009500 <xflow+0x10>
 8009522:	0000      	movs	r0, r0
 8009524:	0000      	movs	r0, r0
	...

08009528 <__math_uflow>:
 8009528:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009530 <__math_uflow+0x8>
 800952c:	f7ff bfe0 	b.w	80094f0 <xflow>
 8009530:	00000000 	.word	0x00000000
 8009534:	10000000 	.word	0x10000000

08009538 <__math_oflow>:
 8009538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009540 <__math_oflow+0x8>
 800953c:	f7ff bfd8 	b.w	80094f0 <xflow>
 8009540:	00000000 	.word	0x00000000
 8009544:	70000000 	.word	0x70000000

08009548 <__kernel_rem_pio2>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	ed2d 8b02 	vpush	{d8}
 8009550:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009554:	f112 0f14 	cmn.w	r2, #20
 8009558:	9306      	str	r3, [sp, #24]
 800955a:	9104      	str	r1, [sp, #16]
 800955c:	4bc2      	ldr	r3, [pc, #776]	@ (8009868 <__kernel_rem_pio2+0x320>)
 800955e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009560:	9008      	str	r0, [sp, #32]
 8009562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	9b06      	ldr	r3, [sp, #24]
 800956a:	f103 33ff 	add.w	r3, r3, #4294967295
 800956e:	bfa8      	it	ge
 8009570:	1ed4      	subge	r4, r2, #3
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	bfb2      	itee	lt
 8009576:	2400      	movlt	r4, #0
 8009578:	2318      	movge	r3, #24
 800957a:	fb94 f4f3 	sdivge	r4, r4, r3
 800957e:	f06f 0317 	mvn.w	r3, #23
 8009582:	fb04 3303 	mla	r3, r4, r3, r3
 8009586:	eb03 0b02 	add.w	fp, r3, r2
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	9a05      	ldr	r2, [sp, #20]
 800958e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009858 <__kernel_rem_pio2+0x310>
 8009592:	eb03 0802 	add.w	r8, r3, r2
 8009596:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009598:	1aa7      	subs	r7, r4, r2
 800959a:	ae20      	add	r6, sp, #128	@ 0x80
 800959c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80095a0:	2500      	movs	r5, #0
 80095a2:	4545      	cmp	r5, r8
 80095a4:	dd12      	ble.n	80095cc <__kernel_rem_pio2+0x84>
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	aa20      	add	r2, sp, #128	@ 0x80
 80095aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80095ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80095b2:	2700      	movs	r7, #0
 80095b4:	9b00      	ldr	r3, [sp, #0]
 80095b6:	429f      	cmp	r7, r3
 80095b8:	dc2e      	bgt.n	8009618 <__kernel_rem_pio2+0xd0>
 80095ba:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009858 <__kernel_rem_pio2+0x310>
 80095be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095c6:	46a8      	mov	r8, r5
 80095c8:	2600      	movs	r6, #0
 80095ca:	e01b      	b.n	8009604 <__kernel_rem_pio2+0xbc>
 80095cc:	42ef      	cmn	r7, r5
 80095ce:	d407      	bmi.n	80095e0 <__kernel_rem_pio2+0x98>
 80095d0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80095d4:	f7f6 ffc6 	bl	8000564 <__aeabi_i2d>
 80095d8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80095dc:	3501      	adds	r5, #1
 80095de:	e7e0      	b.n	80095a2 <__kernel_rem_pio2+0x5a>
 80095e0:	ec51 0b18 	vmov	r0, r1, d8
 80095e4:	e7f8      	b.n	80095d8 <__kernel_rem_pio2+0x90>
 80095e6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80095ea:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80095ee:	f7f7 f823 	bl	8000638 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fa:	f7f6 fe67 	bl	80002cc <__adddf3>
 80095fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009602:	3601      	adds	r6, #1
 8009604:	9b05      	ldr	r3, [sp, #20]
 8009606:	429e      	cmp	r6, r3
 8009608:	dded      	ble.n	80095e6 <__kernel_rem_pio2+0x9e>
 800960a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800960e:	3701      	adds	r7, #1
 8009610:	ecaa 7b02 	vstmia	sl!, {d7}
 8009614:	3508      	adds	r5, #8
 8009616:	e7cd      	b.n	80095b4 <__kernel_rem_pio2+0x6c>
 8009618:	9b00      	ldr	r3, [sp, #0]
 800961a:	f8dd 8000 	ldr.w	r8, [sp]
 800961e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009624:	930a      	str	r3, [sp, #40]	@ 0x28
 8009626:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009628:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800962c:	9309      	str	r3, [sp, #36]	@ 0x24
 800962e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009634:	ab98      	add	r3, sp, #608	@ 0x260
 8009636:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800963a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800963e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009642:	ac0c      	add	r4, sp, #48	@ 0x30
 8009644:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009646:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800964a:	46a1      	mov	r9, r4
 800964c:	46c2      	mov	sl, r8
 800964e:	f1ba 0f00 	cmp.w	sl, #0
 8009652:	dc77      	bgt.n	8009744 <__kernel_rem_pio2+0x1fc>
 8009654:	4658      	mov	r0, fp
 8009656:	ed9d 0b02 	vldr	d0, [sp, #8]
 800965a:	f7ff febd 	bl	80093d8 <scalbn>
 800965e:	ec57 6b10 	vmov	r6, r7, d0
 8009662:	2200      	movs	r2, #0
 8009664:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f6 ffe4 	bl	8000638 <__aeabi_dmul>
 8009670:	ec41 0b10 	vmov	d0, r0, r1
 8009674:	f000 fab8 	bl	8009be8 <floor>
 8009678:	4b7c      	ldr	r3, [pc, #496]	@ (800986c <__kernel_rem_pio2+0x324>)
 800967a:	ec51 0b10 	vmov	r0, r1, d0
 800967e:	2200      	movs	r2, #0
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f6 fe1c 	bl	80002c8 <__aeabi_dsub>
 8009690:	460f      	mov	r7, r1
 8009692:	4606      	mov	r6, r0
 8009694:	f7f7 fa80 	bl	8000b98 <__aeabi_d2iz>
 8009698:	9002      	str	r0, [sp, #8]
 800969a:	f7f6 ff63 	bl	8000564 <__aeabi_i2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f6 fe0f 	bl	80002c8 <__aeabi_dsub>
 80096aa:	f1bb 0f00 	cmp.w	fp, #0
 80096ae:	4606      	mov	r6, r0
 80096b0:	460f      	mov	r7, r1
 80096b2:	dd6c      	ble.n	800978e <__kernel_rem_pio2+0x246>
 80096b4:	f108 31ff 	add.w	r1, r8, #4294967295
 80096b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80096ba:	9d02      	ldr	r5, [sp, #8]
 80096bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096c0:	f1cb 0018 	rsb	r0, fp, #24
 80096c4:	fa43 f200 	asr.w	r2, r3, r0
 80096c8:	4415      	add	r5, r2
 80096ca:	4082      	lsls	r2, r0
 80096cc:	1a9b      	subs	r3, r3, r2
 80096ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80096d0:	9502      	str	r5, [sp, #8]
 80096d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80096d6:	f1cb 0217 	rsb	r2, fp, #23
 80096da:	fa43 f902 	asr.w	r9, r3, r2
 80096de:	f1b9 0f00 	cmp.w	r9, #0
 80096e2:	dd64      	ble.n	80097ae <__kernel_rem_pio2+0x266>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	3301      	adds	r3, #1
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	4615      	mov	r5, r2
 80096ee:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80096f2:	4590      	cmp	r8, r2
 80096f4:	f300 80a1 	bgt.w	800983a <__kernel_rem_pio2+0x2f2>
 80096f8:	f1bb 0f00 	cmp.w	fp, #0
 80096fc:	dd07      	ble.n	800970e <__kernel_rem_pio2+0x1c6>
 80096fe:	f1bb 0f01 	cmp.w	fp, #1
 8009702:	f000 80c1 	beq.w	8009888 <__kernel_rem_pio2+0x340>
 8009706:	f1bb 0f02 	cmp.w	fp, #2
 800970a:	f000 80c8 	beq.w	800989e <__kernel_rem_pio2+0x356>
 800970e:	f1b9 0f02 	cmp.w	r9, #2
 8009712:	d14c      	bne.n	80097ae <__kernel_rem_pio2+0x266>
 8009714:	4632      	mov	r2, r6
 8009716:	463b      	mov	r3, r7
 8009718:	4955      	ldr	r1, [pc, #340]	@ (8009870 <__kernel_rem_pio2+0x328>)
 800971a:	2000      	movs	r0, #0
 800971c:	f7f6 fdd4 	bl	80002c8 <__aeabi_dsub>
 8009720:	4606      	mov	r6, r0
 8009722:	460f      	mov	r7, r1
 8009724:	2d00      	cmp	r5, #0
 8009726:	d042      	beq.n	80097ae <__kernel_rem_pio2+0x266>
 8009728:	4658      	mov	r0, fp
 800972a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009860 <__kernel_rem_pio2+0x318>
 800972e:	f7ff fe53 	bl	80093d8 <scalbn>
 8009732:	4630      	mov	r0, r6
 8009734:	4639      	mov	r1, r7
 8009736:	ec53 2b10 	vmov	r2, r3, d0
 800973a:	f7f6 fdc5 	bl	80002c8 <__aeabi_dsub>
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	e034      	b.n	80097ae <__kernel_rem_pio2+0x266>
 8009744:	4b4b      	ldr	r3, [pc, #300]	@ (8009874 <__kernel_rem_pio2+0x32c>)
 8009746:	2200      	movs	r2, #0
 8009748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974c:	f7f6 ff74 	bl	8000638 <__aeabi_dmul>
 8009750:	f7f7 fa22 	bl	8000b98 <__aeabi_d2iz>
 8009754:	f7f6 ff06 	bl	8000564 <__aeabi_i2d>
 8009758:	4b47      	ldr	r3, [pc, #284]	@ (8009878 <__kernel_rem_pio2+0x330>)
 800975a:	2200      	movs	r2, #0
 800975c:	4606      	mov	r6, r0
 800975e:	460f      	mov	r7, r1
 8009760:	f7f6 ff6a 	bl	8000638 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976c:	f7f6 fdac 	bl	80002c8 <__aeabi_dsub>
 8009770:	f7f7 fa12 	bl	8000b98 <__aeabi_d2iz>
 8009774:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009778:	f849 0b04 	str.w	r0, [r9], #4
 800977c:	4639      	mov	r1, r7
 800977e:	4630      	mov	r0, r6
 8009780:	f7f6 fda4 	bl	80002cc <__adddf3>
 8009784:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800978c:	e75f      	b.n	800964e <__kernel_rem_pio2+0x106>
 800978e:	d107      	bne.n	80097a0 <__kernel_rem_pio2+0x258>
 8009790:	f108 33ff 	add.w	r3, r8, #4294967295
 8009794:	aa0c      	add	r2, sp, #48	@ 0x30
 8009796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800979a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800979e:	e79e      	b.n	80096de <__kernel_rem_pio2+0x196>
 80097a0:	4b36      	ldr	r3, [pc, #216]	@ (800987c <__kernel_rem_pio2+0x334>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	f7f7 f9ce 	bl	8000b44 <__aeabi_dcmpge>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d143      	bne.n	8009834 <__kernel_rem_pio2+0x2ec>
 80097ac:	4681      	mov	r9, r0
 80097ae:	2200      	movs	r2, #0
 80097b0:	2300      	movs	r3, #0
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 f9a7 	bl	8000b08 <__aeabi_dcmpeq>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f000 80c1 	beq.w	8009942 <__kernel_rem_pio2+0x3fa>
 80097c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80097c4:	2200      	movs	r2, #0
 80097c6:	9900      	ldr	r1, [sp, #0]
 80097c8:	428b      	cmp	r3, r1
 80097ca:	da70      	bge.n	80098ae <__kernel_rem_pio2+0x366>
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	f000 808b 	beq.w	80098e8 <__kernel_rem_pio2+0x3a0>
 80097d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80097d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80097d8:	f1ab 0b18 	sub.w	fp, fp, #24
 80097dc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f6      	beq.n	80097d2 <__kernel_rem_pio2+0x28a>
 80097e4:	4658      	mov	r0, fp
 80097e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009860 <__kernel_rem_pio2+0x318>
 80097ea:	f7ff fdf5 	bl	80093d8 <scalbn>
 80097ee:	f108 0301 	add.w	r3, r8, #1
 80097f2:	00da      	lsls	r2, r3, #3
 80097f4:	9205      	str	r2, [sp, #20]
 80097f6:	ec55 4b10 	vmov	r4, r5, d0
 80097fa:	aa70      	add	r2, sp, #448	@ 0x1c0
 80097fc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009874 <__kernel_rem_pio2+0x32c>
 8009800:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009804:	4646      	mov	r6, r8
 8009806:	f04f 0a00 	mov.w	sl, #0
 800980a:	2e00      	cmp	r6, #0
 800980c:	f280 80d1 	bge.w	80099b2 <__kernel_rem_pio2+0x46a>
 8009810:	4644      	mov	r4, r8
 8009812:	2c00      	cmp	r4, #0
 8009814:	f2c0 80ff 	blt.w	8009a16 <__kernel_rem_pio2+0x4ce>
 8009818:	4b19      	ldr	r3, [pc, #100]	@ (8009880 <__kernel_rem_pio2+0x338>)
 800981a:	461f      	mov	r7, r3
 800981c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800981e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	f04f 0a00 	mov.w	sl, #0
 8009828:	f04f 0b00 	mov.w	fp, #0
 800982c:	2600      	movs	r6, #0
 800982e:	eba8 0504 	sub.w	r5, r8, r4
 8009832:	e0e4      	b.n	80099fe <__kernel_rem_pio2+0x4b6>
 8009834:	f04f 0902 	mov.w	r9, #2
 8009838:	e754      	b.n	80096e4 <__kernel_rem_pio2+0x19c>
 800983a:	f854 3b04 	ldr.w	r3, [r4], #4
 800983e:	bb0d      	cbnz	r5, 8009884 <__kernel_rem_pio2+0x33c>
 8009840:	b123      	cbz	r3, 800984c <__kernel_rem_pio2+0x304>
 8009842:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009846:	f844 3c04 	str.w	r3, [r4, #-4]
 800984a:	2301      	movs	r3, #1
 800984c:	3201      	adds	r2, #1
 800984e:	461d      	mov	r5, r3
 8009850:	e74f      	b.n	80096f2 <__kernel_rem_pio2+0x1aa>
 8009852:	bf00      	nop
 8009854:	f3af 8000 	nop.w
	...
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	0800a330 	.word	0x0800a330
 800986c:	40200000 	.word	0x40200000
 8009870:	3ff00000 	.word	0x3ff00000
 8009874:	3e700000 	.word	0x3e700000
 8009878:	41700000 	.word	0x41700000
 800987c:	3fe00000 	.word	0x3fe00000
 8009880:	0800a2f0 	.word	0x0800a2f0
 8009884:	1acb      	subs	r3, r1, r3
 8009886:	e7de      	b.n	8009846 <__kernel_rem_pio2+0x2fe>
 8009888:	f108 32ff 	add.w	r2, r8, #4294967295
 800988c:	ab0c      	add	r3, sp, #48	@ 0x30
 800988e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009892:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009896:	a90c      	add	r1, sp, #48	@ 0x30
 8009898:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800989c:	e737      	b.n	800970e <__kernel_rem_pio2+0x1c6>
 800989e:	f108 32ff 	add.w	r2, r8, #4294967295
 80098a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80098ac:	e7f3      	b.n	8009896 <__kernel_rem_pio2+0x34e>
 80098ae:	a90c      	add	r1, sp, #48	@ 0x30
 80098b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	430a      	orrs	r2, r1
 80098b8:	e785      	b.n	80097c6 <__kernel_rem_pio2+0x27e>
 80098ba:	3401      	adds	r4, #1
 80098bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	d0fa      	beq.n	80098ba <__kernel_rem_pio2+0x372>
 80098c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80098ca:	eb0d 0503 	add.w	r5, sp, r3
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	aa20      	add	r2, sp, #128	@ 0x80
 80098d2:	4443      	add	r3, r8
 80098d4:	f108 0701 	add.w	r7, r8, #1
 80098d8:	3d98      	subs	r5, #152	@ 0x98
 80098da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80098de:	4444      	add	r4, r8
 80098e0:	42bc      	cmp	r4, r7
 80098e2:	da04      	bge.n	80098ee <__kernel_rem_pio2+0x3a6>
 80098e4:	46a0      	mov	r8, r4
 80098e6:	e6a2      	b.n	800962e <__kernel_rem_pio2+0xe6>
 80098e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ea:	2401      	movs	r4, #1
 80098ec:	e7e6      	b.n	80098bc <__kernel_rem_pio2+0x374>
 80098ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80098f4:	f7f6 fe36 	bl	8000564 <__aeabi_i2d>
 80098f8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009bb8 <__kernel_rem_pio2+0x670>
 80098fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009900:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009908:	46b2      	mov	sl, r6
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	9b05      	ldr	r3, [sp, #20]
 8009910:	4598      	cmp	r8, r3
 8009912:	dd05      	ble.n	8009920 <__kernel_rem_pio2+0x3d8>
 8009914:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009918:	3701      	adds	r7, #1
 800991a:	eca5 7b02 	vstmia	r5!, {d7}
 800991e:	e7df      	b.n	80098e0 <__kernel_rem_pio2+0x398>
 8009920:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009924:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009928:	f7f6 fe86 	bl	8000638 <__aeabi_dmul>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009934:	f7f6 fcca 	bl	80002cc <__adddf3>
 8009938:	f108 0801 	add.w	r8, r8, #1
 800993c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009940:	e7e5      	b.n	800990e <__kernel_rem_pio2+0x3c6>
 8009942:	f1cb 0000 	rsb	r0, fp, #0
 8009946:	ec47 6b10 	vmov	d0, r6, r7
 800994a:	f7ff fd45 	bl	80093d8 <scalbn>
 800994e:	ec55 4b10 	vmov	r4, r5, d0
 8009952:	4b9b      	ldr	r3, [pc, #620]	@ (8009bc0 <__kernel_rem_pio2+0x678>)
 8009954:	2200      	movs	r2, #0
 8009956:	4620      	mov	r0, r4
 8009958:	4629      	mov	r1, r5
 800995a:	f7f7 f8f3 	bl	8000b44 <__aeabi_dcmpge>
 800995e:	b300      	cbz	r0, 80099a2 <__kernel_rem_pio2+0x45a>
 8009960:	4b98      	ldr	r3, [pc, #608]	@ (8009bc4 <__kernel_rem_pio2+0x67c>)
 8009962:	2200      	movs	r2, #0
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fe66 	bl	8000638 <__aeabi_dmul>
 800996c:	f7f7 f914 	bl	8000b98 <__aeabi_d2iz>
 8009970:	4606      	mov	r6, r0
 8009972:	f7f6 fdf7 	bl	8000564 <__aeabi_i2d>
 8009976:	4b92      	ldr	r3, [pc, #584]	@ (8009bc0 <__kernel_rem_pio2+0x678>)
 8009978:	2200      	movs	r2, #0
 800997a:	f7f6 fe5d 	bl	8000638 <__aeabi_dmul>
 800997e:	460b      	mov	r3, r1
 8009980:	4602      	mov	r2, r0
 8009982:	4629      	mov	r1, r5
 8009984:	4620      	mov	r0, r4
 8009986:	f7f6 fc9f 	bl	80002c8 <__aeabi_dsub>
 800998a:	f7f7 f905 	bl	8000b98 <__aeabi_d2iz>
 800998e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009990:	f10b 0b18 	add.w	fp, fp, #24
 8009994:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009998:	f108 0801 	add.w	r8, r8, #1
 800999c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80099a0:	e720      	b.n	80097e4 <__kernel_rem_pio2+0x29c>
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f7 f8f7 	bl	8000b98 <__aeabi_d2iz>
 80099aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80099ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80099b0:	e718      	b.n	80097e4 <__kernel_rem_pio2+0x29c>
 80099b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80099b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099b8:	f7f6 fdd4 	bl	8000564 <__aeabi_i2d>
 80099bc:	4622      	mov	r2, r4
 80099be:	462b      	mov	r3, r5
 80099c0:	f7f6 fe3a 	bl	8000638 <__aeabi_dmul>
 80099c4:	4652      	mov	r2, sl
 80099c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80099ca:	465b      	mov	r3, fp
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fe32 	bl	8000638 <__aeabi_dmul>
 80099d4:	3e01      	subs	r6, #1
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	e716      	b.n	800980a <__kernel_rem_pio2+0x2c2>
 80099dc:	9906      	ldr	r1, [sp, #24]
 80099de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80099e2:	9106      	str	r1, [sp, #24]
 80099e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4650      	mov	r0, sl
 80099f2:	4659      	mov	r1, fp
 80099f4:	f7f6 fc6a 	bl	80002cc <__adddf3>
 80099f8:	3601      	adds	r6, #1
 80099fa:	4682      	mov	sl, r0
 80099fc:	468b      	mov	fp, r1
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	429e      	cmp	r6, r3
 8009a02:	dc01      	bgt.n	8009a08 <__kernel_rem_pio2+0x4c0>
 8009a04:	42ae      	cmp	r6, r5
 8009a06:	dde9      	ble.n	80099dc <__kernel_rem_pio2+0x494>
 8009a08:	ab48      	add	r3, sp, #288	@ 0x120
 8009a0a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a0e:	e9c5 ab00 	strd	sl, fp, [r5]
 8009a12:	3c01      	subs	r4, #1
 8009a14:	e6fd      	b.n	8009812 <__kernel_rem_pio2+0x2ca>
 8009a16:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	dc0b      	bgt.n	8009a34 <__kernel_rem_pio2+0x4ec>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dc35      	bgt.n	8009a8c <__kernel_rem_pio2+0x544>
 8009a20:	d059      	beq.n	8009ad6 <__kernel_rem_pio2+0x58e>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	f003 0007 	and.w	r0, r3, #7
 8009a28:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009a2c:	ecbd 8b02 	vpop	{d8}
 8009a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a34:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d1f3      	bne.n	8009a22 <__kernel_rem_pio2+0x4da>
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a40:	eb0d 0403 	add.w	r4, sp, r3
 8009a44:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009a48:	4625      	mov	r5, r4
 8009a4a:	46c2      	mov	sl, r8
 8009a4c:	f1ba 0f00 	cmp.w	sl, #0
 8009a50:	dc69      	bgt.n	8009b26 <__kernel_rem_pio2+0x5de>
 8009a52:	4645      	mov	r5, r8
 8009a54:	2d01      	cmp	r5, #1
 8009a56:	f300 8087 	bgt.w	8009b68 <__kernel_rem_pio2+0x620>
 8009a5a:	9c05      	ldr	r4, [sp, #20]
 8009a5c:	ab48      	add	r3, sp, #288	@ 0x120
 8009a5e:	441c      	add	r4, r3
 8009a60:	2000      	movs	r0, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	f1b8 0f01 	cmp.w	r8, #1
 8009a68:	f300 809c 	bgt.w	8009ba4 <__kernel_rem_pio2+0x65c>
 8009a6c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009a70:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009a74:	f1b9 0f00 	cmp.w	r9, #0
 8009a78:	f040 80a6 	bne.w	8009bc8 <__kernel_rem_pio2+0x680>
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	e9c3 5600 	strd	r5, r6, [r3]
 8009a82:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009a86:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009a8a:	e7ca      	b.n	8009a22 <__kernel_rem_pio2+0x4da>
 8009a8c:	9d05      	ldr	r5, [sp, #20]
 8009a8e:	ab48      	add	r3, sp, #288	@ 0x120
 8009a90:	441d      	add	r5, r3
 8009a92:	4644      	mov	r4, r8
 8009a94:	2000      	movs	r0, #0
 8009a96:	2100      	movs	r1, #0
 8009a98:	2c00      	cmp	r4, #0
 8009a9a:	da35      	bge.n	8009b08 <__kernel_rem_pio2+0x5c0>
 8009a9c:	f1b9 0f00 	cmp.w	r9, #0
 8009aa0:	d038      	beq.n	8009b14 <__kernel_rem_pio2+0x5cc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009aa8:	9c04      	ldr	r4, [sp, #16]
 8009aaa:	e9c4 2300 	strd	r2, r3, [r4]
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009ab6:	f7f6 fc07 	bl	80002c8 <__aeabi_dsub>
 8009aba:	ad4a      	add	r5, sp, #296	@ 0x128
 8009abc:	2401      	movs	r4, #1
 8009abe:	45a0      	cmp	r8, r4
 8009ac0:	da2b      	bge.n	8009b1a <__kernel_rem_pio2+0x5d2>
 8009ac2:	f1b9 0f00 	cmp.w	r9, #0
 8009ac6:	d002      	beq.n	8009ace <__kernel_rem_pio2+0x586>
 8009ac8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009acc:	4619      	mov	r1, r3
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009ad4:	e7a5      	b.n	8009a22 <__kernel_rem_pio2+0x4da>
 8009ad6:	9c05      	ldr	r4, [sp, #20]
 8009ad8:	ab48      	add	r3, sp, #288	@ 0x120
 8009ada:	441c      	add	r4, r3
 8009adc:	2000      	movs	r0, #0
 8009ade:	2100      	movs	r1, #0
 8009ae0:	f1b8 0f00 	cmp.w	r8, #0
 8009ae4:	da09      	bge.n	8009afa <__kernel_rem_pio2+0x5b2>
 8009ae6:	f1b9 0f00 	cmp.w	r9, #0
 8009aea:	d002      	beq.n	8009af2 <__kernel_rem_pio2+0x5aa>
 8009aec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009af0:	4619      	mov	r1, r3
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	e9c3 0100 	strd	r0, r1, [r3]
 8009af8:	e793      	b.n	8009a22 <__kernel_rem_pio2+0x4da>
 8009afa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009afe:	f7f6 fbe5 	bl	80002cc <__adddf3>
 8009b02:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b06:	e7eb      	b.n	8009ae0 <__kernel_rem_pio2+0x598>
 8009b08:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009b0c:	f7f6 fbde 	bl	80002cc <__adddf3>
 8009b10:	3c01      	subs	r4, #1
 8009b12:	e7c1      	b.n	8009a98 <__kernel_rem_pio2+0x550>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e7c6      	b.n	8009aa8 <__kernel_rem_pio2+0x560>
 8009b1a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009b1e:	f7f6 fbd5 	bl	80002cc <__adddf3>
 8009b22:	3401      	adds	r4, #1
 8009b24:	e7cb      	b.n	8009abe <__kernel_rem_pio2+0x576>
 8009b26:	ed35 7b02 	vldmdb	r5!, {d7}
 8009b2a:	ed8d 7b00 	vstr	d7, [sp]
 8009b2e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009b32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b36:	ec53 2b17 	vmov	r2, r3, d7
 8009b3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b3e:	f7f6 fbc5 	bl	80002cc <__adddf3>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4e:	f7f6 fbbb 	bl	80002c8 <__aeabi_dsub>
 8009b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b56:	f7f6 fbb9 	bl	80002cc <__adddf3>
 8009b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b5e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009b62:	e9c5 6700 	strd	r6, r7, [r5]
 8009b66:	e771      	b.n	8009a4c <__kernel_rem_pio2+0x504>
 8009b68:	ed34 7b02 	vldmdb	r4!, {d7}
 8009b6c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009b70:	ec51 0b17 	vmov	r0, r1, d7
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	ed8d 7b00 	vstr	d7, [sp]
 8009b7c:	f7f6 fba6 	bl	80002cc <__adddf3>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4606      	mov	r6, r0
 8009b86:	460f      	mov	r7, r1
 8009b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b8c:	f7f6 fb9c 	bl	80002c8 <__aeabi_dsub>
 8009b90:	4652      	mov	r2, sl
 8009b92:	465b      	mov	r3, fp
 8009b94:	f7f6 fb9a 	bl	80002cc <__adddf3>
 8009b98:	3d01      	subs	r5, #1
 8009b9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b9e:	e9c4 6700 	strd	r6, r7, [r4]
 8009ba2:	e757      	b.n	8009a54 <__kernel_rem_pio2+0x50c>
 8009ba4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ba8:	f7f6 fb90 	bl	80002cc <__adddf3>
 8009bac:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bb0:	e758      	b.n	8009a64 <__kernel_rem_pio2+0x51c>
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
	...
 8009bc0:	41700000 	.word	0x41700000
 8009bc4:	3e700000 	.word	0x3e700000
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	9a04      	ldr	r2, [sp, #16]
 8009bcc:	601d      	str	r5, [r3, #0]
 8009bce:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009bd2:	605c      	str	r4, [r3, #4]
 8009bd4:	609f      	str	r7, [r3, #8]
 8009bd6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009bda:	60d3      	str	r3, [r2, #12]
 8009bdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009be0:	6110      	str	r0, [r2, #16]
 8009be2:	6153      	str	r3, [r2, #20]
 8009be4:	e71d      	b.n	8009a22 <__kernel_rem_pio2+0x4da>
 8009be6:	bf00      	nop

08009be8 <floor>:
 8009be8:	ec51 0b10 	vmov	r0, r1, d0
 8009bec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009bf8:	2e13      	cmp	r6, #19
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	4680      	mov	r8, r0
 8009c00:	dc34      	bgt.n	8009c6c <floor+0x84>
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	da17      	bge.n	8009c36 <floor+0x4e>
 8009c06:	a332      	add	r3, pc, #200	@ (adr r3, 8009cd0 <floor+0xe8>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fb5e 	bl	80002cc <__adddf3>
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	f7f6 ffa0 	bl	8000b58 <__aeabi_dcmpgt>
 8009c18:	b150      	cbz	r0, 8009c30 <floor+0x48>
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	da55      	bge.n	8009cca <floor+0xe2>
 8009c1e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009c22:	432c      	orrs	r4, r5
 8009c24:	2500      	movs	r5, #0
 8009c26:	42ac      	cmp	r4, r5
 8009c28:	4c2b      	ldr	r4, [pc, #172]	@ (8009cd8 <floor+0xf0>)
 8009c2a:	bf08      	it	eq
 8009c2c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009c30:	4621      	mov	r1, r4
 8009c32:	4628      	mov	r0, r5
 8009c34:	e023      	b.n	8009c7e <floor+0x96>
 8009c36:	4f29      	ldr	r7, [pc, #164]	@ (8009cdc <floor+0xf4>)
 8009c38:	4137      	asrs	r7, r6
 8009c3a:	ea01 0307 	and.w	r3, r1, r7
 8009c3e:	4303      	orrs	r3, r0
 8009c40:	d01d      	beq.n	8009c7e <floor+0x96>
 8009c42:	a323      	add	r3, pc, #140	@ (adr r3, 8009cd0 <floor+0xe8>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fb40 	bl	80002cc <__adddf3>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f7f6 ff82 	bl	8000b58 <__aeabi_dcmpgt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d0eb      	beq.n	8009c30 <floor+0x48>
 8009c58:	2c00      	cmp	r4, #0
 8009c5a:	bfbe      	ittt	lt
 8009c5c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009c60:	4133      	asrlt	r3, r6
 8009c62:	18e4      	addlt	r4, r4, r3
 8009c64:	ea24 0407 	bic.w	r4, r4, r7
 8009c68:	2500      	movs	r5, #0
 8009c6a:	e7e1      	b.n	8009c30 <floor+0x48>
 8009c6c:	2e33      	cmp	r6, #51	@ 0x33
 8009c6e:	dd0a      	ble.n	8009c86 <floor+0x9e>
 8009c70:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009c74:	d103      	bne.n	8009c7e <floor+0x96>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	f7f6 fb27 	bl	80002cc <__adddf3>
 8009c7e:	ec41 0b10 	vmov	d0, r0, r1
 8009c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c86:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009c8a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c8e:	40df      	lsrs	r7, r3
 8009c90:	4207      	tst	r7, r0
 8009c92:	d0f4      	beq.n	8009c7e <floor+0x96>
 8009c94:	a30e      	add	r3, pc, #56	@ (adr r3, 8009cd0 <floor+0xe8>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 fb17 	bl	80002cc <__adddf3>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f7f6 ff59 	bl	8000b58 <__aeabi_dcmpgt>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0c2      	beq.n	8009c30 <floor+0x48>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	da0a      	bge.n	8009cc4 <floor+0xdc>
 8009cae:	2e14      	cmp	r6, #20
 8009cb0:	d101      	bne.n	8009cb6 <floor+0xce>
 8009cb2:	3401      	adds	r4, #1
 8009cb4:	e006      	b.n	8009cc4 <floor+0xdc>
 8009cb6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009cba:	2301      	movs	r3, #1
 8009cbc:	40b3      	lsls	r3, r6
 8009cbe:	441d      	add	r5, r3
 8009cc0:	4545      	cmp	r5, r8
 8009cc2:	d3f6      	bcc.n	8009cb2 <floor+0xca>
 8009cc4:	ea25 0507 	bic.w	r5, r5, r7
 8009cc8:	e7b2      	b.n	8009c30 <floor+0x48>
 8009cca:	2500      	movs	r5, #0
 8009ccc:	462c      	mov	r4, r5
 8009cce:	e7af      	b.n	8009c30 <floor+0x48>
 8009cd0:	8800759c 	.word	0x8800759c
 8009cd4:	7e37e43c 	.word	0x7e37e43c
 8009cd8:	bff00000 	.word	0xbff00000
 8009cdc:	000fffff 	.word	0x000fffff

08009ce0 <_init>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr

08009cec <_fini>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr
