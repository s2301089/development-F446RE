
20250310_0iti1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  0800433c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800433c  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac90  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb3  00000000  00000000  00010d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00012ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000699  00000000  00000000  000135a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227a5  00000000  00000000  00013c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3b5  00000000  00000000  000363de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caccb  00000000  00000000  00042793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d45e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  0010d4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0010feb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004238 	.word	0x08004238

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004238 	.word	0x08004238

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <halfX>:
 *      Author: Mitsu
 */

#include <STconhalf.h>

signed char halfX(uint8_t X){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if(X > 0x7f - TOLE_VALUE && X < 0x7f + TOLE_VALUE){
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b75      	cmp	r3, #117	@ 0x75
 80005ea:	d904      	bls.n	80005f6 <halfX+0x1a>
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b88      	cmp	r3, #136	@ 0x88
 80005f0:	d801      	bhi.n	80005f6 <halfX+0x1a>
		return 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e008      	b.n	8000608 <halfX+0x2c>
	}else {
		if(X - 0x7f < -0x7f){
			return -0x7f;
		}else if(X - 0x7f > 0x7f){
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2bff      	cmp	r3, #255	@ 0xff
 80005fa:	d101      	bne.n	8000600 <halfX+0x24>
			return 0x7f;
 80005fc:	237f      	movs	r3, #127	@ 0x7f
 80005fe:	e003      	b.n	8000608 <halfX+0x2c>
		}else {
			return X - 0x7f;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3b7f      	subs	r3, #127	@ 0x7f
 8000604:	b2db      	uxtb	r3, r3
 8000606:	b25b      	sxtb	r3, r3
		}
	}
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <halfY>:

signed char halfY(uint8_t Y){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	if(Y > 0x7f - TOLE_VALUE && Y < 0x7f + TOLE_VALUE){
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b75      	cmp	r3, #117	@ 0x75
 8000622:	d904      	bls.n	800062e <halfY+0x1a>
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b88      	cmp	r3, #136	@ 0x88
 8000628:	d801      	bhi.n	800062e <halfY+0x1a>
		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e00d      	b.n	800064a <halfY+0x36>
	}else {
		if(0x7f - Y < -0x7f){
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000634:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8000638:	da02      	bge.n	8000640 <halfY+0x2c>
			return -0x7f;
 800063a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800063e:	e004      	b.n	800064a <halfY+0x36>
		}else if(0x7f - Y > 0x7f){
			return 0x7f;
		}else {
			return 0x7f - Y;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b25b      	sxtb	r3, r3
		}
	}
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <STprintf+0x24>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fec7 	bl	80033fc <setbuf>
	Huart = huart;
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <STprintf+0x28>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000018 	.word	0x20000018
 8000680:	20000084 	.word	0x20000084

08000684 <_write>:

int _write(int file,char *ptr,int len){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <_write+0x28>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	b29a      	uxth	r2, r3
 8000698:	230a      	movs	r3, #10
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	f001 fdd4 	bl	8002248 <HAL_UART_Transmit>
	return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000084 	.word	0x20000084

080006b0 <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	FAF = 0;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <getDataIT+0x20>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	4904      	ldr	r1, [pc, #16]	@ (80006d4 <getDataIT+0x24>)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f001 fe4b 	bl	800235e <HAL_UART_Receive_IT>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000095 	.word	0x20000095
 80006d4:	20000093 	.word	0x20000093

080006d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	FAF = 1;
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <HAL_UART_RxCpltCallback+0x94>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <HAL_UART_RxCpltCallback+0x98>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2baf      	cmp	r3, #175	@ 0xaf
 80006ec:	d106      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 80006ee:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <HAL_UART_RxCpltCallback+0x9c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 80006f4:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00b      	b.n	8000714 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_UART_RxCpltCallback+0xa4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <HAL_UART_RxCpltCallback+0xa4>)
 8000704:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <HAL_UART_RxCpltCallback+0xa4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b09      	cmp	r3, #9
 800070c:	dd02      	ble.n	8000714 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_UART_RxCpltCallback+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_UART_RxCpltCallback+0x9c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01e      	beq.n	800075a <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <HAL_UART_RxCpltCallback+0x98>)
 8000722:	7811      	ldrb	r1, [r2, #0]
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <HAL_UART_RxCpltCallback+0xa8>)
 8000726:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 8000730:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b0b      	cmp	r3, #11
 8000738:	d10f      	bne.n	800075a <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_UART_RxCpltCallback+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 8000740:	480f      	ldr	r0, [pc, #60]	@ (8000780 <HAL_UART_RxCpltCallback+0xa8>)
 8000742:	f000 f821 	bl	8000788 <ChSUM>
 8000746:	4603      	mov	r3, r0
 8000748:	2bed      	cmp	r3, #237	@ 0xed
 800074a:	d103      	bne.n	8000754 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 800074c:	490c      	ldr	r1, [pc, #48]	@ (8000780 <HAL_UART_RxCpltCallback+0xa8>)
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <HAL_UART_RxCpltCallback+0xac>)
 8000750:	f000 f846 	bl	80007e0 <AddStruct>
			}
			GIcount = 0;
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_UART_RxCpltCallback+0xa0>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	4904      	ldr	r1, [pc, #16]	@ (8000770 <HAL_UART_RxCpltCallback+0x98>)
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f001 fdfd 	bl	800235e <HAL_UART_Receive_IT>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000095 	.word	0x20000095
 8000770:	20000093 	.word	0x20000093
 8000774:	20000094 	.word	0x20000094
 8000778:	200000b0 	.word	0x200000b0
 800077c:	200000b4 	.word	0x200000b4
 8000780:	20000088 	.word	0x20000088
 8000784:	20000098 	.word	0x20000098

08000788 <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330a      	adds	r3, #10
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2bed      	cmp	r3, #237	@ 0xed
 8000798:	d11b      	bne.n	80007d2 <ChSUM+0x4a>
		uint8_t revsum = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 800079e:	2301      	movs	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	e009      	b.n	80007b8 <ChSUM+0x30>
			revsum += (int)Adata[i];
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	4413      	add	r3, r2
 80007b0:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	ddf2      	ble.n	80007a4 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3309      	adds	r3, #9
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	7bfa      	ldrb	r2, [r7, #15]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d101      	bne.n	80007ce <ChSUM+0x46>
			return 0xed;
 80007ca:	23ed      	movs	r3, #237	@ 0xed
 80007cc:	e002      	b.n	80007d4 <ChSUM+0x4c>
		}else{
			return 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 80007d2:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f8bb 	bl	8000966 <StructInit>
	Udata->LX = Adata[1];
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	785a      	ldrb	r2, [r3, #1]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	789a      	ldrb	r2, [r3, #2]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	795a      	ldrb	r2, [r3, #5]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	78da      	ldrb	r2, [r3, #3]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	791a      	ldrb	r2, [r3, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	799a      	ldrb	r2, [r3, #6]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3307      	adds	r3, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <AddStruct+0x54>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3307      	adds	r3, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <AddStruct+0x68>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	3307      	adds	r3, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <AddStruct+0x7c>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2201      	movs	r2, #1
 800085a:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3307      	adds	r3, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <AddStruct+0x90>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	3307      	adds	r3, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <AddStruct+0xa4>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3307      	adds	r3, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <AddStruct+0xb8>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2201      	movs	r2, #1
 8000896:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	3307      	adds	r3, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <AddStruct+0xcc>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2201      	movs	r2, #1
 80008aa:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3307      	adds	r3, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da02      	bge.n	80008be <AddStruct+0xde>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3308      	adds	r3, #8
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <AddStruct+0xf2>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2201      	movs	r2, #1
 80008d0:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3308      	adds	r3, #8
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <AddStruct+0x106>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2201      	movs	r2, #1
 80008e4:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3308      	adds	r3, #8
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <AddStruct+0x11a>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3308      	adds	r3, #8
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <AddStruct+0x12e>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3308      	adds	r3, #8
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <AddStruct+0x142>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3308      	adds	r3, #8
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <AddStruct+0x156>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3308      	adds	r3, #8
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <AddStruct+0x16a>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3308      	adds	r3, #8
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	da03      	bge.n	800095e <AddStruct+0x17e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	755a      	strb	r2, [r3, #21]

	return;
 800095c:	bf00      	nop
 800095e:	bf00      	nop
}
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <StructInit>:

void StructInit(getdata* Udata){
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2280      	movs	r2, #128	@ 0x80
 8000978:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	755a      	strb	r2, [r3, #21]

	return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fac3 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f843 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f8f5 	bl	8000bfc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a12:	f000 f89f 	bl	8000b54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a16:	f000 f8c7 	bl	8000ba8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 8000a1a:	4818      	ldr	r0, [pc, #96]	@ (8000a7c <main+0x7c>)
 8000a1c:	f7ff fe1c 	bl	8000658 <STprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart1);
 8000a20:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <main+0x80>)
 8000a22:	f7ff fe45 	bl	80006b0 <getDataIT>
//	  if(FAF == 1){
//		  AllShowP(data);
//	  }
	  printf("%d ",FAF);
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <main+0x84>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4816      	ldr	r0, [pc, #88]	@ (8000a88 <main+0x88>)
 8000a2e:	f002 fcd3 	bl	80033d8 <iprintf>
	  printf("LX:%+4d LY:%+4d RX:%+4d RY:%+4d \r\n",halfX(data.LX),halfY(data.LY),halfX(data.RX),halfY(data.RY));
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <main+0x8c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fdd0 	bl	80005dc <halfX>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461c      	mov	r4, r3
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <main+0x8c>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fde5 	bl	8000614 <halfY>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <main+0x8c>)
 8000a50:	78db      	ldrb	r3, [r3, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fdc2 	bl	80005dc <halfX>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461e      	mov	r6, r3
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <main+0x8c>)
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fdd7 	bl	8000614 <halfY>
 8000a66:	4603      	mov	r3, r0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4633      	mov	r3, r6
 8000a6c:	462a      	mov	r2, r5
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <main+0x90>)
 8000a72:	f002 fcb1 	bl	80033d8 <iprintf>
	  getDataIT(&huart1);
 8000a76:	bf00      	nop
 8000a78:	e7d2      	b.n	8000a20 <main+0x20>
 8000a7a:	bf00      	nop
 8000a7c:	20000100 	.word	0x20000100
 8000a80:	200000b8 	.word	0x200000b8
 8000a84:	20000095 	.word	0x20000095
 8000a88:	08004250 	.word	0x08004250
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	08004254 	.word	0x08004254

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	@ 0x50
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2234      	movs	r2, #52	@ 0x34
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 fe3e 	bl	8003724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <SystemClock_Config+0xb8>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <SystemClock_Config+0xb8>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac8:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <SystemClock_Config+0xb8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <SystemClock_Config+0xbc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <SystemClock_Config+0xbc>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <SystemClock_Config+0xbc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f8af 	bl	8001c6c <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b14:	f000 f88c 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fdd6 	bl	80016e4 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b3e:	f000 f877 	bl	8000c30 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART1_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f001 fb0c 	bl	80021a8 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f84b 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000b8 	.word	0x200000b8
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f001 fae2 	bl	80021a8 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f821 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000100 	.word	0x20000100
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_GPIO_Init+0x30>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0x30>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_GPIO_Init+0x30>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a36      	ldr	r2, [pc, #216]	@ (8000d84 <HAL_UART_MspInit+0xf8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d135      	bne.n	8000d1a <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a34      	ldr	r2, [pc, #208]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b32      	ldr	r3, [pc, #200]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b2e      	ldr	r3, [pc, #184]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4822      	ldr	r0, [pc, #136]	@ (8000d8c <HAL_UART_MspInit+0x100>)
 8000d04:	f000 fb5a 	bl	80013bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2025      	movs	r0, #37	@ 0x25
 8000d0e:	f000 fa8c 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d12:	2025      	movs	r0, #37	@ 0x25
 8000d14:	f000 faa5 	bl	8001262 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d18:	e030      	b.n	8000d7c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <HAL_UART_MspInit+0x104>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d12b      	bne.n	8000d7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <HAL_UART_MspInit+0x100>)
 8000d78:	f000 fb20 	bl	80013bc <HAL_GPIO_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	@ 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40004400 	.word	0x40004400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f923 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <USART1_IRQHandler+0x10>)
 8000dfa:	f001 fad5 	bl	80023a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000b8 	.word	0x200000b8

08000e08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e00a      	b.n	8000e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e1a:	f3af 8000 	nop.w
 8000e1e:	4601      	mov	r1, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	b2ca      	uxtb	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dbf0      	blt.n	8000e1a <_read+0x12>
  }

  return len;
 8000e38:	687b      	ldr	r3, [r7, #4]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_isatty>:

int _isatty(int file)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 fc70 	bl	80037c0 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	20000148 	.word	0x20000148
 8000f14:	200002a0 	.word	0x200002a0

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f40:	f7ff ffea 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 fc2f 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fd47 	bl	8000a00 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f80:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8000f84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f88:	2000029c 	.word	0x2000029c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f92b 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fe3a 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f943 	bl	800127e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f90b 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	2000014c 	.word	0x2000014c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000014c 	.word	0x2000014c

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff3e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff31 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff feda 	bl	800105c <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d008      	beq.n	80012c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e052      	b.n	800136e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0216 	bic.w	r2, r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <HAL_DMA_Abort+0x62>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d007      	beq.n	8001308 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0208 	bic.w	r2, r2, #8
 8001306:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001318:	e013      	b.n	8001342 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131a:	f7ff fe9f 	bl	800105c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b05      	cmp	r3, #5
 8001326:	d90c      	bls.n	8001342 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2220      	movs	r2, #32
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e015      	b.n	800136e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e4      	bne.n	800131a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001354:	223f      	movs	r2, #63	@ 0x3f
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d004      	beq.n	8001394 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e00c      	b.n	80013ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2205      	movs	r2, #5
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e165      	b.n	80016a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8154 	bne.w	800169e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d005      	beq.n	800140e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	2b02      	cmp	r3, #2
 800140c:	d130      	bne.n	8001470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 0201 	and.w	r2, r3, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b03      	cmp	r3, #3
 800147a:	d017      	beq.n	80014ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80ae 	beq.w	800169e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b5d      	ldr	r3, [pc, #372]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a5c      	ldr	r2, [pc, #368]	@ (80016bc <HAL_GPIO_Init+0x300>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b5a      	ldr	r3, [pc, #360]	@ (80016bc <HAL_GPIO_Init+0x300>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	4a58      	ldr	r2, [pc, #352]	@ (80016c0 <HAL_GPIO_Init+0x304>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4f      	ldr	r2, [pc, #316]	@ (80016c4 <HAL_GPIO_Init+0x308>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x21a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4e      	ldr	r2, [pc, #312]	@ (80016c8 <HAL_GPIO_Init+0x30c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x216>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <HAL_GPIO_Init+0x310>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x212>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <HAL_GPIO_Init+0x314>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x20e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4b      	ldr	r2, [pc, #300]	@ (80016d4 <HAL_GPIO_Init+0x318>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x20a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4a      	ldr	r2, [pc, #296]	@ (80016d8 <HAL_GPIO_Init+0x31c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x206>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a49      	ldr	r2, [pc, #292]	@ (80016dc <HAL_GPIO_Init+0x320>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x202>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e00c      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00a      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x21c>
 80015d6:	2300      	movs	r3, #0
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e8:	4935      	ldr	r1, [pc, #212]	@ (80016c0 <HAL_GPIO_Init+0x304>)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f6:	4b3a      	ldr	r3, [pc, #232]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161a:	4a31      	ldr	r2, [pc, #196]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001620:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001644:	4a26      	ldr	r2, [pc, #152]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164a:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166e:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001698:	4a11      	ldr	r2, [pc, #68]	@ (80016e0 <HAL_GPIO_Init+0x324>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3301      	adds	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	f67f ae96 	bls.w	80013d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40021400 	.word	0x40021400
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40013c00 	.word	0x40013c00

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0cc      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d90c      	bls.n	8001720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b65      	ldr	r3, [pc, #404]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a58      	ldr	r2, [pc, #352]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a52      	ldr	r2, [pc, #328]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800175a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3f      	ldr	r3, [pc, #252]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e067      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4934      	ldr	r1, [pc, #208]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fc42 	bl	800105c <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fc3e 	bl	800105c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20c      	bcs.n	800182c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f855 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490a      	ldr	r1, [pc, #40]	@ (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fba2 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004278 	.word	0x08004278
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000

080018c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	@ (80018ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08004288 	.word	0x08004288

080018f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f4:	f7ff ffdc 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0b5b      	lsrs	r3, r3, #13
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4903      	ldr	r1, [pc, #12]	@ (8001914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	08004288 	.word	0x08004288

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b0a6      	sub	sp, #152	@ 0x98
 800191e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4bc8      	ldr	r3, [pc, #800]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b0c      	cmp	r3, #12
 8001948:	f200 817e 	bhi.w	8001c48 <HAL_RCC_GetSysClockFreq+0x330>
 800194c:	a201      	add	r2, pc, #4	@ (adr r2, 8001954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001989 	.word	0x08001989
 8001958:	08001c49 	.word	0x08001c49
 800195c:	08001c49 	.word	0x08001c49
 8001960:	08001c49 	.word	0x08001c49
 8001964:	08001991 	.word	0x08001991
 8001968:	08001c49 	.word	0x08001c49
 800196c:	08001c49 	.word	0x08001c49
 8001970:	08001c49 	.word	0x08001c49
 8001974:	08001999 	.word	0x08001999
 8001978:	08001c49 	.word	0x08001c49
 800197c:	08001c49 	.word	0x08001c49
 8001980:	08001c49 	.word	0x08001c49
 8001984:	08001b03 	.word	0x08001b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4bb6      	ldr	r3, [pc, #728]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800198a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800198e:	e15f      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001990:	4bb5      	ldr	r3, [pc, #724]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8001992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001996:	e15b      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4bb1      	ldr	r3, [pc, #708]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a4:	4bae      	ldr	r3, [pc, #696]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d031      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4bab      	ldr	r3, [pc, #684]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019c4:	2300      	movs	r3, #0
 80019c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80019c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80019ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019ce:	462a      	mov	r2, r5
 80019d0:	fb03 f202 	mul.w	r2, r3, r2
 80019d4:	2300      	movs	r3, #0
 80019d6:	4621      	mov	r1, r4
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	4aa2      	ldr	r2, [pc, #648]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80019e0:	4621      	mov	r1, r4
 80019e2:	fba1 1202 	umull	r1, r2, r1, r2
 80019e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80019e8:	460a      	mov	r2, r1
 80019ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80019ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019ee:	4413      	add	r3, r2
 80019f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019f6:	2200      	movs	r2, #0
 80019f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a04:	f7fe fc54 	bl	80002b0 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a12:	e064      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a14:	4b92      	ldr	r3, [pc, #584]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a1e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a30:	4622      	mov	r2, r4
 8001a32:	462b      	mov	r3, r5
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4621      	mov	r1, r4
 8001a4a:	1a51      	subs	r1, r2, r1
 8001a4c:	6139      	str	r1, [r7, #16]
 8001a4e:	4629      	mov	r1, r5
 8001a50:	eb63 0301 	sbc.w	r3, r3, r1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a62:	4659      	mov	r1, fp
 8001a64:	018b      	lsls	r3, r1, #6
 8001a66:	4651      	mov	r1, sl
 8001a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6c:	4651      	mov	r1, sl
 8001a6e:	018a      	lsls	r2, r1, #6
 8001a70:	4651      	mov	r1, sl
 8001a72:	ebb2 0801 	subs.w	r8, r2, r1
 8001a76:	4659      	mov	r1, fp
 8001a78:	eb63 0901 	sbc.w	r9, r3, r1
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a90:	4690      	mov	r8, r2
 8001a92:	4699      	mov	r9, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	eb18 0303 	adds.w	r3, r8, r3
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	eb49 0303 	adc.w	r3, r9, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	028b      	lsls	r3, r1, #10
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aba:	4621      	mov	r1, r4
 8001abc:	028a      	lsls	r2, r1, #10
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8001acc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ad0:	f7fe fbee 	bl	80002b0 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ade:	4b60      	ldr	r3, [pc, #384]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001af0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b02:	4b57      	ldr	r3, [pc, #348]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d02a      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b51      	ldr	r3, [pc, #324]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	2200      	movs	r2, #0
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b30:	fb03 f201 	mul.w	r2, r3, r1
 8001b34:	2300      	movs	r3, #0
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b42:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b44:	460a      	mov	r2, r1
 8001b46:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b4a:	4413      	add	r3, r2
 8001b4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b52:	2200      	movs	r2, #0
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b56:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b60:	f7fe fba6 	bl	80002b0 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b6e:	e05b      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0159      	lsls	r1, r3, #5
 8001b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9e:	0150      	lsls	r0, r2, #5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001baa:	4649      	mov	r1, r9
 8001bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	00eb      	lsls	r3, r5, #3
 8001bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4643      	mov	r3, r8
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb45 0303 	adc.w	r3, r5, r3
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	f7fe fb49 	bl	80002b0 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4613      	mov	r3, r2
 8001c24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0f1b      	lsrs	r3, r3, #28
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c46:	e003      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3798      	adds	r7, #152	@ 0x98
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	017d7840 	.word	0x017d7840

08001c6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e28d      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8083 	beq.w	8001d92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d019      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c98:	4b91      	ldr	r3, [pc, #580]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b88      	ldr	r3, [pc, #544]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x124>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e25a      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x90>
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xcc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0xb4>
 8001d06:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a72      	ldr	r2, [pc, #456]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xcc>
 8001d20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f98c 	bl	800105c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f988 	bl	800105c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e21f      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f978 	bl	800105c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f974 	bl	800105c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e20b      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b57      	ldr	r3, [pc, #348]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x104>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d06f      	beq.n	8001e7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d9e:	4b50      	ldr	r3, [pc, #320]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d017      	beq.n	8001dda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001daa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
        || \
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001db6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dce:	4b44      	ldr	r3, [pc, #272]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x186>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1d3      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4937      	ldr	r1, [pc, #220]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_RCC_OscConfig+0x278>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff f921 	bl	800105c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f91d 	bl	800105c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1b4      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4925      	ldr	r1, [pc, #148]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_OscConfig+0x278>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f900 	bl	800105c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f8fc 	bl	800105c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e193      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d036      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d016      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f8e0 	bl	800105c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f8dc 	bl	800105c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e173      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x234>
 8001ebe:	e01b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f8c9 	bl	800105c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e00e      	b.n	8001eec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff f8c5 	bl	800105c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d907      	bls.n	8001eec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e15c      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	42470000 	.word	0x42470000
 8001ee8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b8a      	ldr	r3, [pc, #552]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ea      	bne.n	8001ece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8097 	beq.w	8002034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b83      	ldr	r3, [pc, #524]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10f      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b7c      	ldr	r3, [pc, #496]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b79      	ldr	r3, [pc, #484]	@ (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b76      	ldr	r3, [pc, #472]	@ (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	@ (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f885 	bl	800105c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff f881 	bl	800105c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e118      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b6c      	ldr	r3, [pc, #432]	@ (800211c <HAL_RCC_OscConfig+0x4b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x31e>
 8001f7c:	4b66      	ldr	r3, [pc, #408]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f80:	4a65      	ldr	r2, [pc, #404]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x358>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x340>
 8001f92:	4b61      	ldr	r3, [pc, #388]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	4a60      	ldr	r2, [pc, #384]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	4a5d      	ldr	r2, [pc, #372]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x358>
 8001fac:	4b5a      	ldr	r3, [pc, #360]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a59      	ldr	r2, [pc, #356]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb8:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbc:	4a56      	ldr	r2, [pc, #344]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f846 	bl	800105c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f842 	bl	800105c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0d7      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	4b4b      	ldr	r3, [pc, #300]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ee      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x368>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f830 	bl	800105c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff f82c 	bl	800105c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0c1      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002016:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ee      	bne.n	8002000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	4a3a      	ldr	r2, [pc, #232]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002032:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ad 	beq.w	8002198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203e:	4b36      	ldr	r3, [pc, #216]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d060      	beq.n	800210c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d145      	bne.n	80020de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <HAL_RCC_OscConfig+0x4b4>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff f800 	bl	800105c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe fffc 	bl	800105c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e093      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	071b      	lsls	r3, r3, #28
 80020aa:	491b      	ldr	r1, [pc, #108]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_RCC_OscConfig+0x4b4>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe ffd1 	bl	800105c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe ffcd 	bl	800105c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e064      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x452>
 80020dc:	e05c      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_RCC_OscConfig+0x4b4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe ffba 	bl	800105c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe ffb6 	bl	800105c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04d      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x480>
 800210a:	e045      	b.n	8002198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e040      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
 8002118:	40023800 	.word	0x40023800
 800211c:	40007000 	.word	0x40007000
 8002120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_RCC_OscConfig+0x538>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d030      	beq.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d129      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d122      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800215a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800215c:	4293      	cmp	r3, r2
 800215e:	d119      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d10f      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e042      	b.n	8002240 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fd5c 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	@ 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fdbd 	bl	8002d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d175      	bne.n	8002354 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Transmit+0x2c>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e06e      	b.n	8002356 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2221      	movs	r2, #33	@ 0x21
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002286:	f7fe fee9 	bl	800105c <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022a0:	d108      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e003      	b.n	80022bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022bc:	e02e      	b.n	800231c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fb1f 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e03a      	b.n	8002356 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3302      	adds	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e007      	b.n	800230e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1cb      	bne.n	80022be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 faeb 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	d112      	bne.n	800239e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_UART_Receive_IT+0x26>
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00b      	b.n	80023a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	461a      	mov	r2, r3
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fb12 	bl	80029be <UART_Start_Receive_IT>
 800239a:	4603      	mov	r3, r0
 800239c:	e000      	b.n	80023a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0ba      	sub	sp, #232	@ 0xe8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80023e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_UART_IRQHandler+0x66>
 80023fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fbf2 	bl	8002bf0 <UART_Receive_IT>
      return;
 800240c:	e25b      	b.n	80028c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800240e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80de 	beq.w	80025d4 <HAL_UART_IRQHandler+0x22c>
 8002418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002428:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80d1 	beq.w	80025d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_UART_IRQHandler+0xae>
 800243e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_UART_IRQHandler+0xd2>
 8002462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f043 0202 	orr.w	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xf6>
 8002486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d011      	beq.n	80024ce <HAL_UART_IRQHandler+0x126>
 80024aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f043 0208 	orr.w	r2, r3, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 81f2 	beq.w	80028bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_UART_IRQHandler+0x14e>
 80024e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fb7d 	bl	8002bf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002500:	2b40      	cmp	r3, #64	@ 0x40
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_UART_IRQHandler+0x17a>
 800251a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d04f      	beq.n	80025c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa85 	bl	8002a32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d141      	bne.n	80025ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800254c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800256e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800257a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1d9      	bne.n	8002536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258e:	4a7e      	ldr	r2, [pc, #504]	@ (8002788 <HAL_UART_IRQHandler+0x3e0>)
 8002590:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe feed 	bl	8001376 <HAL_DMA_Abort_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ac:	4610      	mov	r0, r2
 80025ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	e00e      	b.n	80025d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f994 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e00a      	b.n	80025d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f990 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	e006      	b.n	80025d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f98c 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80025ce:	e175      	b.n	80028bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	bf00      	nop
    return;
 80025d2:	e173      	b.n	80028bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 814f 	bne.w	800287c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8148 	beq.w	800287c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8141 	beq.w	800287c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261a:	2b40      	cmp	r3, #64	@ 0x40
 800261c:	f040 80b6 	bne.w	800278c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800262c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8145 	beq.w	80028c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800263a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800263e:	429a      	cmp	r2, r3
 8002640:	f080 813e 	bcs.w	80028c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800264a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002656:	f000 8088 	beq.w	800276a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	330c      	adds	r3, #12
 8002682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002686:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800268a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800269e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1d9      	bne.n	800265a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b0:	e853 3f00 	ldrex	r3, [r3]
 80026b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80026d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80026dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e1      	bne.n	80026a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ec:	e853 3f00 	ldrex	r3, [r3]
 80026f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3314      	adds	r3, #20
 8002702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800270c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800270e:	e841 2300 	strex	r3, r2, [r1]
 8002712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e3      	bne.n	80026e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800273a:	f023 0310 	bic.w	r3, r3, #16
 800273e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800274c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800274e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800275a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e3      	bne.n	8002728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fd96 	bl	8001296 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002778:	b29b      	uxth	r3, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8b7 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002786:	e09b      	b.n	80028c0 <HAL_UART_IRQHandler+0x518>
 8002788:	08002af9 	.word	0x08002af9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002794:	b29b      	uxth	r3, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 808e 	beq.w	80028c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8089 	beq.w	80028c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80027d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80027d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e3      	bne.n	80027b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3314      	adds	r3, #20
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	623b      	str	r3, [r7, #32]
   return(result);
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3314      	adds	r3, #20
 800280a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800280e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e3      	bne.n	80027ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	e853 3f00 	ldrex	r3, [r3]
 800283e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0310 	bic.w	r3, r3, #16
 8002846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	69b9      	ldr	r1, [r7, #24]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	e841 2300 	strex	r3, r2, [r1]
 8002860:	617b      	str	r3, [r7, #20]
   return(result);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e3      	bne.n	8002830 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800286e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f83d 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800287a:	e023      	b.n	80028c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_UART_IRQHandler+0x4f4>
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800288c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f943 	bl	8002b20 <UART_Transmit_IT>
    return;
 800289a:	e014      	b.n	80028c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800289c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <HAL_UART_IRQHandler+0x51e>
 80028a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f983 	bl	8002bc0 <UART_EndTransmit_IT>
    return;
 80028ba:	e004      	b.n	80028c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80028bc:	bf00      	nop
 80028be:	e002      	b.n	80028c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028c4:	bf00      	nop
  }
}
 80028c6:	37e8      	adds	r7, #232	@ 0xe8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291c:	e03b      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d037      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7fe fb99 	bl	800105c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <UART_WaitOnFlagUntilTimeout+0x30>
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e03a      	b.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d023      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b80      	cmp	r3, #128	@ 0x80
 8002952:	d020      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d01d      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d116      	bne.n	8002996 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f857 	bl	8002a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2208      	movs	r2, #8
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0b4      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	@ 0x22
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b095      	sub	sp, #84	@ 0x54
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e5      	bne.n	8002a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3314      	adds	r3, #20
 8002a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d119      	bne.n	8002ade <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f023 0310 	bic.w	r3, r3, #16
 8002ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aca:	61ba      	str	r2, [r7, #24]
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e5      	bne.n	8002aaa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aec:	bf00      	nop
 8002aee:	3754      	adds	r7, #84	@ 0x54
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff fee4 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b21      	cmp	r3, #33	@ 0x21
 8002b32:	d13e      	bne.n	8002bb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3c:	d114      	bne.n	8002b68 <UART_Transmit_IT+0x48>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d110      	bne.n	8002b68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]
 8002b66:	e008      	b.n	8002b7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6211      	str	r1, [r2, #32]
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fe73 	bl	80028cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	@ 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b22      	cmp	r3, #34	@ 0x22
 8002c02:	f040 80ae 	bne.w	8002d62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0e:	d117      	bne.n	8002c40 <UART_Receive_IT+0x50>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	1c9a      	adds	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c3e:	e026      	b.n	8002c8e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c52:	d007      	beq.n	8002c64 <UART_Receive_IT+0x74>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <UART_Receive_IT+0x82>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e008      	b.n	8002c84 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d15d      	bne.n	8002d5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0220 	bic.w	r2, r2, #32
 8002cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d135      	bne.n	8002d54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f023 0310 	bic.w	r3, r3, #16
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0e:	623a      	str	r2, [r7, #32]
 8002d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	69f9      	ldr	r1, [r7, #28]
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e5      	bne.n	8002cee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d10a      	bne.n	8002d46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fdd1 	bl	80028f4 <HAL_UARTEx_RxEventCallback>
 8002d52:	e002      	b.n	8002d5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd fcbf 	bl	80006d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e002      	b.n	8002d64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3730      	adds	r7, #48	@ 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d70:	b0c0      	sub	sp, #256	@ 0x100
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	ea40 0301 	orr.w	r3, r0, r1
 8002d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002dc4:	f021 010c 	bic.w	r1, r1, #12
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de6:	6999      	ldr	r1, [r3, #24]
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	ea40 0301 	orr.w	r3, r0, r1
 8002df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8003038 <UART_SetConfig+0x2cc>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d005      	beq.n	8002e0c <UART_SetConfig+0xa0>
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b8d      	ldr	r3, [pc, #564]	@ (800303c <UART_SetConfig+0x2d0>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d104      	bne.n	8002e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e0c:	f7fe fd70 	bl	80018f0 <HAL_RCC_GetPCLK2Freq>
 8002e10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e14:	e003      	b.n	8002e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e16:	f7fe fd57 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8002e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e28:	f040 810c 	bne.w	8003044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e30:	2200      	movs	r2, #0
 8002e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	1891      	adds	r1, r2, r2
 8002e44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e46:	415b      	adcs	r3, r3
 8002e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e4e:	4621      	mov	r1, r4
 8002e50:	eb12 0801 	adds.w	r8, r2, r1
 8002e54:	4629      	mov	r1, r5
 8002e56:	eb43 0901 	adc.w	r9, r3, r1
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6e:	4690      	mov	r8, r2
 8002e70:	4699      	mov	r9, r3
 8002e72:	4623      	mov	r3, r4
 8002e74:	eb18 0303 	adds.w	r3, r8, r3
 8002e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	eb49 0303 	adc.w	r3, r9, r3
 8002e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	18db      	adds	r3, r3, r3
 8002e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	eb42 0303 	adc.w	r3, r2, r3
 8002ea6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002eb0:	f7fd f9fe 	bl	80002b0 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <UART_SetConfig+0x2d4>)
 8002eba:	fba3 2302 	umull	r2, r3, r3, r2
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	011c      	lsls	r4, r3, #4
 8002ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	1891      	adds	r1, r2, r2
 8002eda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002edc:	415b      	adcs	r3, r3
 8002ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eea:	4649      	mov	r1, r9
 8002eec:	eb43 0b01 	adc.w	fp, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f04:	4692      	mov	sl, r2
 8002f06:	469b      	mov	fp, r3
 8002f08:	4643      	mov	r3, r8
 8002f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f12:	464b      	mov	r3, r9
 8002f14:	eb4b 0303 	adc.w	r3, fp, r3
 8002f18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f30:	460b      	mov	r3, r1
 8002f32:	18db      	adds	r3, r3, r3
 8002f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f36:	4613      	mov	r3, r2
 8002f38:	eb42 0303 	adc.w	r3, r2, r3
 8002f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f46:	f7fd f9b3 	bl	80002b0 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4b3b      	ldr	r3, [pc, #236]	@ (8003040 <UART_SetConfig+0x2d4>)
 8002f52:	fba3 2301 	umull	r2, r3, r3, r1
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2264      	movs	r2, #100	@ 0x64
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	1acb      	subs	r3, r1, r3
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f66:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <UART_SetConfig+0x2d4>)
 8002f68:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f74:	441c      	add	r4, r3
 8002f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	1891      	adds	r1, r2, r2
 8002f8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f90:	415b      	adcs	r3, r3
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f98:	4641      	mov	r1, r8
 8002f9a:	1851      	adds	r1, r2, r1
 8002f9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	414b      	adcs	r3, r1
 8002fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	00cb      	lsls	r3, r1, #3
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fba:	4651      	mov	r1, sl
 8002fbc:	00ca      	lsls	r2, r1, #3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fcc:	464b      	mov	r3, r9
 8002fce:	460a      	mov	r2, r1
 8002fd0:	eb42 0303 	adc.w	r3, r2, r3
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fec:	460b      	mov	r3, r1
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003002:	f7fd f955 	bl	80002b0 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <UART_SetConfig+0x2d4>)
 800300c:	fba3 1302 	umull	r1, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	2164      	movs	r1, #100	@ 0x64
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3332      	adds	r3, #50	@ 0x32
 800301e:	4a08      	ldr	r2, [pc, #32]	@ (8003040 <UART_SetConfig+0x2d4>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	f003 0207 	and.w	r2, r3, #7
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4422      	add	r2, r4
 8003032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003034:	e106      	b.n	8003244 <UART_SetConfig+0x4d8>
 8003036:	bf00      	nop
 8003038:	40011000 	.word	0x40011000
 800303c:	40011400 	.word	0x40011400
 8003040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003048:	2200      	movs	r2, #0
 800304a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800304e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003056:	4642      	mov	r2, r8
 8003058:	464b      	mov	r3, r9
 800305a:	1891      	adds	r1, r2, r2
 800305c:	6239      	str	r1, [r7, #32]
 800305e:	415b      	adcs	r3, r3
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
 8003062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003066:	4641      	mov	r1, r8
 8003068:	1854      	adds	r4, r2, r1
 800306a:	4649      	mov	r1, r9
 800306c:	eb43 0501 	adc.w	r5, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	00eb      	lsls	r3, r5, #3
 800307a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307e:	00e2      	lsls	r2, r4, #3
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	4643      	mov	r3, r8
 8003086:	18e3      	adds	r3, r4, r3
 8003088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800308c:	464b      	mov	r3, r9
 800308e:	eb45 0303 	adc.w	r3, r5, r3
 8003092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030b2:	4629      	mov	r1, r5
 80030b4:	008b      	lsls	r3, r1, #2
 80030b6:	4621      	mov	r1, r4
 80030b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030bc:	4621      	mov	r1, r4
 80030be:	008a      	lsls	r2, r1, #2
 80030c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030c4:	f7fd f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4b60      	ldr	r3, [pc, #384]	@ (8003250 <UART_SetConfig+0x4e4>)
 80030ce:	fba3 2302 	umull	r2, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	011c      	lsls	r4, r3, #4
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	61b9      	str	r1, [r7, #24]
 80030f0:	415b      	adcs	r3, r3
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f8:	4641      	mov	r1, r8
 80030fa:	1851      	adds	r1, r2, r1
 80030fc:	6139      	str	r1, [r7, #16]
 80030fe:	4649      	mov	r1, r9
 8003100:	414b      	adcs	r3, r1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003110:	4659      	mov	r1, fp
 8003112:	00cb      	lsls	r3, r1, #3
 8003114:	4651      	mov	r1, sl
 8003116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800311a:	4651      	mov	r1, sl
 800311c:	00ca      	lsls	r2, r1, #3
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	4603      	mov	r3, r0
 8003124:	4642      	mov	r2, r8
 8003126:	189b      	adds	r3, r3, r2
 8003128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800312c:	464b      	mov	r3, r9
 800312e:	460a      	mov	r2, r1
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003142:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003150:	4649      	mov	r1, r9
 8003152:	008b      	lsls	r3, r1, #2
 8003154:	4641      	mov	r1, r8
 8003156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315a:	4641      	mov	r1, r8
 800315c:	008a      	lsls	r2, r1, #2
 800315e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003162:	f7fd f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4611      	mov	r1, r2
 800316c:	4b38      	ldr	r3, [pc, #224]	@ (8003250 <UART_SetConfig+0x4e4>)
 800316e:	fba3 2301 	umull	r2, r3, r3, r1
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2264      	movs	r2, #100	@ 0x64
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	1acb      	subs	r3, r1, r3
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	3332      	adds	r3, #50	@ 0x32
 8003180:	4a33      	ldr	r2, [pc, #204]	@ (8003250 <UART_SetConfig+0x4e4>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800318c:	441c      	add	r4, r3
 800318e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003192:	2200      	movs	r2, #0
 8003194:	673b      	str	r3, [r7, #112]	@ 0x70
 8003196:	677a      	str	r2, [r7, #116]	@ 0x74
 8003198:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	1891      	adds	r1, r2, r2
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	415b      	adcs	r3, r3
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ac:	4641      	mov	r1, r8
 80031ae:	1851      	adds	r1, r2, r1
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	4649      	mov	r1, r9
 80031b4:	414b      	adcs	r3, r1
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031c4:	4659      	mov	r1, fp
 80031c6:	00cb      	lsls	r3, r1, #3
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ce:	4651      	mov	r1, sl
 80031d0:	00ca      	lsls	r2, r1, #3
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	4642      	mov	r2, r8
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031de:	464b      	mov	r3, r9
 80031e0:	460a      	mov	r2, r1
 80031e2:	eb42 0303 	adc.w	r3, r2, r3
 80031e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003200:	4649      	mov	r1, r9
 8003202:	008b      	lsls	r3, r1, #2
 8003204:	4641      	mov	r1, r8
 8003206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320a:	4641      	mov	r1, r8
 800320c:	008a      	lsls	r2, r1, #2
 800320e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003212:	f7fd f84d 	bl	80002b0 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <UART_SetConfig+0x4e4>)
 800321c:	fba3 1302 	umull	r1, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	2164      	movs	r1, #100	@ 0x64
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	3332      	adds	r3, #50	@ 0x32
 800322e:	4a08      	ldr	r2, [pc, #32]	@ (8003250 <UART_SetConfig+0x4e4>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4422      	add	r2, r4
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800324a:	46bd      	mov	sp, r7
 800324c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003250:	51eb851f 	.word	0x51eb851f

08003254 <std>:
 8003254:	2300      	movs	r3, #0
 8003256:	b510      	push	{r4, lr}
 8003258:	4604      	mov	r4, r0
 800325a:	e9c0 3300 	strd	r3, r3, [r0]
 800325e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003262:	6083      	str	r3, [r0, #8]
 8003264:	8181      	strh	r1, [r0, #12]
 8003266:	6643      	str	r3, [r0, #100]	@ 0x64
 8003268:	81c2      	strh	r2, [r0, #14]
 800326a:	6183      	str	r3, [r0, #24]
 800326c:	4619      	mov	r1, r3
 800326e:	2208      	movs	r2, #8
 8003270:	305c      	adds	r0, #92	@ 0x5c
 8003272:	f000 fa57 	bl	8003724 <memset>
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <std+0x58>)
 8003278:	6263      	str	r3, [r4, #36]	@ 0x24
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <std+0x5c>)
 800327c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <std+0x60>)
 8003280:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <std+0x64>)
 8003284:	6323      	str	r3, [r4, #48]	@ 0x30
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <std+0x68>)
 8003288:	6224      	str	r4, [r4, #32]
 800328a:	429c      	cmp	r4, r3
 800328c:	d006      	beq.n	800329c <std+0x48>
 800328e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003292:	4294      	cmp	r4, r2
 8003294:	d002      	beq.n	800329c <std+0x48>
 8003296:	33d0      	adds	r3, #208	@ 0xd0
 8003298:	429c      	cmp	r4, r3
 800329a:	d105      	bne.n	80032a8 <std+0x54>
 800329c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	f000 bab6 	b.w	8003814 <__retarget_lock_init_recursive>
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	bf00      	nop
 80032ac:	08003575 	.word	0x08003575
 80032b0:	08003597 	.word	0x08003597
 80032b4:	080035cf 	.word	0x080035cf
 80032b8:	080035f3 	.word	0x080035f3
 80032bc:	20000150 	.word	0x20000150

080032c0 <stdio_exit_handler>:
 80032c0:	4a02      	ldr	r2, [pc, #8]	@ (80032cc <stdio_exit_handler+0xc>)
 80032c2:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <stdio_exit_handler+0x10>)
 80032c4:	4803      	ldr	r0, [pc, #12]	@ (80032d4 <stdio_exit_handler+0x14>)
 80032c6:	f000 b869 	b.w	800339c <_fwalk_sglue>
 80032ca:	bf00      	nop
 80032cc:	2000000c 	.word	0x2000000c
 80032d0:	080040c1 	.word	0x080040c1
 80032d4:	2000001c 	.word	0x2000001c

080032d8 <cleanup_stdio>:
 80032d8:	6841      	ldr	r1, [r0, #4]
 80032da:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <cleanup_stdio+0x34>)
 80032dc:	4299      	cmp	r1, r3
 80032de:	b510      	push	{r4, lr}
 80032e0:	4604      	mov	r4, r0
 80032e2:	d001      	beq.n	80032e8 <cleanup_stdio+0x10>
 80032e4:	f000 feec 	bl	80040c0 <_fflush_r>
 80032e8:	68a1      	ldr	r1, [r4, #8]
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <cleanup_stdio+0x38>)
 80032ec:	4299      	cmp	r1, r3
 80032ee:	d002      	beq.n	80032f6 <cleanup_stdio+0x1e>
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 fee5 	bl	80040c0 <_fflush_r>
 80032f6:	68e1      	ldr	r1, [r4, #12]
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <cleanup_stdio+0x3c>)
 80032fa:	4299      	cmp	r1, r3
 80032fc:	d004      	beq.n	8003308 <cleanup_stdio+0x30>
 80032fe:	4620      	mov	r0, r4
 8003300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003304:	f000 bedc 	b.w	80040c0 <_fflush_r>
 8003308:	bd10      	pop	{r4, pc}
 800330a:	bf00      	nop
 800330c:	20000150 	.word	0x20000150
 8003310:	200001b8 	.word	0x200001b8
 8003314:	20000220 	.word	0x20000220

08003318 <global_stdio_init.part.0>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <global_stdio_init.part.0+0x30>)
 800331c:	4c0b      	ldr	r4, [pc, #44]	@ (800334c <global_stdio_init.part.0+0x34>)
 800331e:	4a0c      	ldr	r2, [pc, #48]	@ (8003350 <global_stdio_init.part.0+0x38>)
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4620      	mov	r0, r4
 8003324:	2200      	movs	r2, #0
 8003326:	2104      	movs	r1, #4
 8003328:	f7ff ff94 	bl	8003254 <std>
 800332c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003330:	2201      	movs	r2, #1
 8003332:	2109      	movs	r1, #9
 8003334:	f7ff ff8e 	bl	8003254 <std>
 8003338:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800333c:	2202      	movs	r2, #2
 800333e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003342:	2112      	movs	r1, #18
 8003344:	f7ff bf86 	b.w	8003254 <std>
 8003348:	20000288 	.word	0x20000288
 800334c:	20000150 	.word	0x20000150
 8003350:	080032c1 	.word	0x080032c1

08003354 <__sfp_lock_acquire>:
 8003354:	4801      	ldr	r0, [pc, #4]	@ (800335c <__sfp_lock_acquire+0x8>)
 8003356:	f000 ba5e 	b.w	8003816 <__retarget_lock_acquire_recursive>
 800335a:	bf00      	nop
 800335c:	20000291 	.word	0x20000291

08003360 <__sfp_lock_release>:
 8003360:	4801      	ldr	r0, [pc, #4]	@ (8003368 <__sfp_lock_release+0x8>)
 8003362:	f000 ba59 	b.w	8003818 <__retarget_lock_release_recursive>
 8003366:	bf00      	nop
 8003368:	20000291 	.word	0x20000291

0800336c <__sinit>:
 800336c:	b510      	push	{r4, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	f7ff fff0 	bl	8003354 <__sfp_lock_acquire>
 8003374:	6a23      	ldr	r3, [r4, #32]
 8003376:	b11b      	cbz	r3, 8003380 <__sinit+0x14>
 8003378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800337c:	f7ff bff0 	b.w	8003360 <__sfp_lock_release>
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <__sinit+0x28>)
 8003382:	6223      	str	r3, [r4, #32]
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <__sinit+0x2c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f5      	bne.n	8003378 <__sinit+0xc>
 800338c:	f7ff ffc4 	bl	8003318 <global_stdio_init.part.0>
 8003390:	e7f2      	b.n	8003378 <__sinit+0xc>
 8003392:	bf00      	nop
 8003394:	080032d9 	.word	0x080032d9
 8003398:	20000288 	.word	0x20000288

0800339c <_fwalk_sglue>:
 800339c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a0:	4607      	mov	r7, r0
 80033a2:	4688      	mov	r8, r1
 80033a4:	4614      	mov	r4, r2
 80033a6:	2600      	movs	r6, #0
 80033a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ac:	f1b9 0901 	subs.w	r9, r9, #1
 80033b0:	d505      	bpl.n	80033be <_fwalk_sglue+0x22>
 80033b2:	6824      	ldr	r4, [r4, #0]
 80033b4:	2c00      	cmp	r4, #0
 80033b6:	d1f7      	bne.n	80033a8 <_fwalk_sglue+0xc>
 80033b8:	4630      	mov	r0, r6
 80033ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033be:	89ab      	ldrh	r3, [r5, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d907      	bls.n	80033d4 <_fwalk_sglue+0x38>
 80033c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033c8:	3301      	adds	r3, #1
 80033ca:	d003      	beq.n	80033d4 <_fwalk_sglue+0x38>
 80033cc:	4629      	mov	r1, r5
 80033ce:	4638      	mov	r0, r7
 80033d0:	47c0      	blx	r8
 80033d2:	4306      	orrs	r6, r0
 80033d4:	3568      	adds	r5, #104	@ 0x68
 80033d6:	e7e9      	b.n	80033ac <_fwalk_sglue+0x10>

080033d8 <iprintf>:
 80033d8:	b40f      	push	{r0, r1, r2, r3}
 80033da:	b507      	push	{r0, r1, r2, lr}
 80033dc:	4906      	ldr	r1, [pc, #24]	@ (80033f8 <iprintf+0x20>)
 80033de:	ab04      	add	r3, sp, #16
 80033e0:	6808      	ldr	r0, [r1, #0]
 80033e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80033e6:	6881      	ldr	r1, [r0, #8]
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	f000 fb41 	bl	8003a70 <_vfiprintf_r>
 80033ee:	b003      	add	sp, #12
 80033f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f4:	b004      	add	sp, #16
 80033f6:	4770      	bx	lr
 80033f8:	20000018 	.word	0x20000018

080033fc <setbuf>:
 80033fc:	fab1 f281 	clz	r2, r1
 8003400:	0952      	lsrs	r2, r2, #5
 8003402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003406:	0052      	lsls	r2, r2, #1
 8003408:	f000 b800 	b.w	800340c <setvbuf>

0800340c <setvbuf>:
 800340c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003410:	461d      	mov	r5, r3
 8003412:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <setvbuf+0x164>)
 8003414:	681f      	ldr	r7, [r3, #0]
 8003416:	4604      	mov	r4, r0
 8003418:	460e      	mov	r6, r1
 800341a:	4690      	mov	r8, r2
 800341c:	b127      	cbz	r7, 8003428 <setvbuf+0x1c>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	b913      	cbnz	r3, 8003428 <setvbuf+0x1c>
 8003422:	4638      	mov	r0, r7
 8003424:	f7ff ffa2 	bl	800336c <__sinit>
 8003428:	f1b8 0f02 	cmp.w	r8, #2
 800342c:	d006      	beq.n	800343c <setvbuf+0x30>
 800342e:	f1b8 0f01 	cmp.w	r8, #1
 8003432:	f200 809a 	bhi.w	800356a <setvbuf+0x15e>
 8003436:	2d00      	cmp	r5, #0
 8003438:	f2c0 8097 	blt.w	800356a <setvbuf+0x15e>
 800343c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800343e:	07d9      	lsls	r1, r3, #31
 8003440:	d405      	bmi.n	800344e <setvbuf+0x42>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	059a      	lsls	r2, r3, #22
 8003446:	d402      	bmi.n	800344e <setvbuf+0x42>
 8003448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800344a:	f000 f9e4 	bl	8003816 <__retarget_lock_acquire_recursive>
 800344e:	4621      	mov	r1, r4
 8003450:	4638      	mov	r0, r7
 8003452:	f000 fe35 	bl	80040c0 <_fflush_r>
 8003456:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003458:	b141      	cbz	r1, 800346c <setvbuf+0x60>
 800345a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800345e:	4299      	cmp	r1, r3
 8003460:	d002      	beq.n	8003468 <setvbuf+0x5c>
 8003462:	4638      	mov	r0, r7
 8003464:	f000 f9da 	bl	800381c <_free_r>
 8003468:	2300      	movs	r3, #0
 800346a:	6363      	str	r3, [r4, #52]	@ 0x34
 800346c:	2300      	movs	r3, #0
 800346e:	61a3      	str	r3, [r4, #24]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	d503      	bpl.n	8003480 <setvbuf+0x74>
 8003478:	6921      	ldr	r1, [r4, #16]
 800347a:	4638      	mov	r0, r7
 800347c:	f000 f9ce 	bl	800381c <_free_r>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f1b8 0f02 	cmp.w	r8, #2
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	d061      	beq.n	8003556 <setvbuf+0x14a>
 8003492:	ab01      	add	r3, sp, #4
 8003494:	466a      	mov	r2, sp
 8003496:	4621      	mov	r1, r4
 8003498:	4638      	mov	r0, r7
 800349a:	f000 fe39 	bl	8004110 <__swhatbuf_r>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	4318      	orrs	r0, r3
 80034a2:	81a0      	strh	r0, [r4, #12]
 80034a4:	bb2d      	cbnz	r5, 80034f2 <setvbuf+0xe6>
 80034a6:	9d00      	ldr	r5, [sp, #0]
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 fa01 	bl	80038b0 <malloc>
 80034ae:	4606      	mov	r6, r0
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d152      	bne.n	800355a <setvbuf+0x14e>
 80034b4:	f8dd 9000 	ldr.w	r9, [sp]
 80034b8:	45a9      	cmp	r9, r5
 80034ba:	d140      	bne.n	800353e <setvbuf+0x132>
 80034bc:	f04f 35ff 	mov.w	r5, #4294967295
 80034c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	81a2      	strh	r2, [r4, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	60a2      	str	r2, [r4, #8]
 80034ce:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	6122      	str	r2, [r4, #16]
 80034d6:	2201      	movs	r2, #1
 80034d8:	6162      	str	r2, [r4, #20]
 80034da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034dc:	07d6      	lsls	r6, r2, #31
 80034de:	d404      	bmi.n	80034ea <setvbuf+0xde>
 80034e0:	0598      	lsls	r0, r3, #22
 80034e2:	d402      	bmi.n	80034ea <setvbuf+0xde>
 80034e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e6:	f000 f997 	bl	8003818 <__retarget_lock_release_recursive>
 80034ea:	4628      	mov	r0, r5
 80034ec:	b003      	add	sp, #12
 80034ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034f2:	2e00      	cmp	r6, #0
 80034f4:	d0d8      	beq.n	80034a8 <setvbuf+0x9c>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	b913      	cbnz	r3, 8003500 <setvbuf+0xf4>
 80034fa:	4638      	mov	r0, r7
 80034fc:	f7ff ff36 	bl	800336c <__sinit>
 8003500:	f1b8 0f01 	cmp.w	r8, #1
 8003504:	bf08      	it	eq
 8003506:	89a3      	ldrheq	r3, [r4, #12]
 8003508:	6026      	str	r6, [r4, #0]
 800350a:	bf04      	itt	eq
 800350c:	f043 0301 	orreq.w	r3, r3, #1
 8003510:	81a3      	strheq	r3, [r4, #12]
 8003512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003516:	f013 0208 	ands.w	r2, r3, #8
 800351a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800351e:	d01e      	beq.n	800355e <setvbuf+0x152>
 8003520:	07d9      	lsls	r1, r3, #31
 8003522:	bf41      	itttt	mi
 8003524:	2200      	movmi	r2, #0
 8003526:	426d      	negmi	r5, r5
 8003528:	60a2      	strmi	r2, [r4, #8]
 800352a:	61a5      	strmi	r5, [r4, #24]
 800352c:	bf58      	it	pl
 800352e:	60a5      	strpl	r5, [r4, #8]
 8003530:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003532:	07d2      	lsls	r2, r2, #31
 8003534:	d401      	bmi.n	800353a <setvbuf+0x12e>
 8003536:	059b      	lsls	r3, r3, #22
 8003538:	d513      	bpl.n	8003562 <setvbuf+0x156>
 800353a:	2500      	movs	r5, #0
 800353c:	e7d5      	b.n	80034ea <setvbuf+0xde>
 800353e:	4648      	mov	r0, r9
 8003540:	f000 f9b6 	bl	80038b0 <malloc>
 8003544:	4606      	mov	r6, r0
 8003546:	2800      	cmp	r0, #0
 8003548:	d0b8      	beq.n	80034bc <setvbuf+0xb0>
 800354a:	89a3      	ldrh	r3, [r4, #12]
 800354c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	464d      	mov	r5, r9
 8003554:	e7cf      	b.n	80034f6 <setvbuf+0xea>
 8003556:	2500      	movs	r5, #0
 8003558:	e7b2      	b.n	80034c0 <setvbuf+0xb4>
 800355a:	46a9      	mov	r9, r5
 800355c:	e7f5      	b.n	800354a <setvbuf+0x13e>
 800355e:	60a2      	str	r2, [r4, #8]
 8003560:	e7e6      	b.n	8003530 <setvbuf+0x124>
 8003562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003564:	f000 f958 	bl	8003818 <__retarget_lock_release_recursive>
 8003568:	e7e7      	b.n	800353a <setvbuf+0x12e>
 800356a:	f04f 35ff 	mov.w	r5, #4294967295
 800356e:	e7bc      	b.n	80034ea <setvbuf+0xde>
 8003570:	20000018 	.word	0x20000018

08003574 <__sread>:
 8003574:	b510      	push	{r4, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357c:	f000 f8fc 	bl	8003778 <_read_r>
 8003580:	2800      	cmp	r0, #0
 8003582:	bfab      	itete	ge
 8003584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003586:	89a3      	ldrhlt	r3, [r4, #12]
 8003588:	181b      	addge	r3, r3, r0
 800358a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800358e:	bfac      	ite	ge
 8003590:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003592:	81a3      	strhlt	r3, [r4, #12]
 8003594:	bd10      	pop	{r4, pc}

08003596 <__swrite>:
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	461f      	mov	r7, r3
 800359c:	898b      	ldrh	r3, [r1, #12]
 800359e:	05db      	lsls	r3, r3, #23
 80035a0:	4605      	mov	r5, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	4616      	mov	r6, r2
 80035a6:	d505      	bpl.n	80035b4 <__swrite+0x1e>
 80035a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ac:	2302      	movs	r3, #2
 80035ae:	2200      	movs	r2, #0
 80035b0:	f000 f8d0 	bl	8003754 <_lseek_r>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	4632      	mov	r2, r6
 80035c2:	463b      	mov	r3, r7
 80035c4:	4628      	mov	r0, r5
 80035c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ca:	f000 b8e7 	b.w	800379c <_write_r>

080035ce <__sseek>:
 80035ce:	b510      	push	{r4, lr}
 80035d0:	460c      	mov	r4, r1
 80035d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d6:	f000 f8bd 	bl	8003754 <_lseek_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	bf15      	itete	ne
 80035e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035ea:	81a3      	strheq	r3, [r4, #12]
 80035ec:	bf18      	it	ne
 80035ee:	81a3      	strhne	r3, [r4, #12]
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <__sclose>:
 80035f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f6:	f000 b89d 	b.w	8003734 <_close_r>

080035fa <__swbuf_r>:
 80035fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fc:	460e      	mov	r6, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	4605      	mov	r5, r0
 8003602:	b118      	cbz	r0, 800360c <__swbuf_r+0x12>
 8003604:	6a03      	ldr	r3, [r0, #32]
 8003606:	b90b      	cbnz	r3, 800360c <__swbuf_r+0x12>
 8003608:	f7ff feb0 	bl	800336c <__sinit>
 800360c:	69a3      	ldr	r3, [r4, #24]
 800360e:	60a3      	str	r3, [r4, #8]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	071a      	lsls	r2, r3, #28
 8003614:	d501      	bpl.n	800361a <__swbuf_r+0x20>
 8003616:	6923      	ldr	r3, [r4, #16]
 8003618:	b943      	cbnz	r3, 800362c <__swbuf_r+0x32>
 800361a:	4621      	mov	r1, r4
 800361c:	4628      	mov	r0, r5
 800361e:	f000 f82b 	bl	8003678 <__swsetup_r>
 8003622:	b118      	cbz	r0, 800362c <__swbuf_r+0x32>
 8003624:	f04f 37ff 	mov.w	r7, #4294967295
 8003628:	4638      	mov	r0, r7
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	6922      	ldr	r2, [r4, #16]
 8003630:	1a98      	subs	r0, r3, r2
 8003632:	6963      	ldr	r3, [r4, #20]
 8003634:	b2f6      	uxtb	r6, r6
 8003636:	4283      	cmp	r3, r0
 8003638:	4637      	mov	r7, r6
 800363a:	dc05      	bgt.n	8003648 <__swbuf_r+0x4e>
 800363c:	4621      	mov	r1, r4
 800363e:	4628      	mov	r0, r5
 8003640:	f000 fd3e 	bl	80040c0 <_fflush_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	d1ed      	bne.n	8003624 <__swbuf_r+0x2a>
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	6022      	str	r2, [r4, #0]
 8003654:	701e      	strb	r6, [r3, #0]
 8003656:	6962      	ldr	r2, [r4, #20]
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	429a      	cmp	r2, r3
 800365c:	d004      	beq.n	8003668 <__swbuf_r+0x6e>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d5e1      	bpl.n	8003628 <__swbuf_r+0x2e>
 8003664:	2e0a      	cmp	r6, #10
 8003666:	d1df      	bne.n	8003628 <__swbuf_r+0x2e>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f000 fd28 	bl	80040c0 <_fflush_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	d0d9      	beq.n	8003628 <__swbuf_r+0x2e>
 8003674:	e7d6      	b.n	8003624 <__swbuf_r+0x2a>
	...

08003678 <__swsetup_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4b29      	ldr	r3, [pc, #164]	@ (8003720 <__swsetup_r+0xa8>)
 800367c:	4605      	mov	r5, r0
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	460c      	mov	r4, r1
 8003682:	b118      	cbz	r0, 800368c <__swsetup_r+0x14>
 8003684:	6a03      	ldr	r3, [r0, #32]
 8003686:	b90b      	cbnz	r3, 800368c <__swsetup_r+0x14>
 8003688:	f7ff fe70 	bl	800336c <__sinit>
 800368c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003690:	0719      	lsls	r1, r3, #28
 8003692:	d422      	bmi.n	80036da <__swsetup_r+0x62>
 8003694:	06da      	lsls	r2, r3, #27
 8003696:	d407      	bmi.n	80036a8 <__swsetup_r+0x30>
 8003698:	2209      	movs	r2, #9
 800369a:	602a      	str	r2, [r5, #0]
 800369c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	f04f 30ff 	mov.w	r0, #4294967295
 80036a6:	e033      	b.n	8003710 <__swsetup_r+0x98>
 80036a8:	0758      	lsls	r0, r3, #29
 80036aa:	d512      	bpl.n	80036d2 <__swsetup_r+0x5a>
 80036ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ae:	b141      	cbz	r1, 80036c2 <__swsetup_r+0x4a>
 80036b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d002      	beq.n	80036be <__swsetup_r+0x46>
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 f8af 	bl	800381c <_free_r>
 80036be:	2300      	movs	r3, #0
 80036c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036c8:	81a3      	strh	r3, [r4, #12]
 80036ca:	2300      	movs	r3, #0
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	6923      	ldr	r3, [r4, #16]
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f043 0308 	orr.w	r3, r3, #8
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	b94b      	cbnz	r3, 80036f2 <__swsetup_r+0x7a>
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e8:	d003      	beq.n	80036f2 <__swsetup_r+0x7a>
 80036ea:	4621      	mov	r1, r4
 80036ec:	4628      	mov	r0, r5
 80036ee:	f000 fd35 	bl	800415c <__smakebuf_r>
 80036f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f6:	f013 0201 	ands.w	r2, r3, #1
 80036fa:	d00a      	beq.n	8003712 <__swsetup_r+0x9a>
 80036fc:	2200      	movs	r2, #0
 80036fe:	60a2      	str	r2, [r4, #8]
 8003700:	6962      	ldr	r2, [r4, #20]
 8003702:	4252      	negs	r2, r2
 8003704:	61a2      	str	r2, [r4, #24]
 8003706:	6922      	ldr	r2, [r4, #16]
 8003708:	b942      	cbnz	r2, 800371c <__swsetup_r+0xa4>
 800370a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800370e:	d1c5      	bne.n	800369c <__swsetup_r+0x24>
 8003710:	bd38      	pop	{r3, r4, r5, pc}
 8003712:	0799      	lsls	r1, r3, #30
 8003714:	bf58      	it	pl
 8003716:	6962      	ldrpl	r2, [r4, #20]
 8003718:	60a2      	str	r2, [r4, #8]
 800371a:	e7f4      	b.n	8003706 <__swsetup_r+0x8e>
 800371c:	2000      	movs	r0, #0
 800371e:	e7f7      	b.n	8003710 <__swsetup_r+0x98>
 8003720:	20000018 	.word	0x20000018

08003724 <memset>:
 8003724:	4402      	add	r2, r0
 8003726:	4603      	mov	r3, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	d100      	bne.n	800372e <memset+0xa>
 800372c:	4770      	bx	lr
 800372e:	f803 1b01 	strb.w	r1, [r3], #1
 8003732:	e7f9      	b.n	8003728 <memset+0x4>

08003734 <_close_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d06      	ldr	r5, [pc, #24]	@ (8003750 <_close_r+0x1c>)
 8003738:	2300      	movs	r3, #0
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fd fb7f 	bl	8000e42 <_close>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_close_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_close_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	2000028c 	.word	0x2000028c

08003754 <_lseek_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d07      	ldr	r5, [pc, #28]	@ (8003774 <_lseek_r+0x20>)
 8003758:	4604      	mov	r4, r0
 800375a:	4608      	mov	r0, r1
 800375c:	4611      	mov	r1, r2
 800375e:	2200      	movs	r2, #0
 8003760:	602a      	str	r2, [r5, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	f7fd fb94 	bl	8000e90 <_lseek>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	d102      	bne.n	8003772 <_lseek_r+0x1e>
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	b103      	cbz	r3, 8003772 <_lseek_r+0x1e>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	2000028c 	.word	0x2000028c

08003778 <_read_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4d07      	ldr	r5, [pc, #28]	@ (8003798 <_read_r+0x20>)
 800377c:	4604      	mov	r4, r0
 800377e:	4608      	mov	r0, r1
 8003780:	4611      	mov	r1, r2
 8003782:	2200      	movs	r2, #0
 8003784:	602a      	str	r2, [r5, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f7fd fb3e 	bl	8000e08 <_read>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_read_r+0x1e>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_read_r+0x1e>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	2000028c 	.word	0x2000028c

0800379c <_write_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d07      	ldr	r5, [pc, #28]	@ (80037bc <_write_r+0x20>)
 80037a0:	4604      	mov	r4, r0
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	602a      	str	r2, [r5, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7fc ff6a 	bl	8000684 <_write>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_write_r+0x1e>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_write_r+0x1e>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	2000028c 	.word	0x2000028c

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	@ (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000018 	.word	0x20000018

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	@ (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	@ (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 fd2a 	bl	8004238 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	080042cc 	.word	0x080042cc
 8003808:	080042cc 	.word	0x080042cc
 800380c:	080042cc 	.word	0x080042cc
 8003810:	080042d0 	.word	0x080042d0

08003814 <__retarget_lock_init_recursive>:
 8003814:	4770      	bx	lr

08003816 <__retarget_lock_acquire_recursive>:
 8003816:	4770      	bx	lr

08003818 <__retarget_lock_release_recursive>:
 8003818:	4770      	bx	lr
	...

0800381c <_free_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4605      	mov	r5, r0
 8003820:	2900      	cmp	r1, #0
 8003822:	d041      	beq.n	80038a8 <_free_r+0x8c>
 8003824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003828:	1f0c      	subs	r4, r1, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfb8      	it	lt
 800382e:	18e4      	addlt	r4, r4, r3
 8003830:	f000 f8e8 	bl	8003a04 <__malloc_lock>
 8003834:	4a1d      	ldr	r2, [pc, #116]	@ (80038ac <_free_r+0x90>)
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	b933      	cbnz	r3, 8003848 <_free_r+0x2c>
 800383a:	6063      	str	r3, [r4, #4]
 800383c:	6014      	str	r4, [r2, #0]
 800383e:	4628      	mov	r0, r5
 8003840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003844:	f000 b8e4 	b.w	8003a10 <__malloc_unlock>
 8003848:	42a3      	cmp	r3, r4
 800384a:	d908      	bls.n	800385e <_free_r+0x42>
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	1821      	adds	r1, r4, r0
 8003850:	428b      	cmp	r3, r1
 8003852:	bf01      	itttt	eq
 8003854:	6819      	ldreq	r1, [r3, #0]
 8003856:	685b      	ldreq	r3, [r3, #4]
 8003858:	1809      	addeq	r1, r1, r0
 800385a:	6021      	streq	r1, [r4, #0]
 800385c:	e7ed      	b.n	800383a <_free_r+0x1e>
 800385e:	461a      	mov	r2, r3
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	b10b      	cbz	r3, 8003868 <_free_r+0x4c>
 8003864:	42a3      	cmp	r3, r4
 8003866:	d9fa      	bls.n	800385e <_free_r+0x42>
 8003868:	6811      	ldr	r1, [r2, #0]
 800386a:	1850      	adds	r0, r2, r1
 800386c:	42a0      	cmp	r0, r4
 800386e:	d10b      	bne.n	8003888 <_free_r+0x6c>
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	4401      	add	r1, r0
 8003874:	1850      	adds	r0, r2, r1
 8003876:	4283      	cmp	r3, r0
 8003878:	6011      	str	r1, [r2, #0]
 800387a:	d1e0      	bne.n	800383e <_free_r+0x22>
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	6053      	str	r3, [r2, #4]
 8003882:	4408      	add	r0, r1
 8003884:	6010      	str	r0, [r2, #0]
 8003886:	e7da      	b.n	800383e <_free_r+0x22>
 8003888:	d902      	bls.n	8003890 <_free_r+0x74>
 800388a:	230c      	movs	r3, #12
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	e7d6      	b.n	800383e <_free_r+0x22>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	1821      	adds	r1, r4, r0
 8003894:	428b      	cmp	r3, r1
 8003896:	bf04      	itt	eq
 8003898:	6819      	ldreq	r1, [r3, #0]
 800389a:	685b      	ldreq	r3, [r3, #4]
 800389c:	6063      	str	r3, [r4, #4]
 800389e:	bf04      	itt	eq
 80038a0:	1809      	addeq	r1, r1, r0
 80038a2:	6021      	streq	r1, [r4, #0]
 80038a4:	6054      	str	r4, [r2, #4]
 80038a6:	e7ca      	b.n	800383e <_free_r+0x22>
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
 80038aa:	bf00      	nop
 80038ac:	20000298 	.word	0x20000298

080038b0 <malloc>:
 80038b0:	4b02      	ldr	r3, [pc, #8]	@ (80038bc <malloc+0xc>)
 80038b2:	4601      	mov	r1, r0
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	f000 b825 	b.w	8003904 <_malloc_r>
 80038ba:	bf00      	nop
 80038bc:	20000018 	.word	0x20000018

080038c0 <sbrk_aligned>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003900 <sbrk_aligned+0x40>)
 80038c4:	460c      	mov	r4, r1
 80038c6:	6831      	ldr	r1, [r6, #0]
 80038c8:	4605      	mov	r5, r0
 80038ca:	b911      	cbnz	r1, 80038d2 <sbrk_aligned+0x12>
 80038cc:	f000 fca4 	bl	8004218 <_sbrk_r>
 80038d0:	6030      	str	r0, [r6, #0]
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 fc9f 	bl	8004218 <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d103      	bne.n	80038e6 <sbrk_aligned+0x26>
 80038de:	f04f 34ff 	mov.w	r4, #4294967295
 80038e2:	4620      	mov	r0, r4
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	1cc4      	adds	r4, r0, #3
 80038e8:	f024 0403 	bic.w	r4, r4, #3
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d0f8      	beq.n	80038e2 <sbrk_aligned+0x22>
 80038f0:	1a21      	subs	r1, r4, r0
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 fc90 	bl	8004218 <_sbrk_r>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d1f2      	bne.n	80038e2 <sbrk_aligned+0x22>
 80038fc:	e7ef      	b.n	80038de <sbrk_aligned+0x1e>
 80038fe:	bf00      	nop
 8003900:	20000294 	.word	0x20000294

08003904 <_malloc_r>:
 8003904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003908:	1ccd      	adds	r5, r1, #3
 800390a:	f025 0503 	bic.w	r5, r5, #3
 800390e:	3508      	adds	r5, #8
 8003910:	2d0c      	cmp	r5, #12
 8003912:	bf38      	it	cc
 8003914:	250c      	movcc	r5, #12
 8003916:	2d00      	cmp	r5, #0
 8003918:	4606      	mov	r6, r0
 800391a:	db01      	blt.n	8003920 <_malloc_r+0x1c>
 800391c:	42a9      	cmp	r1, r5
 800391e:	d904      	bls.n	800392a <_malloc_r+0x26>
 8003920:	230c      	movs	r3, #12
 8003922:	6033      	str	r3, [r6, #0]
 8003924:	2000      	movs	r0, #0
 8003926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a00 <_malloc_r+0xfc>
 800392e:	f000 f869 	bl	8003a04 <__malloc_lock>
 8003932:	f8d8 3000 	ldr.w	r3, [r8]
 8003936:	461c      	mov	r4, r3
 8003938:	bb44      	cbnz	r4, 800398c <_malloc_r+0x88>
 800393a:	4629      	mov	r1, r5
 800393c:	4630      	mov	r0, r6
 800393e:	f7ff ffbf 	bl	80038c0 <sbrk_aligned>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	4604      	mov	r4, r0
 8003946:	d158      	bne.n	80039fa <_malloc_r+0xf6>
 8003948:	f8d8 4000 	ldr.w	r4, [r8]
 800394c:	4627      	mov	r7, r4
 800394e:	2f00      	cmp	r7, #0
 8003950:	d143      	bne.n	80039da <_malloc_r+0xd6>
 8003952:	2c00      	cmp	r4, #0
 8003954:	d04b      	beq.n	80039ee <_malloc_r+0xea>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	4639      	mov	r1, r7
 800395a:	4630      	mov	r0, r6
 800395c:	eb04 0903 	add.w	r9, r4, r3
 8003960:	f000 fc5a 	bl	8004218 <_sbrk_r>
 8003964:	4581      	cmp	r9, r0
 8003966:	d142      	bne.n	80039ee <_malloc_r+0xea>
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	1a6d      	subs	r5, r5, r1
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f7ff ffa6 	bl	80038c0 <sbrk_aligned>
 8003974:	3001      	adds	r0, #1
 8003976:	d03a      	beq.n	80039ee <_malloc_r+0xea>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	442b      	add	r3, r5
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	f8d8 3000 	ldr.w	r3, [r8]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	bb62      	cbnz	r2, 80039e0 <_malloc_r+0xdc>
 8003986:	f8c8 7000 	str.w	r7, [r8]
 800398a:	e00f      	b.n	80039ac <_malloc_r+0xa8>
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	1b52      	subs	r2, r2, r5
 8003990:	d420      	bmi.n	80039d4 <_malloc_r+0xd0>
 8003992:	2a0b      	cmp	r2, #11
 8003994:	d917      	bls.n	80039c6 <_malloc_r+0xc2>
 8003996:	1961      	adds	r1, r4, r5
 8003998:	42a3      	cmp	r3, r4
 800399a:	6025      	str	r5, [r4, #0]
 800399c:	bf18      	it	ne
 800399e:	6059      	strne	r1, [r3, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	bf08      	it	eq
 80039a4:	f8c8 1000 	streq.w	r1, [r8]
 80039a8:	5162      	str	r2, [r4, r5]
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f82f 	bl	8003a10 <__malloc_unlock>
 80039b2:	f104 000b 	add.w	r0, r4, #11
 80039b6:	1d23      	adds	r3, r4, #4
 80039b8:	f020 0007 	bic.w	r0, r0, #7
 80039bc:	1ac2      	subs	r2, r0, r3
 80039be:	bf1c      	itt	ne
 80039c0:	1a1b      	subne	r3, r3, r0
 80039c2:	50a3      	strne	r3, [r4, r2]
 80039c4:	e7af      	b.n	8003926 <_malloc_r+0x22>
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	bf0c      	ite	eq
 80039cc:	f8c8 2000 	streq.w	r2, [r8]
 80039d0:	605a      	strne	r2, [r3, #4]
 80039d2:	e7eb      	b.n	80039ac <_malloc_r+0xa8>
 80039d4:	4623      	mov	r3, r4
 80039d6:	6864      	ldr	r4, [r4, #4]
 80039d8:	e7ae      	b.n	8003938 <_malloc_r+0x34>
 80039da:	463c      	mov	r4, r7
 80039dc:	687f      	ldr	r7, [r7, #4]
 80039de:	e7b6      	b.n	800394e <_malloc_r+0x4a>
 80039e0:	461a      	mov	r2, r3
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d1fb      	bne.n	80039e0 <_malloc_r+0xdc>
 80039e8:	2300      	movs	r3, #0
 80039ea:	6053      	str	r3, [r2, #4]
 80039ec:	e7de      	b.n	80039ac <_malloc_r+0xa8>
 80039ee:	230c      	movs	r3, #12
 80039f0:	6033      	str	r3, [r6, #0]
 80039f2:	4630      	mov	r0, r6
 80039f4:	f000 f80c 	bl	8003a10 <__malloc_unlock>
 80039f8:	e794      	b.n	8003924 <_malloc_r+0x20>
 80039fa:	6005      	str	r5, [r0, #0]
 80039fc:	e7d6      	b.n	80039ac <_malloc_r+0xa8>
 80039fe:	bf00      	nop
 8003a00:	20000298 	.word	0x20000298

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	@ (8003a0c <__malloc_lock+0x8>)
 8003a06:	f7ff bf06 	b.w	8003816 <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000290 	.word	0x20000290

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	@ (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f7ff bf01 	b.w	8003818 <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	20000290 	.word	0x20000290

08003a1c <__sfputc_r>:
 8003a1c:	6893      	ldr	r3, [r2, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	b410      	push	{r4}
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	da08      	bge.n	8003a3a <__sfputc_r+0x1e>
 8003a28:	6994      	ldr	r4, [r2, #24]
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	db01      	blt.n	8003a32 <__sfputc_r+0x16>
 8003a2e:	290a      	cmp	r1, #10
 8003a30:	d103      	bne.n	8003a3a <__sfputc_r+0x1e>
 8003a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a36:	f7ff bde0 	b.w	80035fa <__swbuf_r>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	1c58      	adds	r0, r3, #1
 8003a3e:	6010      	str	r0, [r2, #0]
 8003a40:	7019      	strb	r1, [r3, #0]
 8003a42:	4608      	mov	r0, r1
 8003a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <__sfputs_r>:
 8003a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460f      	mov	r7, r1
 8003a50:	4614      	mov	r4, r2
 8003a52:	18d5      	adds	r5, r2, r3
 8003a54:	42ac      	cmp	r4, r5
 8003a56:	d101      	bne.n	8003a5c <__sfputs_r+0x12>
 8003a58:	2000      	movs	r0, #0
 8003a5a:	e007      	b.n	8003a6c <__sfputs_r+0x22>
 8003a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a60:	463a      	mov	r2, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7ff ffda 	bl	8003a1c <__sfputc_r>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d1f3      	bne.n	8003a54 <__sfputs_r+0xa>
 8003a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a70 <_vfiprintf_r>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	460d      	mov	r5, r1
 8003a76:	b09d      	sub	sp, #116	@ 0x74
 8003a78:	4614      	mov	r4, r2
 8003a7a:	4698      	mov	r8, r3
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	b118      	cbz	r0, 8003a88 <_vfiprintf_r+0x18>
 8003a80:	6a03      	ldr	r3, [r0, #32]
 8003a82:	b90b      	cbnz	r3, 8003a88 <_vfiprintf_r+0x18>
 8003a84:	f7ff fc72 	bl	800336c <__sinit>
 8003a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a8a:	07d9      	lsls	r1, r3, #31
 8003a8c:	d405      	bmi.n	8003a9a <_vfiprintf_r+0x2a>
 8003a8e:	89ab      	ldrh	r3, [r5, #12]
 8003a90:	059a      	lsls	r2, r3, #22
 8003a92:	d402      	bmi.n	8003a9a <_vfiprintf_r+0x2a>
 8003a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a96:	f7ff febe 	bl	8003816 <__retarget_lock_acquire_recursive>
 8003a9a:	89ab      	ldrh	r3, [r5, #12]
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	d501      	bpl.n	8003aa4 <_vfiprintf_r+0x34>
 8003aa0:	692b      	ldr	r3, [r5, #16]
 8003aa2:	b99b      	cbnz	r3, 8003acc <_vfiprintf_r+0x5c>
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f7ff fde6 	bl	8003678 <__swsetup_r>
 8003aac:	b170      	cbz	r0, 8003acc <_vfiprintf_r+0x5c>
 8003aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ab0:	07dc      	lsls	r4, r3, #31
 8003ab2:	d504      	bpl.n	8003abe <_vfiprintf_r+0x4e>
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	b01d      	add	sp, #116	@ 0x74
 8003aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abe:	89ab      	ldrh	r3, [r5, #12]
 8003ac0:	0598      	lsls	r0, r3, #22
 8003ac2:	d4f7      	bmi.n	8003ab4 <_vfiprintf_r+0x44>
 8003ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ac6:	f7ff fea7 	bl	8003818 <__retarget_lock_release_recursive>
 8003aca:	e7f3      	b.n	8003ab4 <_vfiprintf_r+0x44>
 8003acc:	2300      	movs	r3, #0
 8003ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ada:	2330      	movs	r3, #48	@ 0x30
 8003adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c8c <_vfiprintf_r+0x21c>
 8003ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ae4:	f04f 0901 	mov.w	r9, #1
 8003ae8:	4623      	mov	r3, r4
 8003aea:	469a      	mov	sl, r3
 8003aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003af0:	b10a      	cbz	r2, 8003af6 <_vfiprintf_r+0x86>
 8003af2:	2a25      	cmp	r2, #37	@ 0x25
 8003af4:	d1f9      	bne.n	8003aea <_vfiprintf_r+0x7a>
 8003af6:	ebba 0b04 	subs.w	fp, sl, r4
 8003afa:	d00b      	beq.n	8003b14 <_vfiprintf_r+0xa4>
 8003afc:	465b      	mov	r3, fp
 8003afe:	4622      	mov	r2, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	4630      	mov	r0, r6
 8003b04:	f7ff ffa1 	bl	8003a4a <__sfputs_r>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f000 80a7 	beq.w	8003c5c <_vfiprintf_r+0x1ec>
 8003b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b10:	445a      	add	r2, fp
 8003b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b14:	f89a 3000 	ldrb.w	r3, [sl]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 809f 	beq.w	8003c5c <_vfiprintf_r+0x1ec>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295
 8003b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b28:	f10a 0a01 	add.w	sl, sl, #1
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	9307      	str	r3, [sp, #28]
 8003b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b36:	4654      	mov	r4, sl
 8003b38:	2205      	movs	r2, #5
 8003b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3e:	4853      	ldr	r0, [pc, #332]	@ (8003c8c <_vfiprintf_r+0x21c>)
 8003b40:	f7fc fb66 	bl	8000210 <memchr>
 8003b44:	9a04      	ldr	r2, [sp, #16]
 8003b46:	b9d8      	cbnz	r0, 8003b80 <_vfiprintf_r+0x110>
 8003b48:	06d1      	lsls	r1, r2, #27
 8003b4a:	bf44      	itt	mi
 8003b4c:	2320      	movmi	r3, #32
 8003b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b52:	0713      	lsls	r3, r2, #28
 8003b54:	bf44      	itt	mi
 8003b56:	232b      	movmi	r3, #43	@ 0x2b
 8003b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b62:	d015      	beq.n	8003b90 <_vfiprintf_r+0x120>
 8003b64:	9a07      	ldr	r2, [sp, #28]
 8003b66:	4654      	mov	r4, sl
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f04f 0c0a 	mov.w	ip, #10
 8003b6e:	4621      	mov	r1, r4
 8003b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b74:	3b30      	subs	r3, #48	@ 0x30
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d94b      	bls.n	8003c12 <_vfiprintf_r+0x1a2>
 8003b7a:	b1b0      	cbz	r0, 8003baa <_vfiprintf_r+0x13a>
 8003b7c:	9207      	str	r2, [sp, #28]
 8003b7e:	e014      	b.n	8003baa <_vfiprintf_r+0x13a>
 8003b80:	eba0 0308 	sub.w	r3, r0, r8
 8003b84:	fa09 f303 	lsl.w	r3, r9, r3
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	46a2      	mov	sl, r4
 8003b8e:	e7d2      	b.n	8003b36 <_vfiprintf_r+0xc6>
 8003b90:	9b03      	ldr	r3, [sp, #12]
 8003b92:	1d19      	adds	r1, r3, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	9103      	str	r1, [sp, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bfbb      	ittet	lt
 8003b9c:	425b      	neglt	r3, r3
 8003b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba2:	9307      	strge	r3, [sp, #28]
 8003ba4:	9307      	strlt	r3, [sp, #28]
 8003ba6:	bfb8      	it	lt
 8003ba8:	9204      	strlt	r2, [sp, #16]
 8003baa:	7823      	ldrb	r3, [r4, #0]
 8003bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bae:	d10a      	bne.n	8003bc6 <_vfiprintf_r+0x156>
 8003bb0:	7863      	ldrb	r3, [r4, #1]
 8003bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb4:	d132      	bne.n	8003c1c <_vfiprintf_r+0x1ac>
 8003bb6:	9b03      	ldr	r3, [sp, #12]
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	9203      	str	r2, [sp, #12]
 8003bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bc2:	3402      	adds	r4, #2
 8003bc4:	9305      	str	r3, [sp, #20]
 8003bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c9c <_vfiprintf_r+0x22c>
 8003bca:	7821      	ldrb	r1, [r4, #0]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4650      	mov	r0, sl
 8003bd0:	f7fc fb1e 	bl	8000210 <memchr>
 8003bd4:	b138      	cbz	r0, 8003be6 <_vfiprintf_r+0x176>
 8003bd6:	9b04      	ldr	r3, [sp, #16]
 8003bd8:	eba0 000a 	sub.w	r0, r0, sl
 8003bdc:	2240      	movs	r2, #64	@ 0x40
 8003bde:	4082      	lsls	r2, r0
 8003be0:	4313      	orrs	r3, r2
 8003be2:	3401      	adds	r4, #1
 8003be4:	9304      	str	r3, [sp, #16]
 8003be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bea:	4829      	ldr	r0, [pc, #164]	@ (8003c90 <_vfiprintf_r+0x220>)
 8003bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	f7fc fb0d 	bl	8000210 <memchr>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d03f      	beq.n	8003c7a <_vfiprintf_r+0x20a>
 8003bfa:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <_vfiprintf_r+0x224>)
 8003bfc:	bb1b      	cbnz	r3, 8003c46 <_vfiprintf_r+0x1d6>
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	3307      	adds	r3, #7
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	3308      	adds	r3, #8
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0c:	443b      	add	r3, r7
 8003c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c10:	e76a      	b.n	8003ae8 <_vfiprintf_r+0x78>
 8003c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c16:	460c      	mov	r4, r1
 8003c18:	2001      	movs	r0, #1
 8003c1a:	e7a8      	b.n	8003b6e <_vfiprintf_r+0xfe>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	3401      	adds	r4, #1
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	4619      	mov	r1, r3
 8003c24:	f04f 0c0a 	mov.w	ip, #10
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c2e:	3a30      	subs	r2, #48	@ 0x30
 8003c30:	2a09      	cmp	r2, #9
 8003c32:	d903      	bls.n	8003c3c <_vfiprintf_r+0x1cc>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0c6      	beq.n	8003bc6 <_vfiprintf_r+0x156>
 8003c38:	9105      	str	r1, [sp, #20]
 8003c3a:	e7c4      	b.n	8003bc6 <_vfiprintf_r+0x156>
 8003c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c40:	4604      	mov	r4, r0
 8003c42:	2301      	movs	r3, #1
 8003c44:	e7f0      	b.n	8003c28 <_vfiprintf_r+0x1b8>
 8003c46:	ab03      	add	r3, sp, #12
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	462a      	mov	r2, r5
 8003c4c:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <_vfiprintf_r+0x228>)
 8003c4e:	a904      	add	r1, sp, #16
 8003c50:	4630      	mov	r0, r6
 8003c52:	f3af 8000 	nop.w
 8003c56:	4607      	mov	r7, r0
 8003c58:	1c78      	adds	r0, r7, #1
 8003c5a:	d1d6      	bne.n	8003c0a <_vfiprintf_r+0x19a>
 8003c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c5e:	07d9      	lsls	r1, r3, #31
 8003c60:	d405      	bmi.n	8003c6e <_vfiprintf_r+0x1fe>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	059a      	lsls	r2, r3, #22
 8003c66:	d402      	bmi.n	8003c6e <_vfiprintf_r+0x1fe>
 8003c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c6a:	f7ff fdd5 	bl	8003818 <__retarget_lock_release_recursive>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	065b      	lsls	r3, r3, #25
 8003c72:	f53f af1f 	bmi.w	8003ab4 <_vfiprintf_r+0x44>
 8003c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c78:	e71e      	b.n	8003ab8 <_vfiprintf_r+0x48>
 8003c7a:	ab03      	add	r3, sp, #12
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	462a      	mov	r2, r5
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <_vfiprintf_r+0x228>)
 8003c82:	a904      	add	r1, sp, #16
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 f879 	bl	8003d7c <_printf_i>
 8003c8a:	e7e4      	b.n	8003c56 <_vfiprintf_r+0x1e6>
 8003c8c:	08004290 	.word	0x08004290
 8003c90:	0800429a 	.word	0x0800429a
 8003c94:	00000000 	.word	0x00000000
 8003c98:	08003a4b 	.word	0x08003a4b
 8003c9c:	08004296 	.word	0x08004296

08003ca0 <_printf_common>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	4698      	mov	r8, r3
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bfb8      	it	lt
 8003cb4:	4613      	movlt	r3, r2
 8003cb6:	6033      	str	r3, [r6, #0]
 8003cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	b10a      	cbz	r2, 8003cc6 <_printf_common+0x26>
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	0699      	lsls	r1, r3, #26
 8003cca:	bf42      	ittt	mi
 8003ccc:	6833      	ldrmi	r3, [r6, #0]
 8003cce:	3302      	addmi	r3, #2
 8003cd0:	6033      	strmi	r3, [r6, #0]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	f015 0506 	ands.w	r5, r5, #6
 8003cd8:	d106      	bne.n	8003ce8 <_printf_common+0x48>
 8003cda:	f104 0a19 	add.w	sl, r4, #25
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	6832      	ldr	r2, [r6, #0]
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	42ab      	cmp	r3, r5
 8003ce6:	dc26      	bgt.n	8003d36 <_printf_common+0x96>
 8003ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	3b00      	subs	r3, #0
 8003cf0:	bf18      	it	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	0692      	lsls	r2, r2, #26
 8003cf6:	d42b      	bmi.n	8003d50 <_printf_common+0xb0>
 8003cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	4638      	mov	r0, r7
 8003d00:	47c8      	blx	r9
 8003d02:	3001      	adds	r0, #1
 8003d04:	d01e      	beq.n	8003d44 <_printf_common+0xa4>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	6922      	ldr	r2, [r4, #16]
 8003d0a:	f003 0306 	and.w	r3, r3, #6
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf02      	ittt	eq
 8003d12:	68e5      	ldreq	r5, [r4, #12]
 8003d14:	6833      	ldreq	r3, [r6, #0]
 8003d16:	1aed      	subeq	r5, r5, r3
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	bf0c      	ite	eq
 8003d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d20:	2500      	movne	r5, #0
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bfc4      	itt	gt
 8003d26:	1a9b      	subgt	r3, r3, r2
 8003d28:	18ed      	addgt	r5, r5, r3
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	341a      	adds	r4, #26
 8003d2e:	42b5      	cmp	r5, r6
 8003d30:	d11a      	bne.n	8003d68 <_printf_common+0xc8>
 8003d32:	2000      	movs	r0, #0
 8003d34:	e008      	b.n	8003d48 <_printf_common+0xa8>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4652      	mov	r2, sl
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	47c8      	blx	r9
 8003d40:	3001      	adds	r0, #1
 8003d42:	d103      	bne.n	8003d4c <_printf_common+0xac>
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	3501      	adds	r5, #1
 8003d4e:	e7c6      	b.n	8003cde <_printf_common+0x3e>
 8003d50:	18e1      	adds	r1, r4, r3
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	2030      	movs	r0, #48	@ 0x30
 8003d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d5a:	4422      	add	r2, r4
 8003d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d64:	3302      	adds	r3, #2
 8003d66:	e7c7      	b.n	8003cf8 <_printf_common+0x58>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	4638      	mov	r0, r7
 8003d70:	47c8      	blx	r9
 8003d72:	3001      	adds	r0, #1
 8003d74:	d0e6      	beq.n	8003d44 <_printf_common+0xa4>
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7d9      	b.n	8003d2e <_printf_common+0x8e>
	...

08003d7c <_printf_i>:
 8003d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	7e0f      	ldrb	r7, [r1, #24]
 8003d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d84:	2f78      	cmp	r7, #120	@ 0x78
 8003d86:	4691      	mov	r9, r2
 8003d88:	4680      	mov	r8, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	469a      	mov	sl, r3
 8003d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d92:	d807      	bhi.n	8003da4 <_printf_i+0x28>
 8003d94:	2f62      	cmp	r7, #98	@ 0x62
 8003d96:	d80a      	bhi.n	8003dae <_printf_i+0x32>
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	f000 80d1 	beq.w	8003f40 <_printf_i+0x1c4>
 8003d9e:	2f58      	cmp	r7, #88	@ 0x58
 8003da0:	f000 80b8 	beq.w	8003f14 <_printf_i+0x198>
 8003da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003dac:	e03a      	b.n	8003e24 <_printf_i+0xa8>
 8003dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003db2:	2b15      	cmp	r3, #21
 8003db4:	d8f6      	bhi.n	8003da4 <_printf_i+0x28>
 8003db6:	a101      	add	r1, pc, #4	@ (adr r1, 8003dbc <_printf_i+0x40>)
 8003db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dbc:	08003e15 	.word	0x08003e15
 8003dc0:	08003e29 	.word	0x08003e29
 8003dc4:	08003da5 	.word	0x08003da5
 8003dc8:	08003da5 	.word	0x08003da5
 8003dcc:	08003da5 	.word	0x08003da5
 8003dd0:	08003da5 	.word	0x08003da5
 8003dd4:	08003e29 	.word	0x08003e29
 8003dd8:	08003da5 	.word	0x08003da5
 8003ddc:	08003da5 	.word	0x08003da5
 8003de0:	08003da5 	.word	0x08003da5
 8003de4:	08003da5 	.word	0x08003da5
 8003de8:	08003f27 	.word	0x08003f27
 8003dec:	08003e53 	.word	0x08003e53
 8003df0:	08003ee1 	.word	0x08003ee1
 8003df4:	08003da5 	.word	0x08003da5
 8003df8:	08003da5 	.word	0x08003da5
 8003dfc:	08003f49 	.word	0x08003f49
 8003e00:	08003da5 	.word	0x08003da5
 8003e04:	08003e53 	.word	0x08003e53
 8003e08:	08003da5 	.word	0x08003da5
 8003e0c:	08003da5 	.word	0x08003da5
 8003e10:	08003ee9 	.word	0x08003ee9
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6032      	str	r2, [r6, #0]
 8003e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e24:	2301      	movs	r3, #1
 8003e26:	e09c      	b.n	8003f62 <_printf_i+0x1e6>
 8003e28:	6833      	ldr	r3, [r6, #0]
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	1d19      	adds	r1, r3, #4
 8003e2e:	6031      	str	r1, [r6, #0]
 8003e30:	0606      	lsls	r6, r0, #24
 8003e32:	d501      	bpl.n	8003e38 <_printf_i+0xbc>
 8003e34:	681d      	ldr	r5, [r3, #0]
 8003e36:	e003      	b.n	8003e40 <_printf_i+0xc4>
 8003e38:	0645      	lsls	r5, r0, #25
 8003e3a:	d5fb      	bpl.n	8003e34 <_printf_i+0xb8>
 8003e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	da03      	bge.n	8003e4c <_printf_i+0xd0>
 8003e44:	232d      	movs	r3, #45	@ 0x2d
 8003e46:	426d      	negs	r5, r5
 8003e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e4c:	4858      	ldr	r0, [pc, #352]	@ (8003fb0 <_printf_i+0x234>)
 8003e4e:	230a      	movs	r3, #10
 8003e50:	e011      	b.n	8003e76 <_printf_i+0xfa>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	6833      	ldr	r3, [r6, #0]
 8003e56:	0608      	lsls	r0, r1, #24
 8003e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e5c:	d402      	bmi.n	8003e64 <_printf_i+0xe8>
 8003e5e:	0649      	lsls	r1, r1, #25
 8003e60:	bf48      	it	mi
 8003e62:	b2ad      	uxthmi	r5, r5
 8003e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e66:	4852      	ldr	r0, [pc, #328]	@ (8003fb0 <_printf_i+0x234>)
 8003e68:	6033      	str	r3, [r6, #0]
 8003e6a:	bf14      	ite	ne
 8003e6c:	230a      	movne	r3, #10
 8003e6e:	2308      	moveq	r3, #8
 8003e70:	2100      	movs	r1, #0
 8003e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e76:	6866      	ldr	r6, [r4, #4]
 8003e78:	60a6      	str	r6, [r4, #8]
 8003e7a:	2e00      	cmp	r6, #0
 8003e7c:	db05      	blt.n	8003e8a <_printf_i+0x10e>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	432e      	orrs	r6, r5
 8003e82:	f021 0104 	bic.w	r1, r1, #4
 8003e86:	6021      	str	r1, [r4, #0]
 8003e88:	d04b      	beq.n	8003f22 <_printf_i+0x1a6>
 8003e8a:	4616      	mov	r6, r2
 8003e8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e90:	fb03 5711 	mls	r7, r3, r1, r5
 8003e94:	5dc7      	ldrb	r7, [r0, r7]
 8003e96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e9a:	462f      	mov	r7, r5
 8003e9c:	42bb      	cmp	r3, r7
 8003e9e:	460d      	mov	r5, r1
 8003ea0:	d9f4      	bls.n	8003e8c <_printf_i+0x110>
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d10b      	bne.n	8003ebe <_printf_i+0x142>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	07df      	lsls	r7, r3, #31
 8003eaa:	d508      	bpl.n	8003ebe <_printf_i+0x142>
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	6861      	ldr	r1, [r4, #4]
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	bfde      	ittt	le
 8003eb4:	2330      	movle	r3, #48	@ 0x30
 8003eb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ebe:	1b92      	subs	r2, r2, r6
 8003ec0:	6122      	str	r2, [r4, #16]
 8003ec2:	f8cd a000 	str.w	sl, [sp]
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	aa03      	add	r2, sp, #12
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4640      	mov	r0, r8
 8003ece:	f7ff fee7 	bl	8003ca0 <_printf_common>
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d14a      	bne.n	8003f6c <_printf_i+0x1f0>
 8003ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eda:	b004      	add	sp, #16
 8003edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	4832      	ldr	r0, [pc, #200]	@ (8003fb4 <_printf_i+0x238>)
 8003eea:	2778      	movs	r7, #120	@ 0x78
 8003eec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	6831      	ldr	r1, [r6, #0]
 8003ef4:	061f      	lsls	r7, r3, #24
 8003ef6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003efa:	d402      	bmi.n	8003f02 <_printf_i+0x186>
 8003efc:	065f      	lsls	r7, r3, #25
 8003efe:	bf48      	it	mi
 8003f00:	b2ad      	uxthmi	r5, r5
 8003f02:	6031      	str	r1, [r6, #0]
 8003f04:	07d9      	lsls	r1, r3, #31
 8003f06:	bf44      	itt	mi
 8003f08:	f043 0320 	orrmi.w	r3, r3, #32
 8003f0c:	6023      	strmi	r3, [r4, #0]
 8003f0e:	b11d      	cbz	r5, 8003f18 <_printf_i+0x19c>
 8003f10:	2310      	movs	r3, #16
 8003f12:	e7ad      	b.n	8003e70 <_printf_i+0xf4>
 8003f14:	4826      	ldr	r0, [pc, #152]	@ (8003fb0 <_printf_i+0x234>)
 8003f16:	e7e9      	b.n	8003eec <_printf_i+0x170>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	f023 0320 	bic.w	r3, r3, #32
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	e7f6      	b.n	8003f10 <_printf_i+0x194>
 8003f22:	4616      	mov	r6, r2
 8003f24:	e7bd      	b.n	8003ea2 <_printf_i+0x126>
 8003f26:	6833      	ldr	r3, [r6, #0]
 8003f28:	6825      	ldr	r5, [r4, #0]
 8003f2a:	6961      	ldr	r1, [r4, #20]
 8003f2c:	1d18      	adds	r0, r3, #4
 8003f2e:	6030      	str	r0, [r6, #0]
 8003f30:	062e      	lsls	r6, r5, #24
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	d501      	bpl.n	8003f3a <_printf_i+0x1be>
 8003f36:	6019      	str	r1, [r3, #0]
 8003f38:	e002      	b.n	8003f40 <_printf_i+0x1c4>
 8003f3a:	0668      	lsls	r0, r5, #25
 8003f3c:	d5fb      	bpl.n	8003f36 <_printf_i+0x1ba>
 8003f3e:	8019      	strh	r1, [r3, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	4616      	mov	r6, r2
 8003f46:	e7bc      	b.n	8003ec2 <_printf_i+0x146>
 8003f48:	6833      	ldr	r3, [r6, #0]
 8003f4a:	1d1a      	adds	r2, r3, #4
 8003f4c:	6032      	str	r2, [r6, #0]
 8003f4e:	681e      	ldr	r6, [r3, #0]
 8003f50:	6862      	ldr	r2, [r4, #4]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4630      	mov	r0, r6
 8003f56:	f7fc f95b 	bl	8000210 <memchr>
 8003f5a:	b108      	cbz	r0, 8003f60 <_printf_i+0x1e4>
 8003f5c:	1b80      	subs	r0, r0, r6
 8003f5e:	6060      	str	r0, [r4, #4]
 8003f60:	6863      	ldr	r3, [r4, #4]
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	2300      	movs	r3, #0
 8003f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f6a:	e7aa      	b.n	8003ec2 <_printf_i+0x146>
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	4632      	mov	r2, r6
 8003f70:	4649      	mov	r1, r9
 8003f72:	4640      	mov	r0, r8
 8003f74:	47d0      	blx	sl
 8003f76:	3001      	adds	r0, #1
 8003f78:	d0ad      	beq.n	8003ed6 <_printf_i+0x15a>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	079b      	lsls	r3, r3, #30
 8003f7e:	d413      	bmi.n	8003fa8 <_printf_i+0x22c>
 8003f80:	68e0      	ldr	r0, [r4, #12]
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	4298      	cmp	r0, r3
 8003f86:	bfb8      	it	lt
 8003f88:	4618      	movlt	r0, r3
 8003f8a:	e7a6      	b.n	8003eda <_printf_i+0x15e>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4632      	mov	r2, r6
 8003f90:	4649      	mov	r1, r9
 8003f92:	4640      	mov	r0, r8
 8003f94:	47d0      	blx	sl
 8003f96:	3001      	adds	r0, #1
 8003f98:	d09d      	beq.n	8003ed6 <_printf_i+0x15a>
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	68e3      	ldr	r3, [r4, #12]
 8003f9e:	9903      	ldr	r1, [sp, #12]
 8003fa0:	1a5b      	subs	r3, r3, r1
 8003fa2:	42ab      	cmp	r3, r5
 8003fa4:	dcf2      	bgt.n	8003f8c <_printf_i+0x210>
 8003fa6:	e7eb      	b.n	8003f80 <_printf_i+0x204>
 8003fa8:	2500      	movs	r5, #0
 8003faa:	f104 0619 	add.w	r6, r4, #25
 8003fae:	e7f5      	b.n	8003f9c <_printf_i+0x220>
 8003fb0:	080042a1 	.word	0x080042a1
 8003fb4:	080042b2 	.word	0x080042b2

08003fb8 <__sflush_r>:
 8003fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc0:	0716      	lsls	r6, r2, #28
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	d454      	bmi.n	8004072 <__sflush_r+0xba>
 8003fc8:	684b      	ldr	r3, [r1, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dc02      	bgt.n	8003fd4 <__sflush_r+0x1c>
 8003fce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	dd48      	ble.n	8004066 <__sflush_r+0xae>
 8003fd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	d045      	beq.n	8004066 <__sflush_r+0xae>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003fe0:	682f      	ldr	r7, [r5, #0]
 8003fe2:	6a21      	ldr	r1, [r4, #32]
 8003fe4:	602b      	str	r3, [r5, #0]
 8003fe6:	d030      	beq.n	800404a <__sflush_r+0x92>
 8003fe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0759      	lsls	r1, r3, #29
 8003fee:	d505      	bpl.n	8003ffc <__sflush_r+0x44>
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	1ad2      	subs	r2, r2, r3
 8003ff4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ff6:	b10b      	cbz	r3, 8003ffc <__sflush_r+0x44>
 8003ff8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004000:	6a21      	ldr	r1, [r4, #32]
 8004002:	4628      	mov	r0, r5
 8004004:	47b0      	blx	r6
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	d106      	bne.n	800401a <__sflush_r+0x62>
 800400c:	6829      	ldr	r1, [r5, #0]
 800400e:	291d      	cmp	r1, #29
 8004010:	d82b      	bhi.n	800406a <__sflush_r+0xb2>
 8004012:	4a2a      	ldr	r2, [pc, #168]	@ (80040bc <__sflush_r+0x104>)
 8004014:	40ca      	lsrs	r2, r1
 8004016:	07d6      	lsls	r6, r2, #31
 8004018:	d527      	bpl.n	800406a <__sflush_r+0xb2>
 800401a:	2200      	movs	r2, #0
 800401c:	6062      	str	r2, [r4, #4]
 800401e:	04d9      	lsls	r1, r3, #19
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	6022      	str	r2, [r4, #0]
 8004024:	d504      	bpl.n	8004030 <__sflush_r+0x78>
 8004026:	1c42      	adds	r2, r0, #1
 8004028:	d101      	bne.n	800402e <__sflush_r+0x76>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	b903      	cbnz	r3, 8004030 <__sflush_r+0x78>
 800402e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004032:	602f      	str	r7, [r5, #0]
 8004034:	b1b9      	cbz	r1, 8004066 <__sflush_r+0xae>
 8004036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800403a:	4299      	cmp	r1, r3
 800403c:	d002      	beq.n	8004044 <__sflush_r+0x8c>
 800403e:	4628      	mov	r0, r5
 8004040:	f7ff fbec 	bl	800381c <_free_r>
 8004044:	2300      	movs	r3, #0
 8004046:	6363      	str	r3, [r4, #52]	@ 0x34
 8004048:	e00d      	b.n	8004066 <__sflush_r+0xae>
 800404a:	2301      	movs	r3, #1
 800404c:	4628      	mov	r0, r5
 800404e:	47b0      	blx	r6
 8004050:	4602      	mov	r2, r0
 8004052:	1c50      	adds	r0, r2, #1
 8004054:	d1c9      	bne.n	8003fea <__sflush_r+0x32>
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0c6      	beq.n	8003fea <__sflush_r+0x32>
 800405c:	2b1d      	cmp	r3, #29
 800405e:	d001      	beq.n	8004064 <__sflush_r+0xac>
 8004060:	2b16      	cmp	r3, #22
 8004062:	d11e      	bne.n	80040a2 <__sflush_r+0xea>
 8004064:	602f      	str	r7, [r5, #0]
 8004066:	2000      	movs	r0, #0
 8004068:	e022      	b.n	80040b0 <__sflush_r+0xf8>
 800406a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406e:	b21b      	sxth	r3, r3
 8004070:	e01b      	b.n	80040aa <__sflush_r+0xf2>
 8004072:	690f      	ldr	r7, [r1, #16]
 8004074:	2f00      	cmp	r7, #0
 8004076:	d0f6      	beq.n	8004066 <__sflush_r+0xae>
 8004078:	0793      	lsls	r3, r2, #30
 800407a:	680e      	ldr	r6, [r1, #0]
 800407c:	bf08      	it	eq
 800407e:	694b      	ldreq	r3, [r1, #20]
 8004080:	600f      	str	r7, [r1, #0]
 8004082:	bf18      	it	ne
 8004084:	2300      	movne	r3, #0
 8004086:	eba6 0807 	sub.w	r8, r6, r7
 800408a:	608b      	str	r3, [r1, #8]
 800408c:	f1b8 0f00 	cmp.w	r8, #0
 8004090:	dde9      	ble.n	8004066 <__sflush_r+0xae>
 8004092:	6a21      	ldr	r1, [r4, #32]
 8004094:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004096:	4643      	mov	r3, r8
 8004098:	463a      	mov	r2, r7
 800409a:	4628      	mov	r0, r5
 800409c:	47b0      	blx	r6
 800409e:	2800      	cmp	r0, #0
 80040a0:	dc08      	bgt.n	80040b4 <__sflush_r+0xfc>
 80040a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b4:	4407      	add	r7, r0
 80040b6:	eba8 0800 	sub.w	r8, r8, r0
 80040ba:	e7e7      	b.n	800408c <__sflush_r+0xd4>
 80040bc:	20400001 	.word	0x20400001

080040c0 <_fflush_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	4605      	mov	r5, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	b913      	cbnz	r3, 80040d0 <_fflush_r+0x10>
 80040ca:	2500      	movs	r5, #0
 80040cc:	4628      	mov	r0, r5
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	b118      	cbz	r0, 80040da <_fflush_r+0x1a>
 80040d2:	6a03      	ldr	r3, [r0, #32]
 80040d4:	b90b      	cbnz	r3, 80040da <_fflush_r+0x1a>
 80040d6:	f7ff f949 	bl	800336c <__sinit>
 80040da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f3      	beq.n	80040ca <_fflush_r+0xa>
 80040e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040e4:	07d0      	lsls	r0, r2, #31
 80040e6:	d404      	bmi.n	80040f2 <_fflush_r+0x32>
 80040e8:	0599      	lsls	r1, r3, #22
 80040ea:	d402      	bmi.n	80040f2 <_fflush_r+0x32>
 80040ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ee:	f7ff fb92 	bl	8003816 <__retarget_lock_acquire_recursive>
 80040f2:	4628      	mov	r0, r5
 80040f4:	4621      	mov	r1, r4
 80040f6:	f7ff ff5f 	bl	8003fb8 <__sflush_r>
 80040fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040fc:	07da      	lsls	r2, r3, #31
 80040fe:	4605      	mov	r5, r0
 8004100:	d4e4      	bmi.n	80040cc <_fflush_r+0xc>
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	059b      	lsls	r3, r3, #22
 8004106:	d4e1      	bmi.n	80040cc <_fflush_r+0xc>
 8004108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800410a:	f7ff fb85 	bl	8003818 <__retarget_lock_release_recursive>
 800410e:	e7dd      	b.n	80040cc <_fflush_r+0xc>

08004110 <__swhatbuf_r>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	460c      	mov	r4, r1
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	2900      	cmp	r1, #0
 800411a:	b096      	sub	sp, #88	@ 0x58
 800411c:	4615      	mov	r5, r2
 800411e:	461e      	mov	r6, r3
 8004120:	da0d      	bge.n	800413e <__swhatbuf_r+0x2e>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	bf14      	ite	ne
 800412e:	2340      	movne	r3, #64	@ 0x40
 8004130:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004134:	2000      	movs	r0, #0
 8004136:	6031      	str	r1, [r6, #0]
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	b016      	add	sp, #88	@ 0x58
 800413c:	bd70      	pop	{r4, r5, r6, pc}
 800413e:	466a      	mov	r2, sp
 8004140:	f000 f848 	bl	80041d4 <_fstat_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	dbec      	blt.n	8004122 <__swhatbuf_r+0x12>
 8004148:	9901      	ldr	r1, [sp, #4]
 800414a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800414e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004152:	4259      	negs	r1, r3
 8004154:	4159      	adcs	r1, r3
 8004156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800415a:	e7eb      	b.n	8004134 <__swhatbuf_r+0x24>

0800415c <__smakebuf_r>:
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004160:	079d      	lsls	r5, r3, #30
 8004162:	4606      	mov	r6, r0
 8004164:	460c      	mov	r4, r1
 8004166:	d507      	bpl.n	8004178 <__smakebuf_r+0x1c>
 8004168:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	6123      	str	r3, [r4, #16]
 8004170:	2301      	movs	r3, #1
 8004172:	6163      	str	r3, [r4, #20]
 8004174:	b003      	add	sp, #12
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004178:	ab01      	add	r3, sp, #4
 800417a:	466a      	mov	r2, sp
 800417c:	f7ff ffc8 	bl	8004110 <__swhatbuf_r>
 8004180:	9f00      	ldr	r7, [sp, #0]
 8004182:	4605      	mov	r5, r0
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	f7ff fbbc 	bl	8003904 <_malloc_r>
 800418c:	b948      	cbnz	r0, 80041a2 <__smakebuf_r+0x46>
 800418e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004192:	059a      	lsls	r2, r3, #22
 8004194:	d4ee      	bmi.n	8004174 <__smakebuf_r+0x18>
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	f043 0302 	orr.w	r3, r3, #2
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	e7e2      	b.n	8004168 <__smakebuf_r+0xc>
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	6020      	str	r0, [r4, #0]
 80041a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	9b01      	ldr	r3, [sp, #4]
 80041ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041b2:	b15b      	cbz	r3, 80041cc <__smakebuf_r+0x70>
 80041b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 f81d 	bl	80041f8 <_isatty_r>
 80041be:	b128      	cbz	r0, 80041cc <__smakebuf_r+0x70>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	431d      	orrs	r5, r3
 80041d0:	81a5      	strh	r5, [r4, #12]
 80041d2:	e7cf      	b.n	8004174 <__smakebuf_r+0x18>

080041d4 <_fstat_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4d07      	ldr	r5, [pc, #28]	@ (80041f4 <_fstat_r+0x20>)
 80041d8:	2300      	movs	r3, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	f7fc fe3a 	bl	8000e5a <_fstat>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	d102      	bne.n	80041f0 <_fstat_r+0x1c>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	b103      	cbz	r3, 80041f0 <_fstat_r+0x1c>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	2000028c 	.word	0x2000028c

080041f8 <_isatty_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d06      	ldr	r5, [pc, #24]	@ (8004214 <_isatty_r+0x1c>)
 80041fc:	2300      	movs	r3, #0
 80041fe:	4604      	mov	r4, r0
 8004200:	4608      	mov	r0, r1
 8004202:	602b      	str	r3, [r5, #0]
 8004204:	f7fc fe39 	bl	8000e7a <_isatty>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_isatty_r+0x1a>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_isatty_r+0x1a>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	2000028c 	.word	0x2000028c

08004218 <_sbrk_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d06      	ldr	r5, [pc, #24]	@ (8004234 <_sbrk_r+0x1c>)
 800421c:	2300      	movs	r3, #0
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	f7fc fe42 	bl	8000eac <_sbrk>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_sbrk_r+0x1a>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_sbrk_r+0x1a>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000028c 	.word	0x2000028c

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr
