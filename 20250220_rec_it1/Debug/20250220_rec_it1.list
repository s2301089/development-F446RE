
20250220_rec_it1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d14  08002d14  00003d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002d34  08002d34  00003d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d3c  08002d3c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d3c  08002d3c  00003d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d40  08002d40  00003d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002dac  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002dac  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008957  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001782  00000000  00000000  0000c9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a2  00000000  00000000  0000e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b6d  00000000  00000000  0000ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b9a  00000000  00000000  000309f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2a0  00000000  00000000  0003a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  00104874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00106c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cfc 	.word	0x08002cfc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002cfc 	.word	0x08002cfc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <main+0x2c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f001 ffab 	bl	800245c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fa2f 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f80d 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f895 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f869 	bl	80005e8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("snct\n");
 8000516:	4803      	ldr	r0, [pc, #12]	@ (8000524 <main+0x30>)
 8000518:	f001 ff98 	bl	800244c <puts>
 800051c:	e7fb      	b.n	8000516 <main+0x22>
 800051e:	bf00      	nop
 8000520:	20000018 	.word	0x20000018
 8000524:	08002d14 	.word	0x08002d14

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2234      	movs	r2, #52	@ 0x34
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 f924 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <SystemClock_Config+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000574:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <SystemClock_Config+0xbc>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <SystemClock_Config+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ff93 	bl	80014c8 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f876 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fcba 	bl	8000f40 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d2:	f000 f861 	bl	8000698 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	@ 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <MX_USART2_UART_Init+0x50>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_USART2_UART_Init+0x4c>)
 8000620:	f001 f9f0 	bl	8001a04 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800062a:	f000 f835 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000084 	.word	0x20000084
 8000638:	40004400 	.word	0x40004400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_GPIO_Init+0x30>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a08      	ldr	r2, [pc, #32]	@ (800066c <MX_GPIO_Init+0x30>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_GPIO_Init+0x30>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr,int len){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	b29a      	uxth	r2, r3
 8000680:	230a      	movs	r3, #10
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <_write+0x24>)
 8000686:	f001 fa0d 	bl	8001aa4 <HAL_UART_Transmit>
	return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000084 	.word	0x20000084

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_UART_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12b      	bne.n	800076e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_UART_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_UART_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800074e:	230c      	movs	r3, #12
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800075e:	2307      	movs	r3, #7
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_UART_MspInit+0x8c>)
 800076a:	f000 fa55 	bl	8000c18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	@ 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40004400 	.word	0x40004400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f917 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e00a      	b.n	800080a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f4:	f3af 8000 	nop.w
 80007f8:	4601      	mov	r1, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	b2ca      	uxtb	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	dbf0      	blt.n	80007f4 <_read+0x12>
  }

  return len;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_close>:
  }
  return len;
}

int _close(int file)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000844:	605a      	str	r2, [r3, #4]
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_isatty>:

int _isatty(int file)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f001 ffb4 	bl	8002820 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20020000 	.word	0x20020000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	200000cc 	.word	0x200000cc
 80008ec:	20000220 	.word	0x20000220

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000942:	f001 ff73 	bl	800282c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fdd5 	bl	80004f4 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000958:	08002d44 	.word	0x08002d44
  ldr r2, =_sbss
 800095c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000960:	20000220 	.word	0x20000220

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <HAL_Init+0x40>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_Init+0x40>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <HAL_Init+0x40>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f90d 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff fe82 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023c00 	.word	0x40023c00

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f917 	bl	8000bfe <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f8ed 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200000d0 	.word	0x200000d0

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200000d0 	.word	0x200000d0

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff47 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff5c 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffb0 	bl	8000b6c <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e165      	b.n	8000f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8154 	bne.w	8000efa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80ae 	beq.w	8000efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b5a      	ldr	r3, [pc, #360]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a58      	ldr	r2, [pc, #352]	@ (8000f1c <HAL_GPIO_Init+0x304>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f20 <HAL_GPIO_Init+0x308>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f24 <HAL_GPIO_Init+0x30c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x216>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f28 <HAL_GPIO_Init+0x310>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x212>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f2c <HAL_GPIO_Init+0x314>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4b      	ldr	r2, [pc, #300]	@ (8000f30 <HAL_GPIO_Init+0x318>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x20a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4a      	ldr	r2, [pc, #296]	@ (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x206>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a49      	ldr	r2, [pc, #292]	@ (8000f38 <HAL_GPIO_Init+0x320>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x202>
 8000e16:	2306      	movs	r3, #6
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	@ (8000f1c <HAL_GPIO_Init+0x304>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e76:	4a31      	ldr	r2, [pc, #196]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea0:	4a26      	ldr	r2, [pc, #152]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef4:	4a11      	ldr	r2, [pc, #68]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae96 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0cc      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4b68      	ldr	r3, [pc, #416]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d90c      	bls.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f62:	4b65      	ldr	r3, [pc, #404]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	4b63      	ldr	r3, [pc, #396]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e0b8      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d020      	beq.n	8000fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f94:	4b59      	ldr	r3, [pc, #356]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a58      	ldr	r2, [pc, #352]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fac:	4b53      	ldr	r3, [pc, #332]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb8:	4b50      	ldr	r3, [pc, #320]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	494d      	ldr	r1, [pc, #308]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d044      	beq.n	8001060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e07f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e067      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f023 0203 	bic.w	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4934      	ldr	r1, [pc, #208]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001030:	f7ff fd00 	bl	8000a34 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	e00a      	b.n	800104e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fcfc 	bl	8000a34 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001046:	4293      	cmp	r3, r2
 8001048:	d901      	bls.n	800104e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e04f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 020c 	and.w	r2, r3, #12
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	d1eb      	bne.n	8001038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d20c      	bcs.n	8001088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e032      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4916      	ldr	r1, [pc, #88]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	490e      	ldr	r1, [pc, #56]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010c6:	f000 f855 	bl	8001174 <HAL_RCC_GetSysClockFreq>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	490a      	ldr	r1, [pc, #40]	@ (8001100 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	5ccb      	ldrb	r3, [r1, r3]
 80010da:	fa22 f303 	lsr.w	r3, r2, r3
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_RCC_ClockConfig+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc60 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	08002d1c 	.word	0x08002d1c
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_RCC_GetHCLKFreq+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001128:	f7ff fff0 	bl	800110c <HAL_RCC_GetHCLKFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	0a9b      	lsrs	r3, r3, #10
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	4903      	ldr	r1, [pc, #12]	@ (8001148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	08002d2c 	.word	0x08002d2c

0800114c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001150:	f7ff ffdc 	bl	800110c <HAL_RCC_GetHCLKFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	0b5b      	lsrs	r3, r3, #13
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	4903      	ldr	r1, [pc, #12]	@ (8001170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	08002d2c 	.word	0x08002d2c

08001174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001178:	b0a6      	sub	sp, #152	@ 0x98
 800117a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800119a:	4bc8      	ldr	r3, [pc, #800]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	f200 817e 	bhi.w	80014a4 <HAL_RCC_GetSysClockFreq+0x330>
 80011a8:	a201      	add	r2, pc, #4	@ (adr r2, 80011b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011e5 	.word	0x080011e5
 80011b4:	080014a5 	.word	0x080014a5
 80011b8:	080014a5 	.word	0x080014a5
 80011bc:	080014a5 	.word	0x080014a5
 80011c0:	080011ed 	.word	0x080011ed
 80011c4:	080014a5 	.word	0x080014a5
 80011c8:	080014a5 	.word	0x080014a5
 80011cc:	080014a5 	.word	0x080014a5
 80011d0:	080011f5 	.word	0x080011f5
 80011d4:	080014a5 	.word	0x080014a5
 80011d8:	080014a5 	.word	0x080014a5
 80011dc:	080014a5 	.word	0x080014a5
 80011e0:	0800135f 	.word	0x0800135f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e4:	4bb6      	ldr	r3, [pc, #728]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80011e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80011ea:	e15f      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ec:	4bb5      	ldr	r3, [pc, #724]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x350>)
 80011ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80011f2:	e15b      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	4bb1      	ldr	r3, [pc, #708]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001200:	4bae      	ldr	r3, [pc, #696]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d031      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120c:	4bab      	ldr	r3, [pc, #684]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	2200      	movs	r2, #0
 8001214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001216:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800121a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800121e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001220:	2300      	movs	r3, #0
 8001222:	667b      	str	r3, [r7, #100]	@ 0x64
 8001224:	4ba7      	ldr	r3, [pc, #668]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001226:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800122a:	462a      	mov	r2, r5
 800122c:	fb03 f202 	mul.w	r2, r3, r2
 8001230:	2300      	movs	r3, #0
 8001232:	4621      	mov	r1, r4
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4413      	add	r3, r2
 800123a:	4aa2      	ldr	r2, [pc, #648]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800123c:	4621      	mov	r1, r4
 800123e:	fba1 1202 	umull	r1, r2, r1, r2
 8001242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001244:	460a      	mov	r2, r1
 8001246:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001248:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800124a:	4413      	add	r3, r2
 800124c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800124e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001252:	2200      	movs	r2, #0
 8001254:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001256:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001258:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800125c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001260:	f7fe ffd0 	bl	8000204 <__aeabi_uldivmod>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4613      	mov	r3, r2
 800126a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800126e:	e064      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001270:	4b92      	ldr	r3, [pc, #584]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	2200      	movs	r2, #0
 8001278:	653b      	str	r3, [r7, #80]	@ 0x50
 800127a:	657a      	str	r2, [r7, #84]	@ 0x54
 800127c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800127e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001288:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800128c:	4622      	mov	r2, r4
 800128e:	462b      	mov	r3, r5
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	0159      	lsls	r1, r3, #5
 800129a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800129e:	0150      	lsls	r0, r2, #5
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4621      	mov	r1, r4
 80012a6:	1a51      	subs	r1, r2, r1
 80012a8:	6139      	str	r1, [r7, #16]
 80012aa:	4629      	mov	r1, r5
 80012ac:	eb63 0301 	sbc.w	r3, r3, r1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012be:	4659      	mov	r1, fp
 80012c0:	018b      	lsls	r3, r1, #6
 80012c2:	4651      	mov	r1, sl
 80012c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012c8:	4651      	mov	r1, sl
 80012ca:	018a      	lsls	r2, r1, #6
 80012cc:	4651      	mov	r1, sl
 80012ce:	ebb2 0801 	subs.w	r8, r2, r1
 80012d2:	4659      	mov	r1, fp
 80012d4:	eb63 0901 	sbc.w	r9, r3, r1
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ec:	4690      	mov	r8, r2
 80012ee:	4699      	mov	r9, r3
 80012f0:	4623      	mov	r3, r4
 80012f2:	eb18 0303 	adds.w	r3, r8, r3
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	462b      	mov	r3, r5
 80012fa:	eb49 0303 	adc.w	r3, r9, r3
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800130c:	4629      	mov	r1, r5
 800130e:	028b      	lsls	r3, r1, #10
 8001310:	4621      	mov	r1, r4
 8001312:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001316:	4621      	mov	r1, r4
 8001318:	028a      	lsls	r2, r1, #10
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001322:	2200      	movs	r2, #0
 8001324:	643b      	str	r3, [r7, #64]	@ 0x40
 8001326:	647a      	str	r2, [r7, #68]	@ 0x44
 8001328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800132c:	f7fe ff6a 	bl	8000204 <__aeabi_uldivmod>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4613      	mov	r3, r2
 8001336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800133a:	4b60      	ldr	r3, [pc, #384]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	3301      	adds	r3, #1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800134c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001350:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800135c:	e0a6      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136a:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d02a      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001376:	4b51      	ldr	r3, [pc, #324]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	2200      	movs	r2, #0
 800137e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001380:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001388:	2100      	movs	r1, #0
 800138a:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800138c:	fb03 f201 	mul.w	r2, r3, r1
 8001390:	2300      	movs	r3, #0
 8001392:	fb00 f303 	mul.w	r3, r0, r3
 8001396:	4413      	add	r3, r2
 8001398:	4a4a      	ldr	r2, [pc, #296]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800139a:	fba0 1202 	umull	r1, r2, r0, r2
 800139e:	677a      	str	r2, [r7, #116]	@ 0x74
 80013a0:	460a      	mov	r2, r1
 80013a2:	673a      	str	r2, [r7, #112]	@ 0x70
 80013a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80013a6:	4413      	add	r3, r2
 80013a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80013aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013ae:	2200      	movs	r2, #0
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80013b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80013b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80013bc:	f7fe ff22 	bl	8000204 <__aeabi_uldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4613      	mov	r3, r2
 80013c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013ca:	e05b      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013cc:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	2200      	movs	r2, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013e8:	4642      	mov	r2, r8
 80013ea:	464b      	mov	r3, r9
 80013ec:	f04f 0000 	mov.w	r0, #0
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	0159      	lsls	r1, r3, #5
 80013f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fa:	0150      	lsls	r0, r2, #5
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4641      	mov	r1, r8
 8001402:	ebb2 0a01 	subs.w	sl, r2, r1
 8001406:	4649      	mov	r1, r9
 8001408:	eb63 0b01 	sbc.w	fp, r3, r1
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001418:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800141c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001420:	ebb2 040a 	subs.w	r4, r2, sl
 8001424:	eb63 050b 	sbc.w	r5, r3, fp
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	00eb      	lsls	r3, r5, #3
 8001432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001436:	00e2      	lsls	r2, r4, #3
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	4643      	mov	r3, r8
 800143e:	18e3      	adds	r3, r4, r3
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	464b      	mov	r3, r9
 8001444:	eb45 0303 	adc.w	r3, r5, r3
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001456:	4629      	mov	r1, r5
 8001458:	028b      	lsls	r3, r1, #10
 800145a:	4621      	mov	r1, r4
 800145c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001460:	4621      	mov	r1, r4
 8001462:	028a      	lsls	r2, r1, #10
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800146c:	2200      	movs	r2, #0
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	61fa      	str	r2, [r7, #28]
 8001472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001476:	f7fe fec5 	bl	8000204 <__aeabi_uldivmod>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4613      	mov	r3, r2
 8001480:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0f1b      	lsrs	r3, r3, #28
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001492:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014a2:	e003      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80014a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3798      	adds	r7, #152	@ 0x98
 80014b4:	46bd      	mov	sp, r7
 80014b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	017d7840 	.word	0x017d7840

080014c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e28d      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8083 	beq.w	80015ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014e8:	4b94      	ldr	r3, [pc, #592]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d019      	beq.n	8001528 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80014f4:	4b91      	ldr	r3, [pc, #580]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001500:	4b8e      	ldr	r3, [pc, #568]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800150c:	d00c      	beq.n	8001528 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d112      	bne.n	8001540 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151a:	4b88      	ldr	r3, [pc, #544]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001526:	d10b      	bne.n	8001540 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4b84      	ldr	r3, [pc, #528]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d05b      	beq.n	80015ec <HAL_RCC_OscConfig+0x124>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e25a      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001548:	d106      	bne.n	8001558 <HAL_RCC_OscConfig+0x90>
 800154a:	4b7c      	ldr	r3, [pc, #496]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7b      	ldr	r2, [pc, #492]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xcc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0xb4>
 8001562:	4b76      	ldr	r3, [pc, #472]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a75      	ldr	r2, [pc, #468]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b73      	ldr	r3, [pc, #460]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a72      	ldr	r2, [pc, #456]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xcc>
 800157c:	4b6f      	ldr	r3, [pc, #444]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6e      	ldr	r2, [pc, #440]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b6c      	ldr	r3, [pc, #432]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6b      	ldr	r2, [pc, #428]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fa4a 	bl	8000a34 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fa46 	bl	8000a34 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e21f      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b61      	ldr	r3, [pc, #388]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xdc>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fa36 	bl	8000a34 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fa32 	bl	8000a34 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e20b      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	4b57      	ldr	r3, [pc, #348]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x104>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06f      	beq.n	80016da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015fa:	4b50      	ldr	r3, [pc, #320]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b00      	cmp	r3, #0
 8001604:	d017      	beq.n	8001636 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001606:	4b4d      	ldr	r3, [pc, #308]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
        || \
 800160e:	2b08      	cmp	r3, #8
 8001610:	d105      	bne.n	800161e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001612:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d11c      	bne.n	8001664 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b44      	ldr	r3, [pc, #272]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x186>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e1d3      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4937      	ldr	r1, [pc, #220]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e03a      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_RCC_OscConfig+0x278>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff f9df 	bl	8000a34 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff f9db 	bl	8000a34 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1b4      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4925      	ldr	r1, [pc, #148]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_OscConfig+0x278>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9be 	bl	8000a34 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff f9ba 	bl	8000a34 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e193      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d036      	beq.n	8001754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d016      	beq.n	800171c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff f99e 	bl	8000a34 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff f99a 	bl	8000a34 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e173      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_RCC_OscConfig+0x274>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x234>
 800171a:	e01b      	b.n	8001754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff f987 	bl	8000a34 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	e00e      	b.n	8001748 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172a:	f7ff f983 	bl	8000a34 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d907      	bls.n	8001748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e15c      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
 800173c:	40023800 	.word	0x40023800
 8001740:	42470000 	.word	0x42470000
 8001744:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b8a      	ldr	r3, [pc, #552]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ea      	bne.n	800172a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8097 	beq.w	8001890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b83      	ldr	r3, [pc, #524]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a7e      	ldr	r2, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b7c      	ldr	r3, [pc, #496]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b79      	ldr	r3, [pc, #484]	@ (8001978 <HAL_RCC_OscConfig+0x4b0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_OscConfig+0x4b0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <HAL_RCC_OscConfig+0x4b0>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f943 	bl	8000a34 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff f93f 	bl	8000a34 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e118      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x4b0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x31e>
 80017d8:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a65      	ldr	r2, [pc, #404]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x358>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x340>
 80017ee:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	4a60      	ldr	r2, [pc, #384]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x358>
 8001808:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180c:	4a59      	ldr	r2, [pc, #356]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	@ 0x70
 8001814:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001818:	4a56      	ldr	r2, [pc, #344]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff f904 	bl	8000a34 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff f900 	bl	8000a34 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0d7      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	4b4b      	ldr	r3, [pc, #300]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ee      	beq.n	8001830 <HAL_RCC_OscConfig+0x368>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff f8ee 	bl	8000a34 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff f8ea 	bl	8000a34 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0c1      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ee      	bne.n	800185c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	4a3a      	ldr	r2, [pc, #232]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ad 	beq.w	80019f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189a:	4b36      	ldr	r3, [pc, #216]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d145      	bne.n	800193a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b33      	ldr	r3, [pc, #204]	@ (800197c <HAL_RCC_OscConfig+0x4b4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f8be 	bl	8000a34 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff f8ba 	bl	8000a34 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e093      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	071b      	lsls	r3, r3, #28
 8001906:	491b      	ldr	r1, [pc, #108]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_RCC_OscConfig+0x4b4>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff f88f 	bl	8000a34 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff f88b 	bl	8000a34 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e064      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x452>
 8001938:	e05c      	b.n	80019f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_RCC_OscConfig+0x4b4>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f878 	bl	8000a34 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f874 	bl	8000a34 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04d      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x480>
 8001966:	e045      	b.n	80019f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e040      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000
 800197c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_OscConfig+0x538>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d030      	beq.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d129      	bne.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d122      	bne.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d119      	bne.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10f      	bne.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e042      	b.n	8001a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fe62 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	@ 0x24
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f973 	bl	8001d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d175      	bne.n	8001bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_UART_Transmit+0x2c>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e06e      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2221      	movs	r2, #33	@ 0x21
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae2:	f7fe ffa7 	bl	8000a34 <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afc:	d108      	bne.n	8001b10 <HAL_UART_Transmit+0x6c>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d104      	bne.n	8001b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e003      	b.n	8001b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b18:	e02e      	b.n	8001b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f848 	bl	8001bba <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03a      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	3302      	adds	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e007      	b.n	8001b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1cb      	bne.n	8001b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	@ 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f814 	bl	8001bba <UART_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e006      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bca:	e03b      	b.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d037      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7fe ff2e 	bl	8000a34 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	6a3a      	ldr	r2, [r7, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <UART_WaitOnFlagUntilTimeout+0x30>
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e03a      	b.n	8001c64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b80      	cmp	r3, #128	@ 0x80
 8001c00:	d020      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b40      	cmp	r3, #64	@ 0x40
 8001c06:	d01d      	beq.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d116      	bne.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f81d 	bl	8001c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e00f      	b.n	8001c64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d0b4      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b095      	sub	sp, #84	@ 0x54
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7e:	e853 3f00 	ldrex	r3, [r3]
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	330c      	adds	r3, #12
 8001c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c9c:	e841 2300 	strex	r3, r2, [r1]
 8001ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3314      	adds	r3, #20
 8001cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	e853 3f00 	ldrex	r3, [r3]
 8001cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cd0:	e841 2300 	strex	r3, r2, [r1]
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e5      	bne.n	8001ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d119      	bne.n	8001d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	e853 3f00 	ldrex	r3, [r3]
 8001cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f023 0310 	bic.w	r3, r3, #16
 8001cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d04:	61ba      	str	r2, [r7, #24]
 8001d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	6979      	ldr	r1, [r7, #20]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	e841 2300 	strex	r3, r2, [r1]
 8001d10:	613b      	str	r3, [r7, #16]
   return(result);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e5      	bne.n	8001ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d26:	bf00      	nop
 8001d28:	3754      	adds	r7, #84	@ 0x54
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b0c0      	sub	sp, #256	@ 0x100
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	ea40 0301 	orr.w	r3, r0, r1
 8001d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d8c:	f021 010c 	bic.w	r1, r1, #12
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	6999      	ldr	r1, [r3, #24]
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	ea40 0301 	orr.w	r3, r0, r1
 8001dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8002000 <UART_SetConfig+0x2cc>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <UART_SetConfig+0xa0>
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b8d      	ldr	r3, [pc, #564]	@ (8002004 <UART_SetConfig+0x2d0>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dd4:	f7ff f9ba 	bl	800114c <HAL_RCC_GetPCLK2Freq>
 8001dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ddc:	e003      	b.n	8001de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dde:	f7ff f9a1 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
 8001de2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001df0:	f040 810c 	bne.w	800200c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e06:	4622      	mov	r2, r4
 8001e08:	462b      	mov	r3, r5
 8001e0a:	1891      	adds	r1, r2, r2
 8001e0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e0e:	415b      	adcs	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e16:	4621      	mov	r1, r4
 8001e18:	eb12 0801 	adds.w	r8, r2, r1
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	eb43 0901 	adc.w	r9, r3, r1
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	eb18 0303 	adds.w	r3, r8, r3
 8001e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e44:	462b      	mov	r3, r5
 8001e46:	eb49 0303 	adc.w	r3, r9, r3
 8001e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e62:	460b      	mov	r3, r1
 8001e64:	18db      	adds	r3, r3, r3
 8001e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e68:	4613      	mov	r3, r2
 8001e6a:	eb42 0303 	adc.w	r3, r2, r3
 8001e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e78:	f7fe f9c4 	bl	8000204 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001e82:	fba3 2302 	umull	r2, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	011c      	lsls	r4, r3, #4
 8001e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	1891      	adds	r1, r2, r2
 8001ea2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ea4:	415b      	adcs	r3, r3
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eac:	4641      	mov	r1, r8
 8001eae:	eb12 0a01 	adds.w	sl, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ecc:	4692      	mov	sl, r2
 8001ece:	469b      	mov	fp, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eda:	464b      	mov	r3, r9
 8001edc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	18db      	adds	r3, r3, r3
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001efe:	4613      	mov	r3, r2
 8001f00:	eb42 0303 	adc.w	r3, r2, r3
 8001f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f0e:	f7fe f979 	bl	8000204 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2264      	movs	r2, #100	@ 0x64
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001f30:	fba3 2302 	umull	r2, r3, r3, r2
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f3c:	441c      	add	r4, r3
 8001f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	1891      	adds	r1, r2, r2
 8001f56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f60:	4641      	mov	r1, r8
 8001f62:	1851      	adds	r1, r2, r1
 8001f64:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f66:	4649      	mov	r1, r9
 8001f68:	414b      	adcs	r3, r1
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f78:	4659      	mov	r1, fp
 8001f7a:	00cb      	lsls	r3, r1, #3
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f82:	4651      	mov	r1, sl
 8001f84:	00ca      	lsls	r2, r1, #3
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f94:	464b      	mov	r3, r9
 8001f96:	460a      	mov	r2, r1
 8001f98:	eb42 0303 	adc.w	r3, r2, r3
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fba:	4613      	mov	r3, r2
 8001fbc:	eb42 0303 	adc.w	r3, r2, r3
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fca:	f7fe f91b 	bl	8000204 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	2164      	movs	r1, #100	@ 0x64
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	3332      	adds	r3, #50	@ 0x32
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <UART_SetConfig+0x2d4>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4422      	add	r2, r4
 8001ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ffc:	e106      	b.n	800220c <UART_SetConfig+0x4d8>
 8001ffe:	bf00      	nop
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002010:	2200      	movs	r2, #0
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800201a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800201e:	4642      	mov	r2, r8
 8002020:	464b      	mov	r3, r9
 8002022:	1891      	adds	r1, r2, r2
 8002024:	6239      	str	r1, [r7, #32]
 8002026:	415b      	adcs	r3, r3
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
 800202a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202e:	4641      	mov	r1, r8
 8002030:	1854      	adds	r4, r2, r1
 8002032:	4649      	mov	r1, r9
 8002034:	eb43 0501 	adc.w	r5, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002046:	00e2      	lsls	r2, r4, #3
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4643      	mov	r3, r8
 800204e:	18e3      	adds	r3, r4, r3
 8002050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002054:	464b      	mov	r3, r9
 8002056:	eb45 0303 	adc.w	r3, r5, r3
 800205a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800206a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800207a:	4629      	mov	r1, r5
 800207c:	008b      	lsls	r3, r1, #2
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002084:	4621      	mov	r1, r4
 8002086:	008a      	lsls	r2, r1, #2
 8002088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800208c:	f7fe f8ba 	bl	8000204 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <UART_SetConfig+0x4e4>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	011c      	lsls	r4, r3, #4
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	1891      	adds	r1, r2, r2
 80020b6:	61b9      	str	r1, [r7, #24]
 80020b8:	415b      	adcs	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	4641      	mov	r1, r8
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	6139      	str	r1, [r7, #16]
 80020c6:	4649      	mov	r1, r9
 80020c8:	414b      	adcs	r3, r1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d8:	4659      	mov	r1, fp
 80020da:	00cb      	lsls	r3, r1, #3
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e2:	4651      	mov	r1, sl
 80020e4:	00ca      	lsls	r2, r1, #3
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	4642      	mov	r2, r8
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020f4:	464b      	mov	r3, r9
 80020f6:	460a      	mov	r2, r1
 80020f8:	eb42 0303 	adc.w	r3, r2, r3
 80020fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002118:	4649      	mov	r1, r9
 800211a:	008b      	lsls	r3, r1, #2
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002122:	4641      	mov	r1, r8
 8002124:	008a      	lsls	r2, r1, #2
 8002126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800212a:	f7fe f86b 	bl	8000204 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <UART_SetConfig+0x4e4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	@ 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	@ 0x32
 8002148:	4a33      	ldr	r2, [pc, #204]	@ (8002218 <UART_SetConfig+0x4e4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002154:	441c      	add	r4, r3
 8002156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215a:	2200      	movs	r2, #0
 800215c:	673b      	str	r3, [r7, #112]	@ 0x70
 800215e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	415b      	adcs	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021a6:	464b      	mov	r3, r9
 80021a8:	460a      	mov	r2, r1
 80021aa:	eb42 0303 	adc.w	r3, r2, r3
 80021ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021da:	f7fe f813 	bl	8000204 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	@ 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	@ 0x32
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4422      	add	r2, r4
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002218:	51eb851f 	.word	0x51eb851f

0800221c <std>:
 800221c:	2300      	movs	r3, #0
 800221e:	b510      	push	{r4, lr}
 8002220:	4604      	mov	r4, r0
 8002222:	e9c0 3300 	strd	r3, r3, [r0]
 8002226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800222a:	6083      	str	r3, [r0, #8]
 800222c:	8181      	strh	r1, [r0, #12]
 800222e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002230:	81c2      	strh	r2, [r0, #14]
 8002232:	6183      	str	r3, [r0, #24]
 8002234:	4619      	mov	r1, r3
 8002236:	2208      	movs	r2, #8
 8002238:	305c      	adds	r0, #92	@ 0x5c
 800223a:	f000 faa3 	bl	8002784 <memset>
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <std+0x58>)
 8002240:	6263      	str	r3, [r4, #36]	@ 0x24
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <std+0x5c>)
 8002244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <std+0x60>)
 8002248:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <std+0x64>)
 800224c:	6323      	str	r3, [r4, #48]	@ 0x30
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <std+0x68>)
 8002250:	6224      	str	r4, [r4, #32]
 8002252:	429c      	cmp	r4, r3
 8002254:	d006      	beq.n	8002264 <std+0x48>
 8002256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800225a:	4294      	cmp	r4, r2
 800225c:	d002      	beq.n	8002264 <std+0x48>
 800225e:	33d0      	adds	r3, #208	@ 0xd0
 8002260:	429c      	cmp	r4, r3
 8002262:	d105      	bne.n	8002270 <std+0x54>
 8002264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800226c:	f000 bb02 	b.w	8002874 <__retarget_lock_init_recursive>
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	080025d5 	.word	0x080025d5
 8002278:	080025f7 	.word	0x080025f7
 800227c:	0800262f 	.word	0x0800262f
 8002280:	08002653 	.word	0x08002653
 8002284:	200000d4 	.word	0x200000d4

08002288 <stdio_exit_handler>:
 8002288:	4a02      	ldr	r2, [pc, #8]	@ (8002294 <stdio_exit_handler+0xc>)
 800228a:	4903      	ldr	r1, [pc, #12]	@ (8002298 <stdio_exit_handler+0x10>)
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <stdio_exit_handler+0x14>)
 800228e:	f000 b869 	b.w	8002364 <_fwalk_sglue>
 8002292:	bf00      	nop
 8002294:	2000000c 	.word	0x2000000c
 8002298:	08002b85 	.word	0x08002b85
 800229c:	2000001c 	.word	0x2000001c

080022a0 <cleanup_stdio>:
 80022a0:	6841      	ldr	r1, [r0, #4]
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <cleanup_stdio+0x34>)
 80022a4:	4299      	cmp	r1, r3
 80022a6:	b510      	push	{r4, lr}
 80022a8:	4604      	mov	r4, r0
 80022aa:	d001      	beq.n	80022b0 <cleanup_stdio+0x10>
 80022ac:	f000 fc6a 	bl	8002b84 <_fflush_r>
 80022b0:	68a1      	ldr	r1, [r4, #8]
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <cleanup_stdio+0x38>)
 80022b4:	4299      	cmp	r1, r3
 80022b6:	d002      	beq.n	80022be <cleanup_stdio+0x1e>
 80022b8:	4620      	mov	r0, r4
 80022ba:	f000 fc63 	bl	8002b84 <_fflush_r>
 80022be:	68e1      	ldr	r1, [r4, #12]
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <cleanup_stdio+0x3c>)
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d004      	beq.n	80022d0 <cleanup_stdio+0x30>
 80022c6:	4620      	mov	r0, r4
 80022c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022cc:	f000 bc5a 	b.w	8002b84 <_fflush_r>
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	bf00      	nop
 80022d4:	200000d4 	.word	0x200000d4
 80022d8:	2000013c 	.word	0x2000013c
 80022dc:	200001a4 	.word	0x200001a4

080022e0 <global_stdio_init.part.0>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <global_stdio_init.part.0+0x30>)
 80022e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002314 <global_stdio_init.part.0+0x34>)
 80022e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <global_stdio_init.part.0+0x38>)
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4620      	mov	r0, r4
 80022ec:	2200      	movs	r2, #0
 80022ee:	2104      	movs	r1, #4
 80022f0:	f7ff ff94 	bl	800221c <std>
 80022f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022f8:	2201      	movs	r2, #1
 80022fa:	2109      	movs	r1, #9
 80022fc:	f7ff ff8e 	bl	800221c <std>
 8002300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002304:	2202      	movs	r2, #2
 8002306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800230a:	2112      	movs	r1, #18
 800230c:	f7ff bf86 	b.w	800221c <std>
 8002310:	2000020c 	.word	0x2000020c
 8002314:	200000d4 	.word	0x200000d4
 8002318:	08002289 	.word	0x08002289

0800231c <__sfp_lock_acquire>:
 800231c:	4801      	ldr	r0, [pc, #4]	@ (8002324 <__sfp_lock_acquire+0x8>)
 800231e:	f000 baaa 	b.w	8002876 <__retarget_lock_acquire_recursive>
 8002322:	bf00      	nop
 8002324:	20000215 	.word	0x20000215

08002328 <__sfp_lock_release>:
 8002328:	4801      	ldr	r0, [pc, #4]	@ (8002330 <__sfp_lock_release+0x8>)
 800232a:	f000 baa5 	b.w	8002878 <__retarget_lock_release_recursive>
 800232e:	bf00      	nop
 8002330:	20000215 	.word	0x20000215

08002334 <__sinit>:
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	f7ff fff0 	bl	800231c <__sfp_lock_acquire>
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	b11b      	cbz	r3, 8002348 <__sinit+0x14>
 8002340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002344:	f7ff bff0 	b.w	8002328 <__sfp_lock_release>
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__sinit+0x28>)
 800234a:	6223      	str	r3, [r4, #32]
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__sinit+0x2c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f5      	bne.n	8002340 <__sinit+0xc>
 8002354:	f7ff ffc4 	bl	80022e0 <global_stdio_init.part.0>
 8002358:	e7f2      	b.n	8002340 <__sinit+0xc>
 800235a:	bf00      	nop
 800235c:	080022a1 	.word	0x080022a1
 8002360:	2000020c 	.word	0x2000020c

08002364 <_fwalk_sglue>:
 8002364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002368:	4607      	mov	r7, r0
 800236a:	4688      	mov	r8, r1
 800236c:	4614      	mov	r4, r2
 800236e:	2600      	movs	r6, #0
 8002370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002374:	f1b9 0901 	subs.w	r9, r9, #1
 8002378:	d505      	bpl.n	8002386 <_fwalk_sglue+0x22>
 800237a:	6824      	ldr	r4, [r4, #0]
 800237c:	2c00      	cmp	r4, #0
 800237e:	d1f7      	bne.n	8002370 <_fwalk_sglue+0xc>
 8002380:	4630      	mov	r0, r6
 8002382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002386:	89ab      	ldrh	r3, [r5, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d907      	bls.n	800239c <_fwalk_sglue+0x38>
 800238c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002390:	3301      	adds	r3, #1
 8002392:	d003      	beq.n	800239c <_fwalk_sglue+0x38>
 8002394:	4629      	mov	r1, r5
 8002396:	4638      	mov	r0, r7
 8002398:	47c0      	blx	r8
 800239a:	4306      	orrs	r6, r0
 800239c:	3568      	adds	r5, #104	@ 0x68
 800239e:	e7e9      	b.n	8002374 <_fwalk_sglue+0x10>

080023a0 <_puts_r>:
 80023a0:	6a03      	ldr	r3, [r0, #32]
 80023a2:	b570      	push	{r4, r5, r6, lr}
 80023a4:	6884      	ldr	r4, [r0, #8]
 80023a6:	4605      	mov	r5, r0
 80023a8:	460e      	mov	r6, r1
 80023aa:	b90b      	cbnz	r3, 80023b0 <_puts_r+0x10>
 80023ac:	f7ff ffc2 	bl	8002334 <__sinit>
 80023b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023b2:	07db      	lsls	r3, r3, #31
 80023b4:	d405      	bmi.n	80023c2 <_puts_r+0x22>
 80023b6:	89a3      	ldrh	r3, [r4, #12]
 80023b8:	0598      	lsls	r0, r3, #22
 80023ba:	d402      	bmi.n	80023c2 <_puts_r+0x22>
 80023bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023be:	f000 fa5a 	bl	8002876 <__retarget_lock_acquire_recursive>
 80023c2:	89a3      	ldrh	r3, [r4, #12]
 80023c4:	0719      	lsls	r1, r3, #28
 80023c6:	d502      	bpl.n	80023ce <_puts_r+0x2e>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d135      	bne.n	800243a <_puts_r+0x9a>
 80023ce:	4621      	mov	r1, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	f000 f981 	bl	80026d8 <__swsetup_r>
 80023d6:	b380      	cbz	r0, 800243a <_puts_r+0x9a>
 80023d8:	f04f 35ff 	mov.w	r5, #4294967295
 80023dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023de:	07da      	lsls	r2, r3, #31
 80023e0:	d405      	bmi.n	80023ee <_puts_r+0x4e>
 80023e2:	89a3      	ldrh	r3, [r4, #12]
 80023e4:	059b      	lsls	r3, r3, #22
 80023e6:	d402      	bmi.n	80023ee <_puts_r+0x4e>
 80023e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023ea:	f000 fa45 	bl	8002878 <__retarget_lock_release_recursive>
 80023ee:	4628      	mov	r0, r5
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da04      	bge.n	8002400 <_puts_r+0x60>
 80023f6:	69a2      	ldr	r2, [r4, #24]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dc17      	bgt.n	800242c <_puts_r+0x8c>
 80023fc:	290a      	cmp	r1, #10
 80023fe:	d015      	beq.n	800242c <_puts_r+0x8c>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	6022      	str	r2, [r4, #0]
 8002406:	7019      	strb	r1, [r3, #0]
 8002408:	68a3      	ldr	r3, [r4, #8]
 800240a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800240e:	3b01      	subs	r3, #1
 8002410:	60a3      	str	r3, [r4, #8]
 8002412:	2900      	cmp	r1, #0
 8002414:	d1ed      	bne.n	80023f2 <_puts_r+0x52>
 8002416:	2b00      	cmp	r3, #0
 8002418:	da11      	bge.n	800243e <_puts_r+0x9e>
 800241a:	4622      	mov	r2, r4
 800241c:	210a      	movs	r1, #10
 800241e:	4628      	mov	r0, r5
 8002420:	f000 f91b 	bl	800265a <__swbuf_r>
 8002424:	3001      	adds	r0, #1
 8002426:	d0d7      	beq.n	80023d8 <_puts_r+0x38>
 8002428:	250a      	movs	r5, #10
 800242a:	e7d7      	b.n	80023dc <_puts_r+0x3c>
 800242c:	4622      	mov	r2, r4
 800242e:	4628      	mov	r0, r5
 8002430:	f000 f913 	bl	800265a <__swbuf_r>
 8002434:	3001      	adds	r0, #1
 8002436:	d1e7      	bne.n	8002408 <_puts_r+0x68>
 8002438:	e7ce      	b.n	80023d8 <_puts_r+0x38>
 800243a:	3e01      	subs	r6, #1
 800243c:	e7e4      	b.n	8002408 <_puts_r+0x68>
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	6022      	str	r2, [r4, #0]
 8002444:	220a      	movs	r2, #10
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	e7ee      	b.n	8002428 <_puts_r+0x88>
	...

0800244c <puts>:
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <puts+0xc>)
 800244e:	4601      	mov	r1, r0
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	f7ff bfa5 	b.w	80023a0 <_puts_r>
 8002456:	bf00      	nop
 8002458:	20000018 	.word	0x20000018

0800245c <setbuf>:
 800245c:	fab1 f281 	clz	r2, r1
 8002460:	0952      	lsrs	r2, r2, #5
 8002462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002466:	0052      	lsls	r2, r2, #1
 8002468:	f000 b800 	b.w	800246c <setvbuf>

0800246c <setvbuf>:
 800246c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002470:	461d      	mov	r5, r3
 8002472:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <setvbuf+0x164>)
 8002474:	681f      	ldr	r7, [r3, #0]
 8002476:	4604      	mov	r4, r0
 8002478:	460e      	mov	r6, r1
 800247a:	4690      	mov	r8, r2
 800247c:	b127      	cbz	r7, 8002488 <setvbuf+0x1c>
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	b913      	cbnz	r3, 8002488 <setvbuf+0x1c>
 8002482:	4638      	mov	r0, r7
 8002484:	f7ff ff56 	bl	8002334 <__sinit>
 8002488:	f1b8 0f02 	cmp.w	r8, #2
 800248c:	d006      	beq.n	800249c <setvbuf+0x30>
 800248e:	f1b8 0f01 	cmp.w	r8, #1
 8002492:	f200 809a 	bhi.w	80025ca <setvbuf+0x15e>
 8002496:	2d00      	cmp	r5, #0
 8002498:	f2c0 8097 	blt.w	80025ca <setvbuf+0x15e>
 800249c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800249e:	07d9      	lsls	r1, r3, #31
 80024a0:	d405      	bmi.n	80024ae <setvbuf+0x42>
 80024a2:	89a3      	ldrh	r3, [r4, #12]
 80024a4:	059a      	lsls	r2, r3, #22
 80024a6:	d402      	bmi.n	80024ae <setvbuf+0x42>
 80024a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024aa:	f000 f9e4 	bl	8002876 <__retarget_lock_acquire_recursive>
 80024ae:	4621      	mov	r1, r4
 80024b0:	4638      	mov	r0, r7
 80024b2:	f000 fb67 	bl	8002b84 <_fflush_r>
 80024b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024b8:	b141      	cbz	r1, 80024cc <setvbuf+0x60>
 80024ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024be:	4299      	cmp	r1, r3
 80024c0:	d002      	beq.n	80024c8 <setvbuf+0x5c>
 80024c2:	4638      	mov	r0, r7
 80024c4:	f000 f9da 	bl	800287c <_free_r>
 80024c8:	2300      	movs	r3, #0
 80024ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80024cc:	2300      	movs	r3, #0
 80024ce:	61a3      	str	r3, [r4, #24]
 80024d0:	6063      	str	r3, [r4, #4]
 80024d2:	89a3      	ldrh	r3, [r4, #12]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	d503      	bpl.n	80024e0 <setvbuf+0x74>
 80024d8:	6921      	ldr	r1, [r4, #16]
 80024da:	4638      	mov	r0, r7
 80024dc:	f000 f9ce 	bl	800287c <_free_r>
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	f1b8 0f02 	cmp.w	r8, #2
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	d061      	beq.n	80025b6 <setvbuf+0x14a>
 80024f2:	ab01      	add	r3, sp, #4
 80024f4:	466a      	mov	r2, sp
 80024f6:	4621      	mov	r1, r4
 80024f8:	4638      	mov	r0, r7
 80024fa:	f000 fb6b 	bl	8002bd4 <__swhatbuf_r>
 80024fe:	89a3      	ldrh	r3, [r4, #12]
 8002500:	4318      	orrs	r0, r3
 8002502:	81a0      	strh	r0, [r4, #12]
 8002504:	bb2d      	cbnz	r5, 8002552 <setvbuf+0xe6>
 8002506:	9d00      	ldr	r5, [sp, #0]
 8002508:	4628      	mov	r0, r5
 800250a:	f000 fa01 	bl	8002910 <malloc>
 800250e:	4606      	mov	r6, r0
 8002510:	2800      	cmp	r0, #0
 8002512:	d152      	bne.n	80025ba <setvbuf+0x14e>
 8002514:	f8dd 9000 	ldr.w	r9, [sp]
 8002518:	45a9      	cmp	r9, r5
 800251a:	d140      	bne.n	800259e <setvbuf+0x132>
 800251c:	f04f 35ff 	mov.w	r5, #4294967295
 8002520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	81a2      	strh	r2, [r4, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	60a2      	str	r2, [r4, #8]
 800252e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002532:	6022      	str	r2, [r4, #0]
 8002534:	6122      	str	r2, [r4, #16]
 8002536:	2201      	movs	r2, #1
 8002538:	6162      	str	r2, [r4, #20]
 800253a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800253c:	07d6      	lsls	r6, r2, #31
 800253e:	d404      	bmi.n	800254a <setvbuf+0xde>
 8002540:	0598      	lsls	r0, r3, #22
 8002542:	d402      	bmi.n	800254a <setvbuf+0xde>
 8002544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002546:	f000 f997 	bl	8002878 <__retarget_lock_release_recursive>
 800254a:	4628      	mov	r0, r5
 800254c:	b003      	add	sp, #12
 800254e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002552:	2e00      	cmp	r6, #0
 8002554:	d0d8      	beq.n	8002508 <setvbuf+0x9c>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	b913      	cbnz	r3, 8002560 <setvbuf+0xf4>
 800255a:	4638      	mov	r0, r7
 800255c:	f7ff feea 	bl	8002334 <__sinit>
 8002560:	f1b8 0f01 	cmp.w	r8, #1
 8002564:	bf08      	it	eq
 8002566:	89a3      	ldrheq	r3, [r4, #12]
 8002568:	6026      	str	r6, [r4, #0]
 800256a:	bf04      	itt	eq
 800256c:	f043 0301 	orreq.w	r3, r3, #1
 8002570:	81a3      	strheq	r3, [r4, #12]
 8002572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002576:	f013 0208 	ands.w	r2, r3, #8
 800257a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800257e:	d01e      	beq.n	80025be <setvbuf+0x152>
 8002580:	07d9      	lsls	r1, r3, #31
 8002582:	bf41      	itttt	mi
 8002584:	2200      	movmi	r2, #0
 8002586:	426d      	negmi	r5, r5
 8002588:	60a2      	strmi	r2, [r4, #8]
 800258a:	61a5      	strmi	r5, [r4, #24]
 800258c:	bf58      	it	pl
 800258e:	60a5      	strpl	r5, [r4, #8]
 8002590:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002592:	07d2      	lsls	r2, r2, #31
 8002594:	d401      	bmi.n	800259a <setvbuf+0x12e>
 8002596:	059b      	lsls	r3, r3, #22
 8002598:	d513      	bpl.n	80025c2 <setvbuf+0x156>
 800259a:	2500      	movs	r5, #0
 800259c:	e7d5      	b.n	800254a <setvbuf+0xde>
 800259e:	4648      	mov	r0, r9
 80025a0:	f000 f9b6 	bl	8002910 <malloc>
 80025a4:	4606      	mov	r6, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d0b8      	beq.n	800251c <setvbuf+0xb0>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b0:	81a3      	strh	r3, [r4, #12]
 80025b2:	464d      	mov	r5, r9
 80025b4:	e7cf      	b.n	8002556 <setvbuf+0xea>
 80025b6:	2500      	movs	r5, #0
 80025b8:	e7b2      	b.n	8002520 <setvbuf+0xb4>
 80025ba:	46a9      	mov	r9, r5
 80025bc:	e7f5      	b.n	80025aa <setvbuf+0x13e>
 80025be:	60a2      	str	r2, [r4, #8]
 80025c0:	e7e6      	b.n	8002590 <setvbuf+0x124>
 80025c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025c4:	f000 f958 	bl	8002878 <__retarget_lock_release_recursive>
 80025c8:	e7e7      	b.n	800259a <setvbuf+0x12e>
 80025ca:	f04f 35ff 	mov.w	r5, #4294967295
 80025ce:	e7bc      	b.n	800254a <setvbuf+0xde>
 80025d0:	20000018 	.word	0x20000018

080025d4 <__sread>:
 80025d4:	b510      	push	{r4, lr}
 80025d6:	460c      	mov	r4, r1
 80025d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025dc:	f000 f8fc 	bl	80027d8 <_read_r>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	bfab      	itete	ge
 80025e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80025e6:	89a3      	ldrhlt	r3, [r4, #12]
 80025e8:	181b      	addge	r3, r3, r0
 80025ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80025ee:	bfac      	ite	ge
 80025f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80025f2:	81a3      	strhlt	r3, [r4, #12]
 80025f4:	bd10      	pop	{r4, pc}

080025f6 <__swrite>:
 80025f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fa:	461f      	mov	r7, r3
 80025fc:	898b      	ldrh	r3, [r1, #12]
 80025fe:	05db      	lsls	r3, r3, #23
 8002600:	4605      	mov	r5, r0
 8002602:	460c      	mov	r4, r1
 8002604:	4616      	mov	r6, r2
 8002606:	d505      	bpl.n	8002614 <__swrite+0x1e>
 8002608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260c:	2302      	movs	r3, #2
 800260e:	2200      	movs	r2, #0
 8002610:	f000 f8d0 	bl	80027b4 <_lseek_r>
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800261a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800261e:	81a3      	strh	r3, [r4, #12]
 8002620:	4632      	mov	r2, r6
 8002622:	463b      	mov	r3, r7
 8002624:	4628      	mov	r0, r5
 8002626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800262a:	f000 b8e7 	b.w	80027fc <_write_r>

0800262e <__sseek>:
 800262e:	b510      	push	{r4, lr}
 8002630:	460c      	mov	r4, r1
 8002632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002636:	f000 f8bd 	bl	80027b4 <_lseek_r>
 800263a:	1c43      	adds	r3, r0, #1
 800263c:	89a3      	ldrh	r3, [r4, #12]
 800263e:	bf15      	itete	ne
 8002640:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800264a:	81a3      	strheq	r3, [r4, #12]
 800264c:	bf18      	it	ne
 800264e:	81a3      	strhne	r3, [r4, #12]
 8002650:	bd10      	pop	{r4, pc}

08002652 <__sclose>:
 8002652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002656:	f000 b89d 	b.w	8002794 <_close_r>

0800265a <__swbuf_r>:
 800265a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265c:	460e      	mov	r6, r1
 800265e:	4614      	mov	r4, r2
 8002660:	4605      	mov	r5, r0
 8002662:	b118      	cbz	r0, 800266c <__swbuf_r+0x12>
 8002664:	6a03      	ldr	r3, [r0, #32]
 8002666:	b90b      	cbnz	r3, 800266c <__swbuf_r+0x12>
 8002668:	f7ff fe64 	bl	8002334 <__sinit>
 800266c:	69a3      	ldr	r3, [r4, #24]
 800266e:	60a3      	str	r3, [r4, #8]
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	071a      	lsls	r2, r3, #28
 8002674:	d501      	bpl.n	800267a <__swbuf_r+0x20>
 8002676:	6923      	ldr	r3, [r4, #16]
 8002678:	b943      	cbnz	r3, 800268c <__swbuf_r+0x32>
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	f000 f82b 	bl	80026d8 <__swsetup_r>
 8002682:	b118      	cbz	r0, 800268c <__swbuf_r+0x32>
 8002684:	f04f 37ff 	mov.w	r7, #4294967295
 8002688:	4638      	mov	r0, r7
 800268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	6922      	ldr	r2, [r4, #16]
 8002690:	1a98      	subs	r0, r3, r2
 8002692:	6963      	ldr	r3, [r4, #20]
 8002694:	b2f6      	uxtb	r6, r6
 8002696:	4283      	cmp	r3, r0
 8002698:	4637      	mov	r7, r6
 800269a:	dc05      	bgt.n	80026a8 <__swbuf_r+0x4e>
 800269c:	4621      	mov	r1, r4
 800269e:	4628      	mov	r0, r5
 80026a0:	f000 fa70 	bl	8002b84 <_fflush_r>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d1ed      	bne.n	8002684 <__swbuf_r+0x2a>
 80026a8:	68a3      	ldr	r3, [r4, #8]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60a3      	str	r3, [r4, #8]
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	6022      	str	r2, [r4, #0]
 80026b4:	701e      	strb	r6, [r3, #0]
 80026b6:	6962      	ldr	r2, [r4, #20]
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d004      	beq.n	80026c8 <__swbuf_r+0x6e>
 80026be:	89a3      	ldrh	r3, [r4, #12]
 80026c0:	07db      	lsls	r3, r3, #31
 80026c2:	d5e1      	bpl.n	8002688 <__swbuf_r+0x2e>
 80026c4:	2e0a      	cmp	r6, #10
 80026c6:	d1df      	bne.n	8002688 <__swbuf_r+0x2e>
 80026c8:	4621      	mov	r1, r4
 80026ca:	4628      	mov	r0, r5
 80026cc:	f000 fa5a 	bl	8002b84 <_fflush_r>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d0d9      	beq.n	8002688 <__swbuf_r+0x2e>
 80026d4:	e7d6      	b.n	8002684 <__swbuf_r+0x2a>
	...

080026d8 <__swsetup_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <__swsetup_r+0xa8>)
 80026dc:	4605      	mov	r5, r0
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	460c      	mov	r4, r1
 80026e2:	b118      	cbz	r0, 80026ec <__swsetup_r+0x14>
 80026e4:	6a03      	ldr	r3, [r0, #32]
 80026e6:	b90b      	cbnz	r3, 80026ec <__swsetup_r+0x14>
 80026e8:	f7ff fe24 	bl	8002334 <__sinit>
 80026ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026f0:	0719      	lsls	r1, r3, #28
 80026f2:	d422      	bmi.n	800273a <__swsetup_r+0x62>
 80026f4:	06da      	lsls	r2, r3, #27
 80026f6:	d407      	bmi.n	8002708 <__swsetup_r+0x30>
 80026f8:	2209      	movs	r2, #9
 80026fa:	602a      	str	r2, [r5, #0]
 80026fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	f04f 30ff 	mov.w	r0, #4294967295
 8002706:	e033      	b.n	8002770 <__swsetup_r+0x98>
 8002708:	0758      	lsls	r0, r3, #29
 800270a:	d512      	bpl.n	8002732 <__swsetup_r+0x5a>
 800270c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800270e:	b141      	cbz	r1, 8002722 <__swsetup_r+0x4a>
 8002710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002714:	4299      	cmp	r1, r3
 8002716:	d002      	beq.n	800271e <__swsetup_r+0x46>
 8002718:	4628      	mov	r0, r5
 800271a:	f000 f8af 	bl	800287c <_free_r>
 800271e:	2300      	movs	r3, #0
 8002720:	6363      	str	r3, [r4, #52]	@ 0x34
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002728:	81a3      	strh	r3, [r4, #12]
 800272a:	2300      	movs	r3, #0
 800272c:	6063      	str	r3, [r4, #4]
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	89a3      	ldrh	r3, [r4, #12]
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	81a3      	strh	r3, [r4, #12]
 800273a:	6923      	ldr	r3, [r4, #16]
 800273c:	b94b      	cbnz	r3, 8002752 <__swsetup_r+0x7a>
 800273e:	89a3      	ldrh	r3, [r4, #12]
 8002740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002748:	d003      	beq.n	8002752 <__swsetup_r+0x7a>
 800274a:	4621      	mov	r1, r4
 800274c:	4628      	mov	r0, r5
 800274e:	f000 fa67 	bl	8002c20 <__smakebuf_r>
 8002752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002756:	f013 0201 	ands.w	r2, r3, #1
 800275a:	d00a      	beq.n	8002772 <__swsetup_r+0x9a>
 800275c:	2200      	movs	r2, #0
 800275e:	60a2      	str	r2, [r4, #8]
 8002760:	6962      	ldr	r2, [r4, #20]
 8002762:	4252      	negs	r2, r2
 8002764:	61a2      	str	r2, [r4, #24]
 8002766:	6922      	ldr	r2, [r4, #16]
 8002768:	b942      	cbnz	r2, 800277c <__swsetup_r+0xa4>
 800276a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800276e:	d1c5      	bne.n	80026fc <__swsetup_r+0x24>
 8002770:	bd38      	pop	{r3, r4, r5, pc}
 8002772:	0799      	lsls	r1, r3, #30
 8002774:	bf58      	it	pl
 8002776:	6962      	ldrpl	r2, [r4, #20]
 8002778:	60a2      	str	r2, [r4, #8]
 800277a:	e7f4      	b.n	8002766 <__swsetup_r+0x8e>
 800277c:	2000      	movs	r0, #0
 800277e:	e7f7      	b.n	8002770 <__swsetup_r+0x98>
 8002780:	20000018 	.word	0x20000018

08002784 <memset>:
 8002784:	4402      	add	r2, r0
 8002786:	4603      	mov	r3, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <_close_r>:
 8002794:	b538      	push	{r3, r4, r5, lr}
 8002796:	4d06      	ldr	r5, [pc, #24]	@ (80027b0 <_close_r+0x1c>)
 8002798:	2300      	movs	r3, #0
 800279a:	4604      	mov	r4, r0
 800279c:	4608      	mov	r0, r1
 800279e:	602b      	str	r3, [r5, #0]
 80027a0:	f7fe f83c 	bl	800081c <_close>
 80027a4:	1c43      	adds	r3, r0, #1
 80027a6:	d102      	bne.n	80027ae <_close_r+0x1a>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	b103      	cbz	r3, 80027ae <_close_r+0x1a>
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
 80027b0:	20000210 	.word	0x20000210

080027b4 <_lseek_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d07      	ldr	r5, [pc, #28]	@ (80027d4 <_lseek_r+0x20>)
 80027b8:	4604      	mov	r4, r0
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	2200      	movs	r2, #0
 80027c0:	602a      	str	r2, [r5, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7fe f851 	bl	800086a <_lseek>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_lseek_r+0x1e>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_lseek_r+0x1e>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000210 	.word	0x20000210

080027d8 <_read_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	4d07      	ldr	r5, [pc, #28]	@ (80027f8 <_read_r+0x20>)
 80027dc:	4604      	mov	r4, r0
 80027de:	4608      	mov	r0, r1
 80027e0:	4611      	mov	r1, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	602a      	str	r2, [r5, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7fd fffb 	bl	80007e2 <_read>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_read_r+0x1e>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_read_r+0x1e>
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	20000210 	.word	0x20000210

080027fc <_write_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	4d07      	ldr	r5, [pc, #28]	@ (800281c <_write_r+0x20>)
 8002800:	4604      	mov	r4, r0
 8002802:	4608      	mov	r0, r1
 8002804:	4611      	mov	r1, r2
 8002806:	2200      	movs	r2, #0
 8002808:	602a      	str	r2, [r5, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	f7fd ff30 	bl	8000670 <_write>
 8002810:	1c43      	adds	r3, r0, #1
 8002812:	d102      	bne.n	800281a <_write_r+0x1e>
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	b103      	cbz	r3, 800281a <_write_r+0x1e>
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	bd38      	pop	{r3, r4, r5, pc}
 800281c:	20000210 	.word	0x20000210

08002820 <__errno>:
 8002820:	4b01      	ldr	r3, [pc, #4]	@ (8002828 <__errno+0x8>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000018 	.word	0x20000018

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4d0d      	ldr	r5, [pc, #52]	@ (8002864 <__libc_init_array+0x38>)
 8002830:	4c0d      	ldr	r4, [pc, #52]	@ (8002868 <__libc_init_array+0x3c>)
 8002832:	1b64      	subs	r4, r4, r5
 8002834:	10a4      	asrs	r4, r4, #2
 8002836:	2600      	movs	r6, #0
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	4d0b      	ldr	r5, [pc, #44]	@ (800286c <__libc_init_array+0x40>)
 800283e:	4c0c      	ldr	r4, [pc, #48]	@ (8002870 <__libc_init_array+0x44>)
 8002840:	f000 fa5c 	bl	8002cfc <_init>
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	2600      	movs	r6, #0
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f855 3b04 	ldr.w	r3, [r5], #4
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	f855 3b04 	ldr.w	r3, [r5], #4
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	08002d3c 	.word	0x08002d3c
 8002868:	08002d3c 	.word	0x08002d3c
 800286c:	08002d3c 	.word	0x08002d3c
 8002870:	08002d40 	.word	0x08002d40

08002874 <__retarget_lock_init_recursive>:
 8002874:	4770      	bx	lr

08002876 <__retarget_lock_acquire_recursive>:
 8002876:	4770      	bx	lr

08002878 <__retarget_lock_release_recursive>:
 8002878:	4770      	bx	lr
	...

0800287c <_free_r>:
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4605      	mov	r5, r0
 8002880:	2900      	cmp	r1, #0
 8002882:	d041      	beq.n	8002908 <_free_r+0x8c>
 8002884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002888:	1f0c      	subs	r4, r1, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfb8      	it	lt
 800288e:	18e4      	addlt	r4, r4, r3
 8002890:	f000 f8e8 	bl	8002a64 <__malloc_lock>
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <_free_r+0x90>)
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	b933      	cbnz	r3, 80028a8 <_free_r+0x2c>
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	6014      	str	r4, [r2, #0]
 800289e:	4628      	mov	r0, r5
 80028a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028a4:	f000 b8e4 	b.w	8002a70 <__malloc_unlock>
 80028a8:	42a3      	cmp	r3, r4
 80028aa:	d908      	bls.n	80028be <_free_r+0x42>
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	1821      	adds	r1, r4, r0
 80028b0:	428b      	cmp	r3, r1
 80028b2:	bf01      	itttt	eq
 80028b4:	6819      	ldreq	r1, [r3, #0]
 80028b6:	685b      	ldreq	r3, [r3, #4]
 80028b8:	1809      	addeq	r1, r1, r0
 80028ba:	6021      	streq	r1, [r4, #0]
 80028bc:	e7ed      	b.n	800289a <_free_r+0x1e>
 80028be:	461a      	mov	r2, r3
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	b10b      	cbz	r3, 80028c8 <_free_r+0x4c>
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	d9fa      	bls.n	80028be <_free_r+0x42>
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	1850      	adds	r0, r2, r1
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d10b      	bne.n	80028e8 <_free_r+0x6c>
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	4401      	add	r1, r0
 80028d4:	1850      	adds	r0, r2, r1
 80028d6:	4283      	cmp	r3, r0
 80028d8:	6011      	str	r1, [r2, #0]
 80028da:	d1e0      	bne.n	800289e <_free_r+0x22>
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	6053      	str	r3, [r2, #4]
 80028e2:	4408      	add	r0, r1
 80028e4:	6010      	str	r0, [r2, #0]
 80028e6:	e7da      	b.n	800289e <_free_r+0x22>
 80028e8:	d902      	bls.n	80028f0 <_free_r+0x74>
 80028ea:	230c      	movs	r3, #12
 80028ec:	602b      	str	r3, [r5, #0]
 80028ee:	e7d6      	b.n	800289e <_free_r+0x22>
 80028f0:	6820      	ldr	r0, [r4, #0]
 80028f2:	1821      	adds	r1, r4, r0
 80028f4:	428b      	cmp	r3, r1
 80028f6:	bf04      	itt	eq
 80028f8:	6819      	ldreq	r1, [r3, #0]
 80028fa:	685b      	ldreq	r3, [r3, #4]
 80028fc:	6063      	str	r3, [r4, #4]
 80028fe:	bf04      	itt	eq
 8002900:	1809      	addeq	r1, r1, r0
 8002902:	6021      	streq	r1, [r4, #0]
 8002904:	6054      	str	r4, [r2, #4]
 8002906:	e7ca      	b.n	800289e <_free_r+0x22>
 8002908:	bd38      	pop	{r3, r4, r5, pc}
 800290a:	bf00      	nop
 800290c:	2000021c 	.word	0x2000021c

08002910 <malloc>:
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <malloc+0xc>)
 8002912:	4601      	mov	r1, r0
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f000 b825 	b.w	8002964 <_malloc_r>
 800291a:	bf00      	nop
 800291c:	20000018 	.word	0x20000018

08002920 <sbrk_aligned>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4e0f      	ldr	r6, [pc, #60]	@ (8002960 <sbrk_aligned+0x40>)
 8002924:	460c      	mov	r4, r1
 8002926:	6831      	ldr	r1, [r6, #0]
 8002928:	4605      	mov	r5, r0
 800292a:	b911      	cbnz	r1, 8002932 <sbrk_aligned+0x12>
 800292c:	f000 f9d6 	bl	8002cdc <_sbrk_r>
 8002930:	6030      	str	r0, [r6, #0]
 8002932:	4621      	mov	r1, r4
 8002934:	4628      	mov	r0, r5
 8002936:	f000 f9d1 	bl	8002cdc <_sbrk_r>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d103      	bne.n	8002946 <sbrk_aligned+0x26>
 800293e:	f04f 34ff 	mov.w	r4, #4294967295
 8002942:	4620      	mov	r0, r4
 8002944:	bd70      	pop	{r4, r5, r6, pc}
 8002946:	1cc4      	adds	r4, r0, #3
 8002948:	f024 0403 	bic.w	r4, r4, #3
 800294c:	42a0      	cmp	r0, r4
 800294e:	d0f8      	beq.n	8002942 <sbrk_aligned+0x22>
 8002950:	1a21      	subs	r1, r4, r0
 8002952:	4628      	mov	r0, r5
 8002954:	f000 f9c2 	bl	8002cdc <_sbrk_r>
 8002958:	3001      	adds	r0, #1
 800295a:	d1f2      	bne.n	8002942 <sbrk_aligned+0x22>
 800295c:	e7ef      	b.n	800293e <sbrk_aligned+0x1e>
 800295e:	bf00      	nop
 8002960:	20000218 	.word	0x20000218

08002964 <_malloc_r>:
 8002964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002968:	1ccd      	adds	r5, r1, #3
 800296a:	f025 0503 	bic.w	r5, r5, #3
 800296e:	3508      	adds	r5, #8
 8002970:	2d0c      	cmp	r5, #12
 8002972:	bf38      	it	cc
 8002974:	250c      	movcc	r5, #12
 8002976:	2d00      	cmp	r5, #0
 8002978:	4606      	mov	r6, r0
 800297a:	db01      	blt.n	8002980 <_malloc_r+0x1c>
 800297c:	42a9      	cmp	r1, r5
 800297e:	d904      	bls.n	800298a <_malloc_r+0x26>
 8002980:	230c      	movs	r3, #12
 8002982:	6033      	str	r3, [r6, #0]
 8002984:	2000      	movs	r0, #0
 8002986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a60 <_malloc_r+0xfc>
 800298e:	f000 f869 	bl	8002a64 <__malloc_lock>
 8002992:	f8d8 3000 	ldr.w	r3, [r8]
 8002996:	461c      	mov	r4, r3
 8002998:	bb44      	cbnz	r4, 80029ec <_malloc_r+0x88>
 800299a:	4629      	mov	r1, r5
 800299c:	4630      	mov	r0, r6
 800299e:	f7ff ffbf 	bl	8002920 <sbrk_aligned>
 80029a2:	1c43      	adds	r3, r0, #1
 80029a4:	4604      	mov	r4, r0
 80029a6:	d158      	bne.n	8002a5a <_malloc_r+0xf6>
 80029a8:	f8d8 4000 	ldr.w	r4, [r8]
 80029ac:	4627      	mov	r7, r4
 80029ae:	2f00      	cmp	r7, #0
 80029b0:	d143      	bne.n	8002a3a <_malloc_r+0xd6>
 80029b2:	2c00      	cmp	r4, #0
 80029b4:	d04b      	beq.n	8002a4e <_malloc_r+0xea>
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	4639      	mov	r1, r7
 80029ba:	4630      	mov	r0, r6
 80029bc:	eb04 0903 	add.w	r9, r4, r3
 80029c0:	f000 f98c 	bl	8002cdc <_sbrk_r>
 80029c4:	4581      	cmp	r9, r0
 80029c6:	d142      	bne.n	8002a4e <_malloc_r+0xea>
 80029c8:	6821      	ldr	r1, [r4, #0]
 80029ca:	1a6d      	subs	r5, r5, r1
 80029cc:	4629      	mov	r1, r5
 80029ce:	4630      	mov	r0, r6
 80029d0:	f7ff ffa6 	bl	8002920 <sbrk_aligned>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d03a      	beq.n	8002a4e <_malloc_r+0xea>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	442b      	add	r3, r5
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	f8d8 3000 	ldr.w	r3, [r8]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	bb62      	cbnz	r2, 8002a40 <_malloc_r+0xdc>
 80029e6:	f8c8 7000 	str.w	r7, [r8]
 80029ea:	e00f      	b.n	8002a0c <_malloc_r+0xa8>
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	1b52      	subs	r2, r2, r5
 80029f0:	d420      	bmi.n	8002a34 <_malloc_r+0xd0>
 80029f2:	2a0b      	cmp	r2, #11
 80029f4:	d917      	bls.n	8002a26 <_malloc_r+0xc2>
 80029f6:	1961      	adds	r1, r4, r5
 80029f8:	42a3      	cmp	r3, r4
 80029fa:	6025      	str	r5, [r4, #0]
 80029fc:	bf18      	it	ne
 80029fe:	6059      	strne	r1, [r3, #4]
 8002a00:	6863      	ldr	r3, [r4, #4]
 8002a02:	bf08      	it	eq
 8002a04:	f8c8 1000 	streq.w	r1, [r8]
 8002a08:	5162      	str	r2, [r4, r5]
 8002a0a:	604b      	str	r3, [r1, #4]
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	f000 f82f 	bl	8002a70 <__malloc_unlock>
 8002a12:	f104 000b 	add.w	r0, r4, #11
 8002a16:	1d23      	adds	r3, r4, #4
 8002a18:	f020 0007 	bic.w	r0, r0, #7
 8002a1c:	1ac2      	subs	r2, r0, r3
 8002a1e:	bf1c      	itt	ne
 8002a20:	1a1b      	subne	r3, r3, r0
 8002a22:	50a3      	strne	r3, [r4, r2]
 8002a24:	e7af      	b.n	8002986 <_malloc_r+0x22>
 8002a26:	6862      	ldr	r2, [r4, #4]
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	bf0c      	ite	eq
 8002a2c:	f8c8 2000 	streq.w	r2, [r8]
 8002a30:	605a      	strne	r2, [r3, #4]
 8002a32:	e7eb      	b.n	8002a0c <_malloc_r+0xa8>
 8002a34:	4623      	mov	r3, r4
 8002a36:	6864      	ldr	r4, [r4, #4]
 8002a38:	e7ae      	b.n	8002998 <_malloc_r+0x34>
 8002a3a:	463c      	mov	r4, r7
 8002a3c:	687f      	ldr	r7, [r7, #4]
 8002a3e:	e7b6      	b.n	80029ae <_malloc_r+0x4a>
 8002a40:	461a      	mov	r2, r3
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	d1fb      	bne.n	8002a40 <_malloc_r+0xdc>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6053      	str	r3, [r2, #4]
 8002a4c:	e7de      	b.n	8002a0c <_malloc_r+0xa8>
 8002a4e:	230c      	movs	r3, #12
 8002a50:	6033      	str	r3, [r6, #0]
 8002a52:	4630      	mov	r0, r6
 8002a54:	f000 f80c 	bl	8002a70 <__malloc_unlock>
 8002a58:	e794      	b.n	8002984 <_malloc_r+0x20>
 8002a5a:	6005      	str	r5, [r0, #0]
 8002a5c:	e7d6      	b.n	8002a0c <_malloc_r+0xa8>
 8002a5e:	bf00      	nop
 8002a60:	2000021c 	.word	0x2000021c

08002a64 <__malloc_lock>:
 8002a64:	4801      	ldr	r0, [pc, #4]	@ (8002a6c <__malloc_lock+0x8>)
 8002a66:	f7ff bf06 	b.w	8002876 <__retarget_lock_acquire_recursive>
 8002a6a:	bf00      	nop
 8002a6c:	20000214 	.word	0x20000214

08002a70 <__malloc_unlock>:
 8002a70:	4801      	ldr	r0, [pc, #4]	@ (8002a78 <__malloc_unlock+0x8>)
 8002a72:	f7ff bf01 	b.w	8002878 <__retarget_lock_release_recursive>
 8002a76:	bf00      	nop
 8002a78:	20000214 	.word	0x20000214

08002a7c <__sflush_r>:
 8002a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a84:	0716      	lsls	r6, r2, #28
 8002a86:	4605      	mov	r5, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	d454      	bmi.n	8002b36 <__sflush_r+0xba>
 8002a8c:	684b      	ldr	r3, [r1, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dc02      	bgt.n	8002a98 <__sflush_r+0x1c>
 8002a92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	dd48      	ble.n	8002b2a <__sflush_r+0xae>
 8002a98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	d045      	beq.n	8002b2a <__sflush_r+0xae>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002aa4:	682f      	ldr	r7, [r5, #0]
 8002aa6:	6a21      	ldr	r1, [r4, #32]
 8002aa8:	602b      	str	r3, [r5, #0]
 8002aaa:	d030      	beq.n	8002b0e <__sflush_r+0x92>
 8002aac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	0759      	lsls	r1, r3, #29
 8002ab2:	d505      	bpl.n	8002ac0 <__sflush_r+0x44>
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002aba:	b10b      	cbz	r3, 8002ac0 <__sflush_r+0x44>
 8002abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002abe:	1ad2      	subs	r2, r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ac4:	6a21      	ldr	r1, [r4, #32]
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	47b0      	blx	r6
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	d106      	bne.n	8002ade <__sflush_r+0x62>
 8002ad0:	6829      	ldr	r1, [r5, #0]
 8002ad2:	291d      	cmp	r1, #29
 8002ad4:	d82b      	bhi.n	8002b2e <__sflush_r+0xb2>
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <__sflush_r+0x104>)
 8002ad8:	410a      	asrs	r2, r1
 8002ada:	07d6      	lsls	r6, r2, #31
 8002adc:	d427      	bmi.n	8002b2e <__sflush_r+0xb2>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	6062      	str	r2, [r4, #4]
 8002ae2:	04d9      	lsls	r1, r3, #19
 8002ae4:	6922      	ldr	r2, [r4, #16]
 8002ae6:	6022      	str	r2, [r4, #0]
 8002ae8:	d504      	bpl.n	8002af4 <__sflush_r+0x78>
 8002aea:	1c42      	adds	r2, r0, #1
 8002aec:	d101      	bne.n	8002af2 <__sflush_r+0x76>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	b903      	cbnz	r3, 8002af4 <__sflush_r+0x78>
 8002af2:	6560      	str	r0, [r4, #84]	@ 0x54
 8002af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002af6:	602f      	str	r7, [r5, #0]
 8002af8:	b1b9      	cbz	r1, 8002b2a <__sflush_r+0xae>
 8002afa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002afe:	4299      	cmp	r1, r3
 8002b00:	d002      	beq.n	8002b08 <__sflush_r+0x8c>
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7ff feba 	bl	800287c <_free_r>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b0c:	e00d      	b.n	8002b2a <__sflush_r+0xae>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4628      	mov	r0, r5
 8002b12:	47b0      	blx	r6
 8002b14:	4602      	mov	r2, r0
 8002b16:	1c50      	adds	r0, r2, #1
 8002b18:	d1c9      	bne.n	8002aae <__sflush_r+0x32>
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0c6      	beq.n	8002aae <__sflush_r+0x32>
 8002b20:	2b1d      	cmp	r3, #29
 8002b22:	d001      	beq.n	8002b28 <__sflush_r+0xac>
 8002b24:	2b16      	cmp	r3, #22
 8002b26:	d11e      	bne.n	8002b66 <__sflush_r+0xea>
 8002b28:	602f      	str	r7, [r5, #0]
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e022      	b.n	8002b74 <__sflush_r+0xf8>
 8002b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	e01b      	b.n	8002b6e <__sflush_r+0xf2>
 8002b36:	690f      	ldr	r7, [r1, #16]
 8002b38:	2f00      	cmp	r7, #0
 8002b3a:	d0f6      	beq.n	8002b2a <__sflush_r+0xae>
 8002b3c:	0793      	lsls	r3, r2, #30
 8002b3e:	680e      	ldr	r6, [r1, #0]
 8002b40:	bf08      	it	eq
 8002b42:	694b      	ldreq	r3, [r1, #20]
 8002b44:	600f      	str	r7, [r1, #0]
 8002b46:	bf18      	it	ne
 8002b48:	2300      	movne	r3, #0
 8002b4a:	eba6 0807 	sub.w	r8, r6, r7
 8002b4e:	608b      	str	r3, [r1, #8]
 8002b50:	f1b8 0f00 	cmp.w	r8, #0
 8002b54:	dde9      	ble.n	8002b2a <__sflush_r+0xae>
 8002b56:	6a21      	ldr	r1, [r4, #32]
 8002b58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	463a      	mov	r2, r7
 8002b5e:	4628      	mov	r0, r5
 8002b60:	47b0      	blx	r6
 8002b62:	2800      	cmp	r0, #0
 8002b64:	dc08      	bgt.n	8002b78 <__sflush_r+0xfc>
 8002b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b78:	4407      	add	r7, r0
 8002b7a:	eba8 0800 	sub.w	r8, r8, r0
 8002b7e:	e7e7      	b.n	8002b50 <__sflush_r+0xd4>
 8002b80:	dfbffffe 	.word	0xdfbffffe

08002b84 <_fflush_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	690b      	ldr	r3, [r1, #16]
 8002b88:	4605      	mov	r5, r0
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	b913      	cbnz	r3, 8002b94 <_fflush_r+0x10>
 8002b8e:	2500      	movs	r5, #0
 8002b90:	4628      	mov	r0, r5
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	b118      	cbz	r0, 8002b9e <_fflush_r+0x1a>
 8002b96:	6a03      	ldr	r3, [r0, #32]
 8002b98:	b90b      	cbnz	r3, 8002b9e <_fflush_r+0x1a>
 8002b9a:	f7ff fbcb 	bl	8002334 <__sinit>
 8002b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f3      	beq.n	8002b8e <_fflush_r+0xa>
 8002ba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ba8:	07d0      	lsls	r0, r2, #31
 8002baa:	d404      	bmi.n	8002bb6 <_fflush_r+0x32>
 8002bac:	0599      	lsls	r1, r3, #22
 8002bae:	d402      	bmi.n	8002bb6 <_fflush_r+0x32>
 8002bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bb2:	f7ff fe60 	bl	8002876 <__retarget_lock_acquire_recursive>
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f7ff ff5f 	bl	8002a7c <__sflush_r>
 8002bbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bc0:	07da      	lsls	r2, r3, #31
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	d4e4      	bmi.n	8002b90 <_fflush_r+0xc>
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	059b      	lsls	r3, r3, #22
 8002bca:	d4e1      	bmi.n	8002b90 <_fflush_r+0xc>
 8002bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bce:	f7ff fe53 	bl	8002878 <__retarget_lock_release_recursive>
 8002bd2:	e7dd      	b.n	8002b90 <_fflush_r+0xc>

08002bd4 <__swhatbuf_r>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	b096      	sub	sp, #88	@ 0x58
 8002be0:	4615      	mov	r5, r2
 8002be2:	461e      	mov	r6, r3
 8002be4:	da0d      	bge.n	8002c02 <__swhatbuf_r+0x2e>
 8002be6:	89a3      	ldrh	r3, [r4, #12]
 8002be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2340      	movne	r3, #64	@ 0x40
 8002bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	6031      	str	r1, [r6, #0]
 8002bfc:	602b      	str	r3, [r5, #0]
 8002bfe:	b016      	add	sp, #88	@ 0x58
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	466a      	mov	r2, sp
 8002c04:	f000 f848 	bl	8002c98 <_fstat_r>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	dbec      	blt.n	8002be6 <__swhatbuf_r+0x12>
 8002c0c:	9901      	ldr	r1, [sp, #4]
 8002c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c16:	4259      	negs	r1, r3
 8002c18:	4159      	adcs	r1, r3
 8002c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1e:	e7eb      	b.n	8002bf8 <__swhatbuf_r+0x24>

08002c20 <__smakebuf_r>:
 8002c20:	898b      	ldrh	r3, [r1, #12]
 8002c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c24:	079d      	lsls	r5, r3, #30
 8002c26:	4606      	mov	r6, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	d507      	bpl.n	8002c3c <__smakebuf_r+0x1c>
 8002c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	6123      	str	r3, [r4, #16]
 8002c34:	2301      	movs	r3, #1
 8002c36:	6163      	str	r3, [r4, #20]
 8002c38:	b003      	add	sp, #12
 8002c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c3c:	ab01      	add	r3, sp, #4
 8002c3e:	466a      	mov	r2, sp
 8002c40:	f7ff ffc8 	bl	8002bd4 <__swhatbuf_r>
 8002c44:	9f00      	ldr	r7, [sp, #0]
 8002c46:	4605      	mov	r5, r0
 8002c48:	4639      	mov	r1, r7
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f7ff fe8a 	bl	8002964 <_malloc_r>
 8002c50:	b948      	cbnz	r0, 8002c66 <__smakebuf_r+0x46>
 8002c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c56:	059a      	lsls	r2, r3, #22
 8002c58:	d4ee      	bmi.n	8002c38 <__smakebuf_r+0x18>
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	e7e2      	b.n	8002c2c <__smakebuf_r+0xc>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	6020      	str	r0, [r4, #0]
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	9b01      	ldr	r3, [sp, #4]
 8002c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c76:	b15b      	cbz	r3, 8002c90 <__smakebuf_r+0x70>
 8002c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f000 f81d 	bl	8002cbc <_isatty_r>
 8002c82:	b128      	cbz	r0, 8002c90 <__smakebuf_r+0x70>
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	431d      	orrs	r5, r3
 8002c94:	81a5      	strh	r5, [r4, #12]
 8002c96:	e7cf      	b.n	8002c38 <__smakebuf_r+0x18>

08002c98 <_fstat_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	4d07      	ldr	r5, [pc, #28]	@ (8002cb8 <_fstat_r+0x20>)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	f7fd fdc5 	bl	8000834 <_fstat>
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	d102      	bne.n	8002cb4 <_fstat_r+0x1c>
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	b103      	cbz	r3, 8002cb4 <_fstat_r+0x1c>
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	bd38      	pop	{r3, r4, r5, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000210 	.word	0x20000210

08002cbc <_isatty_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4d06      	ldr	r5, [pc, #24]	@ (8002cd8 <_isatty_r+0x1c>)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7fd fdc4 	bl	8000854 <_isatty>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_isatty_r+0x1a>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_isatty_r+0x1a>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	20000210 	.word	0x20000210

08002cdc <_sbrk_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4d06      	ldr	r5, [pc, #24]	@ (8002cf8 <_sbrk_r+0x1c>)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	602b      	str	r3, [r5, #0]
 8002ce8:	f7fd fdcc 	bl	8000884 <_sbrk>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_sbrk_r+0x1a>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_sbrk_r+0x1a>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000210 	.word	0x20000210

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
