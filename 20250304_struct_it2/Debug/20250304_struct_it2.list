
20250304_struct_it2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004188  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08004358  08004358  00005358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004508  08004508  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004510  08004510  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004518  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  08004580  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004580  00006298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a44d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d49  00000000  00000000  000104e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00012230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  00012a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022090  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5b2  00000000  00000000  0003517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca87c  00000000  00000000  0004072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010afa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  0010afec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0010d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004340 	.word	0x08004340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004340 	.word	0x08004340

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getData>:
static uint8_t Adata[REV_SIZE] = {};
static uint8_t Gdata = 0;
static bool AFF = 0;
getdata data;

void getData(UART_HandleTypeDef* huart){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4904      	ldr	r1, [pc, #16]	@ (80005f8 <getData+0x1c>)
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f001 fede 	bl	80023aa <HAL_UART_Receive_IT>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000008f 	.word	0x2000008f

080005fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	static int Gcount;
	static int timeout;
	if(Gdata == 0xaf){
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <HAL_UART_RxCpltCallback+0x8c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2baf      	cmp	r3, #175	@ 0xaf
 800060a:	d106      	bne.n	800061a <HAL_UART_RxCpltCallback+0x1e>
		AFF = true;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <HAL_UART_RxCpltCallback+0x90>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
		Gcount = 0;
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e00b      	b.n	8000632 <HAL_UART_RxCpltCallback+0x36>
	}else{
		timeout++;
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <HAL_UART_RxCpltCallback+0x98>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <HAL_UART_RxCpltCallback+0x98>)
 8000622:	6013      	str	r3, [r2, #0]
		if(timeout >= TIMEOUT_MAX){
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <HAL_UART_RxCpltCallback+0x98>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b09      	cmp	r3, #9
 800062a:	dd02      	ble.n	8000632 <HAL_UART_RxCpltCallback+0x36>
			timeout = 0;
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <HAL_UART_RxCpltCallback+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <HAL_UART_RxCpltCallback+0x90>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d01c      	beq.n	8000674 <HAL_UART_RxCpltCallback+0x78>
		Adata[Gcount] = Gdata;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_UART_RxCpltCallback+0x8c>)
 8000640:	7811      	ldrb	r1, [r2, #0]
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <HAL_UART_RxCpltCallback+0x9c>)
 8000644:	54d1      	strb	r1, [r2, r3]
		Gcount++;
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 800064e:	6013      	str	r3, [r2, #0]
		if(Gcount == REV_SIZE){
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b0b      	cmp	r3, #11
 8000656:	d10d      	bne.n	8000674 <HAL_UART_RxCpltCallback+0x78>
			AFF = 0;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <HAL_UART_RxCpltCallback+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
			if(ChSUM() == 0){
 800065e:	f000 f81f 	bl	80006a0 <ChSUM>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <HAL_UART_RxCpltCallback+0x72>
				AddStruct(&data);
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <HAL_UART_RxCpltCallback+0xa0>)
 800066a:	f000 f843 	bl	80006f4 <AddStruct>
			}
			Gcount = 0;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_UART_RxCpltCallback+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	4904      	ldr	r1, [pc, #16]	@ (8000688 <HAL_UART_RxCpltCallback+0x8c>)
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f001 fe96 	bl	80023aa <HAL_UART_Receive_IT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000008f 	.word	0x2000008f
 800068c:	20000090 	.word	0x20000090
 8000690:	200000ac 	.word	0x200000ac
 8000694:	200000b0 	.word	0x200000b0
 8000698:	20000084 	.word	0x20000084
 800069c:	20000094 	.word	0x20000094

080006a0 <ChSUM>:

int ChSUM(void){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
	if(Adata[10] = 0xed){
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <ChSUM+0x50>)
 80006a8:	22ed      	movs	r2, #237	@ 0xed
 80006aa:	729a      	strb	r2, [r3, #10]
		uint8_t revsum = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006b0:	2301      	movs	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e009      	b.n	80006ca <ChSUM+0x2a>
			revsum += Adata[i];
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <ChSUM+0x50>)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4413      	add	r3, r2
 80006c2:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	ddf2      	ble.n	80006b6 <ChSUM+0x16>
		}
		if(revsum == Adata[9]){
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <ChSUM+0x50>)
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d101      	bne.n	80006de <ChSUM+0x3e>
			return 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	e001      	b.n	80006e2 <ChSUM+0x42>
		}else{
			return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}else {
		return 1;
	}
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084

080006f4 <AddStruct>:

void AddStruct(getdata* Udata){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	StructInit(Udata);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f8ad 	bl	800085c <StructInit>
	Udata->LX = Adata[1];
 8000702:	4b55      	ldr	r3, [pc, #340]	@ (8000858 <AddStruct+0x164>)
 8000704:	785a      	ldrb	r2, [r3, #1]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 800070a:	4b53      	ldr	r3, [pc, #332]	@ (8000858 <AddStruct+0x164>)
 800070c:	789a      	ldrb	r2, [r3, #2]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 8000712:	4b51      	ldr	r3, [pc, #324]	@ (8000858 <AddStruct+0x164>)
 8000714:	795a      	ldrb	r2, [r3, #5]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 800071a:	4b4f      	ldr	r3, [pc, #316]	@ (8000858 <AddStruct+0x164>)
 800071c:	78da      	ldrb	r2, [r3, #3]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 8000722:	4b4d      	ldr	r3, [pc, #308]	@ (8000858 <AddStruct+0x164>)
 8000724:	791a      	ldrb	r2, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 800072a:	4b4b      	ldr	r3, [pc, #300]	@ (8000858 <AddStruct+0x164>)
 800072c:	799a      	ldrb	r2, [r3, #6]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 8000732:	4b49      	ldr	r3, [pc, #292]	@ (8000858 <AddStruct+0x164>)
 8000734:	79db      	ldrb	r3, [r3, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <AddStruct+0x50>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8000744:	4b44      	ldr	r3, [pc, #272]	@ (8000858 <AddStruct+0x164>)
 8000746:	79db      	ldrb	r3, [r3, #7]
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <AddStruct+0x62>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2201      	movs	r2, #1
 8000754:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8000756:	4b40      	ldr	r3, [pc, #256]	@ (8000858 <AddStruct+0x164>)
 8000758:	79db      	ldrb	r3, [r3, #7]
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <AddStruct+0x74>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8000768:	4b3b      	ldr	r3, [pc, #236]	@ (8000858 <AddStruct+0x164>)
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <AddStruct+0x86>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 800077a:	4b37      	ldr	r3, [pc, #220]	@ (8000858 <AddStruct+0x164>)
 800077c:	79db      	ldrb	r3, [r3, #7]
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	2b00      	cmp	r3, #0
 8000784:	d002      	beq.n	800078c <AddStruct+0x98>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2201      	movs	r2, #1
 800078a:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 800078c:	4b32      	ldr	r3, [pc, #200]	@ (8000858 <AddStruct+0x164>)
 800078e:	79db      	ldrb	r3, [r3, #7]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <AddStruct+0xaa>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2201      	movs	r2, #1
 800079c:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 800079e:	4b2e      	ldr	r3, [pc, #184]	@ (8000858 <AddStruct+0x164>)
 80007a0:	79db      	ldrb	r3, [r3, #7]
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <AddStruct+0xbc>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80007b0:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <AddStruct+0x164>)
 80007b2:	79db      	ldrb	r3, [r3, #7]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da02      	bge.n	80007c0 <AddStruct+0xcc>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2201      	movs	r2, #1
 80007be:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80007c0:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <AddStruct+0x164>)
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <AddStruct+0xde>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80007d2:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <AddStruct+0x164>)
 80007d4:	7a1b      	ldrb	r3, [r3, #8]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <AddStruct+0xf0>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <AddStruct+0x164>)
 80007e6:	7a1b      	ldrb	r3, [r3, #8]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <AddStruct+0x102>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <AddStruct+0x164>)
 80007f8:	7a1b      	ldrb	r3, [r3, #8]
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <AddStruct+0x114>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <AddStruct+0x164>)
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <AddStruct+0x126>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTION 	= 1;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <AddStruct+0x164>)
 800081c:	7a1b      	ldrb	r3, [r3, #8]
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <AddStruct+0x138>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <AddStruct+0x164>)
 800082e:	7a1b      	ldrb	r3, [r3, #8]
 8000830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <AddStruct+0x14a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2201      	movs	r2, #1
 800083c:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <AddStruct+0x164>)
 8000840:	7a1b      	ldrb	r3, [r3, #8]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	da03      	bge.n	8000850 <AddStruct+0x15c>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	755a      	strb	r2, [r3, #21]

	return;
 800084e:	bf00      	nop
 8000850:	bf00      	nop
}
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000084 	.word	0x20000084

0800085c <StructInit>:

void StructInit(getdata* Udata){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2280      	movs	r2, #128	@ 0x80
 800086e:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	749a      	strb	r2, [r3, #18]
	Udata->OPTION = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	755a      	strb	r2, [r3, #21]

	return;
 80008e8:	bf00      	nop
}
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <AllShowP>:
			,Udata.PS
			,Udata.TOUCHPAD
			);
}

void AllShowP(getdata Udata){
 80008f4:	b084      	sub	sp, #16
 80008f6:	b5b0      	push	{r4, r5, r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af04      	add	r7, sp, #16
 80008fc:	f107 0410 	add.w	r4, r7, #16
 8000900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"RX:%3d "
			"RY:%3d "
			"L2:%3d "
			"R2:%3d "
			"Pressed Button: "
			,Udata.LX
 8000904:	7c3b      	ldrb	r3, [r7, #16]
	printf(
 8000906:	4618      	mov	r0, r3
			,Udata.LY
 8000908:	7c7b      	ldrb	r3, [r7, #17]
	printf(
 800090a:	461c      	mov	r4, r3
			,Udata.RX
 800090c:	7cfb      	ldrb	r3, [r7, #19]
	printf(
 800090e:	461d      	mov	r5, r3
			,Udata.RY
 8000910:	7d3b      	ldrb	r3, [r7, #20]
			,Udata.L2
 8000912:	7cba      	ldrb	r2, [r7, #18]
			,Udata.R2
 8000914:	7d79      	ldrb	r1, [r7, #21]
	printf(
 8000916:	9102      	str	r1, [sp, #8]
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	462b      	mov	r3, r5
 800091e:	4622      	mov	r2, r4
 8000920:	4601      	mov	r1, r0
 8000922:	4839      	ldr	r0, [pc, #228]	@ (8000a08 <AllShowP+0x114>)
 8000924:	f002 fd7e 	bl	8003424 <iprintf>
			);

	if(Udata.TRIANGLE	== 1) printf("TRIANGLE ");
 8000928:	7dbb      	ldrb	r3, [r7, #22]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <AllShowP+0x40>
 800092e:	4837      	ldr	r0, [pc, #220]	@ (8000a0c <AllShowP+0x118>)
 8000930:	f002 fd78 	bl	8003424 <iprintf>
	if(Udata.CIRCLE		== 1) printf("CIRCLE ");
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <AllShowP+0x4c>
 800093a:	4835      	ldr	r0, [pc, #212]	@ (8000a10 <AllShowP+0x11c>)
 800093c:	f002 fd72 	bl	8003424 <iprintf>
	if(Udata.CROSS		== 1) printf("CROSS ");
 8000940:	7e3b      	ldrb	r3, [r7, #24]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <AllShowP+0x58>
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <AllShowP+0x120>)
 8000948:	f002 fd6c 	bl	8003424 <iprintf>
	if(Udata.SQUARE 	== 1) printf("SQUARE ");
 800094c:	7e7b      	ldrb	r3, [r7, #25]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <AllShowP+0x64>
 8000952:	4831      	ldr	r0, [pc, #196]	@ (8000a18 <AllShowP+0x124>)
 8000954:	f002 fd66 	bl	8003424 <iprintf>
	if(Udata.UP 		== 1) printf("UP ");
 8000958:	7ebb      	ldrb	r3, [r7, #26]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <AllShowP+0x70>
 800095e:	482f      	ldr	r0, [pc, #188]	@ (8000a1c <AllShowP+0x128>)
 8000960:	f002 fd60 	bl	8003424 <iprintf>
	if(Udata.RIGHT 		== 1) printf("RIGHT ");
 8000964:	7efb      	ldrb	r3, [r7, #27]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <AllShowP+0x7c>
 800096a:	482d      	ldr	r0, [pc, #180]	@ (8000a20 <AllShowP+0x12c>)
 800096c:	f002 fd5a 	bl	8003424 <iprintf>
	if(Udata.DOWN 		== 1) printf("DOWN ");
 8000970:	7f3b      	ldrb	r3, [r7, #28]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <AllShowP+0x88>
 8000976:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <AllShowP+0x130>)
 8000978:	f002 fd54 	bl	8003424 <iprintf>
	if(Udata.LEFT 		== 1) printf("LEFT ");
 800097c:	7f7b      	ldrb	r3, [r7, #29]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <AllShowP+0x94>
 8000982:	4829      	ldr	r0, [pc, #164]	@ (8000a28 <AllShowP+0x134>)
 8000984:	f002 fd4e 	bl	8003424 <iprintf>
	if(Udata.L1 		== 1) printf("L1 ");
 8000988:	7fbb      	ldrb	r3, [r7, #30]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <AllShowP+0xa0>
 800098e:	4827      	ldr	r0, [pc, #156]	@ (8000a2c <AllShowP+0x138>)
 8000990:	f002 fd48 	bl	8003424 <iprintf>
	if(Udata.L3 		== 1) printf("L3 ");
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <AllShowP+0xac>
 800099a:	4825      	ldr	r0, [pc, #148]	@ (8000a30 <AllShowP+0x13c>)
 800099c:	f002 fd42 	bl	8003424 <iprintf>
	if(Udata.R1 		== 1) printf("R1 ");
 80009a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <AllShowP+0xba>
 80009a8:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <AllShowP+0x140>)
 80009aa:	f002 fd3b 	bl	8003424 <iprintf>
	if(Udata.R3 		== 1) printf("R3 ");
 80009ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <AllShowP+0xc8>
 80009b6:	4820      	ldr	r0, [pc, #128]	@ (8000a38 <AllShowP+0x144>)
 80009b8:	f002 fd34 	bl	8003424 <iprintf>
	if(Udata.SHARE 		== 1) printf("SHARE ");
 80009bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <AllShowP+0xd6>
 80009c4:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <AllShowP+0x148>)
 80009c6:	f002 fd2d 	bl	8003424 <iprintf>
	if(Udata.OPTION 	== 1) printf("OPTION ");
 80009ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <AllShowP+0xe4>
 80009d2:	481b      	ldr	r0, [pc, #108]	@ (8000a40 <AllShowP+0x14c>)
 80009d4:	f002 fd26 	bl	8003424 <iprintf>
	if(Udata.PS 		== 1) printf("PS ");
 80009d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <AllShowP+0xf2>
 80009e0:	4818      	ldr	r0, [pc, #96]	@ (8000a44 <AllShowP+0x150>)
 80009e2:	f002 fd1f 	bl	8003424 <iprintf>
	if(Udata.TOUCHPAD 	== 1) printf("TOUOCHPAD ");
 80009e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <AllShowP+0x100>
 80009ee:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <AllShowP+0x154>)
 80009f0:	f002 fd18 	bl	8003424 <iprintf>

	printf("\r\n");
 80009f4:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <AllShowP+0x158>)
 80009f6:	f002 fd7d 	bl	80034f4 <puts>
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a02:	b004      	add	sp, #16
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	0800440c 	.word	0x0800440c
 8000a0c:	08004448 	.word	0x08004448
 8000a10:	08004454 	.word	0x08004454
 8000a14:	0800445c 	.word	0x0800445c
 8000a18:	08004464 	.word	0x08004464
 8000a1c:	0800446c 	.word	0x0800446c
 8000a20:	08004470 	.word	0x08004470
 8000a24:	08004478 	.word	0x08004478
 8000a28:	08004480 	.word	0x08004480
 8000a2c:	08004488 	.word	0x08004488
 8000a30:	0800448c 	.word	0x0800448c
 8000a34:	08004490 	.word	0x08004490
 8000a38:	08004494 	.word	0x08004494
 8000a3c:	08004498 	.word	0x08004498
 8000a40:	080044a0 	.word	0x080044a0
 8000a44:	080044a8 	.word	0x080044a8
 8000a48:	080044ac 	.word	0x080044ac
 8000a4c:	080044b8 	.word	0x080044b8

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <main+0x5c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fd50 	bl	8003504 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 faba 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f826 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f8d8 	bl	8000c20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 f882 	bl	8000b78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a74:	f000 f8aa 	bl	8000bcc <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getData(&huart1);
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <main+0x60>)
 8000a7a:	f7ff fdaf 	bl	80005dc <getData>
	  AllShowP(data);
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <main+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4616      	mov	r6, r2
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	4611      	mov	r1, r2
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	4615      	mov	r5, r2
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	4614      	mov	r4, r2
 8000a90:	466a      	mov	r2, sp
 8000a92:	3310      	adds	r3, #16
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	6010      	str	r0, [r2, #0]
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	8093      	strh	r3, [r2, #4]
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	462a      	mov	r2, r5
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	f7ff ff27 	bl	80008f4 <AllShowP>
	  getData(&huart1);
 8000aa6:	bf00      	nop
 8000aa8:	e7e6      	b.n	8000a78 <main+0x28>
 8000aaa:	bf00      	nop
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	200000b4 	.word	0x200000b4
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	@ 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2234      	movs	r2, #52	@ 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 feb0 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <SystemClock_Config+0xb8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <SystemClock_Config+0xb8>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <SystemClock_Config+0xb8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <SystemClock_Config+0xbc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b04:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <SystemClock_Config+0xbc>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <SystemClock_Config+0xbc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 f8c3 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b38:	f000 f8a0 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fdea 	bl	8001730 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b62:	f000 f88b 	bl	8000c7c <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	@ 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f001 fb20 	bl	80021f4 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f85f 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000b4 	.word	0x200000b4
 8000bc8:	40011000 	.word	0x40011000

08000bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_USART2_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f001 faf6 	bl	80021f4 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f835 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000fc 	.word	0x200000fc
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_GPIO_Init+0x30>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <MX_GPIO_Init+0x30>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_GPIO_Init+0x30>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char* ptr,int len){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	230a      	movs	r3, #10
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <_write+0x24>)
 8000c6a:	f001 fb13 	bl	8002294 <HAL_UART_Transmit>
	return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000fc 	.word	0x200000fc

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a36      	ldr	r2, [pc, #216]	@ (8000dd0 <HAL_UART_MspInit+0xf8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d135      	bne.n	8000d66 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d44:	2307      	movs	r3, #7
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4822      	ldr	r0, [pc, #136]	@ (8000dd8 <HAL_UART_MspInit+0x100>)
 8000d50:	f000 fb5a 	bl	8001408 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2025      	movs	r0, #37	@ 0x25
 8000d5a:	f000 fa8c 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5e:	2025      	movs	r0, #37	@ 0x25
 8000d60:	f000 faa5 	bl	80012ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d64:	e030      	b.n	8000dc8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <HAL_UART_MspInit+0x104>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12b      	bne.n	8000dc8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a16      	ldr	r2, [pc, #88]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_UART_MspInit+0xfc>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da8:	230c      	movs	r3, #12
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db8:	2307      	movs	r3, #7
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_UART_MspInit+0x100>)
 8000dc4:	f000 fb20 	bl	8001408 <HAL_GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	@ 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40004400 	.word	0x40004400

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <NMI_Handler+0x4>

08000de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <MemManage_Handler+0x4>

08000df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f923 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <USART1_IRQHandler+0x10>)
 8000e46:	f001 fad5 	bl	80023f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000b4 	.word	0x200000b4

08000e54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
  }

  return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_isatty>:

int _isatty(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fcce 	bl	80038c8 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20020000 	.word	0x20020000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000144 	.word	0x20000144
 8000f60:	20000298 	.word	0x20000298

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f002 fc8d 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fd49 	bl	8000a50 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fcc:	08004518 	.word	0x08004518
  ldr r2, =_sbss
 8000fd0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fd4:	20000298 	.word	0x20000298

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_Init+0x40>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_Init+0x40>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	@ (800101c <HAL_Init+0x40>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f92b 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fe3a 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f943 	bl	80012ca <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f90b 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000148 	.word	0x20000148

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000148 	.word	0x20000148

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff feda 	bl	80010a8 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e052      	b.n	80013ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0216 	bic.w	r2, r2, #22
 8001322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_DMA_Abort+0x62>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0208 	bic.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	e013      	b.n	800138e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001366:	f7ff fe9f 	bl	80010a8 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b05      	cmp	r3, #5
 8001372:	d90c      	bls.n	800138e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e015      	b.n	80013ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e4      	bne.n	8001366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a0:	223f      	movs	r2, #63	@ 0x3f
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e00c      	b.n	80013fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2205      	movs	r2, #5
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e165      	b.n	80016f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8154 	bne.w	80016ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80ae 	beq.w	80016ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a5c      	ldr	r2, [pc, #368]	@ (8001708 <HAL_GPIO_Init+0x300>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <HAL_GPIO_Init+0x300>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a58      	ldr	r2, [pc, #352]	@ (800170c <HAL_GPIO_Init+0x304>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001710 <HAL_GPIO_Init+0x308>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d025      	beq.n	8001622 <HAL_GPIO_Init+0x21a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001714 <HAL_GPIO_Init+0x30c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01f      	beq.n	800161e <HAL_GPIO_Init+0x216>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001718 <HAL_GPIO_Init+0x310>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x212>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <HAL_GPIO_Init+0x314>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001720 <HAL_GPIO_Init+0x318>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x20a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <HAL_GPIO_Init+0x31c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x206>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <HAL_GPIO_Init+0x320>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x202>
 8001606:	2306      	movs	r3, #6
 8001608:	e00c      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 800160a:	2307      	movs	r3, #7
 800160c:	e00a      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 800160e:	2305      	movs	r3, #5
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 8001612:	2304      	movs	r3, #4
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x21c>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	@ (800170c <HAL_GPIO_Init+0x304>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <HAL_GPIO_Init+0x324>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001666:	4a31      	ldr	r2, [pc, #196]	@ (800172c <HAL_GPIO_Init+0x324>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <HAL_GPIO_Init+0x324>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001690:	4a26      	ldr	r2, [pc, #152]	@ (800172c <HAL_GPIO_Init+0x324>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_GPIO_Init+0x324>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ba:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <HAL_GPIO_Init+0x324>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_GPIO_Init+0x324>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e4:	4a11      	ldr	r2, [pc, #68]	@ (800172c <HAL_GPIO_Init+0x324>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f ae96 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40021000 	.word	0x40021000
 8001724:	40021400 	.word	0x40021400
 8001728:	40021800 	.word	0x40021800
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fc42 	bl	80010a8 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fc3e 	bl	80010a8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f855 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fba2 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	080044bc 	.word	0x080044bc
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_RCC_GetHCLKFreq+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000

08001914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001918:	f7ff fff0 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0a9b      	lsrs	r3, r3, #10
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	@ (8001938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	080044cc 	.word	0x080044cc

0800193c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001940:	f7ff ffdc 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0b5b      	lsrs	r3, r3, #13
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	@ (8001960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	080044cc 	.word	0x080044cc

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b0a6      	sub	sp, #152	@ 0x98
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198a:	4bc8      	ldr	r3, [pc, #800]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b0c      	cmp	r3, #12
 8001994:	f200 817e 	bhi.w	8001c94 <HAL_RCC_GetSysClockFreq+0x330>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019d5 	.word	0x080019d5
 80019a4:	08001c95 	.word	0x08001c95
 80019a8:	08001c95 	.word	0x08001c95
 80019ac:	08001c95 	.word	0x08001c95
 80019b0:	080019dd 	.word	0x080019dd
 80019b4:	08001c95 	.word	0x08001c95
 80019b8:	08001c95 	.word	0x08001c95
 80019bc:	08001c95 	.word	0x08001c95
 80019c0:	080019e5 	.word	0x080019e5
 80019c4:	08001c95 	.word	0x08001c95
 80019c8:	08001c95 	.word	0x08001c95
 80019cc:	08001c95 	.word	0x08001c95
 80019d0:	08001b4f 	.word	0x08001b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4bb6      	ldr	r3, [pc, #728]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019da:	e15f      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019dc:	4bb5      	ldr	r3, [pc, #724]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x350>)
 80019de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019e2:	e15b      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4bb1      	ldr	r3, [pc, #708]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f0:	4bae      	ldr	r3, [pc, #696]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d031      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4bab      	ldr	r3, [pc, #684]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	2200      	movs	r2, #0
 8001a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a10:	2300      	movs	r3, #0
 8001a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a14:	4ba7      	ldr	r3, [pc, #668]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a16:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a1a:	462a      	mov	r2, r5
 8001a1c:	fb03 f202 	mul.w	r2, r3, r2
 8001a20:	2300      	movs	r3, #0
 8001a22:	4621      	mov	r1, r4
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	4aa2      	ldr	r2, [pc, #648]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	fba1 1202 	umull	r1, r2, r1, r2
 8001a32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a34:	460a      	mov	r2, r1
 8001a36:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a3a:	4413      	add	r3, r2
 8001a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a42:	2200      	movs	r2, #0
 8001a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a4c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a50:	f7fe fc2e 	bl	80002b0 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a5e:	e064      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a60:	4b92      	ldr	r3, [pc, #584]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	2200      	movs	r2, #0
 8001a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a6a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a74:	2300      	movs	r3, #0
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a78:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	462b      	mov	r3, r5
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4621      	mov	r1, r4
 8001a96:	1a51      	subs	r1, r2, r1
 8001a98:	6139      	str	r1, [r7, #16]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aae:	4659      	mov	r1, fp
 8001ab0:	018b      	lsls	r3, r1, #6
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab8:	4651      	mov	r1, sl
 8001aba:	018a      	lsls	r2, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac2:	4659      	mov	r1, fp
 8001ac4:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001adc:	4690      	mov	r8, r2
 8001ade:	4699      	mov	r9, r3
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	eb18 0303 	adds.w	r3, r8, r3
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	462b      	mov	r3, r5
 8001aea:	eb49 0303 	adc.w	r3, r9, r3
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001afc:	4629      	mov	r1, r5
 8001afe:	028b      	lsls	r3, r1, #10
 8001b00:	4621      	mov	r1, r4
 8001b02:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b06:	4621      	mov	r1, r4
 8001b08:	028a      	lsls	r2, r1, #10
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b12:	2200      	movs	r2, #0
 8001b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b16:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b1c:	f7fe fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4613      	mov	r3, r2
 8001b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b2a:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	3301      	adds	r3, #1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b4c:	e0a6      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4e:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5a:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02a      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b51      	ldr	r3, [pc, #324]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b7c:	fb03 f201 	mul.w	r2, r3, r1
 8001b80:	2300      	movs	r3, #0
 8001b82:	fb00 f303 	mul.w	r3, r0, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b90:	460a      	mov	r2, r1
 8001b92:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b94:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b96:	4413      	add	r3, r2
 8001b98:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ba4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ba8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bac:	f7fe fb80 	bl	80002b0 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bba:	e05b      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd8:	4642      	mov	r2, r8
 8001bda:	464b      	mov	r3, r9
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	0159      	lsls	r1, r3, #5
 8001be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bea:	0150      	lsls	r0, r2, #5
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4641      	mov	r1, r8
 8001bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c10:	ebb2 040a 	subs.w	r4, r2, sl
 8001c14:	eb63 050b 	sbc.w	r5, r3, fp
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	00eb      	lsls	r3, r5, #3
 8001c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c26:	00e2      	lsls	r2, r4, #3
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	18e3      	adds	r3, r4, r3
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	464b      	mov	r3, r9
 8001c34:	eb45 0303 	adc.w	r3, r5, r3
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c46:	4629      	mov	r1, r5
 8001c48:	028b      	lsls	r3, r1, #10
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c50:	4621      	mov	r1, r4
 8001c52:	028a      	lsls	r2, r1, #10
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	61fa      	str	r2, [r7, #28]
 8001c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c66:	f7fe fb23 	bl	80002b0 <__aeabi_uldivmod>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4613      	mov	r3, r2
 8001c70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x348>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	0f1b      	lsrs	r3, r3, #28
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c92:	e003      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3798      	adds	r7, #152	@ 0x98
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	017d7840 	.word	0x017d7840

08001cb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e28d      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8083 	beq.w	8001dde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cd8:	4b94      	ldr	r3, [pc, #592]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d019      	beq.n	8001d18 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ce4:	4b91      	ldr	r3, [pc, #580]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cfc:	d00c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d112      	bne.n	8001d30 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4b88      	ldr	r3, [pc, #544]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d16:	d10b      	bne.n	8001d30 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	4b84      	ldr	r3, [pc, #528]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x124>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d157      	bne.n	8001ddc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e25a      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x90>
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xcc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xb4>
 8001d52:	4b76      	ldr	r3, [pc, #472]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b73      	ldr	r3, [pc, #460]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a72      	ldr	r2, [pc, #456]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xcc>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f98c 	bl	80010a8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f988 	bl	80010a8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e21f      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b61      	ldr	r3, [pc, #388]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xdc>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f978 	bl	80010a8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f974 	bl	80010a8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	@ 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e20b      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b57      	ldr	r3, [pc, #348]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x104>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d06f      	beq.n	8001eca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dea:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d017      	beq.n	8001e26 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001df6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
        || \
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e02:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b44      	ldr	r3, [pc, #272]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b41      	ldr	r3, [pc, #260]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x186>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1d3      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4937      	ldr	r1, [pc, #220]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_RCC_OscConfig+0x278>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff f921 	bl	80010a8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f91d 	bl	80010a8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1b4      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4925      	ldr	r1, [pc, #148]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_RCC_OscConfig+0x278>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f900 	bl	80010a8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff f8fc 	bl	80010a8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e193      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d036      	beq.n	8001f44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f8e0 	bl	80010a8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f8dc 	bl	80010a8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e173      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x234>
 8001f0a:	e01b      	b.n	8001f44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f8c9 	bl	80010a8 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e00e      	b.n	8001f38 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f8c5 	bl	80010a8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d907      	bls.n	8001f38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e15c      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	42470000 	.word	0x42470000
 8001f34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b8a      	ldr	r3, [pc, #552]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ea      	bne.n	8001f1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8097 	beq.w	8002080 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b83      	ldr	r3, [pc, #524]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b79      	ldr	r3, [pc, #484]	@ (8002168 <HAL_RCC_OscConfig+0x4b0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b76      	ldr	r3, [pc, #472]	@ (8002168 <HAL_RCC_OscConfig+0x4b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a75      	ldr	r2, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x4b0>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f885 	bl	80010a8 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7ff f881 	bl	80010a8 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e118      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002168 <HAL_RCC_OscConfig+0x4b0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x31e>
 8001fc8:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fcc:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x340>
 8001fde:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	4a60      	ldr	r2, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fea:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4a59      	ldr	r2, [pc, #356]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	@ 0x70
 8002004:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002008:	4a56      	ldr	r2, [pc, #344]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f846 	bl	80010a8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff f842 	bl	80010a8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e0d7      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ee      	beq.n	8002020 <HAL_RCC_OscConfig+0x368>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f830 	bl	80010a8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff f82c 	bl	80010a8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0c1      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ee      	bne.n	800204c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002074:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	4a3a      	ldr	r2, [pc, #232]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 800207a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80ad 	beq.w	80021e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208a:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b08      	cmp	r3, #8
 8002094:	d060      	beq.n	8002158 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d145      	bne.n	800212a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_RCC_OscConfig+0x4b4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f800 	bl	80010a8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fffc 	bl	80010a8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e093      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	019b      	lsls	r3, r3, #6
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	071b      	lsls	r3, r3, #28
 80020f6:	491b      	ldr	r1, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x4b4>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e064      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x452>
 8002128:	e05c      	b.n	80021e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_OscConfig+0x4b4>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe ffba 	bl	80010a8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ffb6 	bl	80010a8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04d      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x480>
 8002156:	e045      	b.n	80021e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e040      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
 800216c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002170:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <HAL_RCC_OscConfig+0x538>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d030      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d129      	bne.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d122      	bne.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d119      	bne.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d10f      	bne.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fd5c 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fdbd 	bl	8002db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800224c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800225c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800226c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d175      	bne.n	80023a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_UART_Transmit+0x2c>
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e06e      	b.n	80023a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	@ 0x21
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d2:	f7fe fee9 	bl	80010a8 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ec:	d108      	bne.n	8002300 <HAL_UART_Transmit+0x6c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e003      	b.n	8002308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002308:	e02e      	b.n	8002368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	2180      	movs	r1, #128	@ 0x80
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fb1f 	bl	8002958 <UART_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03a      	b.n	80023a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3302      	adds	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e007      	b.n	800235a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1cb      	bne.n	800230a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2140      	movs	r1, #64	@ 0x40
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 faeb 	bl	8002958 <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e006      	b.n	80023a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d112      	bne.n	80023ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_UART_Receive_IT+0x26>
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00b      	b.n	80023ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	461a      	mov	r2, r3
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fb12 	bl	8002a0a <UART_Start_Receive_IT>
 80023e6:	4603      	mov	r3, r0
 80023e8:	e000      	b.n	80023ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0ba      	sub	sp, #232	@ 0xe8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_UART_IRQHandler+0x66>
 8002446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fbf2 	bl	8002c3c <UART_Receive_IT>
      return;
 8002458:	e25b      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80de 	beq.w	8002620 <HAL_UART_IRQHandler+0x22c>
 8002464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80d1 	beq.w	8002620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_UART_IRQHandler+0xae>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_UART_IRQHandler+0xd2>
 80024ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_UART_IRQHandler+0xf6>
 80024d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <HAL_UART_IRQHandler+0x126>
 80024f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f043 0208 	orr.w	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 81f2 	beq.w	8002908 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_UART_IRQHandler+0x14e>
 8002530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb7d 	bl	8002c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_UART_IRQHandler+0x17a>
 8002566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d04f      	beq.n	800260e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa85 	bl	8002a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d141      	bne.n	8002606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3314      	adds	r3, #20
 8002588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002590:	e853 3f00 	ldrex	r3, [r3]
 8002594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800259c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025be:	e841 2300 	strex	r3, r2, [r1]
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1d9      	bne.n	8002582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d013      	beq.n	80025fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	4a7e      	ldr	r2, [pc, #504]	@ (80027d4 <HAL_UART_IRQHandler+0x3e0>)
 80025dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe feed 	bl	80013c2 <HAL_DMA_Abort_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025f8:	4610      	mov	r0, r2
 80025fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e00e      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f994 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	e00a      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f990 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	e006      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f98c 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800261a:	e175      	b.n	8002908 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	bf00      	nop
    return;
 800261e:	e173      	b.n	8002908 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 814f 	bne.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800262a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8148 	beq.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8141 	beq.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b40      	cmp	r3, #64	@ 0x40
 8002668:	f040 80b6 	bne.w	80027d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8145 	beq.w	800290c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800268a:	429a      	cmp	r2, r3
 800268c:	f080 813e 	bcs.w	800290c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a2:	f000 8088 	beq.w	80027b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d9      	bne.n	80026a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3314      	adds	r3, #20
 80026f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800271a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800271e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e1      	bne.n	80026f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3314      	adds	r3, #20
 8002734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800273e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e3      	bne.n	800272e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002786:	f023 0310 	bic.w	r3, r3, #16
 800278a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800279a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800279e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e3      	bne.n	8002774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fd96 	bl	80012e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8b7 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d2:	e09b      	b.n	800290c <HAL_UART_IRQHandler+0x518>
 80027d4:	08002b45 	.word	0x08002b45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 808e 	beq.w	8002910 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8089 	beq.w	8002910 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800280e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002822:	647a      	str	r2, [r7, #68]	@ 0x44
 8002824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e3      	bne.n	80027fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	623b      	str	r3, [r7, #32]
   return(result);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800285a:	633a      	str	r2, [r7, #48]	@ 0x30
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e3      	bne.n	8002836 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	e853 3f00 	ldrex	r3, [r3]
 800288a:	60fb      	str	r3, [r7, #12]
   return(result);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0310 	bic.w	r3, r3, #16
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	617b      	str	r3, [r7, #20]
   return(result);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e3      	bne.n	800287c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f83d 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028c6:	e023      	b.n	8002910 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_UART_IRQHandler+0x4f4>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f943 	bl	8002b6c <UART_Transmit_IT>
    return;
 80028e6:	e014      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <HAL_UART_IRQHandler+0x51e>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f983 	bl	8002c0c <UART_EndTransmit_IT>
    return;
 8002906:	e004      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
    return;
 8002908:	bf00      	nop
 800290a:	e002      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
      return;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
      return;
 8002910:	bf00      	nop
  }
}
 8002912:	37e8      	adds	r7, #232	@ 0xe8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002968:	e03b      	b.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d037      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe fb99 	bl	80010a8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <UART_WaitOnFlagUntilTimeout+0x30>
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e03a      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d023      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b80      	cmp	r3, #128	@ 0x80
 800299e:	d020      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b40      	cmp	r3, #64	@ 0x40
 80029a4:	d01d      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d116      	bne.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f857 	bl	8002a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2208      	movs	r2, #8
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d0b4      	beq.n	800296a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2222      	movs	r2, #34	@ 0x22
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b095      	sub	sp, #84	@ 0x54
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d119      	bne.n	8002b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f023 0310 	bic.w	r3, r3, #16
 8002b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b16:	61ba      	str	r2, [r7, #24]
 8002b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	6979      	ldr	r1, [r7, #20]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	613b      	str	r3, [r7, #16]
   return(result);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e5      	bne.n	8002af6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b38:	bf00      	nop
 8002b3a:	3754      	adds	r7, #84	@ 0x54
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff fee4 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b21      	cmp	r3, #33	@ 0x21
 8002b7e:	d13e      	bne.n	8002bfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b88:	d114      	bne.n	8002bb4 <UART_Transmit_IT+0x48>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d110      	bne.n	8002bb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]
 8002bb2:	e008      	b.n	8002bc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	1c59      	adds	r1, r3, #1
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6211      	str	r1, [r2, #32]
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fe73 	bl	8002918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b22      	cmp	r3, #34	@ 0x22
 8002c4e:	f040 80ae 	bne.w	8002dae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5a:	d117      	bne.n	8002c8c <UART_Receive_IT+0x50>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c8a:	e026      	b.n	8002cda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9e:	d007      	beq.n	8002cb0 <UART_Receive_IT+0x74>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <UART_Receive_IT+0x82>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d15d      	bne.n	8002daa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0220 	bic.w	r2, r2, #32
 8002cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d135      	bne.n	8002da0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f023 0310 	bic.w	r3, r3, #16
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5a:	623a      	str	r2, [r7, #32]
 8002d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	69f9      	ldr	r1, [r7, #28]
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d10a      	bne.n	8002d92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fdd1 	bl	8002940 <HAL_UARTEx_RxEventCallback>
 8002d9e:	e002      	b.n	8002da6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fc2b 	bl	80005fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e002      	b.n	8002db0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3730      	adds	r7, #48	@ 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b0c0      	sub	sp, #256	@ 0x100
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	68d9      	ldr	r1, [r3, #12]
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	ea40 0301 	orr.w	r3, r0, r1
 8002de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e10:	f021 010c 	bic.w	r1, r1, #12
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e32:	6999      	ldr	r1, [r3, #24]
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	ea40 0301 	orr.w	r3, r0, r1
 8002e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b8f      	ldr	r3, [pc, #572]	@ (8003084 <UART_SetConfig+0x2cc>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d005      	beq.n	8002e58 <UART_SetConfig+0xa0>
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b8d      	ldr	r3, [pc, #564]	@ (8003088 <UART_SetConfig+0x2d0>)
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d104      	bne.n	8002e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e58:	f7fe fd70 	bl	800193c <HAL_RCC_GetPCLK2Freq>
 8002e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e60:	e003      	b.n	8002e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e62:	f7fe fd57 	bl	8001914 <HAL_RCC_GetPCLK1Freq>
 8002e66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e74:	f040 810c 	bne.w	8003090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	1891      	adds	r1, r2, r2
 8002e90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e92:	415b      	adcs	r3, r3
 8002e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	eb12 0801 	adds.w	r8, r2, r1
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb43 0901 	adc.w	r9, r3, r1
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eba:	4690      	mov	r8, r2
 8002ebc:	4699      	mov	r9, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	eb18 0303 	adds.w	r3, r8, r3
 8002ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ec8:	462b      	mov	r3, r5
 8002eca:	eb49 0303 	adc.w	r3, r9, r3
 8002ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ede:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	18db      	adds	r3, r3, r3
 8002eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eec:	4613      	mov	r3, r2
 8002eee:	eb42 0303 	adc.w	r3, r2, r3
 8002ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002efc:	f7fd f9d8 	bl	80002b0 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4b61      	ldr	r3, [pc, #388]	@ (800308c <UART_SetConfig+0x2d4>)
 8002f06:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	011c      	lsls	r4, r3, #4
 8002f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f20:	4642      	mov	r2, r8
 8002f22:	464b      	mov	r3, r9
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f30:	4641      	mov	r1, r8
 8002f32:	eb12 0a01 	adds.w	sl, r2, r1
 8002f36:	4649      	mov	r1, r9
 8002f38:	eb43 0b01 	adc.w	fp, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f50:	4692      	mov	sl, r2
 8002f52:	469b      	mov	fp, r3
 8002f54:	4643      	mov	r3, r8
 8002f56:	eb1a 0303 	adds.w	r3, sl, r3
 8002f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	eb4b 0303 	adc.w	r3, fp, r3
 8002f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	18db      	adds	r3, r3, r3
 8002f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f82:	4613      	mov	r3, r2
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f92:	f7fd f98d 	bl	80002b0 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <UART_SetConfig+0x2d4>)
 8002f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2264      	movs	r2, #100	@ 0x64
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	1acb      	subs	r3, r1, r3
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fb2:	4b36      	ldr	r3, [pc, #216]	@ (800308c <UART_SetConfig+0x2d4>)
 8002fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fc0:	441c      	add	r4, r3
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	1851      	adds	r1, r2, r1
 8002fe8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fea:	4649      	mov	r1, r9
 8002fec:	414b      	adcs	r3, r1
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	00cb      	lsls	r3, r1, #3
 8003000:	4651      	mov	r1, sl
 8003002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003006:	4651      	mov	r1, sl
 8003008:	00ca      	lsls	r2, r1, #3
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	4603      	mov	r3, r0
 8003010:	4642      	mov	r2, r8
 8003012:	189b      	adds	r3, r3, r2
 8003014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003018:	464b      	mov	r3, r9
 800301a:	460a      	mov	r2, r1
 800301c:	eb42 0303 	adc.w	r3, r2, r3
 8003020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003030:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003038:	460b      	mov	r3, r1
 800303a:	18db      	adds	r3, r3, r3
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303e:	4613      	mov	r3, r2
 8003040:	eb42 0303 	adc.w	r3, r2, r3
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800304a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800304e:	f7fd f92f 	bl	80002b0 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <UART_SetConfig+0x2d4>)
 8003058:	fba3 1302 	umull	r1, r3, r3, r2
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	2164      	movs	r1, #100	@ 0x64
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	3332      	adds	r3, #50	@ 0x32
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <UART_SetConfig+0x2d4>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	f003 0207 	and.w	r2, r3, #7
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4422      	add	r2, r4
 800307e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003080:	e106      	b.n	8003290 <UART_SetConfig+0x4d8>
 8003082:	bf00      	nop
 8003084:	40011000 	.word	0x40011000
 8003088:	40011400 	.word	0x40011400
 800308c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003094:	2200      	movs	r2, #0
 8003096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800309a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800309e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030a2:	4642      	mov	r2, r8
 80030a4:	464b      	mov	r3, r9
 80030a6:	1891      	adds	r1, r2, r2
 80030a8:	6239      	str	r1, [r7, #32]
 80030aa:	415b      	adcs	r3, r3
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030b2:	4641      	mov	r1, r8
 80030b4:	1854      	adds	r4, r2, r1
 80030b6:	4649      	mov	r1, r9
 80030b8:	eb43 0501 	adc.w	r5, r3, r1
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	00eb      	lsls	r3, r5, #3
 80030c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ca:	00e2      	lsls	r2, r4, #3
 80030cc:	4614      	mov	r4, r2
 80030ce:	461d      	mov	r5, r3
 80030d0:	4643      	mov	r3, r8
 80030d2:	18e3      	adds	r3, r4, r3
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030d8:	464b      	mov	r3, r9
 80030da:	eb45 0303 	adc.w	r3, r5, r3
 80030de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030fe:	4629      	mov	r1, r5
 8003100:	008b      	lsls	r3, r1, #2
 8003102:	4621      	mov	r1, r4
 8003104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003108:	4621      	mov	r1, r4
 800310a:	008a      	lsls	r2, r1, #2
 800310c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003110:	f7fd f8ce 	bl	80002b0 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4b60      	ldr	r3, [pc, #384]	@ (800329c <UART_SetConfig+0x4e4>)
 800311a:	fba3 2302 	umull	r2, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	011c      	lsls	r4, r3, #4
 8003122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800312c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003134:	4642      	mov	r2, r8
 8003136:	464b      	mov	r3, r9
 8003138:	1891      	adds	r1, r2, r2
 800313a:	61b9      	str	r1, [r7, #24]
 800313c:	415b      	adcs	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003144:	4641      	mov	r1, r8
 8003146:	1851      	adds	r1, r2, r1
 8003148:	6139      	str	r1, [r7, #16]
 800314a:	4649      	mov	r1, r9
 800314c:	414b      	adcs	r3, r1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800315c:	4659      	mov	r1, fp
 800315e:	00cb      	lsls	r3, r1, #3
 8003160:	4651      	mov	r1, sl
 8003162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003166:	4651      	mov	r1, sl
 8003168:	00ca      	lsls	r2, r1, #3
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	4603      	mov	r3, r0
 8003170:	4642      	mov	r2, r8
 8003172:	189b      	adds	r3, r3, r2
 8003174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003178:	464b      	mov	r3, r9
 800317a:	460a      	mov	r2, r1
 800317c:	eb42 0303 	adc.w	r3, r2, r3
 8003180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800318e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800319c:	4649      	mov	r1, r9
 800319e:	008b      	lsls	r3, r1, #2
 80031a0:	4641      	mov	r1, r8
 80031a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a6:	4641      	mov	r1, r8
 80031a8:	008a      	lsls	r2, r1, #2
 80031aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031ae:	f7fd f87f 	bl	80002b0 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	4b38      	ldr	r3, [pc, #224]	@ (800329c <UART_SetConfig+0x4e4>)
 80031ba:	fba3 2301 	umull	r2, r3, r3, r1
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2264      	movs	r2, #100	@ 0x64
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	1acb      	subs	r3, r1, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	@ 0x32
 80031cc:	4a33      	ldr	r2, [pc, #204]	@ (800329c <UART_SetConfig+0x4e4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d8:	441c      	add	r4, r3
 80031da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031de:	2200      	movs	r2, #0
 80031e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80031e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80031e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	415b      	adcs	r3, r3
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800322a:	464b      	mov	r3, r9
 800322c:	460a      	mov	r2, r1
 800322e:	eb42 0303 	adc.w	r3, r2, r3
 8003232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	663b      	str	r3, [r7, #96]	@ 0x60
 800323e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800324c:	4649      	mov	r1, r9
 800324e:	008b      	lsls	r3, r1, #2
 8003250:	4641      	mov	r1, r8
 8003252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003256:	4641      	mov	r1, r8
 8003258:	008a      	lsls	r2, r1, #2
 800325a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800325e:	f7fd f827 	bl	80002b0 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <UART_SetConfig+0x4e4>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	@ 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	3332      	adds	r3, #50	@ 0x32
 800327a:	4a08      	ldr	r2, [pc, #32]	@ (800329c <UART_SetConfig+0x4e4>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4422      	add	r2, r4
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003296:	46bd      	mov	sp, r7
 8003298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329c:	51eb851f 	.word	0x51eb851f

080032a0 <std>:
 80032a0:	2300      	movs	r3, #0
 80032a2:	b510      	push	{r4, lr}
 80032a4:	4604      	mov	r4, r0
 80032a6:	e9c0 3300 	strd	r3, r3, [r0]
 80032aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ae:	6083      	str	r3, [r0, #8]
 80032b0:	8181      	strh	r1, [r0, #12]
 80032b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80032b4:	81c2      	strh	r2, [r0, #14]
 80032b6:	6183      	str	r3, [r0, #24]
 80032b8:	4619      	mov	r1, r3
 80032ba:	2208      	movs	r2, #8
 80032bc:	305c      	adds	r0, #92	@ 0x5c
 80032be:	f000 fab5 	bl	800382c <memset>
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <std+0x58>)
 80032c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <std+0x5c>)
 80032c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <std+0x60>)
 80032cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <std+0x64>)
 80032d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <std+0x68>)
 80032d4:	6224      	str	r4, [r4, #32]
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d006      	beq.n	80032e8 <std+0x48>
 80032da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032de:	4294      	cmp	r4, r2
 80032e0:	d002      	beq.n	80032e8 <std+0x48>
 80032e2:	33d0      	adds	r3, #208	@ 0xd0
 80032e4:	429c      	cmp	r4, r3
 80032e6:	d105      	bne.n	80032f4 <std+0x54>
 80032e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f0:	f000 bb14 	b.w	800391c <__retarget_lock_init_recursive>
 80032f4:	bd10      	pop	{r4, pc}
 80032f6:	bf00      	nop
 80032f8:	0800367d 	.word	0x0800367d
 80032fc:	0800369f 	.word	0x0800369f
 8003300:	080036d7 	.word	0x080036d7
 8003304:	080036fb 	.word	0x080036fb
 8003308:	2000014c 	.word	0x2000014c

0800330c <stdio_exit_handler>:
 800330c:	4a02      	ldr	r2, [pc, #8]	@ (8003318 <stdio_exit_handler+0xc>)
 800330e:	4903      	ldr	r1, [pc, #12]	@ (800331c <stdio_exit_handler+0x10>)
 8003310:	4803      	ldr	r0, [pc, #12]	@ (8003320 <stdio_exit_handler+0x14>)
 8003312:	f000 b869 	b.w	80033e8 <_fwalk_sglue>
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c
 800331c:	080041c9 	.word	0x080041c9
 8003320:	2000001c 	.word	0x2000001c

08003324 <cleanup_stdio>:
 8003324:	6841      	ldr	r1, [r0, #4]
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <cleanup_stdio+0x34>)
 8003328:	4299      	cmp	r1, r3
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	d001      	beq.n	8003334 <cleanup_stdio+0x10>
 8003330:	f000 ff4a 	bl	80041c8 <_fflush_r>
 8003334:	68a1      	ldr	r1, [r4, #8]
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <cleanup_stdio+0x38>)
 8003338:	4299      	cmp	r1, r3
 800333a:	d002      	beq.n	8003342 <cleanup_stdio+0x1e>
 800333c:	4620      	mov	r0, r4
 800333e:	f000 ff43 	bl	80041c8 <_fflush_r>
 8003342:	68e1      	ldr	r1, [r4, #12]
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <cleanup_stdio+0x3c>)
 8003346:	4299      	cmp	r1, r3
 8003348:	d004      	beq.n	8003354 <cleanup_stdio+0x30>
 800334a:	4620      	mov	r0, r4
 800334c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003350:	f000 bf3a 	b.w	80041c8 <_fflush_r>
 8003354:	bd10      	pop	{r4, pc}
 8003356:	bf00      	nop
 8003358:	2000014c 	.word	0x2000014c
 800335c:	200001b4 	.word	0x200001b4
 8003360:	2000021c 	.word	0x2000021c

08003364 <global_stdio_init.part.0>:
 8003364:	b510      	push	{r4, lr}
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <global_stdio_init.part.0+0x30>)
 8003368:	4c0b      	ldr	r4, [pc, #44]	@ (8003398 <global_stdio_init.part.0+0x34>)
 800336a:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <global_stdio_init.part.0+0x38>)
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4620      	mov	r0, r4
 8003370:	2200      	movs	r2, #0
 8003372:	2104      	movs	r1, #4
 8003374:	f7ff ff94 	bl	80032a0 <std>
 8003378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800337c:	2201      	movs	r2, #1
 800337e:	2109      	movs	r1, #9
 8003380:	f7ff ff8e 	bl	80032a0 <std>
 8003384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003388:	2202      	movs	r2, #2
 800338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800338e:	2112      	movs	r1, #18
 8003390:	f7ff bf86 	b.w	80032a0 <std>
 8003394:	20000284 	.word	0x20000284
 8003398:	2000014c 	.word	0x2000014c
 800339c:	0800330d 	.word	0x0800330d

080033a0 <__sfp_lock_acquire>:
 80033a0:	4801      	ldr	r0, [pc, #4]	@ (80033a8 <__sfp_lock_acquire+0x8>)
 80033a2:	f000 babc 	b.w	800391e <__retarget_lock_acquire_recursive>
 80033a6:	bf00      	nop
 80033a8:	2000028d 	.word	0x2000028d

080033ac <__sfp_lock_release>:
 80033ac:	4801      	ldr	r0, [pc, #4]	@ (80033b4 <__sfp_lock_release+0x8>)
 80033ae:	f000 bab7 	b.w	8003920 <__retarget_lock_release_recursive>
 80033b2:	bf00      	nop
 80033b4:	2000028d 	.word	0x2000028d

080033b8 <__sinit>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	f7ff fff0 	bl	80033a0 <__sfp_lock_acquire>
 80033c0:	6a23      	ldr	r3, [r4, #32]
 80033c2:	b11b      	cbz	r3, 80033cc <__sinit+0x14>
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c8:	f7ff bff0 	b.w	80033ac <__sfp_lock_release>
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <__sinit+0x28>)
 80033ce:	6223      	str	r3, [r4, #32]
 80033d0:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <__sinit+0x2c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f5      	bne.n	80033c4 <__sinit+0xc>
 80033d8:	f7ff ffc4 	bl	8003364 <global_stdio_init.part.0>
 80033dc:	e7f2      	b.n	80033c4 <__sinit+0xc>
 80033de:	bf00      	nop
 80033e0:	08003325 	.word	0x08003325
 80033e4:	20000284 	.word	0x20000284

080033e8 <_fwalk_sglue>:
 80033e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ec:	4607      	mov	r7, r0
 80033ee:	4688      	mov	r8, r1
 80033f0:	4614      	mov	r4, r2
 80033f2:	2600      	movs	r6, #0
 80033f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033f8:	f1b9 0901 	subs.w	r9, r9, #1
 80033fc:	d505      	bpl.n	800340a <_fwalk_sglue+0x22>
 80033fe:	6824      	ldr	r4, [r4, #0]
 8003400:	2c00      	cmp	r4, #0
 8003402:	d1f7      	bne.n	80033f4 <_fwalk_sglue+0xc>
 8003404:	4630      	mov	r0, r6
 8003406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800340a:	89ab      	ldrh	r3, [r5, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d907      	bls.n	8003420 <_fwalk_sglue+0x38>
 8003410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003414:	3301      	adds	r3, #1
 8003416:	d003      	beq.n	8003420 <_fwalk_sglue+0x38>
 8003418:	4629      	mov	r1, r5
 800341a:	4638      	mov	r0, r7
 800341c:	47c0      	blx	r8
 800341e:	4306      	orrs	r6, r0
 8003420:	3568      	adds	r5, #104	@ 0x68
 8003422:	e7e9      	b.n	80033f8 <_fwalk_sglue+0x10>

08003424 <iprintf>:
 8003424:	b40f      	push	{r0, r1, r2, r3}
 8003426:	b507      	push	{r0, r1, r2, lr}
 8003428:	4906      	ldr	r1, [pc, #24]	@ (8003444 <iprintf+0x20>)
 800342a:	ab04      	add	r3, sp, #16
 800342c:	6808      	ldr	r0, [r1, #0]
 800342e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003432:	6881      	ldr	r1, [r0, #8]
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	f000 fb9f 	bl	8003b78 <_vfiprintf_r>
 800343a:	b003      	add	sp, #12
 800343c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003440:	b004      	add	sp, #16
 8003442:	4770      	bx	lr
 8003444:	20000018 	.word	0x20000018

08003448 <_puts_r>:
 8003448:	6a03      	ldr	r3, [r0, #32]
 800344a:	b570      	push	{r4, r5, r6, lr}
 800344c:	6884      	ldr	r4, [r0, #8]
 800344e:	4605      	mov	r5, r0
 8003450:	460e      	mov	r6, r1
 8003452:	b90b      	cbnz	r3, 8003458 <_puts_r+0x10>
 8003454:	f7ff ffb0 	bl	80033b8 <__sinit>
 8003458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800345a:	07db      	lsls	r3, r3, #31
 800345c:	d405      	bmi.n	800346a <_puts_r+0x22>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	0598      	lsls	r0, r3, #22
 8003462:	d402      	bmi.n	800346a <_puts_r+0x22>
 8003464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003466:	f000 fa5a 	bl	800391e <__retarget_lock_acquire_recursive>
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	0719      	lsls	r1, r3, #28
 800346e:	d502      	bpl.n	8003476 <_puts_r+0x2e>
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d135      	bne.n	80034e2 <_puts_r+0x9a>
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 f981 	bl	8003780 <__swsetup_r>
 800347e:	b380      	cbz	r0, 80034e2 <_puts_r+0x9a>
 8003480:	f04f 35ff 	mov.w	r5, #4294967295
 8003484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003486:	07da      	lsls	r2, r3, #31
 8003488:	d405      	bmi.n	8003496 <_puts_r+0x4e>
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	059b      	lsls	r3, r3, #22
 800348e:	d402      	bmi.n	8003496 <_puts_r+0x4e>
 8003490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003492:	f000 fa45 	bl	8003920 <__retarget_lock_release_recursive>
 8003496:	4628      	mov	r0, r5
 8003498:	bd70      	pop	{r4, r5, r6, pc}
 800349a:	2b00      	cmp	r3, #0
 800349c:	da04      	bge.n	80034a8 <_puts_r+0x60>
 800349e:	69a2      	ldr	r2, [r4, #24]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dc17      	bgt.n	80034d4 <_puts_r+0x8c>
 80034a4:	290a      	cmp	r1, #10
 80034a6:	d015      	beq.n	80034d4 <_puts_r+0x8c>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	6022      	str	r2, [r4, #0]
 80034ae:	7019      	strb	r1, [r3, #0]
 80034b0:	68a3      	ldr	r3, [r4, #8]
 80034b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d1ed      	bne.n	800349a <_puts_r+0x52>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da11      	bge.n	80034e6 <_puts_r+0x9e>
 80034c2:	4622      	mov	r2, r4
 80034c4:	210a      	movs	r1, #10
 80034c6:	4628      	mov	r0, r5
 80034c8:	f000 f91b 	bl	8003702 <__swbuf_r>
 80034cc:	3001      	adds	r0, #1
 80034ce:	d0d7      	beq.n	8003480 <_puts_r+0x38>
 80034d0:	250a      	movs	r5, #10
 80034d2:	e7d7      	b.n	8003484 <_puts_r+0x3c>
 80034d4:	4622      	mov	r2, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f913 	bl	8003702 <__swbuf_r>
 80034dc:	3001      	adds	r0, #1
 80034de:	d1e7      	bne.n	80034b0 <_puts_r+0x68>
 80034e0:	e7ce      	b.n	8003480 <_puts_r+0x38>
 80034e2:	3e01      	subs	r6, #1
 80034e4:	e7e4      	b.n	80034b0 <_puts_r+0x68>
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	6022      	str	r2, [r4, #0]
 80034ec:	220a      	movs	r2, #10
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e7ee      	b.n	80034d0 <_puts_r+0x88>
	...

080034f4 <puts>:
 80034f4:	4b02      	ldr	r3, [pc, #8]	@ (8003500 <puts+0xc>)
 80034f6:	4601      	mov	r1, r0
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f7ff bfa5 	b.w	8003448 <_puts_r>
 80034fe:	bf00      	nop
 8003500:	20000018 	.word	0x20000018

08003504 <setbuf>:
 8003504:	fab1 f281 	clz	r2, r1
 8003508:	0952      	lsrs	r2, r2, #5
 800350a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800350e:	0052      	lsls	r2, r2, #1
 8003510:	f000 b800 	b.w	8003514 <setvbuf>

08003514 <setvbuf>:
 8003514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003518:	461d      	mov	r5, r3
 800351a:	4b57      	ldr	r3, [pc, #348]	@ (8003678 <setvbuf+0x164>)
 800351c:	681f      	ldr	r7, [r3, #0]
 800351e:	4604      	mov	r4, r0
 8003520:	460e      	mov	r6, r1
 8003522:	4690      	mov	r8, r2
 8003524:	b127      	cbz	r7, 8003530 <setvbuf+0x1c>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	b913      	cbnz	r3, 8003530 <setvbuf+0x1c>
 800352a:	4638      	mov	r0, r7
 800352c:	f7ff ff44 	bl	80033b8 <__sinit>
 8003530:	f1b8 0f02 	cmp.w	r8, #2
 8003534:	d006      	beq.n	8003544 <setvbuf+0x30>
 8003536:	f1b8 0f01 	cmp.w	r8, #1
 800353a:	f200 809a 	bhi.w	8003672 <setvbuf+0x15e>
 800353e:	2d00      	cmp	r5, #0
 8003540:	f2c0 8097 	blt.w	8003672 <setvbuf+0x15e>
 8003544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003546:	07d9      	lsls	r1, r3, #31
 8003548:	d405      	bmi.n	8003556 <setvbuf+0x42>
 800354a:	89a3      	ldrh	r3, [r4, #12]
 800354c:	059a      	lsls	r2, r3, #22
 800354e:	d402      	bmi.n	8003556 <setvbuf+0x42>
 8003550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003552:	f000 f9e4 	bl	800391e <__retarget_lock_acquire_recursive>
 8003556:	4621      	mov	r1, r4
 8003558:	4638      	mov	r0, r7
 800355a:	f000 fe35 	bl	80041c8 <_fflush_r>
 800355e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003560:	b141      	cbz	r1, 8003574 <setvbuf+0x60>
 8003562:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003566:	4299      	cmp	r1, r3
 8003568:	d002      	beq.n	8003570 <setvbuf+0x5c>
 800356a:	4638      	mov	r0, r7
 800356c:	f000 f9da 	bl	8003924 <_free_r>
 8003570:	2300      	movs	r3, #0
 8003572:	6363      	str	r3, [r4, #52]	@ 0x34
 8003574:	2300      	movs	r3, #0
 8003576:	61a3      	str	r3, [r4, #24]
 8003578:	6063      	str	r3, [r4, #4]
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	d503      	bpl.n	8003588 <setvbuf+0x74>
 8003580:	6921      	ldr	r1, [r4, #16]
 8003582:	4638      	mov	r0, r7
 8003584:	f000 f9ce 	bl	8003924 <_free_r>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f1b8 0f02 	cmp.w	r8, #2
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	d061      	beq.n	800365e <setvbuf+0x14a>
 800359a:	ab01      	add	r3, sp, #4
 800359c:	466a      	mov	r2, sp
 800359e:	4621      	mov	r1, r4
 80035a0:	4638      	mov	r0, r7
 80035a2:	f000 fe39 	bl	8004218 <__swhatbuf_r>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	4318      	orrs	r0, r3
 80035aa:	81a0      	strh	r0, [r4, #12]
 80035ac:	bb2d      	cbnz	r5, 80035fa <setvbuf+0xe6>
 80035ae:	9d00      	ldr	r5, [sp, #0]
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 fa01 	bl	80039b8 <malloc>
 80035b6:	4606      	mov	r6, r0
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d152      	bne.n	8003662 <setvbuf+0x14e>
 80035bc:	f8dd 9000 	ldr.w	r9, [sp]
 80035c0:	45a9      	cmp	r9, r5
 80035c2:	d140      	bne.n	8003646 <setvbuf+0x132>
 80035c4:	f04f 35ff 	mov.w	r5, #4294967295
 80035c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035cc:	f043 0202 	orr.w	r2, r3, #2
 80035d0:	81a2      	strh	r2, [r4, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	60a2      	str	r2, [r4, #8]
 80035d6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80035da:	6022      	str	r2, [r4, #0]
 80035dc:	6122      	str	r2, [r4, #16]
 80035de:	2201      	movs	r2, #1
 80035e0:	6162      	str	r2, [r4, #20]
 80035e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035e4:	07d6      	lsls	r6, r2, #31
 80035e6:	d404      	bmi.n	80035f2 <setvbuf+0xde>
 80035e8:	0598      	lsls	r0, r3, #22
 80035ea:	d402      	bmi.n	80035f2 <setvbuf+0xde>
 80035ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035ee:	f000 f997 	bl	8003920 <__retarget_lock_release_recursive>
 80035f2:	4628      	mov	r0, r5
 80035f4:	b003      	add	sp, #12
 80035f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	d0d8      	beq.n	80035b0 <setvbuf+0x9c>
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	b913      	cbnz	r3, 8003608 <setvbuf+0xf4>
 8003602:	4638      	mov	r0, r7
 8003604:	f7ff fed8 	bl	80033b8 <__sinit>
 8003608:	f1b8 0f01 	cmp.w	r8, #1
 800360c:	bf08      	it	eq
 800360e:	89a3      	ldrheq	r3, [r4, #12]
 8003610:	6026      	str	r6, [r4, #0]
 8003612:	bf04      	itt	eq
 8003614:	f043 0301 	orreq.w	r3, r3, #1
 8003618:	81a3      	strheq	r3, [r4, #12]
 800361a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361e:	f013 0208 	ands.w	r2, r3, #8
 8003622:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003626:	d01e      	beq.n	8003666 <setvbuf+0x152>
 8003628:	07d9      	lsls	r1, r3, #31
 800362a:	bf41      	itttt	mi
 800362c:	2200      	movmi	r2, #0
 800362e:	426d      	negmi	r5, r5
 8003630:	60a2      	strmi	r2, [r4, #8]
 8003632:	61a5      	strmi	r5, [r4, #24]
 8003634:	bf58      	it	pl
 8003636:	60a5      	strpl	r5, [r4, #8]
 8003638:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800363a:	07d2      	lsls	r2, r2, #31
 800363c:	d401      	bmi.n	8003642 <setvbuf+0x12e>
 800363e:	059b      	lsls	r3, r3, #22
 8003640:	d513      	bpl.n	800366a <setvbuf+0x156>
 8003642:	2500      	movs	r5, #0
 8003644:	e7d5      	b.n	80035f2 <setvbuf+0xde>
 8003646:	4648      	mov	r0, r9
 8003648:	f000 f9b6 	bl	80039b8 <malloc>
 800364c:	4606      	mov	r6, r0
 800364e:	2800      	cmp	r0, #0
 8003650:	d0b8      	beq.n	80035c4 <setvbuf+0xb0>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	464d      	mov	r5, r9
 800365c:	e7cf      	b.n	80035fe <setvbuf+0xea>
 800365e:	2500      	movs	r5, #0
 8003660:	e7b2      	b.n	80035c8 <setvbuf+0xb4>
 8003662:	46a9      	mov	r9, r5
 8003664:	e7f5      	b.n	8003652 <setvbuf+0x13e>
 8003666:	60a2      	str	r2, [r4, #8]
 8003668:	e7e6      	b.n	8003638 <setvbuf+0x124>
 800366a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800366c:	f000 f958 	bl	8003920 <__retarget_lock_release_recursive>
 8003670:	e7e7      	b.n	8003642 <setvbuf+0x12e>
 8003672:	f04f 35ff 	mov.w	r5, #4294967295
 8003676:	e7bc      	b.n	80035f2 <setvbuf+0xde>
 8003678:	20000018 	.word	0x20000018

0800367c <__sread>:
 800367c:	b510      	push	{r4, lr}
 800367e:	460c      	mov	r4, r1
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	f000 f8fc 	bl	8003880 <_read_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	bfab      	itete	ge
 800368c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800368e:	89a3      	ldrhlt	r3, [r4, #12]
 8003690:	181b      	addge	r3, r3, r0
 8003692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003696:	bfac      	ite	ge
 8003698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800369a:	81a3      	strhlt	r3, [r4, #12]
 800369c:	bd10      	pop	{r4, pc}

0800369e <__swrite>:
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	461f      	mov	r7, r3
 80036a4:	898b      	ldrh	r3, [r1, #12]
 80036a6:	05db      	lsls	r3, r3, #23
 80036a8:	4605      	mov	r5, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	4616      	mov	r6, r2
 80036ae:	d505      	bpl.n	80036bc <__swrite+0x1e>
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	2302      	movs	r3, #2
 80036b6:	2200      	movs	r2, #0
 80036b8:	f000 f8d0 	bl	800385c <_lseek_r>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036c6:	81a3      	strh	r3, [r4, #12]
 80036c8:	4632      	mov	r2, r6
 80036ca:	463b      	mov	r3, r7
 80036cc:	4628      	mov	r0, r5
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d2:	f000 b8e7 	b.w	80038a4 <_write_r>

080036d6 <__sseek>:
 80036d6:	b510      	push	{r4, lr}
 80036d8:	460c      	mov	r4, r1
 80036da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036de:	f000 f8bd 	bl	800385c <_lseek_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	bf15      	itete	ne
 80036e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036f2:	81a3      	strheq	r3, [r4, #12]
 80036f4:	bf18      	it	ne
 80036f6:	81a3      	strhne	r3, [r4, #12]
 80036f8:	bd10      	pop	{r4, pc}

080036fa <__sclose>:
 80036fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fe:	f000 b89d 	b.w	800383c <_close_r>

08003702 <__swbuf_r>:
 8003702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003704:	460e      	mov	r6, r1
 8003706:	4614      	mov	r4, r2
 8003708:	4605      	mov	r5, r0
 800370a:	b118      	cbz	r0, 8003714 <__swbuf_r+0x12>
 800370c:	6a03      	ldr	r3, [r0, #32]
 800370e:	b90b      	cbnz	r3, 8003714 <__swbuf_r+0x12>
 8003710:	f7ff fe52 	bl	80033b8 <__sinit>
 8003714:	69a3      	ldr	r3, [r4, #24]
 8003716:	60a3      	str	r3, [r4, #8]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	071a      	lsls	r2, r3, #28
 800371c:	d501      	bpl.n	8003722 <__swbuf_r+0x20>
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	b943      	cbnz	r3, 8003734 <__swbuf_r+0x32>
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f000 f82b 	bl	8003780 <__swsetup_r>
 800372a:	b118      	cbz	r0, 8003734 <__swbuf_r+0x32>
 800372c:	f04f 37ff 	mov.w	r7, #4294967295
 8003730:	4638      	mov	r0, r7
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	1a98      	subs	r0, r3, r2
 800373a:	6963      	ldr	r3, [r4, #20]
 800373c:	b2f6      	uxtb	r6, r6
 800373e:	4283      	cmp	r3, r0
 8003740:	4637      	mov	r7, r6
 8003742:	dc05      	bgt.n	8003750 <__swbuf_r+0x4e>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 fd3e 	bl	80041c8 <_fflush_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1ed      	bne.n	800372c <__swbuf_r+0x2a>
 8003750:	68a3      	ldr	r3, [r4, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	60a3      	str	r3, [r4, #8]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	701e      	strb	r6, [r3, #0]
 800375e:	6962      	ldr	r2, [r4, #20]
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	429a      	cmp	r2, r3
 8003764:	d004      	beq.n	8003770 <__swbuf_r+0x6e>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	07db      	lsls	r3, r3, #31
 800376a:	d5e1      	bpl.n	8003730 <__swbuf_r+0x2e>
 800376c:	2e0a      	cmp	r6, #10
 800376e:	d1df      	bne.n	8003730 <__swbuf_r+0x2e>
 8003770:	4621      	mov	r1, r4
 8003772:	4628      	mov	r0, r5
 8003774:	f000 fd28 	bl	80041c8 <_fflush_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	d0d9      	beq.n	8003730 <__swbuf_r+0x2e>
 800377c:	e7d6      	b.n	800372c <__swbuf_r+0x2a>
	...

08003780 <__swsetup_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <__swsetup_r+0xa8>)
 8003784:	4605      	mov	r5, r0
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	460c      	mov	r4, r1
 800378a:	b118      	cbz	r0, 8003794 <__swsetup_r+0x14>
 800378c:	6a03      	ldr	r3, [r0, #32]
 800378e:	b90b      	cbnz	r3, 8003794 <__swsetup_r+0x14>
 8003790:	f7ff fe12 	bl	80033b8 <__sinit>
 8003794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003798:	0719      	lsls	r1, r3, #28
 800379a:	d422      	bmi.n	80037e2 <__swsetup_r+0x62>
 800379c:	06da      	lsls	r2, r3, #27
 800379e:	d407      	bmi.n	80037b0 <__swsetup_r+0x30>
 80037a0:	2209      	movs	r2, #9
 80037a2:	602a      	str	r2, [r5, #0]
 80037a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a8:	81a3      	strh	r3, [r4, #12]
 80037aa:	f04f 30ff 	mov.w	r0, #4294967295
 80037ae:	e033      	b.n	8003818 <__swsetup_r+0x98>
 80037b0:	0758      	lsls	r0, r3, #29
 80037b2:	d512      	bpl.n	80037da <__swsetup_r+0x5a>
 80037b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037b6:	b141      	cbz	r1, 80037ca <__swsetup_r+0x4a>
 80037b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037bc:	4299      	cmp	r1, r3
 80037be:	d002      	beq.n	80037c6 <__swsetup_r+0x46>
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f8af 	bl	8003924 <_free_r>
 80037c6:	2300      	movs	r3, #0
 80037c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	f043 0308 	orr.w	r3, r3, #8
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	6923      	ldr	r3, [r4, #16]
 80037e4:	b94b      	cbnz	r3, 80037fa <__swsetup_r+0x7a>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f0:	d003      	beq.n	80037fa <__swsetup_r+0x7a>
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f000 fd35 	bl	8004264 <__smakebuf_r>
 80037fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037fe:	f013 0201 	ands.w	r2, r3, #1
 8003802:	d00a      	beq.n	800381a <__swsetup_r+0x9a>
 8003804:	2200      	movs	r2, #0
 8003806:	60a2      	str	r2, [r4, #8]
 8003808:	6962      	ldr	r2, [r4, #20]
 800380a:	4252      	negs	r2, r2
 800380c:	61a2      	str	r2, [r4, #24]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	b942      	cbnz	r2, 8003824 <__swsetup_r+0xa4>
 8003812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003816:	d1c5      	bne.n	80037a4 <__swsetup_r+0x24>
 8003818:	bd38      	pop	{r3, r4, r5, pc}
 800381a:	0799      	lsls	r1, r3, #30
 800381c:	bf58      	it	pl
 800381e:	6962      	ldrpl	r2, [r4, #20]
 8003820:	60a2      	str	r2, [r4, #8]
 8003822:	e7f4      	b.n	800380e <__swsetup_r+0x8e>
 8003824:	2000      	movs	r0, #0
 8003826:	e7f7      	b.n	8003818 <__swsetup_r+0x98>
 8003828:	20000018 	.word	0x20000018

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <_close_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d06      	ldr	r5, [pc, #24]	@ (8003858 <_close_r+0x1c>)
 8003840:	2300      	movs	r3, #0
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	602b      	str	r3, [r5, #0]
 8003848:	f7fd fb21 	bl	8000e8e <_close>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_close_r+0x1a>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b103      	cbz	r3, 8003856 <_close_r+0x1a>
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	20000288 	.word	0x20000288

0800385c <_lseek_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d07      	ldr	r5, [pc, #28]	@ (800387c <_lseek_r+0x20>)
 8003860:	4604      	mov	r4, r0
 8003862:	4608      	mov	r0, r1
 8003864:	4611      	mov	r1, r2
 8003866:	2200      	movs	r2, #0
 8003868:	602a      	str	r2, [r5, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	f7fd fb36 	bl	8000edc <_lseek>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_lseek_r+0x1e>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_lseek_r+0x1e>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000288 	.word	0x20000288

08003880 <_read_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4d07      	ldr	r5, [pc, #28]	@ (80038a0 <_read_r+0x20>)
 8003884:	4604      	mov	r4, r0
 8003886:	4608      	mov	r0, r1
 8003888:	4611      	mov	r1, r2
 800388a:	2200      	movs	r2, #0
 800388c:	602a      	str	r2, [r5, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f7fd fae0 	bl	8000e54 <_read>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_read_r+0x1e>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_read_r+0x1e>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000288 	.word	0x20000288

080038a4 <_write_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	@ (80038c4 <_write_r+0x20>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fd f9ce 	bl	8000c54 <_write>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_write_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_write_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	20000288 	.word	0x20000288

080038c8 <__errno>:
 80038c8:	4b01      	ldr	r3, [pc, #4]	@ (80038d0 <__errno+0x8>)
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000018 	.word	0x20000018

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4d0d      	ldr	r5, [pc, #52]	@ (800390c <__libc_init_array+0x38>)
 80038d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003910 <__libc_init_array+0x3c>)
 80038da:	1b64      	subs	r4, r4, r5
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	2600      	movs	r6, #0
 80038e0:	42a6      	cmp	r6, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003914 <__libc_init_array+0x40>)
 80038e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003918 <__libc_init_array+0x44>)
 80038e8:	f000 fd2a 	bl	8004340 <_init>
 80038ec:	1b64      	subs	r4, r4, r5
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	2600      	movs	r6, #0
 80038f2:	42a6      	cmp	r6, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fc:	4798      	blx	r3
 80038fe:	3601      	adds	r6, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f855 3b04 	ldr.w	r3, [r5], #4
 8003906:	4798      	blx	r3
 8003908:	3601      	adds	r6, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	08004510 	.word	0x08004510
 8003910:	08004510 	.word	0x08004510
 8003914:	08004510 	.word	0x08004510
 8003918:	08004514 	.word	0x08004514

0800391c <__retarget_lock_init_recursive>:
 800391c:	4770      	bx	lr

0800391e <__retarget_lock_acquire_recursive>:
 800391e:	4770      	bx	lr

08003920 <__retarget_lock_release_recursive>:
 8003920:	4770      	bx	lr
	...

08003924 <_free_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4605      	mov	r5, r0
 8003928:	2900      	cmp	r1, #0
 800392a:	d041      	beq.n	80039b0 <_free_r+0x8c>
 800392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003930:	1f0c      	subs	r4, r1, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	18e4      	addlt	r4, r4, r3
 8003938:	f000 f8e8 	bl	8003b0c <__malloc_lock>
 800393c:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <_free_r+0x90>)
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	b933      	cbnz	r3, 8003950 <_free_r+0x2c>
 8003942:	6063      	str	r3, [r4, #4]
 8003944:	6014      	str	r4, [r2, #0]
 8003946:	4628      	mov	r0, r5
 8003948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800394c:	f000 b8e4 	b.w	8003b18 <__malloc_unlock>
 8003950:	42a3      	cmp	r3, r4
 8003952:	d908      	bls.n	8003966 <_free_r+0x42>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	1821      	adds	r1, r4, r0
 8003958:	428b      	cmp	r3, r1
 800395a:	bf01      	itttt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	1809      	addeq	r1, r1, r0
 8003962:	6021      	streq	r1, [r4, #0]
 8003964:	e7ed      	b.n	8003942 <_free_r+0x1e>
 8003966:	461a      	mov	r2, r3
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	b10b      	cbz	r3, 8003970 <_free_r+0x4c>
 800396c:	42a3      	cmp	r3, r4
 800396e:	d9fa      	bls.n	8003966 <_free_r+0x42>
 8003970:	6811      	ldr	r1, [r2, #0]
 8003972:	1850      	adds	r0, r2, r1
 8003974:	42a0      	cmp	r0, r4
 8003976:	d10b      	bne.n	8003990 <_free_r+0x6c>
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	4401      	add	r1, r0
 800397c:	1850      	adds	r0, r2, r1
 800397e:	4283      	cmp	r3, r0
 8003980:	6011      	str	r1, [r2, #0]
 8003982:	d1e0      	bne.n	8003946 <_free_r+0x22>
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6053      	str	r3, [r2, #4]
 800398a:	4408      	add	r0, r1
 800398c:	6010      	str	r0, [r2, #0]
 800398e:	e7da      	b.n	8003946 <_free_r+0x22>
 8003990:	d902      	bls.n	8003998 <_free_r+0x74>
 8003992:	230c      	movs	r3, #12
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	e7d6      	b.n	8003946 <_free_r+0x22>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	1821      	adds	r1, r4, r0
 800399c:	428b      	cmp	r3, r1
 800399e:	bf04      	itt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	6063      	str	r3, [r4, #4]
 80039a6:	bf04      	itt	eq
 80039a8:	1809      	addeq	r1, r1, r0
 80039aa:	6021      	streq	r1, [r4, #0]
 80039ac:	6054      	str	r4, [r2, #4]
 80039ae:	e7ca      	b.n	8003946 <_free_r+0x22>
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
 80039b2:	bf00      	nop
 80039b4:	20000294 	.word	0x20000294

080039b8 <malloc>:
 80039b8:	4b02      	ldr	r3, [pc, #8]	@ (80039c4 <malloc+0xc>)
 80039ba:	4601      	mov	r1, r0
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f000 b825 	b.w	8003a0c <_malloc_r>
 80039c2:	bf00      	nop
 80039c4:	20000018 	.word	0x20000018

080039c8 <sbrk_aligned>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003a08 <sbrk_aligned+0x40>)
 80039cc:	460c      	mov	r4, r1
 80039ce:	6831      	ldr	r1, [r6, #0]
 80039d0:	4605      	mov	r5, r0
 80039d2:	b911      	cbnz	r1, 80039da <sbrk_aligned+0x12>
 80039d4:	f000 fca4 	bl	8004320 <_sbrk_r>
 80039d8:	6030      	str	r0, [r6, #0]
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f000 fc9f 	bl	8004320 <_sbrk_r>
 80039e2:	1c43      	adds	r3, r0, #1
 80039e4:	d103      	bne.n	80039ee <sbrk_aligned+0x26>
 80039e6:	f04f 34ff 	mov.w	r4, #4294967295
 80039ea:	4620      	mov	r0, r4
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	1cc4      	adds	r4, r0, #3
 80039f0:	f024 0403 	bic.w	r4, r4, #3
 80039f4:	42a0      	cmp	r0, r4
 80039f6:	d0f8      	beq.n	80039ea <sbrk_aligned+0x22>
 80039f8:	1a21      	subs	r1, r4, r0
 80039fa:	4628      	mov	r0, r5
 80039fc:	f000 fc90 	bl	8004320 <_sbrk_r>
 8003a00:	3001      	adds	r0, #1
 8003a02:	d1f2      	bne.n	80039ea <sbrk_aligned+0x22>
 8003a04:	e7ef      	b.n	80039e6 <sbrk_aligned+0x1e>
 8003a06:	bf00      	nop
 8003a08:	20000290 	.word	0x20000290

08003a0c <_malloc_r>:
 8003a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a10:	1ccd      	adds	r5, r1, #3
 8003a12:	f025 0503 	bic.w	r5, r5, #3
 8003a16:	3508      	adds	r5, #8
 8003a18:	2d0c      	cmp	r5, #12
 8003a1a:	bf38      	it	cc
 8003a1c:	250c      	movcc	r5, #12
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	4606      	mov	r6, r0
 8003a22:	db01      	blt.n	8003a28 <_malloc_r+0x1c>
 8003a24:	42a9      	cmp	r1, r5
 8003a26:	d904      	bls.n	8003a32 <_malloc_r+0x26>
 8003a28:	230c      	movs	r3, #12
 8003a2a:	6033      	str	r3, [r6, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b08 <_malloc_r+0xfc>
 8003a36:	f000 f869 	bl	8003b0c <__malloc_lock>
 8003a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a3e:	461c      	mov	r4, r3
 8003a40:	bb44      	cbnz	r4, 8003a94 <_malloc_r+0x88>
 8003a42:	4629      	mov	r1, r5
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff ffbf 	bl	80039c8 <sbrk_aligned>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	d158      	bne.n	8003b02 <_malloc_r+0xf6>
 8003a50:	f8d8 4000 	ldr.w	r4, [r8]
 8003a54:	4627      	mov	r7, r4
 8003a56:	2f00      	cmp	r7, #0
 8003a58:	d143      	bne.n	8003ae2 <_malloc_r+0xd6>
 8003a5a:	2c00      	cmp	r4, #0
 8003a5c:	d04b      	beq.n	8003af6 <_malloc_r+0xea>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	4639      	mov	r1, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	eb04 0903 	add.w	r9, r4, r3
 8003a68:	f000 fc5a 	bl	8004320 <_sbrk_r>
 8003a6c:	4581      	cmp	r9, r0
 8003a6e:	d142      	bne.n	8003af6 <_malloc_r+0xea>
 8003a70:	6821      	ldr	r1, [r4, #0]
 8003a72:	1a6d      	subs	r5, r5, r1
 8003a74:	4629      	mov	r1, r5
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7ff ffa6 	bl	80039c8 <sbrk_aligned>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d03a      	beq.n	8003af6 <_malloc_r+0xea>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	442b      	add	r3, r5
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	f8d8 3000 	ldr.w	r3, [r8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	bb62      	cbnz	r2, 8003ae8 <_malloc_r+0xdc>
 8003a8e:	f8c8 7000 	str.w	r7, [r8]
 8003a92:	e00f      	b.n	8003ab4 <_malloc_r+0xa8>
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	1b52      	subs	r2, r2, r5
 8003a98:	d420      	bmi.n	8003adc <_malloc_r+0xd0>
 8003a9a:	2a0b      	cmp	r2, #11
 8003a9c:	d917      	bls.n	8003ace <_malloc_r+0xc2>
 8003a9e:	1961      	adds	r1, r4, r5
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	bf18      	it	ne
 8003aa6:	6059      	strne	r1, [r3, #4]
 8003aa8:	6863      	ldr	r3, [r4, #4]
 8003aaa:	bf08      	it	eq
 8003aac:	f8c8 1000 	streq.w	r1, [r8]
 8003ab0:	5162      	str	r2, [r4, r5]
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 f82f 	bl	8003b18 <__malloc_unlock>
 8003aba:	f104 000b 	add.w	r0, r4, #11
 8003abe:	1d23      	adds	r3, r4, #4
 8003ac0:	f020 0007 	bic.w	r0, r0, #7
 8003ac4:	1ac2      	subs	r2, r0, r3
 8003ac6:	bf1c      	itt	ne
 8003ac8:	1a1b      	subne	r3, r3, r0
 8003aca:	50a3      	strne	r3, [r4, r2]
 8003acc:	e7af      	b.n	8003a2e <_malloc_r+0x22>
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	bf0c      	ite	eq
 8003ad4:	f8c8 2000 	streq.w	r2, [r8]
 8003ad8:	605a      	strne	r2, [r3, #4]
 8003ada:	e7eb      	b.n	8003ab4 <_malloc_r+0xa8>
 8003adc:	4623      	mov	r3, r4
 8003ade:	6864      	ldr	r4, [r4, #4]
 8003ae0:	e7ae      	b.n	8003a40 <_malloc_r+0x34>
 8003ae2:	463c      	mov	r4, r7
 8003ae4:	687f      	ldr	r7, [r7, #4]
 8003ae6:	e7b6      	b.n	8003a56 <_malloc_r+0x4a>
 8003ae8:	461a      	mov	r2, r3
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	d1fb      	bne.n	8003ae8 <_malloc_r+0xdc>
 8003af0:	2300      	movs	r3, #0
 8003af2:	6053      	str	r3, [r2, #4]
 8003af4:	e7de      	b.n	8003ab4 <_malloc_r+0xa8>
 8003af6:	230c      	movs	r3, #12
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	4630      	mov	r0, r6
 8003afc:	f000 f80c 	bl	8003b18 <__malloc_unlock>
 8003b00:	e794      	b.n	8003a2c <_malloc_r+0x20>
 8003b02:	6005      	str	r5, [r0, #0]
 8003b04:	e7d6      	b.n	8003ab4 <_malloc_r+0xa8>
 8003b06:	bf00      	nop
 8003b08:	20000294 	.word	0x20000294

08003b0c <__malloc_lock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	@ (8003b14 <__malloc_lock+0x8>)
 8003b0e:	f7ff bf06 	b.w	800391e <__retarget_lock_acquire_recursive>
 8003b12:	bf00      	nop
 8003b14:	2000028c 	.word	0x2000028c

08003b18 <__malloc_unlock>:
 8003b18:	4801      	ldr	r0, [pc, #4]	@ (8003b20 <__malloc_unlock+0x8>)
 8003b1a:	f7ff bf01 	b.w	8003920 <__retarget_lock_release_recursive>
 8003b1e:	bf00      	nop
 8003b20:	2000028c 	.word	0x2000028c

08003b24 <__sfputc_r>:
 8003b24:	6893      	ldr	r3, [r2, #8]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	b410      	push	{r4}
 8003b2c:	6093      	str	r3, [r2, #8]
 8003b2e:	da08      	bge.n	8003b42 <__sfputc_r+0x1e>
 8003b30:	6994      	ldr	r4, [r2, #24]
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	db01      	blt.n	8003b3a <__sfputc_r+0x16>
 8003b36:	290a      	cmp	r1, #10
 8003b38:	d103      	bne.n	8003b42 <__sfputc_r+0x1e>
 8003b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b3e:	f7ff bde0 	b.w	8003702 <__swbuf_r>
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	1c58      	adds	r0, r3, #1
 8003b46:	6010      	str	r0, [r2, #0]
 8003b48:	7019      	strb	r1, [r3, #0]
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <__sfputs_r>:
 8003b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b54:	4606      	mov	r6, r0
 8003b56:	460f      	mov	r7, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	18d5      	adds	r5, r2, r3
 8003b5c:	42ac      	cmp	r4, r5
 8003b5e:	d101      	bne.n	8003b64 <__sfputs_r+0x12>
 8003b60:	2000      	movs	r0, #0
 8003b62:	e007      	b.n	8003b74 <__sfputs_r+0x22>
 8003b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b68:	463a      	mov	r2, r7
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f7ff ffda 	bl	8003b24 <__sfputc_r>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	d1f3      	bne.n	8003b5c <__sfputs_r+0xa>
 8003b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b78 <_vfiprintf_r>:
 8003b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	b09d      	sub	sp, #116	@ 0x74
 8003b80:	4614      	mov	r4, r2
 8003b82:	4698      	mov	r8, r3
 8003b84:	4606      	mov	r6, r0
 8003b86:	b118      	cbz	r0, 8003b90 <_vfiprintf_r+0x18>
 8003b88:	6a03      	ldr	r3, [r0, #32]
 8003b8a:	b90b      	cbnz	r3, 8003b90 <_vfiprintf_r+0x18>
 8003b8c:	f7ff fc14 	bl	80033b8 <__sinit>
 8003b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b92:	07d9      	lsls	r1, r3, #31
 8003b94:	d405      	bmi.n	8003ba2 <_vfiprintf_r+0x2a>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	059a      	lsls	r2, r3, #22
 8003b9a:	d402      	bmi.n	8003ba2 <_vfiprintf_r+0x2a>
 8003b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b9e:	f7ff febe 	bl	800391e <__retarget_lock_acquire_recursive>
 8003ba2:	89ab      	ldrh	r3, [r5, #12]
 8003ba4:	071b      	lsls	r3, r3, #28
 8003ba6:	d501      	bpl.n	8003bac <_vfiprintf_r+0x34>
 8003ba8:	692b      	ldr	r3, [r5, #16]
 8003baa:	b99b      	cbnz	r3, 8003bd4 <_vfiprintf_r+0x5c>
 8003bac:	4629      	mov	r1, r5
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f7ff fde6 	bl	8003780 <__swsetup_r>
 8003bb4:	b170      	cbz	r0, 8003bd4 <_vfiprintf_r+0x5c>
 8003bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bb8:	07dc      	lsls	r4, r3, #31
 8003bba:	d504      	bpl.n	8003bc6 <_vfiprintf_r+0x4e>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b01d      	add	sp, #116	@ 0x74
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	89ab      	ldrh	r3, [r5, #12]
 8003bc8:	0598      	lsls	r0, r3, #22
 8003bca:	d4f7      	bmi.n	8003bbc <_vfiprintf_r+0x44>
 8003bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bce:	f7ff fea7 	bl	8003920 <__retarget_lock_release_recursive>
 8003bd2:	e7f3      	b.n	8003bbc <_vfiprintf_r+0x44>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bd8:	2320      	movs	r3, #32
 8003bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8003be2:	2330      	movs	r3, #48	@ 0x30
 8003be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d94 <_vfiprintf_r+0x21c>
 8003be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bec:	f04f 0901 	mov.w	r9, #1
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	469a      	mov	sl, r3
 8003bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf8:	b10a      	cbz	r2, 8003bfe <_vfiprintf_r+0x86>
 8003bfa:	2a25      	cmp	r2, #37	@ 0x25
 8003bfc:	d1f9      	bne.n	8003bf2 <_vfiprintf_r+0x7a>
 8003bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8003c02:	d00b      	beq.n	8003c1c <_vfiprintf_r+0xa4>
 8003c04:	465b      	mov	r3, fp
 8003c06:	4622      	mov	r2, r4
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f7ff ffa1 	bl	8003b52 <__sfputs_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	f000 80a7 	beq.w	8003d64 <_vfiprintf_r+0x1ec>
 8003c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c18:	445a      	add	r2, fp
 8003c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 809f 	beq.w	8003d64 <_vfiprintf_r+0x1ec>
 8003c26:	2300      	movs	r3, #0
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c30:	f10a 0a01 	add.w	sl, sl, #1
 8003c34:	9304      	str	r3, [sp, #16]
 8003c36:	9307      	str	r3, [sp, #28]
 8003c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c3e:	4654      	mov	r4, sl
 8003c40:	2205      	movs	r2, #5
 8003c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c46:	4853      	ldr	r0, [pc, #332]	@ (8003d94 <_vfiprintf_r+0x21c>)
 8003c48:	f7fc fae2 	bl	8000210 <memchr>
 8003c4c:	9a04      	ldr	r2, [sp, #16]
 8003c4e:	b9d8      	cbnz	r0, 8003c88 <_vfiprintf_r+0x110>
 8003c50:	06d1      	lsls	r1, r2, #27
 8003c52:	bf44      	itt	mi
 8003c54:	2320      	movmi	r3, #32
 8003c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c5a:	0713      	lsls	r3, r2, #28
 8003c5c:	bf44      	itt	mi
 8003c5e:	232b      	movmi	r3, #43	@ 0x2b
 8003c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c64:	f89a 3000 	ldrb.w	r3, [sl]
 8003c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c6a:	d015      	beq.n	8003c98 <_vfiprintf_r+0x120>
 8003c6c:	9a07      	ldr	r2, [sp, #28]
 8003c6e:	4654      	mov	r4, sl
 8003c70:	2000      	movs	r0, #0
 8003c72:	f04f 0c0a 	mov.w	ip, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c7c:	3b30      	subs	r3, #48	@ 0x30
 8003c7e:	2b09      	cmp	r3, #9
 8003c80:	d94b      	bls.n	8003d1a <_vfiprintf_r+0x1a2>
 8003c82:	b1b0      	cbz	r0, 8003cb2 <_vfiprintf_r+0x13a>
 8003c84:	9207      	str	r2, [sp, #28]
 8003c86:	e014      	b.n	8003cb2 <_vfiprintf_r+0x13a>
 8003c88:	eba0 0308 	sub.w	r3, r0, r8
 8003c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	9304      	str	r3, [sp, #16]
 8003c94:	46a2      	mov	sl, r4
 8003c96:	e7d2      	b.n	8003c3e <_vfiprintf_r+0xc6>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	1d19      	adds	r1, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	9103      	str	r1, [sp, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bfbb      	ittet	lt
 8003ca4:	425b      	neglt	r3, r3
 8003ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8003caa:	9307      	strge	r3, [sp, #28]
 8003cac:	9307      	strlt	r3, [sp, #28]
 8003cae:	bfb8      	it	lt
 8003cb0:	9204      	strlt	r2, [sp, #16]
 8003cb2:	7823      	ldrb	r3, [r4, #0]
 8003cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cb6:	d10a      	bne.n	8003cce <_vfiprintf_r+0x156>
 8003cb8:	7863      	ldrb	r3, [r4, #1]
 8003cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cbc:	d132      	bne.n	8003d24 <_vfiprintf_r+0x1ac>
 8003cbe:	9b03      	ldr	r3, [sp, #12]
 8003cc0:	1d1a      	adds	r2, r3, #4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	9203      	str	r2, [sp, #12]
 8003cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cca:	3402      	adds	r4, #2
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003da4 <_vfiprintf_r+0x22c>
 8003cd2:	7821      	ldrb	r1, [r4, #0]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4650      	mov	r0, sl
 8003cd8:	f7fc fa9a 	bl	8000210 <memchr>
 8003cdc:	b138      	cbz	r0, 8003cee <_vfiprintf_r+0x176>
 8003cde:	9b04      	ldr	r3, [sp, #16]
 8003ce0:	eba0 000a 	sub.w	r0, r0, sl
 8003ce4:	2240      	movs	r2, #64	@ 0x40
 8003ce6:	4082      	lsls	r2, r0
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	3401      	adds	r4, #1
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf2:	4829      	ldr	r0, [pc, #164]	@ (8003d98 <_vfiprintf_r+0x220>)
 8003cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cf8:	2206      	movs	r2, #6
 8003cfa:	f7fc fa89 	bl	8000210 <memchr>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d03f      	beq.n	8003d82 <_vfiprintf_r+0x20a>
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <_vfiprintf_r+0x224>)
 8003d04:	bb1b      	cbnz	r3, 8003d4e <_vfiprintf_r+0x1d6>
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	3308      	adds	r3, #8
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d14:	443b      	add	r3, r7
 8003d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d18:	e76a      	b.n	8003bf0 <_vfiprintf_r+0x78>
 8003d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d1e:	460c      	mov	r4, r1
 8003d20:	2001      	movs	r0, #1
 8003d22:	e7a8      	b.n	8003c76 <_vfiprintf_r+0xfe>
 8003d24:	2300      	movs	r3, #0
 8003d26:	3401      	adds	r4, #1
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f04f 0c0a 	mov.w	ip, #10
 8003d30:	4620      	mov	r0, r4
 8003d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d36:	3a30      	subs	r2, #48	@ 0x30
 8003d38:	2a09      	cmp	r2, #9
 8003d3a:	d903      	bls.n	8003d44 <_vfiprintf_r+0x1cc>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0c6      	beq.n	8003cce <_vfiprintf_r+0x156>
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	e7c4      	b.n	8003cce <_vfiprintf_r+0x156>
 8003d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d48:	4604      	mov	r4, r0
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e7f0      	b.n	8003d30 <_vfiprintf_r+0x1b8>
 8003d4e:	ab03      	add	r3, sp, #12
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	462a      	mov	r2, r5
 8003d54:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <_vfiprintf_r+0x228>)
 8003d56:	a904      	add	r1, sp, #16
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f3af 8000 	nop.w
 8003d5e:	4607      	mov	r7, r0
 8003d60:	1c78      	adds	r0, r7, #1
 8003d62:	d1d6      	bne.n	8003d12 <_vfiprintf_r+0x19a>
 8003d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d66:	07d9      	lsls	r1, r3, #31
 8003d68:	d405      	bmi.n	8003d76 <_vfiprintf_r+0x1fe>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	059a      	lsls	r2, r3, #22
 8003d6e:	d402      	bmi.n	8003d76 <_vfiprintf_r+0x1fe>
 8003d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d72:	f7ff fdd5 	bl	8003920 <__retarget_lock_release_recursive>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	065b      	lsls	r3, r3, #25
 8003d7a:	f53f af1f 	bmi.w	8003bbc <_vfiprintf_r+0x44>
 8003d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d80:	e71e      	b.n	8003bc0 <_vfiprintf_r+0x48>
 8003d82:	ab03      	add	r3, sp, #12
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462a      	mov	r2, r5
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <_vfiprintf_r+0x228>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f879 	bl	8003e84 <_printf_i>
 8003d92:	e7e4      	b.n	8003d5e <_vfiprintf_r+0x1e6>
 8003d94:	080044d4 	.word	0x080044d4
 8003d98:	080044de 	.word	0x080044de
 8003d9c:	00000000 	.word	0x00000000
 8003da0:	08003b53 	.word	0x08003b53
 8003da4:	080044da 	.word	0x080044da

08003da8 <_printf_common>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	4616      	mov	r6, r2
 8003dae:	4698      	mov	r8, r3
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	690b      	ldr	r3, [r1, #16]
 8003db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfb8      	it	lt
 8003dbc:	4613      	movlt	r3, r2
 8003dbe:	6033      	str	r3, [r6, #0]
 8003dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	b10a      	cbz	r2, 8003dce <_printf_common+0x26>
 8003dca:	3301      	adds	r3, #1
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	0699      	lsls	r1, r3, #26
 8003dd2:	bf42      	ittt	mi
 8003dd4:	6833      	ldrmi	r3, [r6, #0]
 8003dd6:	3302      	addmi	r3, #2
 8003dd8:	6033      	strmi	r3, [r6, #0]
 8003dda:	6825      	ldr	r5, [r4, #0]
 8003ddc:	f015 0506 	ands.w	r5, r5, #6
 8003de0:	d106      	bne.n	8003df0 <_printf_common+0x48>
 8003de2:	f104 0a19 	add.w	sl, r4, #25
 8003de6:	68e3      	ldr	r3, [r4, #12]
 8003de8:	6832      	ldr	r2, [r6, #0]
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	42ab      	cmp	r3, r5
 8003dee:	dc26      	bgt.n	8003e3e <_printf_common+0x96>
 8003df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	3b00      	subs	r3, #0
 8003df8:	bf18      	it	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	0692      	lsls	r2, r2, #26
 8003dfe:	d42b      	bmi.n	8003e58 <_printf_common+0xb0>
 8003e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e04:	4641      	mov	r1, r8
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c8      	blx	r9
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d01e      	beq.n	8003e4c <_printf_common+0xa4>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	f003 0306 	and.w	r3, r3, #6
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf02      	ittt	eq
 8003e1a:	68e5      	ldreq	r5, [r4, #12]
 8003e1c:	6833      	ldreq	r3, [r6, #0]
 8003e1e:	1aed      	subeq	r5, r5, r3
 8003e20:	68a3      	ldr	r3, [r4, #8]
 8003e22:	bf0c      	ite	eq
 8003e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e28:	2500      	movne	r5, #0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bfc4      	itt	gt
 8003e2e:	1a9b      	subgt	r3, r3, r2
 8003e30:	18ed      	addgt	r5, r5, r3
 8003e32:	2600      	movs	r6, #0
 8003e34:	341a      	adds	r4, #26
 8003e36:	42b5      	cmp	r5, r6
 8003e38:	d11a      	bne.n	8003e70 <_printf_common+0xc8>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e008      	b.n	8003e50 <_printf_common+0xa8>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4652      	mov	r2, sl
 8003e42:	4641      	mov	r1, r8
 8003e44:	4638      	mov	r0, r7
 8003e46:	47c8      	blx	r9
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d103      	bne.n	8003e54 <_printf_common+0xac>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	3501      	adds	r5, #1
 8003e56:	e7c6      	b.n	8003de6 <_printf_common+0x3e>
 8003e58:	18e1      	adds	r1, r4, r3
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	2030      	movs	r0, #48	@ 0x30
 8003e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e62:	4422      	add	r2, r4
 8003e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	e7c7      	b.n	8003e00 <_printf_common+0x58>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4622      	mov	r2, r4
 8003e74:	4641      	mov	r1, r8
 8003e76:	4638      	mov	r0, r7
 8003e78:	47c8      	blx	r9
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0e6      	beq.n	8003e4c <_printf_common+0xa4>
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7d9      	b.n	8003e36 <_printf_common+0x8e>
	...

08003e84 <_printf_i>:
 8003e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	7e0f      	ldrb	r7, [r1, #24]
 8003e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e8c:	2f78      	cmp	r7, #120	@ 0x78
 8003e8e:	4691      	mov	r9, r2
 8003e90:	4680      	mov	r8, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	469a      	mov	sl, r3
 8003e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e9a:	d807      	bhi.n	8003eac <_printf_i+0x28>
 8003e9c:	2f62      	cmp	r7, #98	@ 0x62
 8003e9e:	d80a      	bhi.n	8003eb6 <_printf_i+0x32>
 8003ea0:	2f00      	cmp	r7, #0
 8003ea2:	f000 80d1 	beq.w	8004048 <_printf_i+0x1c4>
 8003ea6:	2f58      	cmp	r7, #88	@ 0x58
 8003ea8:	f000 80b8 	beq.w	800401c <_printf_i+0x198>
 8003eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eb4:	e03a      	b.n	8003f2c <_printf_i+0xa8>
 8003eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eba:	2b15      	cmp	r3, #21
 8003ebc:	d8f6      	bhi.n	8003eac <_printf_i+0x28>
 8003ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8003ec4 <_printf_i+0x40>)
 8003ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f31 	.word	0x08003f31
 8003ecc:	08003ead 	.word	0x08003ead
 8003ed0:	08003ead 	.word	0x08003ead
 8003ed4:	08003ead 	.word	0x08003ead
 8003ed8:	08003ead 	.word	0x08003ead
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003ead 	.word	0x08003ead
 8003ee4:	08003ead 	.word	0x08003ead
 8003ee8:	08003ead 	.word	0x08003ead
 8003eec:	08003ead 	.word	0x08003ead
 8003ef0:	0800402f 	.word	0x0800402f
 8003ef4:	08003f5b 	.word	0x08003f5b
 8003ef8:	08003fe9 	.word	0x08003fe9
 8003efc:	08003ead 	.word	0x08003ead
 8003f00:	08003ead 	.word	0x08003ead
 8003f04:	08004051 	.word	0x08004051
 8003f08:	08003ead 	.word	0x08003ead
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003ead 	.word	0x08003ead
 8003f14:	08003ead 	.word	0x08003ead
 8003f18:	08003ff1 	.word	0x08003ff1
 8003f1c:	6833      	ldr	r3, [r6, #0]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6032      	str	r2, [r6, #0]
 8003f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e09c      	b.n	800406a <_printf_i+0x1e6>
 8003f30:	6833      	ldr	r3, [r6, #0]
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	1d19      	adds	r1, r3, #4
 8003f36:	6031      	str	r1, [r6, #0]
 8003f38:	0606      	lsls	r6, r0, #24
 8003f3a:	d501      	bpl.n	8003f40 <_printf_i+0xbc>
 8003f3c:	681d      	ldr	r5, [r3, #0]
 8003f3e:	e003      	b.n	8003f48 <_printf_i+0xc4>
 8003f40:	0645      	lsls	r5, r0, #25
 8003f42:	d5fb      	bpl.n	8003f3c <_printf_i+0xb8>
 8003f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f48:	2d00      	cmp	r5, #0
 8003f4a:	da03      	bge.n	8003f54 <_printf_i+0xd0>
 8003f4c:	232d      	movs	r3, #45	@ 0x2d
 8003f4e:	426d      	negs	r5, r5
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f54:	4858      	ldr	r0, [pc, #352]	@ (80040b8 <_printf_i+0x234>)
 8003f56:	230a      	movs	r3, #10
 8003f58:	e011      	b.n	8003f7e <_printf_i+0xfa>
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	0608      	lsls	r0, r1, #24
 8003f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f64:	d402      	bmi.n	8003f6c <_printf_i+0xe8>
 8003f66:	0649      	lsls	r1, r1, #25
 8003f68:	bf48      	it	mi
 8003f6a:	b2ad      	uxthmi	r5, r5
 8003f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f6e:	4852      	ldr	r0, [pc, #328]	@ (80040b8 <_printf_i+0x234>)
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	bf14      	ite	ne
 8003f74:	230a      	movne	r3, #10
 8003f76:	2308      	moveq	r3, #8
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f7e:	6866      	ldr	r6, [r4, #4]
 8003f80:	60a6      	str	r6, [r4, #8]
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	db05      	blt.n	8003f92 <_printf_i+0x10e>
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	432e      	orrs	r6, r5
 8003f8a:	f021 0104 	bic.w	r1, r1, #4
 8003f8e:	6021      	str	r1, [r4, #0]
 8003f90:	d04b      	beq.n	800402a <_printf_i+0x1a6>
 8003f92:	4616      	mov	r6, r2
 8003f94:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f98:	fb03 5711 	mls	r7, r3, r1, r5
 8003f9c:	5dc7      	ldrb	r7, [r0, r7]
 8003f9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fa2:	462f      	mov	r7, r5
 8003fa4:	42bb      	cmp	r3, r7
 8003fa6:	460d      	mov	r5, r1
 8003fa8:	d9f4      	bls.n	8003f94 <_printf_i+0x110>
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d10b      	bne.n	8003fc6 <_printf_i+0x142>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	07df      	lsls	r7, r3, #31
 8003fb2:	d508      	bpl.n	8003fc6 <_printf_i+0x142>
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	6861      	ldr	r1, [r4, #4]
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	bfde      	ittt	le
 8003fbc:	2330      	movle	r3, #48	@ 0x30
 8003fbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fc6:	1b92      	subs	r2, r2, r6
 8003fc8:	6122      	str	r2, [r4, #16]
 8003fca:	f8cd a000 	str.w	sl, [sp]
 8003fce:	464b      	mov	r3, r9
 8003fd0:	aa03      	add	r2, sp, #12
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	f7ff fee7 	bl	8003da8 <_printf_common>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d14a      	bne.n	8004074 <_printf_i+0x1f0>
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe2:	b004      	add	sp, #16
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	4832      	ldr	r0, [pc, #200]	@ (80040bc <_printf_i+0x238>)
 8003ff2:	2778      	movs	r7, #120	@ 0x78
 8003ff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	6831      	ldr	r1, [r6, #0]
 8003ffc:	061f      	lsls	r7, r3, #24
 8003ffe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004002:	d402      	bmi.n	800400a <_printf_i+0x186>
 8004004:	065f      	lsls	r7, r3, #25
 8004006:	bf48      	it	mi
 8004008:	b2ad      	uxthmi	r5, r5
 800400a:	6031      	str	r1, [r6, #0]
 800400c:	07d9      	lsls	r1, r3, #31
 800400e:	bf44      	itt	mi
 8004010:	f043 0320 	orrmi.w	r3, r3, #32
 8004014:	6023      	strmi	r3, [r4, #0]
 8004016:	b11d      	cbz	r5, 8004020 <_printf_i+0x19c>
 8004018:	2310      	movs	r3, #16
 800401a:	e7ad      	b.n	8003f78 <_printf_i+0xf4>
 800401c:	4826      	ldr	r0, [pc, #152]	@ (80040b8 <_printf_i+0x234>)
 800401e:	e7e9      	b.n	8003ff4 <_printf_i+0x170>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f023 0320 	bic.w	r3, r3, #32
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	e7f6      	b.n	8004018 <_printf_i+0x194>
 800402a:	4616      	mov	r6, r2
 800402c:	e7bd      	b.n	8003faa <_printf_i+0x126>
 800402e:	6833      	ldr	r3, [r6, #0]
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	6961      	ldr	r1, [r4, #20]
 8004034:	1d18      	adds	r0, r3, #4
 8004036:	6030      	str	r0, [r6, #0]
 8004038:	062e      	lsls	r6, r5, #24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	d501      	bpl.n	8004042 <_printf_i+0x1be>
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	e002      	b.n	8004048 <_printf_i+0x1c4>
 8004042:	0668      	lsls	r0, r5, #25
 8004044:	d5fb      	bpl.n	800403e <_printf_i+0x1ba>
 8004046:	8019      	strh	r1, [r3, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	4616      	mov	r6, r2
 800404e:	e7bc      	b.n	8003fca <_printf_i+0x146>
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	6032      	str	r2, [r6, #0]
 8004056:	681e      	ldr	r6, [r3, #0]
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	2100      	movs	r1, #0
 800405c:	4630      	mov	r0, r6
 800405e:	f7fc f8d7 	bl	8000210 <memchr>
 8004062:	b108      	cbz	r0, 8004068 <_printf_i+0x1e4>
 8004064:	1b80      	subs	r0, r0, r6
 8004066:	6060      	str	r0, [r4, #4]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004072:	e7aa      	b.n	8003fca <_printf_i+0x146>
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	4632      	mov	r2, r6
 8004078:	4649      	mov	r1, r9
 800407a:	4640      	mov	r0, r8
 800407c:	47d0      	blx	sl
 800407e:	3001      	adds	r0, #1
 8004080:	d0ad      	beq.n	8003fde <_printf_i+0x15a>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	d413      	bmi.n	80040b0 <_printf_i+0x22c>
 8004088:	68e0      	ldr	r0, [r4, #12]
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	4298      	cmp	r0, r3
 800408e:	bfb8      	it	lt
 8004090:	4618      	movlt	r0, r3
 8004092:	e7a6      	b.n	8003fe2 <_printf_i+0x15e>
 8004094:	2301      	movs	r3, #1
 8004096:	4632      	mov	r2, r6
 8004098:	4649      	mov	r1, r9
 800409a:	4640      	mov	r0, r8
 800409c:	47d0      	blx	sl
 800409e:	3001      	adds	r0, #1
 80040a0:	d09d      	beq.n	8003fde <_printf_i+0x15a>
 80040a2:	3501      	adds	r5, #1
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	9903      	ldr	r1, [sp, #12]
 80040a8:	1a5b      	subs	r3, r3, r1
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dcf2      	bgt.n	8004094 <_printf_i+0x210>
 80040ae:	e7eb      	b.n	8004088 <_printf_i+0x204>
 80040b0:	2500      	movs	r5, #0
 80040b2:	f104 0619 	add.w	r6, r4, #25
 80040b6:	e7f5      	b.n	80040a4 <_printf_i+0x220>
 80040b8:	080044e5 	.word	0x080044e5
 80040bc:	080044f6 	.word	0x080044f6

080040c0 <__sflush_r>:
 80040c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c8:	0716      	lsls	r6, r2, #28
 80040ca:	4605      	mov	r5, r0
 80040cc:	460c      	mov	r4, r1
 80040ce:	d454      	bmi.n	800417a <__sflush_r+0xba>
 80040d0:	684b      	ldr	r3, [r1, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	dc02      	bgt.n	80040dc <__sflush_r+0x1c>
 80040d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	dd48      	ble.n	800416e <__sflush_r+0xae>
 80040dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040de:	2e00      	cmp	r6, #0
 80040e0:	d045      	beq.n	800416e <__sflush_r+0xae>
 80040e2:	2300      	movs	r3, #0
 80040e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80040e8:	682f      	ldr	r7, [r5, #0]
 80040ea:	6a21      	ldr	r1, [r4, #32]
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	d030      	beq.n	8004152 <__sflush_r+0x92>
 80040f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	0759      	lsls	r1, r3, #29
 80040f6:	d505      	bpl.n	8004104 <__sflush_r+0x44>
 80040f8:	6863      	ldr	r3, [r4, #4]
 80040fa:	1ad2      	subs	r2, r2, r3
 80040fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040fe:	b10b      	cbz	r3, 8004104 <__sflush_r+0x44>
 8004100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004108:	6a21      	ldr	r1, [r4, #32]
 800410a:	4628      	mov	r0, r5
 800410c:	47b0      	blx	r6
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	d106      	bne.n	8004122 <__sflush_r+0x62>
 8004114:	6829      	ldr	r1, [r5, #0]
 8004116:	291d      	cmp	r1, #29
 8004118:	d82b      	bhi.n	8004172 <__sflush_r+0xb2>
 800411a:	4a2a      	ldr	r2, [pc, #168]	@ (80041c4 <__sflush_r+0x104>)
 800411c:	40ca      	lsrs	r2, r1
 800411e:	07d6      	lsls	r6, r2, #31
 8004120:	d527      	bpl.n	8004172 <__sflush_r+0xb2>
 8004122:	2200      	movs	r2, #0
 8004124:	6062      	str	r2, [r4, #4]
 8004126:	04d9      	lsls	r1, r3, #19
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	d504      	bpl.n	8004138 <__sflush_r+0x78>
 800412e:	1c42      	adds	r2, r0, #1
 8004130:	d101      	bne.n	8004136 <__sflush_r+0x76>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b903      	cbnz	r3, 8004138 <__sflush_r+0x78>
 8004136:	6560      	str	r0, [r4, #84]	@ 0x54
 8004138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800413a:	602f      	str	r7, [r5, #0]
 800413c:	b1b9      	cbz	r1, 800416e <__sflush_r+0xae>
 800413e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004142:	4299      	cmp	r1, r3
 8004144:	d002      	beq.n	800414c <__sflush_r+0x8c>
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff fbec 	bl	8003924 <_free_r>
 800414c:	2300      	movs	r3, #0
 800414e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004150:	e00d      	b.n	800416e <__sflush_r+0xae>
 8004152:	2301      	movs	r3, #1
 8004154:	4628      	mov	r0, r5
 8004156:	47b0      	blx	r6
 8004158:	4602      	mov	r2, r0
 800415a:	1c50      	adds	r0, r2, #1
 800415c:	d1c9      	bne.n	80040f2 <__sflush_r+0x32>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0c6      	beq.n	80040f2 <__sflush_r+0x32>
 8004164:	2b1d      	cmp	r3, #29
 8004166:	d001      	beq.n	800416c <__sflush_r+0xac>
 8004168:	2b16      	cmp	r3, #22
 800416a:	d11e      	bne.n	80041aa <__sflush_r+0xea>
 800416c:	602f      	str	r7, [r5, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	e022      	b.n	80041b8 <__sflush_r+0xf8>
 8004172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004176:	b21b      	sxth	r3, r3
 8004178:	e01b      	b.n	80041b2 <__sflush_r+0xf2>
 800417a:	690f      	ldr	r7, [r1, #16]
 800417c:	2f00      	cmp	r7, #0
 800417e:	d0f6      	beq.n	800416e <__sflush_r+0xae>
 8004180:	0793      	lsls	r3, r2, #30
 8004182:	680e      	ldr	r6, [r1, #0]
 8004184:	bf08      	it	eq
 8004186:	694b      	ldreq	r3, [r1, #20]
 8004188:	600f      	str	r7, [r1, #0]
 800418a:	bf18      	it	ne
 800418c:	2300      	movne	r3, #0
 800418e:	eba6 0807 	sub.w	r8, r6, r7
 8004192:	608b      	str	r3, [r1, #8]
 8004194:	f1b8 0f00 	cmp.w	r8, #0
 8004198:	dde9      	ble.n	800416e <__sflush_r+0xae>
 800419a:	6a21      	ldr	r1, [r4, #32]
 800419c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800419e:	4643      	mov	r3, r8
 80041a0:	463a      	mov	r2, r7
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b0      	blx	r6
 80041a6:	2800      	cmp	r0, #0
 80041a8:	dc08      	bgt.n	80041bc <__sflush_r+0xfc>
 80041aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	4407      	add	r7, r0
 80041be:	eba8 0800 	sub.w	r8, r8, r0
 80041c2:	e7e7      	b.n	8004194 <__sflush_r+0xd4>
 80041c4:	20400001 	.word	0x20400001

080041c8 <_fflush_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	4605      	mov	r5, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	b913      	cbnz	r3, 80041d8 <_fflush_r+0x10>
 80041d2:	2500      	movs	r5, #0
 80041d4:	4628      	mov	r0, r5
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	b118      	cbz	r0, 80041e2 <_fflush_r+0x1a>
 80041da:	6a03      	ldr	r3, [r0, #32]
 80041dc:	b90b      	cbnz	r3, 80041e2 <_fflush_r+0x1a>
 80041de:	f7ff f8eb 	bl	80033b8 <__sinit>
 80041e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f3      	beq.n	80041d2 <_fflush_r+0xa>
 80041ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041ec:	07d0      	lsls	r0, r2, #31
 80041ee:	d404      	bmi.n	80041fa <_fflush_r+0x32>
 80041f0:	0599      	lsls	r1, r3, #22
 80041f2:	d402      	bmi.n	80041fa <_fflush_r+0x32>
 80041f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041f6:	f7ff fb92 	bl	800391e <__retarget_lock_acquire_recursive>
 80041fa:	4628      	mov	r0, r5
 80041fc:	4621      	mov	r1, r4
 80041fe:	f7ff ff5f 	bl	80040c0 <__sflush_r>
 8004202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004204:	07da      	lsls	r2, r3, #31
 8004206:	4605      	mov	r5, r0
 8004208:	d4e4      	bmi.n	80041d4 <_fflush_r+0xc>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	059b      	lsls	r3, r3, #22
 800420e:	d4e1      	bmi.n	80041d4 <_fflush_r+0xc>
 8004210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004212:	f7ff fb85 	bl	8003920 <__retarget_lock_release_recursive>
 8004216:	e7dd      	b.n	80041d4 <_fflush_r+0xc>

08004218 <__swhatbuf_r>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	460c      	mov	r4, r1
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	2900      	cmp	r1, #0
 8004222:	b096      	sub	sp, #88	@ 0x58
 8004224:	4615      	mov	r5, r2
 8004226:	461e      	mov	r6, r3
 8004228:	da0d      	bge.n	8004246 <__swhatbuf_r+0x2e>
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	bf14      	ite	ne
 8004236:	2340      	movne	r3, #64	@ 0x40
 8004238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800423c:	2000      	movs	r0, #0
 800423e:	6031      	str	r1, [r6, #0]
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	b016      	add	sp, #88	@ 0x58
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	466a      	mov	r2, sp
 8004248:	f000 f848 	bl	80042dc <_fstat_r>
 800424c:	2800      	cmp	r0, #0
 800424e:	dbec      	blt.n	800422a <__swhatbuf_r+0x12>
 8004250:	9901      	ldr	r1, [sp, #4]
 8004252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800425a:	4259      	negs	r1, r3
 800425c:	4159      	adcs	r1, r3
 800425e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004262:	e7eb      	b.n	800423c <__swhatbuf_r+0x24>

08004264 <__smakebuf_r>:
 8004264:	898b      	ldrh	r3, [r1, #12]
 8004266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004268:	079d      	lsls	r5, r3, #30
 800426a:	4606      	mov	r6, r0
 800426c:	460c      	mov	r4, r1
 800426e:	d507      	bpl.n	8004280 <__smakebuf_r+0x1c>
 8004270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	2301      	movs	r3, #1
 800427a:	6163      	str	r3, [r4, #20]
 800427c:	b003      	add	sp, #12
 800427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004280:	ab01      	add	r3, sp, #4
 8004282:	466a      	mov	r2, sp
 8004284:	f7ff ffc8 	bl	8004218 <__swhatbuf_r>
 8004288:	9f00      	ldr	r7, [sp, #0]
 800428a:	4605      	mov	r5, r0
 800428c:	4639      	mov	r1, r7
 800428e:	4630      	mov	r0, r6
 8004290:	f7ff fbbc 	bl	8003a0c <_malloc_r>
 8004294:	b948      	cbnz	r0, 80042aa <__smakebuf_r+0x46>
 8004296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429a:	059a      	lsls	r2, r3, #22
 800429c:	d4ee      	bmi.n	800427c <__smakebuf_r+0x18>
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	e7e2      	b.n	8004270 <__smakebuf_r+0xc>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	6020      	str	r0, [r4, #0]
 80042ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	9b01      	ldr	r3, [sp, #4]
 80042b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042ba:	b15b      	cbz	r3, 80042d4 <__smakebuf_r+0x70>
 80042bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f81d 	bl	8004300 <_isatty_r>
 80042c6:	b128      	cbz	r0, 80042d4 <__smakebuf_r+0x70>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	431d      	orrs	r5, r3
 80042d8:	81a5      	strh	r5, [r4, #12]
 80042da:	e7cf      	b.n	800427c <__smakebuf_r+0x18>

080042dc <_fstat_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d07      	ldr	r5, [pc, #28]	@ (80042fc <_fstat_r+0x20>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	f7fc fddc 	bl	8000ea6 <_fstat>
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	d102      	bne.n	80042f8 <_fstat_r+0x1c>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	b103      	cbz	r3, 80042f8 <_fstat_r+0x1c>
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	bf00      	nop
 80042fc:	20000288 	.word	0x20000288

08004300 <_isatty_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4d06      	ldr	r5, [pc, #24]	@ (800431c <_isatty_r+0x1c>)
 8004304:	2300      	movs	r3, #0
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	f7fc fddb 	bl	8000ec6 <_isatty>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_isatty_r+0x1a>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_isatty_r+0x1a>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000288 	.word	0x20000288

08004320 <_sbrk_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d06      	ldr	r5, [pc, #24]	@ (800433c <_sbrk_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fc fde4 	bl	8000ef8 <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_sbrk_r+0x1a>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_sbrk_r+0x1a>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000288 	.word	0x20000288

08004340 <_init>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr

0800434c <_fini>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr
