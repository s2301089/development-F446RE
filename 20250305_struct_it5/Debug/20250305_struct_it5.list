
20250305_struct_it5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d8  080050d8  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050e0  080050e0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  08005150  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005150  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4fa  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ae  00000000  00000000  00016592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00018a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad9  00000000  00000000  00019830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234fa  00000000  00000000  0001a309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ce  00000000  00000000  0003d803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34e0  00000000  00000000  0004ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001220b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000423c  00000000  00000000  001220f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  00126330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ef0 	.word	0x08004ef0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004ef0 	.word	0x08004ef0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <STprintf+0x24>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fd61 	bl	80040b4 <setbuf>
	Huart = huart;
 80005f2:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <STprintf+0x28>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000018 	.word	0x20000018
 8000604:	20000084 	.word	0x20000084

08000608 <_write>:

int _write(int file,char *ptr,int len){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <_write+0x28>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	b29a      	uxth	r2, r3
 800061c:	230a      	movs	r3, #10
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	f002 fc6e 	bl	8002f00 <HAL_UART_Transmit>
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000084 	.word	0x20000084

08000634 <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	FAF = 0;
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <getDataIT+0x20>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	4904      	ldr	r1, [pc, #16]	@ (8000658 <getDataIT+0x24>)
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f002 fce5 	bl	8003016 <HAL_UART_Receive_IT>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000095 	.word	0x20000095
 8000658:	20000093 	.word	0x20000093

0800065c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	FAF = 1;
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <HAL_UART_RxCpltCallback+0x94>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <HAL_UART_RxCpltCallback+0x98>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2baf      	cmp	r3, #175	@ 0xaf
 8000670:	d106      	bne.n	8000680 <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 8000672:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <HAL_UART_RxCpltCallback+0x9c>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e00b      	b.n	8000698 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <HAL_UART_RxCpltCallback+0xa4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a1e      	ldr	r2, [pc, #120]	@ (8000700 <HAL_UART_RxCpltCallback+0xa4>)
 8000688:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <HAL_UART_RxCpltCallback+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b09      	cmp	r3, #9
 8000690:	dd02      	ble.n	8000698 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <HAL_UART_RxCpltCallback+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <HAL_UART_RxCpltCallback+0x9c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d01e      	beq.n	80006de <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <HAL_UART_RxCpltCallback+0x98>)
 80006a6:	7811      	ldrb	r1, [r2, #0]
 80006a8:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 80006aa:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006b4:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b0b      	cmp	r3, #11
 80006bc:	d10f      	bne.n	80006de <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HAL_UART_RxCpltCallback+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 80006c6:	f000 f821 	bl	800070c <ChSUM>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2bed      	cmp	r3, #237	@ 0xed
 80006ce:	d103      	bne.n	80006d8 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 80006d0:	490c      	ldr	r1, [pc, #48]	@ (8000704 <HAL_UART_RxCpltCallback+0xa8>)
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <HAL_UART_RxCpltCallback+0xac>)
 80006d4:	f000 f846 	bl	8000764 <AddStruct>
			}
			GIcount = 0;
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <HAL_UART_RxCpltCallback+0xa0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	4904      	ldr	r1, [pc, #16]	@ (80006f4 <HAL_UART_RxCpltCallback+0x98>)
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 fc97 	bl	8003016 <HAL_UART_Receive_IT>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000095 	.word	0x20000095
 80006f4:	20000093 	.word	0x20000093
 80006f8:	20000094 	.word	0x20000094
 80006fc:	200000b0 	.word	0x200000b0
 8000700:	200000b4 	.word	0x200000b4
 8000704:	20000088 	.word	0x20000088
 8000708:	20000098 	.word	0x20000098

0800070c <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	330a      	adds	r3, #10
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2bed      	cmp	r3, #237	@ 0xed
 800071c:	d11b      	bne.n	8000756 <ChSUM+0x4a>
		uint8_t revsum = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	e009      	b.n	800073c <ChSUM+0x30>
			revsum += (int)Adata[i];
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	4413      	add	r3, r2
 8000734:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3301      	adds	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b08      	cmp	r3, #8
 8000740:	ddf2      	ble.n	8000728 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3309      	adds	r3, #9
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	429a      	cmp	r2, r3
 800074c:	d101      	bne.n	8000752 <ChSUM+0x46>
			return 0xed;
 800074e:	23ed      	movs	r3, #237	@ 0xed
 8000750:	e002      	b.n	8000758 <ChSUM+0x4c>
		}else{
			return 0x00;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 8000756:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f8bb 	bl	80008ea <StructInit>
	Udata->LX = Adata[1];
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	789a      	ldrb	r2, [r3, #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	795a      	ldrb	r2, [r3, #5]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	78da      	ldrb	r2, [r3, #3]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	791a      	ldrb	r2, [r3, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	799a      	ldrb	r2, [r3, #6]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	3307      	adds	r3, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <AddStruct+0x54>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3307      	adds	r3, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <AddStruct+0x68>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	3307      	adds	r3, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <AddStruct+0x7c>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3307      	adds	r3, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <AddStruct+0x90>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2201      	movs	r2, #1
 80007f2:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	3307      	adds	r3, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <AddStruct+0xa4>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3307      	adds	r3, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 0320 	and.w	r3, r3, #32
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <AddStruct+0xb8>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2201      	movs	r2, #1
 800081a:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	3307      	adds	r3, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <AddStruct+0xcc>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3307      	adds	r3, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b25b      	sxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	da02      	bge.n	8000842 <AddStruct+0xde>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	3308      	adds	r3, #8
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <AddStruct+0xf2>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3308      	adds	r3, #8
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <AddStruct+0x106>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	3308      	adds	r3, #8
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <AddStruct+0x11a>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3308      	adds	r3, #8
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <AddStruct+0x12e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	3308      	adds	r3, #8
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <AddStruct+0x142>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	3308      	adds	r3, #8
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <AddStruct+0x156>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	3308      	adds	r3, #8
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <AddStruct+0x16a>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	3308      	adds	r3, #8
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da03      	bge.n	80008e2 <AddStruct+0x17e>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2201      	movs	r2, #1
 80008de:	755a      	strb	r2, [r3, #21]

	return;
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
}
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <StructInit>:

void StructInit(getdata* Udata){
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	755a      	strb	r2, [r3, #21]

	return;
 8000976:	bf00      	nop
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <AllShow>:

void AllShow(getdata Udata){
 8000984:	b084      	sub	sp, #16
 8000986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800098a:	b0a0      	sub	sp, #128	@ 0x80
 800098c:	af14      	add	r7, sp, #80	@ 0x50
 800098e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"SHARE:%d "
			"OPTIONS:%d "
			"PS:%d "
			"TOUCHPAD:%d"
			"\r\n"
			,Udata.LX
 8000996:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
	printf("LX:%3d "
 800099a:	469c      	mov	ip, r3
			,Udata.LY
 800099c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
	printf("LX:%3d "
 80009a0:	469e      	mov	lr, r3
			,Udata.L2
 80009a2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
	printf("LX:%3d "
 80009a6:	4698      	mov	r8, r3
			,Udata.RX
 80009a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
	printf("LX:%3d "
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			,Udata.RY
 80009ae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
	printf("LX:%3d "
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			,Udata.R2
 80009b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
	printf("LX:%3d "
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
			,Udata.TRIANGLE
 80009ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
	printf("LX:%3d "
 80009be:	623b      	str	r3, [r7, #32]
			,Udata.CIRCLE
 80009c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
	printf("LX:%3d "
 80009c4:	61fb      	str	r3, [r7, #28]
			,Udata.CROSS
 80009c6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	printf("LX:%3d "
 80009ca:	61bb      	str	r3, [r7, #24]
			,Udata.SQUARE
 80009cc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	printf("LX:%3d "
 80009d0:	617b      	str	r3, [r7, #20]
			,Udata.UP
 80009d2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	printf("LX:%3d "
 80009d6:	613b      	str	r3, [r7, #16]
			,Udata.RIGHT
 80009d8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
	printf("LX:%3d "
 80009dc:	60fb      	str	r3, [r7, #12]
			,Udata.DOWN
 80009de:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
	printf("LX:%3d "
 80009e2:	60bb      	str	r3, [r7, #8]
			,Udata.LEFT
 80009e4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
	printf("LX:%3d "
 80009e8:	607b      	str	r3, [r7, #4]
			,Udata.L1
 80009ea:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
	printf("LX:%3d "
 80009ee:	603b      	str	r3, [r7, #0]
			,Udata.L3
 80009f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
	printf("LX:%3d "
 80009f4:	461e      	mov	r6, r3
			,Udata.R1
 80009f6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
	printf("LX:%3d "
 80009fa:	461d      	mov	r5, r3
			,Udata.R3
 80009fc:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
	printf("LX:%3d "
 8000a00:	461c      	mov	r4, r3
			,Udata.SHARE
 8000a02:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
	printf("LX:%3d "
 8000a06:	4618      	mov	r0, r3
			,Udata.OPTIONS
 8000a08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
	printf("LX:%3d "
 8000a0c:	4619      	mov	r1, r3
			,Udata.PS
 8000a0e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
	printf("LX:%3d "
 8000a12:	461a      	mov	r2, r3
			,Udata.TOUCHPAD
 8000a14:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
	printf("LX:%3d "
 8000a18:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a1a:	9211      	str	r2, [sp, #68]	@ 0x44
 8000a1c:	9110      	str	r1, [sp, #64]	@ 0x40
 8000a1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8000a20:	940e      	str	r4, [sp, #56]	@ 0x38
 8000a22:	950d      	str	r5, [sp, #52]	@ 0x34
 8000a24:	960c      	str	r6, [sp, #48]	@ 0x30
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	9208      	str	r2, [sp, #32]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	9207      	str	r2, [sp, #28]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	9206      	str	r2, [sp, #24]
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	9205      	str	r2, [sp, #20]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	9204      	str	r2, [sp, #16]
 8000a46:	6a3a      	ldr	r2, [r7, #32]
 8000a48:	9203      	str	r2, [sp, #12]
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4c:	9202      	str	r2, [sp, #8]
 8000a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a50:	9201      	str	r2, [sp, #4]
 8000a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4643      	mov	r3, r8
 8000a58:	4672      	mov	r2, lr
 8000a5a:	4661      	mov	r1, ip
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <AllShow+0xec>)
 8000a5e:	f003 fb17 	bl	8004090 <iprintf>
			);

	return;
 8000a62:	bf00      	nop
}
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	08004f08 	.word	0x08004f08

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fbcf 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f869 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f000 f97d 	bl	8000d80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a86:	f000 f927 	bl	8000cd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a8a:	f000 f94f 	bl	8000d2c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a8e:	f000 f8c1 	bl	8000c14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 8000a92:	4828      	ldr	r0, [pc, #160]	@ (8000b34 <main+0xc0>)
 8000a94:	f7ff fda2 	bl	80005dc <STprintf>
  unsigned int FAFcount = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4826      	ldr	r0, [pc, #152]	@ (8000b38 <main+0xc4>)
 8000aa0:	f001 fd56 	bl	8002550 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart1);
 8000aa4:	4825      	ldr	r0, [pc, #148]	@ (8000b3c <main+0xc8>)
 8000aa6:	f7ff fdc5 	bl	8000634 <getDataIT>
//	  AllShow(data);
	  printf("%d %d \r\n",FAF,FAFcount);
 8000aaa:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <main+0xcc>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4824      	ldr	r0, [pc, #144]	@ (8000b44 <main+0xd0>)
 8000ab4:	f003 faec 	bl	8004090 <iprintf>
	  if(FAF == 1){
 8000ab8:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <main+0xcc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d020      	beq.n	8000b02 <main+0x8e>
		  FAFcount = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
		  AllShow(data);
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <main+0xd4>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4616      	mov	r6, r2
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4611      	mov	r1, r2
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	4615      	mov	r5, r2
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	4614      	mov	r4, r2
 8000ad6:	466a      	mov	r2, sp
 8000ad8:	3310      	adds	r3, #16
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	6010      	str	r0, [r2, #0]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	8093      	strh	r3, [r2, #4]
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	462a      	mov	r2, r5
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	f7ff ff4c 	bl	8000984 <AllShow>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,data.LY);
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <main+0xd4>)
 8000aee:	785a      	ldrb	r2, [r3, #1]
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <main+0xc4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	63da      	str	r2, [r3, #60]	@ 0x3c
		  HAL_GPIO_WritePin(PA, P0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	4814      	ldr	r0, [pc, #80]	@ (8000b4c <main+0xd8>)
 8000afc:	f000 ff5c 	bl	80019b8 <HAL_GPIO_WritePin>
 8000b00:	e7cc      	b.n	8000a9c <main+0x28>
	  }else{
//		  printf("\r\n");
		  FAFcount++;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
		  if(FAFcount >= TIMEOUT_MAX * 10){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b63      	cmp	r3, #99	@ 0x63
 8000b0c:	d9c6      	bls.n	8000a9c <main+0x28>

			  __HAL_TIM_SET_COMPARE(&htim3,TIMCH_3,0);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <main+0xc4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	63da      	str	r2, [r3, #60]	@ 0x3c
			  HAL_GPIO_WritePin(GPIOxA, GPIO_Pin_0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <main+0xd8>)
 8000b1c:	f000 ff4c 	bl	80019b8 <HAL_GPIO_WritePin>
			  FAFcount = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
			  printf("main timeout ");
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <main+0xdc>)
 8000b26:	f003 fab3 	bl	8004090 <iprintf>
			  HAL_Delay(500);
 8000b2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2e:	f000 fbe7 	bl	8001300 <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000b32:	e7b3      	b.n	8000a9c <main+0x28>
 8000b34:	20000148 	.word	0x20000148
 8000b38:	200000b8 	.word	0x200000b8
 8000b3c:	20000100 	.word	0x20000100
 8000b40:	20000095 	.word	0x20000095
 8000b44:	08005070 	.word	0x08005070
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	0800507c 	.word	0x0800507c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	@ 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fc3a 	bl	80043dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 f9d3 	bl	8001f74 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bd4:	f000 f916 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fefa 	bl	80019ec <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 f901 	bl	8000e04 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c36:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c38:	4a26      	ldr	r2, [pc, #152]	@ (8000cd4 <MX_TIM3_Init+0xc0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c3e:	2253      	movs	r2, #83	@ 0x53
 8000c40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5c:	481c      	ldr	r0, [pc, #112]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c5e:	f001 fc27 	bl	80024b0 <HAL_TIM_PWM_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f8cc 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000c7c:	f002 f874 	bl	8002d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c86:	f000 f8bd 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8a:	2360      	movs	r3, #96	@ 0x60
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000ca2:	f001 fd1d 	bl	80026e0 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cac:	f000 f8aa 	bl	8000e04 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	69da      	ldr	r2, [r3, #28]
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0208 	bic.w	r2, r2, #8
 8000cbe:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc0:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <MX_TIM3_Init+0xbc>)
 8000cc2:	f000 f8ef 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000b8 	.word	0x200000b8
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <MX_USART1_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d10:	f002 f8a6 	bl	8002e60 <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f000 f873 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000100 	.word	0x20000100
 8000d28:	40011000 	.word	0x40011000

08000d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART2_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d38:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f002 f87c 	bl	8002e60 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f849 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000148 	.word	0x20000148
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_GPIO_Init+0x7c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <MX_GPIO_Init+0x80>)
 8000dd4:	f000 fdf0 	bl	80019b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_GPIO_Init+0x80>)
 8000df0:	f000 fc4e 	bl	8001690 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_TIM_PWM_MspInit+0x40>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d11d      	bne.n	8000f02 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_TIM_MspPostInit+0x70>)
 8000efe:	f000 fbc7 	bl	8001690 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400

08000f18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a36      	ldr	r2, [pc, #216]	@ (8001010 <HAL_UART_MspInit+0xf8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d135      	bne.n	8000fa6 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b35      	ldr	r3, [pc, #212]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	4a34      	ldr	r2, [pc, #208]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4a:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4822      	ldr	r0, [pc, #136]	@ (8001018 <HAL_UART_MspInit+0x100>)
 8000f90:	f000 fb7e 	bl	8001690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2025      	movs	r0, #37	@ 0x25
 8000f9a:	f000 fab0 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f9e:	2025      	movs	r0, #37	@ 0x25
 8000fa0:	f000 fac9 	bl	8001536 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa4:	e030      	b.n	8001008 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <HAL_UART_MspInit+0x104>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d12b      	bne.n	8001008 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_UART_MspInit+0xfc>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_UART_MspInit+0x100>)
 8001004:	f000 fb44 	bl	8001690 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3730      	adds	r7, #48	@ 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40011000 	.word	0x40011000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40004400 	.word	0x40004400

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 f923 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <USART1_IRQHandler+0x10>)
 8001086:	f001 ffeb 	bl	8003060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000100 	.word	0x20000100

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f6:	605a      	str	r2, [r3, #4]
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_isatty>:

int _isatty(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 f986 	bl	8004478 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	20000190 	.word	0x20000190
 80011a0:	200002e8 	.word	0x200002e8

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001200 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011cc:	f7ff ffea 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 f945 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fc3b 	bl	8000a74 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800120c:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8001210:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001214:	200002e4 	.word	0x200002e4

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fdde 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f967 	bl	8001552 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000194 	.word	0x20000194

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000194 	.word	0x20000194

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff feb6 	bl	80012e8 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d008      	beq.n	800159c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e052      	b.n	8001642 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0216 	bic.w	r2, r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d103      	bne.n	80015cc <HAL_DMA_Abort+0x62>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0208 	bic.w	r2, r2, #8
 80015da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ec:	e013      	b.n	8001616 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ee:	f7ff fe7b 	bl	80012e8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d90c      	bls.n	8001616 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e015      	b.n	8001642 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1e4      	bne.n	80015ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	223f      	movs	r2, #63	@ 0x3f
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d004      	beq.n	8001668 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00c      	b.n	8001682 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2205      	movs	r2, #5
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	@ 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e165      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8154 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80ae 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b5d      	ldr	r3, [pc, #372]	@ (8001990 <HAL_GPIO_Init+0x300>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	4a5c      	ldr	r2, [pc, #368]	@ (8001990 <HAL_GPIO_Init+0x300>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001824:	6453      	str	r3, [r2, #68]	@ 0x44
 8001826:	4b5a      	ldr	r3, [pc, #360]	@ (8001990 <HAL_GPIO_Init+0x300>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a58      	ldr	r2, [pc, #352]	@ (8001994 <HAL_GPIO_Init+0x304>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4f      	ldr	r2, [pc, #316]	@ (8001998 <HAL_GPIO_Init+0x308>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d025      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4e      	ldr	r2, [pc, #312]	@ (800199c <HAL_GPIO_Init+0x30c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_GPIO_Init+0x216>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4d      	ldr	r2, [pc, #308]	@ (80019a0 <HAL_GPIO_Init+0x310>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x212>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4c      	ldr	r2, [pc, #304]	@ (80019a4 <HAL_GPIO_Init+0x314>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x20e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <HAL_GPIO_Init+0x318>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x20a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4a      	ldr	r2, [pc, #296]	@ (80019ac <HAL_GPIO_Init+0x31c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x206>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a49      	ldr	r2, [pc, #292]	@ (80019b0 <HAL_GPIO_Init+0x320>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x202>
 800188e:	2306      	movs	r3, #6
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 8001892:	2307      	movs	r3, #7
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4935      	ldr	r1, [pc, #212]	@ (8001994 <HAL_GPIO_Init+0x304>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b3a      	ldr	r3, [pc, #232]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a31      	ldr	r2, [pc, #196]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191e:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001942:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196c:	4a11      	ldr	r2, [pc, #68]	@ (80019b4 <HAL_GPIO_Init+0x324>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae96 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40013c00 	.word	0x40013c00

080019b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
 80019c4:	4613      	mov	r3, r2
 80019c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c8:	787b      	ldrb	r3, [r7, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d4:	e003      	b.n	80019de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0cc      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b68      	ldr	r3, [pc, #416]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d90c      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0b8      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	494d      	ldr	r1, [pc, #308]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d044      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d119      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e07f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e06f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e067      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4934      	ldr	r1, [pc, #208]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fc04 	bl	80012e8 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff fc00 	bl	80012e8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e04f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d20c      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e032      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4916      	ldr	r1, [pc, #88]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	490e      	ldr	r1, [pc, #56]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b72:	f000 f855 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490a      	ldr	r1, [pc, #40]	@ (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb64 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	0800508c 	.word	0x0800508c
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0a9b      	lsrs	r3, r3, #10
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	@ (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	0800509c 	.word	0x0800509c

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffdc 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0b5b      	lsrs	r3, r3, #13
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	@ (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	0800509c 	.word	0x0800509c

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b0a6      	sub	sp, #152	@ 0x98
 8001c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c46:	4bc8      	ldr	r3, [pc, #800]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	f200 817e 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x330>
 8001c54:	a201      	add	r2, pc, #4	@ (adr r2, 8001c5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001c91 	.word	0x08001c91
 8001c60:	08001f51 	.word	0x08001f51
 8001c64:	08001f51 	.word	0x08001f51
 8001c68:	08001f51 	.word	0x08001f51
 8001c6c:	08001c99 	.word	0x08001c99
 8001c70:	08001f51 	.word	0x08001f51
 8001c74:	08001f51 	.word	0x08001f51
 8001c78:	08001f51 	.word	0x08001f51
 8001c7c:	08001ca1 	.word	0x08001ca1
 8001c80:	08001f51 	.word	0x08001f51
 8001c84:	08001f51 	.word	0x08001f51
 8001c88:	08001f51 	.word	0x08001f51
 8001c8c:	08001e0b 	.word	0x08001e0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4bb6      	ldr	r3, [pc, #728]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c96:	e15f      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c98:	4bb5      	ldr	r3, [pc, #724]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c9e:	e15b      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4bb1      	ldr	r3, [pc, #708]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cac:	4bae      	ldr	r3, [pc, #696]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d031      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb8:	4bab      	ldr	r3, [pc, #684]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ccc:	2300      	movs	r3, #0
 8001cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cd0:	4ba7      	ldr	r3, [pc, #668]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	fb03 f202 	mul.w	r2, r3, r2
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4621      	mov	r1, r4
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4aa2      	ldr	r2, [pc, #648]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ce8:	4621      	mov	r1, r4
 8001cea:	fba1 1202 	umull	r1, r2, r1, r2
 8001cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001cf4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001cf6:	4413      	add	r3, r2
 8001cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d0c:	f7fe fad0 	bl	80002b0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d1a:	e064      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1c:	4b92      	ldr	r3, [pc, #584]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	2200      	movs	r2, #0
 8001d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d26:	657a      	str	r2, [r7, #84]	@ 0x54
 8001d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001d38:	4622      	mov	r2, r4
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	0159      	lsls	r1, r3, #5
 8001d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4a:	0150      	lsls	r0, r2, #5
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4621      	mov	r1, r4
 8001d52:	1a51      	subs	r1, r2, r1
 8001d54:	6139      	str	r1, [r7, #16]
 8001d56:	4629      	mov	r1, r5
 8001d58:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d6a:	4659      	mov	r1, fp
 8001d6c:	018b      	lsls	r3, r1, #6
 8001d6e:	4651      	mov	r1, sl
 8001d70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d74:	4651      	mov	r1, sl
 8001d76:	018a      	lsls	r2, r1, #6
 8001d78:	4651      	mov	r1, sl
 8001d7a:	ebb2 0801 	subs.w	r8, r2, r1
 8001d7e:	4659      	mov	r1, fp
 8001d80:	eb63 0901 	sbc.w	r9, r3, r1
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	eb18 0303 	adds.w	r3, r8, r3
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	462b      	mov	r3, r5
 8001da6:	eb49 0303 	adc.w	r3, r9, r3
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001db8:	4629      	mov	r1, r5
 8001dba:	028b      	lsls	r3, r1, #10
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	028a      	lsls	r2, r1, #10
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dce:	2200      	movs	r2, #0
 8001dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001dd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8001dd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dd8:	f7fe fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4613      	mov	r3, r2
 8001de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001de6:	4b60      	ldr	r3, [pc, #384]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	3301      	adds	r3, #1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001df8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e08:	e0a6      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0a:	4b57      	ldr	r3, [pc, #348]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e16:	4b54      	ldr	r3, [pc, #336]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d02a      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b51      	ldr	r3, [pc, #324]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e34:	2100      	movs	r1, #0
 8001e36:	4b4e      	ldr	r3, [pc, #312]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e38:	fb03 f201 	mul.w	r2, r3, r1
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	fb00 f303 	mul.w	r3, r0, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	4a4a      	ldr	r2, [pc, #296]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e46:	fba0 1202 	umull	r1, r2, r0, r2
 8001e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001e50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e52:	4413      	add	r3, r2
 8001e54:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e68:	f7fe fa22 	bl	80002b0 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e76:	e05b      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	0159      	lsls	r1, r3, #5
 8001ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea6:	0150      	lsls	r0, r2, #5
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4641      	mov	r1, r8
 8001eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	00eb      	lsls	r3, r5, #3
 8001ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee2:	00e2      	lsls	r2, r4, #3
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	4643      	mov	r3, r8
 8001eea:	18e3      	adds	r3, r4, r3
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb45 0303 	adc.w	r3, r5, r3
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	61fa      	str	r2, [r7, #28]
 8001f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f22:	f7fe f9c5 	bl	80002b0 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0f1b      	lsrs	r3, r3, #28
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f4e:	e003      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3798      	adds	r7, #152	@ 0x98
 8001f60:	46bd      	mov	sp, r7
 8001f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	017d7840 	.word	0x017d7840

08001f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e28d      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8083 	beq.w	800209a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f94:	4b94      	ldr	r3, [pc, #592]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d019      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fa0:	4b91      	ldr	r3, [pc, #580]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fac:	4b8e      	ldr	r3, [pc, #568]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b8b      	ldr	r3, [pc, #556]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d112      	bne.n	8001fec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	4b84      	ldr	r3, [pc, #528]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d05b      	beq.n	8002098 <HAL_RCC_OscConfig+0x124>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d157      	bne.n	8002098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e25a      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x90>
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a7b      	ldr	r2, [pc, #492]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xcc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xb4>
 800200e:	4b76      	ldr	r3, [pc, #472]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a75      	ldr	r2, [pc, #468]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b73      	ldr	r3, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a72      	ldr	r2, [pc, #456]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xcc>
 8002028:	4b6f      	ldr	r3, [pc, #444]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6e      	ldr	r2, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6b      	ldr	r2, [pc, #428]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff f94e 	bl	80012e8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f94a 	bl	80012e8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e21f      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b61      	ldr	r3, [pc, #388]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xdc>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f93a 	bl	80012e8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f936 	bl	80012e8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	@ 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e20b      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b57      	ldr	r3, [pc, #348]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x104>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d06f      	beq.n	8002186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020a6:	4b50      	ldr	r3, [pc, #320]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d017      	beq.n	80020e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020b2:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d105      	bne.n	80020ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020be:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d6:	4b44      	ldr	r3, [pc, #272]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x186>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1d3      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b3b      	ldr	r3, [pc, #236]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4937      	ldr	r1, [pc, #220]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e03a      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_RCC_OscConfig+0x278>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f8e3 	bl	80012e8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff f8df 	bl	80012e8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1b4      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b28      	ldr	r3, [pc, #160]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4925      	ldr	r1, [pc, #148]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_RCC_OscConfig+0x278>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f8c2 	bl	80012e8 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff f8be 	bl	80012e8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e193      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d036      	beq.n	8002200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_RCC_OscConfig+0x27c>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff f8a2 	bl	80012e8 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff f89e 	bl	80012e8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e173      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x234>
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f88b 	bl	80012e8 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	e00e      	b.n	80021f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff f887 	bl	80012e8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d907      	bls.n	80021f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e15c      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	42470000 	.word	0x42470000
 80021f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ea      	bne.n	80021d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8097 	beq.w	800233c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4b83      	ldr	r3, [pc, #524]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a7e      	ldr	r2, [pc, #504]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b7c      	ldr	r3, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <HAL_RCC_OscConfig+0x4b0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	4b76      	ldr	r3, [pc, #472]	@ (8002424 <HAL_RCC_OscConfig+0x4b0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	@ (8002424 <HAL_RCC_OscConfig+0x4b0>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7ff f847 	bl	80012e8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7ff f843 	bl	80012e8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e118      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b6c      	ldr	r3, [pc, #432]	@ (8002424 <HAL_RCC_OscConfig+0x4b0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x31e>
 8002284:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002288:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002290:	e01c      	b.n	80022cc <HAL_RCC_OscConfig+0x358>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x340>
 800229a:	4b61      	ldr	r3, [pc, #388]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	4a60      	ldr	r2, [pc, #384]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0x358>
 80022b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	4a59      	ldr	r2, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c0:	4b57      	ldr	r3, [pc, #348]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c4:	4a56      	ldr	r2, [pc, #344]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff f808 	bl	80012e8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7ff f804 	bl	80012e8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0d7      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ee      	beq.n	80022dc <HAL_RCC_OscConfig+0x368>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe fff2 	bl	80012e8 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	e00a      	b.n	800231e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7fe ffee 	bl	80012e8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0c1      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	4b40      	ldr	r3, [pc, #256]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ee      	bne.n	8002308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	4a3a      	ldr	r2, [pc, #232]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80ad 	beq.w	80024a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d060      	beq.n	8002414 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d145      	bne.n	80023e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <HAL_RCC_OscConfig+0x4b4>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ffc2 	bl	80012e8 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ffbe 	bl	80012e8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e093      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	3b01      	subs	r3, #1
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	071b      	lsls	r3, r3, #28
 80023b2:	491b      	ldr	r1, [pc, #108]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x4b4>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe ff93 	bl	80012e8 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe ff8f 	bl	80012e8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e064      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x452>
 80023e4:	e05c      	b.n	80024a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_RCC_OscConfig+0x4b4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff7c 	bl	80012e8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe ff78 	bl	80012e8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04d      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x480>
 8002412:	e045      	b.n	80024a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e040      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000
 8002428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_RCC_OscConfig+0x538>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d030      	beq.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d129      	bne.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d122      	bne.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002464:	4293      	cmp	r3, r2
 8002466:	d119      	bne.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d10f      	bne.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e041      	b.n	8002546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fcc2 	bl	8000e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f000 f9b8 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_TIM_PWM_Start+0x24>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e022      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d109      	bne.n	800258e <HAL_TIM_PWM_Start+0x3e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e015      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d109      	bne.n	80025a8 <HAL_TIM_PWM_Start+0x58>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e008      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07c      	b.n	80026bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_PWM_Start+0x82>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025d0:	e013      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_PWM_Start+0x92>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025e0:	e00b      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_PWM_Start+0xa2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025f0:	e003      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fb8a 	bl	8002d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <HAL_TIM_PWM_Start+0x174>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIM_PWM_Start+0xcc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2c      	ldr	r2, [pc, #176]	@ (80026c8 <HAL_TIM_PWM_Start+0x178>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_TIM_PWM_Start+0xd0>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_TIM_PWM_Start+0xd2>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <HAL_TIM_PWM_Start+0x174>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002648:	d01d      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1f      	ldr	r2, [pc, #124]	@ (80026cc <HAL_TIM_PWM_Start+0x17c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <HAL_TIM_PWM_Start+0x180>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	@ (80026d4 <HAL_TIM_PWM_Start+0x184>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a16      	ldr	r2, [pc, #88]	@ (80026c8 <HAL_TIM_PWM_Start+0x178>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	@ (80026d8 <HAL_TIM_PWM_Start+0x188>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <HAL_TIM_PWM_Start+0x18c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d010      	beq.n	80026ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	e007      	b.n	80026ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010400 	.word	0x40010400
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40001800 	.word	0x40001800

080026e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0ae      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	f200 809f 	bhi.w	800284c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800270e:	a201      	add	r2, pc, #4	@ (adr r2, 8002714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002749 	.word	0x08002749
 8002718:	0800284d 	.word	0x0800284d
 800271c:	0800284d 	.word	0x0800284d
 8002720:	0800284d 	.word	0x0800284d
 8002724:	08002789 	.word	0x08002789
 8002728:	0800284d 	.word	0x0800284d
 800272c:	0800284d 	.word	0x0800284d
 8002730:	0800284d 	.word	0x0800284d
 8002734:	080027cb 	.word	0x080027cb
 8002738:	0800284d 	.word	0x0800284d
 800273c:	0800284d 	.word	0x0800284d
 8002740:	0800284d 	.word	0x0800284d
 8002744:	0800280b 	.word	0x0800280b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f934 	bl	80029bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0208 	orr.w	r2, r2, #8
 8002762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6999      	ldr	r1, [r3, #24]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	619a      	str	r2, [r3, #24]
      break;
 8002786:	e064      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f984 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6999      	ldr	r1, [r3, #24]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	021a      	lsls	r2, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]
      break;
 80027c8:	e043      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f9d9 	bl	8002b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0208 	orr.w	r2, r2, #8
 80027e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0204 	bic.w	r2, r2, #4
 80027f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69d9      	ldr	r1, [r3, #28]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]
      break;
 8002808:	e023      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fa2d 	bl	8002c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69d9      	ldr	r1, [r3, #28]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	021a      	lsls	r2, r3, #8
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	61da      	str	r2, [r3, #28]
      break;
 800284a:	e002      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	75fb      	strb	r3, [r7, #23]
      break;
 8002850:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a46      	ldr	r2, [pc, #280]	@ (8002990 <TIM_Base_SetConfig+0x12c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002882:	d00f      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <TIM_Base_SetConfig+0x130>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00b      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a42      	ldr	r2, [pc, #264]	@ (8002998 <TIM_Base_SetConfig+0x134>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a41      	ldr	r2, [pc, #260]	@ (800299c <TIM_Base_SetConfig+0x138>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a40      	ldr	r2, [pc, #256]	@ (80029a0 <TIM_Base_SetConfig+0x13c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <TIM_Base_SetConfig+0x12c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c4:	d027      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a32      	ldr	r2, [pc, #200]	@ (8002994 <TIM_Base_SetConfig+0x130>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d023      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a31      	ldr	r2, [pc, #196]	@ (8002998 <TIM_Base_SetConfig+0x134>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a30      	ldr	r2, [pc, #192]	@ (800299c <TIM_Base_SetConfig+0x138>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2f      	ldr	r2, [pc, #188]	@ (80029a0 <TIM_Base_SetConfig+0x13c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d017      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <TIM_Base_SetConfig+0x140>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <TIM_Base_SetConfig+0x144>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2c      	ldr	r2, [pc, #176]	@ (80029ac <TIM_Base_SetConfig+0x148>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <TIM_Base_SetConfig+0x14c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2a      	ldr	r2, [pc, #168]	@ (80029b4 <TIM_Base_SetConfig+0x150>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a29      	ldr	r2, [pc, #164]	@ (80029b8 <TIM_Base_SetConfig+0x154>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a10      	ldr	r2, [pc, #64]	@ (8002990 <TIM_Base_SetConfig+0x12c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xf8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <TIM_Base_SetConfig+0x13c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
  }
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40010400 	.word	0x40010400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800
 80029b0:	40001800 	.word	0x40001800
 80029b4:	40001c00 	.word	0x40001c00
 80029b8:	40002000 	.word	0x40002000

080029bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 0201 	bic.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0302 	bic.w	r3, r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <TIM_OC1_SetConfig+0xd8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d003      	beq.n	8002a20 <TIM_OC1_SetConfig+0x64>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <TIM_OC1_SetConfig+0xdc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10c      	bne.n	8002a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0308 	bic.w	r3, r3, #8
 8002a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	@ (8002a94 <TIM_OC1_SetConfig+0xd8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_OC1_SetConfig+0x8e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <TIM_OC1_SetConfig+0xdc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d111      	bne.n	8002a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010400 	.word	0x40010400

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0210 	bic.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <TIM_OC2_SetConfig+0xe4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_OC2_SetConfig+0x68>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <TIM_OC2_SetConfig+0xe8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10d      	bne.n	8002b20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a17      	ldr	r2, [pc, #92]	@ (8002b80 <TIM_OC2_SetConfig+0xe4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_OC2_SetConfig+0x94>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <TIM_OC2_SetConfig+0xe8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d113      	bne.n	8002b58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	621a      	str	r2, [r3, #32]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010400 	.word	0x40010400

08002b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a21      	ldr	r2, [pc, #132]	@ (8002c68 <TIM_OC3_SetConfig+0xe0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_OC3_SetConfig+0x66>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <TIM_OC3_SetConfig+0xe4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <TIM_OC3_SetConfig+0xe0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_OC3_SetConfig+0x92>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <TIM_OC3_SetConfig+0xe4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40010400 	.word	0x40010400

08002c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	031b      	lsls	r3, r3, #12
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <TIM_OC4_SetConfig+0xa4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_OC4_SetConfig+0x68>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <TIM_OC4_SetConfig+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d109      	bne.n	8002cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	019b      	lsls	r3, r3, #6
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	621a      	str	r2, [r3, #32]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40010400 	.word	0x40010400

08002d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1a      	ldr	r2, [r3, #32]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e05a      	b.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dcc:	d01d      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10c      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40001800 	.word	0x40001800

08002e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e042      	b.n	8002ef8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f846 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	@ 0x24
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fdbd 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d175      	bne.n	800300c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Transmit+0x2c>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e06e      	b.n	800300e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	@ 0x21
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe f9d3 	bl	80012e8 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f58:	d108      	bne.n	8002f6c <HAL_UART_Transmit+0x6c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e003      	b.n	8002f74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f74:	e02e      	b.n	8002fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	@ 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fb1f 	bl	80035c4 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03a      	b.n	800300e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e007      	b.n	8002fc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cb      	bne.n	8002f76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2140      	movs	r1, #64	@ 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 faeb 	bl	80035c4 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e006      	b.n	800300e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	4613      	mov	r3, r2
 8003022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d112      	bne.n	8003056 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Receive_IT+0x26>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e00b      	b.n	8003058 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	461a      	mov	r2, r3
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fb12 	bl	8003676 <UART_Start_Receive_IT>
 8003052:	4603      	mov	r3, r0
 8003054:	e000      	b.n	8003058 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b0ba      	sub	sp, #232	@ 0xe8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800309e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_UART_IRQHandler+0x66>
 80030b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fbf2 	bl	80038a8 <UART_Receive_IT>
      return;
 80030c4:	e25b      	b.n	800357e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80de 	beq.w	800328c <HAL_UART_IRQHandler+0x22c>
 80030d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80d1 	beq.w	800328c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xae>
 80030f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0xd2>
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
 800313e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f043 0208 	orr.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 81f2 	beq.w	8003574 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x14e>
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb7d 	bl	80038a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <HAL_UART_IRQHandler+0x17a>
 80031d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04f      	beq.n	800327a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa85 	bl	80036ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b40      	cmp	r3, #64	@ 0x40
 80031ec:	d141      	bne.n	8003272 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800320c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800321a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800321e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1d9      	bne.n	80031ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003246:	4a7e      	ldr	r2, [pc, #504]	@ (8003440 <HAL_UART_IRQHandler+0x3e0>)
 8003248:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe f9fb 	bl	800164a <HAL_DMA_Abort_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e00e      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f994 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	e00a      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f990 	bl	8003598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	e006      	b.n	8003288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f98c 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003286:	e175      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	bf00      	nop
    return;
 800328a:	e173      	b.n	8003574 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 814f 	bne.w	8003534 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8148 	beq.w	8003534 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8141 	beq.w	8003534 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	f040 80b6 	bne.w	8003444 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8145 	beq.w	8003578 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f080 813e 	bcs.w	8003578 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003302:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	f000 8088 	beq.w	8003422 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800332c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800333e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800334a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1d9      	bne.n	8003312 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800336e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003382:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003386:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800338a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e1      	bne.n	800335e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003404:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003406:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800340a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e3      	bne.n	80033e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe f8a4 	bl	800156a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003430:	b29b      	uxth	r3, r3
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	b29b      	uxth	r3, r3
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f8b7 	bl	80035ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800343e:	e09b      	b.n	8003578 <HAL_UART_IRQHandler+0x518>
 8003440:	080037b1 	.word	0x080037b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 808e 	beq.w	800357c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8089 	beq.w	800357c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800347a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800348e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003490:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800349c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e3      	bne.n	800346a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3314      	adds	r3, #20
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	623b      	str	r3, [r7, #32]
   return(result);
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e3      	bne.n	80034a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	69b9      	ldr	r1, [r7, #24]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	617b      	str	r3, [r7, #20]
   return(result);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003526:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f83d 	bl	80035ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003532:	e023      	b.n	800357c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_UART_IRQHandler+0x4f4>
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f943 	bl	80037d8 <UART_Transmit_IT>
    return;
 8003552:	e014      	b.n	800357e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <HAL_UART_IRQHandler+0x51e>
 8003560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f983 	bl	8003878 <UART_EndTransmit_IT>
    return;
 8003572:	e004      	b.n	800357e <HAL_UART_IRQHandler+0x51e>
    return;
 8003574:	bf00      	nop
 8003576:	e002      	b.n	800357e <HAL_UART_IRQHandler+0x51e>
      return;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_UART_IRQHandler+0x51e>
      return;
 800357c:	bf00      	nop
  }
}
 800357e:	37e8      	adds	r7, #232	@ 0xe8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d4:	e03b      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d037      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fd fe83 	bl	80012e8 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e03a      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d023      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b80      	cmp	r3, #128	@ 0x80
 800360a:	d020      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b40      	cmp	r3, #64	@ 0x40
 8003610:	d01d      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b08      	cmp	r3, #8
 800361e:	d116      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f857 	bl	80036ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2208      	movs	r2, #8
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0b4      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2222      	movs	r2, #34	@ 0x22
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b095      	sub	sp, #84	@ 0x54
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003712:	643a      	str	r2, [r7, #64]	@ 0x40
 8003714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	61fb      	str	r3, [r7, #28]
   return(result);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	2b01      	cmp	r3, #1
 8003760:	d119      	bne.n	8003796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	60bb      	str	r3, [r7, #8]
   return(result);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003782:	61ba      	str	r2, [r7, #24]
 8003784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6979      	ldr	r1, [r7, #20]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	613b      	str	r3, [r7, #16]
   return(result);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037a4:	bf00      	nop
 80037a6:	3754      	adds	r7, #84	@ 0x54
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff fee4 	bl	8003598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b21      	cmp	r3, #33	@ 0x21
 80037ea:	d13e      	bne.n	800386a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d114      	bne.n	8003820 <UART_Transmit_IT+0x48>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d110      	bne.n	8003820 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]
 800381e:	e008      	b.n	8003832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	1c59      	adds	r1, r3, #1
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6211      	str	r1, [r2, #32]
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fe73 	bl	8003584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b22      	cmp	r3, #34	@ 0x22
 80038ba:	f040 80ae 	bne.w	8003a1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c6:	d117      	bne.n	80038f8 <UART_Receive_IT+0x50>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d113      	bne.n	80038f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	1c9a      	adds	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f6:	e026      	b.n	8003946 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390a:	d007      	beq.n	800391c <UART_Receive_IT+0x74>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <UART_Receive_IT+0x82>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e008      	b.n	800393c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003956:	2b00      	cmp	r3, #0
 8003958:	d15d      	bne.n	8003a16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0220 	bic.w	r2, r2, #32
 8003968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	d135      	bne.n	8003a0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c6:	623a      	str	r2, [r7, #32]
 80039c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d10a      	bne.n	80039fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fdd1 	bl	80035ac <HAL_UARTEx_RxEventCallback>
 8003a0a:	e002      	b.n	8003a12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fe25 	bl	800065c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e002      	b.n	8003a1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3730      	adds	r7, #48	@ 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	@ 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	ea40 0301 	orr.w	r3, r0, r1
 8003a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	ea40 0301 	orr.w	r3, r0, r1
 8003aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0xa0>
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <UART_SetConfig+0x2d0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe f898 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003acc:	e003      	b.n	8003ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe f87f 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	f040 810c 	bne.w	8003cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003afe:	415b      	adcs	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b06:	4621      	mov	r1, r4
 8003b08:	eb12 0801 	adds.w	r8, r2, r1
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0901 	adc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b52:	460b      	mov	r3, r1
 8003b54:	18db      	adds	r3, r3, r3
 8003b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b58:	4613      	mov	r3, r2
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b68:	f7fc fba2 	bl	80002b0 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b94:	415b      	adcs	r3, r3
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003be8:	460b      	mov	r3, r1
 8003bea:	18db      	adds	r3, r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bee:	4613      	mov	r3, r2
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bfe:	f7fc fb57 	bl	80002b0 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	@ 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cba:	f7fc faf9 	bl	80002b0 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	@ 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cec:	e106      	b.n	8003efc <UART_SetConfig+0x4d8>
 8003cee:	bf00      	nop
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6239      	str	r1, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1854      	adds	r4, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0501 	adc.w	r5, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d44:	464b      	mov	r3, r9
 8003d46:	eb45 0303 	adc.w	r3, r5, r3
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d74:	4621      	mov	r1, r4
 8003d76:	008a      	lsls	r2, r1, #2
 8003d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d7c:	f7fc fa98 	bl	80002b0 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b60      	ldr	r3, [pc, #384]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	61b9      	str	r1, [r7, #24]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e08:	4649      	mov	r1, r9
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e12:	4641      	mov	r1, r8
 8003e14:	008a      	lsls	r2, r1, #2
 8003e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e1a:	f7fc fa49 	bl	80002b0 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b38      	ldr	r3, [pc, #224]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	@ 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	@ 0x32
 8003e38:	4a33      	ldr	r2, [pc, #204]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	441c      	add	r4, r3
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e96:	464b      	mov	r3, r9
 8003e98:	460a      	mov	r2, r1
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eca:	f7fc f9f1 	bl	80002b0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	@ 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	@ 0x32
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4422      	add	r2, r4
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <std>:
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	b510      	push	{r4, lr}
 8003f10:	4604      	mov	r4, r0
 8003f12:	e9c0 3300 	strd	r3, r3, [r0]
 8003f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f1a:	6083      	str	r3, [r0, #8]
 8003f1c:	8181      	strh	r1, [r0, #12]
 8003f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f20:	81c2      	strh	r2, [r0, #14]
 8003f22:	6183      	str	r3, [r0, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	2208      	movs	r2, #8
 8003f28:	305c      	adds	r0, #92	@ 0x5c
 8003f2a:	f000 fa57 	bl	80043dc <memset>
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x58>)
 8003f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x5c>)
 8003f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <std+0x60>)
 8003f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x64>)
 8003f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <std+0x68>)
 8003f40:	6224      	str	r4, [r4, #32]
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d006      	beq.n	8003f54 <std+0x48>
 8003f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f4a:	4294      	cmp	r4, r2
 8003f4c:	d002      	beq.n	8003f54 <std+0x48>
 8003f4e:	33d0      	adds	r3, #208	@ 0xd0
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d105      	bne.n	8003f60 <std+0x54>
 8003f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5c:	f000 bab6 	b.w	80044cc <__retarget_lock_init_recursive>
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	bf00      	nop
 8003f64:	0800422d 	.word	0x0800422d
 8003f68:	0800424f 	.word	0x0800424f
 8003f6c:	08004287 	.word	0x08004287
 8003f70:	080042ab 	.word	0x080042ab
 8003f74:	20000198 	.word	0x20000198

08003f78 <stdio_exit_handler>:
 8003f78:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <stdio_exit_handler+0xc>)
 8003f7a:	4903      	ldr	r1, [pc, #12]	@ (8003f88 <stdio_exit_handler+0x10>)
 8003f7c:	4803      	ldr	r0, [pc, #12]	@ (8003f8c <stdio_exit_handler+0x14>)
 8003f7e:	f000 b869 	b.w	8004054 <_fwalk_sglue>
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	08004d79 	.word	0x08004d79
 8003f8c:	2000001c 	.word	0x2000001c

08003f90 <cleanup_stdio>:
 8003f90:	6841      	ldr	r1, [r0, #4]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <cleanup_stdio+0x34>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	b510      	push	{r4, lr}
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d001      	beq.n	8003fa0 <cleanup_stdio+0x10>
 8003f9c:	f000 feec 	bl	8004d78 <_fflush_r>
 8003fa0:	68a1      	ldr	r1, [r4, #8]
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <cleanup_stdio+0x38>)
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <cleanup_stdio+0x1e>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fee5 	bl	8004d78 <_fflush_r>
 8003fae:	68e1      	ldr	r1, [r4, #12]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <cleanup_stdio+0x3c>)
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d004      	beq.n	8003fc0 <cleanup_stdio+0x30>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 bedc 	b.w	8004d78 <_fflush_r>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000198 	.word	0x20000198
 8003fc8:	20000200 	.word	0x20000200
 8003fcc:	20000268 	.word	0x20000268

08003fd0 <global_stdio_init.part.0>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <global_stdio_init.part.0+0x30>)
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8004004 <global_stdio_init.part.0+0x34>)
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <global_stdio_init.part.0+0x38>)
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2104      	movs	r1, #4
 8003fe0:	f7ff ff94 	bl	8003f0c <std>
 8003fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2109      	movs	r1, #9
 8003fec:	f7ff ff8e 	bl	8003f0c <std>
 8003ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffa:	2112      	movs	r1, #18
 8003ffc:	f7ff bf86 	b.w	8003f0c <std>
 8004000:	200002d0 	.word	0x200002d0
 8004004:	20000198 	.word	0x20000198
 8004008:	08003f79 	.word	0x08003f79

0800400c <__sfp_lock_acquire>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_acquire+0x8>)
 800400e:	f000 ba5e 	b.w	80044ce <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	200002d9 	.word	0x200002d9

08004018 <__sfp_lock_release>:
 8004018:	4801      	ldr	r0, [pc, #4]	@ (8004020 <__sfp_lock_release+0x8>)
 800401a:	f000 ba59 	b.w	80044d0 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	200002d9 	.word	0x200002d9

08004024 <__sinit>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	f7ff fff0 	bl	800400c <__sfp_lock_acquire>
 800402c:	6a23      	ldr	r3, [r4, #32]
 800402e:	b11b      	cbz	r3, 8004038 <__sinit+0x14>
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f7ff bff0 	b.w	8004018 <__sfp_lock_release>
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <__sinit+0x28>)
 800403a:	6223      	str	r3, [r4, #32]
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__sinit+0x2c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f5      	bne.n	8004030 <__sinit+0xc>
 8004044:	f7ff ffc4 	bl	8003fd0 <global_stdio_init.part.0>
 8004048:	e7f2      	b.n	8004030 <__sinit+0xc>
 800404a:	bf00      	nop
 800404c:	08003f91 	.word	0x08003f91
 8004050:	200002d0 	.word	0x200002d0

08004054 <_fwalk_sglue>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	4607      	mov	r7, r0
 800405a:	4688      	mov	r8, r1
 800405c:	4614      	mov	r4, r2
 800405e:	2600      	movs	r6, #0
 8004060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004064:	f1b9 0901 	subs.w	r9, r9, #1
 8004068:	d505      	bpl.n	8004076 <_fwalk_sglue+0x22>
 800406a:	6824      	ldr	r4, [r4, #0]
 800406c:	2c00      	cmp	r4, #0
 800406e:	d1f7      	bne.n	8004060 <_fwalk_sglue+0xc>
 8004070:	4630      	mov	r0, r6
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d907      	bls.n	800408c <_fwalk_sglue+0x38>
 800407c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004080:	3301      	adds	r3, #1
 8004082:	d003      	beq.n	800408c <_fwalk_sglue+0x38>
 8004084:	4629      	mov	r1, r5
 8004086:	4638      	mov	r0, r7
 8004088:	47c0      	blx	r8
 800408a:	4306      	orrs	r6, r0
 800408c:	3568      	adds	r5, #104	@ 0x68
 800408e:	e7e9      	b.n	8004064 <_fwalk_sglue+0x10>

08004090 <iprintf>:
 8004090:	b40f      	push	{r0, r1, r2, r3}
 8004092:	b507      	push	{r0, r1, r2, lr}
 8004094:	4906      	ldr	r1, [pc, #24]	@ (80040b0 <iprintf+0x20>)
 8004096:	ab04      	add	r3, sp, #16
 8004098:	6808      	ldr	r0, [r1, #0]
 800409a:	f853 2b04 	ldr.w	r2, [r3], #4
 800409e:	6881      	ldr	r1, [r0, #8]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	f000 fb41 	bl	8004728 <_vfiprintf_r>
 80040a6:	b003      	add	sp, #12
 80040a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040ac:	b004      	add	sp, #16
 80040ae:	4770      	bx	lr
 80040b0:	20000018 	.word	0x20000018

080040b4 <setbuf>:
 80040b4:	fab1 f281 	clz	r2, r1
 80040b8:	0952      	lsrs	r2, r2, #5
 80040ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040be:	0052      	lsls	r2, r2, #1
 80040c0:	f000 b800 	b.w	80040c4 <setvbuf>

080040c4 <setvbuf>:
 80040c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040c8:	461d      	mov	r5, r3
 80040ca:	4b57      	ldr	r3, [pc, #348]	@ (8004228 <setvbuf+0x164>)
 80040cc:	681f      	ldr	r7, [r3, #0]
 80040ce:	4604      	mov	r4, r0
 80040d0:	460e      	mov	r6, r1
 80040d2:	4690      	mov	r8, r2
 80040d4:	b127      	cbz	r7, 80040e0 <setvbuf+0x1c>
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	b913      	cbnz	r3, 80040e0 <setvbuf+0x1c>
 80040da:	4638      	mov	r0, r7
 80040dc:	f7ff ffa2 	bl	8004024 <__sinit>
 80040e0:	f1b8 0f02 	cmp.w	r8, #2
 80040e4:	d006      	beq.n	80040f4 <setvbuf+0x30>
 80040e6:	f1b8 0f01 	cmp.w	r8, #1
 80040ea:	f200 809a 	bhi.w	8004222 <setvbuf+0x15e>
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f2c0 8097 	blt.w	8004222 <setvbuf+0x15e>
 80040f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040f6:	07d9      	lsls	r1, r3, #31
 80040f8:	d405      	bmi.n	8004106 <setvbuf+0x42>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	059a      	lsls	r2, r3, #22
 80040fe:	d402      	bmi.n	8004106 <setvbuf+0x42>
 8004100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004102:	f000 f9e4 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004106:	4621      	mov	r1, r4
 8004108:	4638      	mov	r0, r7
 800410a:	f000 fe35 	bl	8004d78 <_fflush_r>
 800410e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004110:	b141      	cbz	r1, 8004124 <setvbuf+0x60>
 8004112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004116:	4299      	cmp	r1, r3
 8004118:	d002      	beq.n	8004120 <setvbuf+0x5c>
 800411a:	4638      	mov	r0, r7
 800411c:	f000 f9da 	bl	80044d4 <_free_r>
 8004120:	2300      	movs	r3, #0
 8004122:	6363      	str	r3, [r4, #52]	@ 0x34
 8004124:	2300      	movs	r3, #0
 8004126:	61a3      	str	r3, [r4, #24]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	d503      	bpl.n	8004138 <setvbuf+0x74>
 8004130:	6921      	ldr	r1, [r4, #16]
 8004132:	4638      	mov	r0, r7
 8004134:	f000 f9ce 	bl	80044d4 <_free_r>
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	f1b8 0f02 	cmp.w	r8, #2
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	d061      	beq.n	800420e <setvbuf+0x14a>
 800414a:	ab01      	add	r3, sp, #4
 800414c:	466a      	mov	r2, sp
 800414e:	4621      	mov	r1, r4
 8004150:	4638      	mov	r0, r7
 8004152:	f000 fe39 	bl	8004dc8 <__swhatbuf_r>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	4318      	orrs	r0, r3
 800415a:	81a0      	strh	r0, [r4, #12]
 800415c:	bb2d      	cbnz	r5, 80041aa <setvbuf+0xe6>
 800415e:	9d00      	ldr	r5, [sp, #0]
 8004160:	4628      	mov	r0, r5
 8004162:	f000 fa01 	bl	8004568 <malloc>
 8004166:	4606      	mov	r6, r0
 8004168:	2800      	cmp	r0, #0
 800416a:	d152      	bne.n	8004212 <setvbuf+0x14e>
 800416c:	f8dd 9000 	ldr.w	r9, [sp]
 8004170:	45a9      	cmp	r9, r5
 8004172:	d140      	bne.n	80041f6 <setvbuf+0x132>
 8004174:	f04f 35ff 	mov.w	r5, #4294967295
 8004178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	81a2      	strh	r2, [r4, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	60a2      	str	r2, [r4, #8]
 8004186:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800418a:	6022      	str	r2, [r4, #0]
 800418c:	6122      	str	r2, [r4, #16]
 800418e:	2201      	movs	r2, #1
 8004190:	6162      	str	r2, [r4, #20]
 8004192:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004194:	07d6      	lsls	r6, r2, #31
 8004196:	d404      	bmi.n	80041a2 <setvbuf+0xde>
 8004198:	0598      	lsls	r0, r3, #22
 800419a:	d402      	bmi.n	80041a2 <setvbuf+0xde>
 800419c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800419e:	f000 f997 	bl	80044d0 <__retarget_lock_release_recursive>
 80041a2:	4628      	mov	r0, r5
 80041a4:	b003      	add	sp, #12
 80041a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041aa:	2e00      	cmp	r6, #0
 80041ac:	d0d8      	beq.n	8004160 <setvbuf+0x9c>
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	b913      	cbnz	r3, 80041b8 <setvbuf+0xf4>
 80041b2:	4638      	mov	r0, r7
 80041b4:	f7ff ff36 	bl	8004024 <__sinit>
 80041b8:	f1b8 0f01 	cmp.w	r8, #1
 80041bc:	bf08      	it	eq
 80041be:	89a3      	ldrheq	r3, [r4, #12]
 80041c0:	6026      	str	r6, [r4, #0]
 80041c2:	bf04      	itt	eq
 80041c4:	f043 0301 	orreq.w	r3, r3, #1
 80041c8:	81a3      	strheq	r3, [r4, #12]
 80041ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ce:	f013 0208 	ands.w	r2, r3, #8
 80041d2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80041d6:	d01e      	beq.n	8004216 <setvbuf+0x152>
 80041d8:	07d9      	lsls	r1, r3, #31
 80041da:	bf41      	itttt	mi
 80041dc:	2200      	movmi	r2, #0
 80041de:	426d      	negmi	r5, r5
 80041e0:	60a2      	strmi	r2, [r4, #8]
 80041e2:	61a5      	strmi	r5, [r4, #24]
 80041e4:	bf58      	it	pl
 80041e6:	60a5      	strpl	r5, [r4, #8]
 80041e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041ea:	07d2      	lsls	r2, r2, #31
 80041ec:	d401      	bmi.n	80041f2 <setvbuf+0x12e>
 80041ee:	059b      	lsls	r3, r3, #22
 80041f0:	d513      	bpl.n	800421a <setvbuf+0x156>
 80041f2:	2500      	movs	r5, #0
 80041f4:	e7d5      	b.n	80041a2 <setvbuf+0xde>
 80041f6:	4648      	mov	r0, r9
 80041f8:	f000 f9b6 	bl	8004568 <malloc>
 80041fc:	4606      	mov	r6, r0
 80041fe:	2800      	cmp	r0, #0
 8004200:	d0b8      	beq.n	8004174 <setvbuf+0xb0>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	464d      	mov	r5, r9
 800420c:	e7cf      	b.n	80041ae <setvbuf+0xea>
 800420e:	2500      	movs	r5, #0
 8004210:	e7b2      	b.n	8004178 <setvbuf+0xb4>
 8004212:	46a9      	mov	r9, r5
 8004214:	e7f5      	b.n	8004202 <setvbuf+0x13e>
 8004216:	60a2      	str	r2, [r4, #8]
 8004218:	e7e6      	b.n	80041e8 <setvbuf+0x124>
 800421a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800421c:	f000 f958 	bl	80044d0 <__retarget_lock_release_recursive>
 8004220:	e7e7      	b.n	80041f2 <setvbuf+0x12e>
 8004222:	f04f 35ff 	mov.w	r5, #4294967295
 8004226:	e7bc      	b.n	80041a2 <setvbuf+0xde>
 8004228:	20000018 	.word	0x20000018

0800422c <__sread>:
 800422c:	b510      	push	{r4, lr}
 800422e:	460c      	mov	r4, r1
 8004230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004234:	f000 f8fc 	bl	8004430 <_read_r>
 8004238:	2800      	cmp	r0, #0
 800423a:	bfab      	itete	ge
 800423c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800423e:	89a3      	ldrhlt	r3, [r4, #12]
 8004240:	181b      	addge	r3, r3, r0
 8004242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004246:	bfac      	ite	ge
 8004248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800424a:	81a3      	strhlt	r3, [r4, #12]
 800424c:	bd10      	pop	{r4, pc}

0800424e <__swrite>:
 800424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	461f      	mov	r7, r3
 8004254:	898b      	ldrh	r3, [r1, #12]
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	4616      	mov	r6, r2
 800425e:	d505      	bpl.n	800426c <__swrite+0x1e>
 8004260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004264:	2302      	movs	r3, #2
 8004266:	2200      	movs	r2, #0
 8004268:	f000 f8d0 	bl	800440c <_lseek_r>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	4632      	mov	r2, r6
 800427a:	463b      	mov	r3, r7
 800427c:	4628      	mov	r0, r5
 800427e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004282:	f000 b8e7 	b.w	8004454 <_write_r>

08004286 <__sseek>:
 8004286:	b510      	push	{r4, lr}
 8004288:	460c      	mov	r4, r1
 800428a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428e:	f000 f8bd 	bl	800440c <_lseek_r>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	bf15      	itete	ne
 8004298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800429a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800429e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042a2:	81a3      	strheq	r3, [r4, #12]
 80042a4:	bf18      	it	ne
 80042a6:	81a3      	strhne	r3, [r4, #12]
 80042a8:	bd10      	pop	{r4, pc}

080042aa <__sclose>:
 80042aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ae:	f000 b89d 	b.w	80043ec <_close_r>

080042b2 <__swbuf_r>:
 80042b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b4:	460e      	mov	r6, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	4605      	mov	r5, r0
 80042ba:	b118      	cbz	r0, 80042c4 <__swbuf_r+0x12>
 80042bc:	6a03      	ldr	r3, [r0, #32]
 80042be:	b90b      	cbnz	r3, 80042c4 <__swbuf_r+0x12>
 80042c0:	f7ff feb0 	bl	8004024 <__sinit>
 80042c4:	69a3      	ldr	r3, [r4, #24]
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	071a      	lsls	r2, r3, #28
 80042cc:	d501      	bpl.n	80042d2 <__swbuf_r+0x20>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	b943      	cbnz	r3, 80042e4 <__swbuf_r+0x32>
 80042d2:	4621      	mov	r1, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 f82b 	bl	8004330 <__swsetup_r>
 80042da:	b118      	cbz	r0, 80042e4 <__swbuf_r+0x32>
 80042dc:	f04f 37ff 	mov.w	r7, #4294967295
 80042e0:	4638      	mov	r0, r7
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6922      	ldr	r2, [r4, #16]
 80042e8:	1a98      	subs	r0, r3, r2
 80042ea:	6963      	ldr	r3, [r4, #20]
 80042ec:	b2f6      	uxtb	r6, r6
 80042ee:	4283      	cmp	r3, r0
 80042f0:	4637      	mov	r7, r6
 80042f2:	dc05      	bgt.n	8004300 <__swbuf_r+0x4e>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 fd3e 	bl	8004d78 <_fflush_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d1ed      	bne.n	80042dc <__swbuf_r+0x2a>
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	3b01      	subs	r3, #1
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	701e      	strb	r6, [r3, #0]
 800430e:	6962      	ldr	r2, [r4, #20]
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	429a      	cmp	r2, r3
 8004314:	d004      	beq.n	8004320 <__swbuf_r+0x6e>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d5e1      	bpl.n	80042e0 <__swbuf_r+0x2e>
 800431c:	2e0a      	cmp	r6, #10
 800431e:	d1df      	bne.n	80042e0 <__swbuf_r+0x2e>
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 fd28 	bl	8004d78 <_fflush_r>
 8004328:	2800      	cmp	r0, #0
 800432a:	d0d9      	beq.n	80042e0 <__swbuf_r+0x2e>
 800432c:	e7d6      	b.n	80042dc <__swbuf_r+0x2a>
	...

08004330 <__swsetup_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <__swsetup_r+0xa8>)
 8004334:	4605      	mov	r5, r0
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	460c      	mov	r4, r1
 800433a:	b118      	cbz	r0, 8004344 <__swsetup_r+0x14>
 800433c:	6a03      	ldr	r3, [r0, #32]
 800433e:	b90b      	cbnz	r3, 8004344 <__swsetup_r+0x14>
 8004340:	f7ff fe70 	bl	8004024 <__sinit>
 8004344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004348:	0719      	lsls	r1, r3, #28
 800434a:	d422      	bmi.n	8004392 <__swsetup_r+0x62>
 800434c:	06da      	lsls	r2, r3, #27
 800434e:	d407      	bmi.n	8004360 <__swsetup_r+0x30>
 8004350:	2209      	movs	r2, #9
 8004352:	602a      	str	r2, [r5, #0]
 8004354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	f04f 30ff 	mov.w	r0, #4294967295
 800435e:	e033      	b.n	80043c8 <__swsetup_r+0x98>
 8004360:	0758      	lsls	r0, r3, #29
 8004362:	d512      	bpl.n	800438a <__swsetup_r+0x5a>
 8004364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004366:	b141      	cbz	r1, 800437a <__swsetup_r+0x4a>
 8004368:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800436c:	4299      	cmp	r1, r3
 800436e:	d002      	beq.n	8004376 <__swsetup_r+0x46>
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f8af 	bl	80044d4 <_free_r>
 8004376:	2300      	movs	r3, #0
 8004378:	6363      	str	r3, [r4, #52]	@ 0x34
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004380:	81a3      	strh	r3, [r4, #12]
 8004382:	2300      	movs	r3, #0
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	b94b      	cbnz	r3, 80043aa <__swsetup_r+0x7a>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a0:	d003      	beq.n	80043aa <__swsetup_r+0x7a>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 fd35 	bl	8004e14 <__smakebuf_r>
 80043aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ae:	f013 0201 	ands.w	r2, r3, #1
 80043b2:	d00a      	beq.n	80043ca <__swsetup_r+0x9a>
 80043b4:	2200      	movs	r2, #0
 80043b6:	60a2      	str	r2, [r4, #8]
 80043b8:	6962      	ldr	r2, [r4, #20]
 80043ba:	4252      	negs	r2, r2
 80043bc:	61a2      	str	r2, [r4, #24]
 80043be:	6922      	ldr	r2, [r4, #16]
 80043c0:	b942      	cbnz	r2, 80043d4 <__swsetup_r+0xa4>
 80043c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80043c6:	d1c5      	bne.n	8004354 <__swsetup_r+0x24>
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	0799      	lsls	r1, r3, #30
 80043cc:	bf58      	it	pl
 80043ce:	6962      	ldrpl	r2, [r4, #20]
 80043d0:	60a2      	str	r2, [r4, #8]
 80043d2:	e7f4      	b.n	80043be <__swsetup_r+0x8e>
 80043d4:	2000      	movs	r0, #0
 80043d6:	e7f7      	b.n	80043c8 <__swsetup_r+0x98>
 80043d8:	20000018 	.word	0x20000018

080043dc <memset>:
 80043dc:	4402      	add	r2, r0
 80043de:	4603      	mov	r3, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <_close_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d06      	ldr	r5, [pc, #24]	@ (8004408 <_close_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f7fc fe69 	bl	80010ce <_close>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_close_r+0x1a>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_close_r+0x1a>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	200002d4 	.word	0x200002d4

0800440c <_lseek_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	@ (800442c <_lseek_r+0x20>)
 8004410:	4604      	mov	r4, r0
 8004412:	4608      	mov	r0, r1
 8004414:	4611      	mov	r1, r2
 8004416:	2200      	movs	r2, #0
 8004418:	602a      	str	r2, [r5, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	f7fc fe7e 	bl	800111c <_lseek>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_lseek_r+0x1e>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_lseek_r+0x1e>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	200002d4 	.word	0x200002d4

08004430 <_read_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d07      	ldr	r5, [pc, #28]	@ (8004450 <_read_r+0x20>)
 8004434:	4604      	mov	r4, r0
 8004436:	4608      	mov	r0, r1
 8004438:	4611      	mov	r1, r2
 800443a:	2200      	movs	r2, #0
 800443c:	602a      	str	r2, [r5, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f7fc fe28 	bl	8001094 <_read>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_read_r+0x1e>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_read_r+0x1e>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	200002d4 	.word	0x200002d4

08004454 <_write_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4d07      	ldr	r5, [pc, #28]	@ (8004474 <_write_r+0x20>)
 8004458:	4604      	mov	r4, r0
 800445a:	4608      	mov	r0, r1
 800445c:	4611      	mov	r1, r2
 800445e:	2200      	movs	r2, #0
 8004460:	602a      	str	r2, [r5, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7fc f8d0 	bl	8000608 <_write>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_write_r+0x1e>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_write_r+0x1e>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200002d4 	.word	0x200002d4

08004478 <__errno>:
 8004478:	4b01      	ldr	r3, [pc, #4]	@ (8004480 <__errno+0x8>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000018 	.word	0x20000018

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	@ (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	@ (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	@ (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	@ (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 fd2a 	bl	8004ef0 <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	080050e0 	.word	0x080050e0
 80044c0:	080050e0 	.word	0x080050e0
 80044c4:	080050e0 	.word	0x080050e0
 80044c8:	080050e4 	.word	0x080050e4

080044cc <__retarget_lock_init_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_acquire_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <__retarget_lock_release_recursive>:
 80044d0:	4770      	bx	lr
	...

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d041      	beq.n	8004560 <_free_r+0x8c>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f000 f8e8 	bl	80046bc <__malloc_lock>
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <_free_r+0x90>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	b933      	cbnz	r3, 8004500 <_free_r+0x2c>
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f000 b8e4 	b.w	80046c8 <__malloc_unlock>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf01      	itttt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	1809      	addeq	r1, r1, r0
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	e7ed      	b.n	80044f2 <_free_r+0x1e>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x4c>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x42>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1850      	adds	r0, r2, r1
 8004524:	42a0      	cmp	r0, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x6c>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	4401      	add	r1, r0
 800452c:	1850      	adds	r0, r2, r1
 800452e:	4283      	cmp	r3, r0
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1e0      	bne.n	80044f6 <_free_r+0x22>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	4408      	add	r0, r1
 800453c:	6010      	str	r0, [r2, #0]
 800453e:	e7da      	b.n	80044f6 <_free_r+0x22>
 8004540:	d902      	bls.n	8004548 <_free_r+0x74>
 8004542:	230c      	movs	r3, #12
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	e7d6      	b.n	80044f6 <_free_r+0x22>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf04      	itt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	bf04      	itt	eq
 8004558:	1809      	addeq	r1, r1, r0
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6054      	str	r4, [r2, #4]
 800455e:	e7ca      	b.n	80044f6 <_free_r+0x22>
 8004560:	bd38      	pop	{r3, r4, r5, pc}
 8004562:	bf00      	nop
 8004564:	200002e0 	.word	0x200002e0

08004568 <malloc>:
 8004568:	4b02      	ldr	r3, [pc, #8]	@ (8004574 <malloc+0xc>)
 800456a:	4601      	mov	r1, r0
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f000 b825 	b.w	80045bc <_malloc_r>
 8004572:	bf00      	nop
 8004574:	20000018 	.word	0x20000018

08004578 <sbrk_aligned>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4e0f      	ldr	r6, [pc, #60]	@ (80045b8 <sbrk_aligned+0x40>)
 800457c:	460c      	mov	r4, r1
 800457e:	6831      	ldr	r1, [r6, #0]
 8004580:	4605      	mov	r5, r0
 8004582:	b911      	cbnz	r1, 800458a <sbrk_aligned+0x12>
 8004584:	f000 fca4 	bl	8004ed0 <_sbrk_r>
 8004588:	6030      	str	r0, [r6, #0]
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 fc9f 	bl	8004ed0 <_sbrk_r>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d103      	bne.n	800459e <sbrk_aligned+0x26>
 8004596:	f04f 34ff 	mov.w	r4, #4294967295
 800459a:	4620      	mov	r0, r4
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	1cc4      	adds	r4, r0, #3
 80045a0:	f024 0403 	bic.w	r4, r4, #3
 80045a4:	42a0      	cmp	r0, r4
 80045a6:	d0f8      	beq.n	800459a <sbrk_aligned+0x22>
 80045a8:	1a21      	subs	r1, r4, r0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 fc90 	bl	8004ed0 <_sbrk_r>
 80045b0:	3001      	adds	r0, #1
 80045b2:	d1f2      	bne.n	800459a <sbrk_aligned+0x22>
 80045b4:	e7ef      	b.n	8004596 <sbrk_aligned+0x1e>
 80045b6:	bf00      	nop
 80045b8:	200002dc 	.word	0x200002dc

080045bc <_malloc_r>:
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c0:	1ccd      	adds	r5, r1, #3
 80045c2:	f025 0503 	bic.w	r5, r5, #3
 80045c6:	3508      	adds	r5, #8
 80045c8:	2d0c      	cmp	r5, #12
 80045ca:	bf38      	it	cc
 80045cc:	250c      	movcc	r5, #12
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	4606      	mov	r6, r0
 80045d2:	db01      	blt.n	80045d8 <_malloc_r+0x1c>
 80045d4:	42a9      	cmp	r1, r5
 80045d6:	d904      	bls.n	80045e2 <_malloc_r+0x26>
 80045d8:	230c      	movs	r3, #12
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	2000      	movs	r0, #0
 80045de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046b8 <_malloc_r+0xfc>
 80045e6:	f000 f869 	bl	80046bc <__malloc_lock>
 80045ea:	f8d8 3000 	ldr.w	r3, [r8]
 80045ee:	461c      	mov	r4, r3
 80045f0:	bb44      	cbnz	r4, 8004644 <_malloc_r+0x88>
 80045f2:	4629      	mov	r1, r5
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7ff ffbf 	bl	8004578 <sbrk_aligned>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	4604      	mov	r4, r0
 80045fe:	d158      	bne.n	80046b2 <_malloc_r+0xf6>
 8004600:	f8d8 4000 	ldr.w	r4, [r8]
 8004604:	4627      	mov	r7, r4
 8004606:	2f00      	cmp	r7, #0
 8004608:	d143      	bne.n	8004692 <_malloc_r+0xd6>
 800460a:	2c00      	cmp	r4, #0
 800460c:	d04b      	beq.n	80046a6 <_malloc_r+0xea>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	4639      	mov	r1, r7
 8004612:	4630      	mov	r0, r6
 8004614:	eb04 0903 	add.w	r9, r4, r3
 8004618:	f000 fc5a 	bl	8004ed0 <_sbrk_r>
 800461c:	4581      	cmp	r9, r0
 800461e:	d142      	bne.n	80046a6 <_malloc_r+0xea>
 8004620:	6821      	ldr	r1, [r4, #0]
 8004622:	1a6d      	subs	r5, r5, r1
 8004624:	4629      	mov	r1, r5
 8004626:	4630      	mov	r0, r6
 8004628:	f7ff ffa6 	bl	8004578 <sbrk_aligned>
 800462c:	3001      	adds	r0, #1
 800462e:	d03a      	beq.n	80046a6 <_malloc_r+0xea>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	442b      	add	r3, r5
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	f8d8 3000 	ldr.w	r3, [r8]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	bb62      	cbnz	r2, 8004698 <_malloc_r+0xdc>
 800463e:	f8c8 7000 	str.w	r7, [r8]
 8004642:	e00f      	b.n	8004664 <_malloc_r+0xa8>
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	1b52      	subs	r2, r2, r5
 8004648:	d420      	bmi.n	800468c <_malloc_r+0xd0>
 800464a:	2a0b      	cmp	r2, #11
 800464c:	d917      	bls.n	800467e <_malloc_r+0xc2>
 800464e:	1961      	adds	r1, r4, r5
 8004650:	42a3      	cmp	r3, r4
 8004652:	6025      	str	r5, [r4, #0]
 8004654:	bf18      	it	ne
 8004656:	6059      	strne	r1, [r3, #4]
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	bf08      	it	eq
 800465c:	f8c8 1000 	streq.w	r1, [r8]
 8004660:	5162      	str	r2, [r4, r5]
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	4630      	mov	r0, r6
 8004666:	f000 f82f 	bl	80046c8 <__malloc_unlock>
 800466a:	f104 000b 	add.w	r0, r4, #11
 800466e:	1d23      	adds	r3, r4, #4
 8004670:	f020 0007 	bic.w	r0, r0, #7
 8004674:	1ac2      	subs	r2, r0, r3
 8004676:	bf1c      	itt	ne
 8004678:	1a1b      	subne	r3, r3, r0
 800467a:	50a3      	strne	r3, [r4, r2]
 800467c:	e7af      	b.n	80045de <_malloc_r+0x22>
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	42a3      	cmp	r3, r4
 8004682:	bf0c      	ite	eq
 8004684:	f8c8 2000 	streq.w	r2, [r8]
 8004688:	605a      	strne	r2, [r3, #4]
 800468a:	e7eb      	b.n	8004664 <_malloc_r+0xa8>
 800468c:	4623      	mov	r3, r4
 800468e:	6864      	ldr	r4, [r4, #4]
 8004690:	e7ae      	b.n	80045f0 <_malloc_r+0x34>
 8004692:	463c      	mov	r4, r7
 8004694:	687f      	ldr	r7, [r7, #4]
 8004696:	e7b6      	b.n	8004606 <_malloc_r+0x4a>
 8004698:	461a      	mov	r2, r3
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	42a3      	cmp	r3, r4
 800469e:	d1fb      	bne.n	8004698 <_malloc_r+0xdc>
 80046a0:	2300      	movs	r3, #0
 80046a2:	6053      	str	r3, [r2, #4]
 80046a4:	e7de      	b.n	8004664 <_malloc_r+0xa8>
 80046a6:	230c      	movs	r3, #12
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	4630      	mov	r0, r6
 80046ac:	f000 f80c 	bl	80046c8 <__malloc_unlock>
 80046b0:	e794      	b.n	80045dc <_malloc_r+0x20>
 80046b2:	6005      	str	r5, [r0, #0]
 80046b4:	e7d6      	b.n	8004664 <_malloc_r+0xa8>
 80046b6:	bf00      	nop
 80046b8:	200002e0 	.word	0x200002e0

080046bc <__malloc_lock>:
 80046bc:	4801      	ldr	r0, [pc, #4]	@ (80046c4 <__malloc_lock+0x8>)
 80046be:	f7ff bf06 	b.w	80044ce <__retarget_lock_acquire_recursive>
 80046c2:	bf00      	nop
 80046c4:	200002d8 	.word	0x200002d8

080046c8 <__malloc_unlock>:
 80046c8:	4801      	ldr	r0, [pc, #4]	@ (80046d0 <__malloc_unlock+0x8>)
 80046ca:	f7ff bf01 	b.w	80044d0 <__retarget_lock_release_recursive>
 80046ce:	bf00      	nop
 80046d0:	200002d8 	.word	0x200002d8

080046d4 <__sfputc_r>:
 80046d4:	6893      	ldr	r3, [r2, #8]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	b410      	push	{r4}
 80046dc:	6093      	str	r3, [r2, #8]
 80046de:	da08      	bge.n	80046f2 <__sfputc_r+0x1e>
 80046e0:	6994      	ldr	r4, [r2, #24]
 80046e2:	42a3      	cmp	r3, r4
 80046e4:	db01      	blt.n	80046ea <__sfputc_r+0x16>
 80046e6:	290a      	cmp	r1, #10
 80046e8:	d103      	bne.n	80046f2 <__sfputc_r+0x1e>
 80046ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ee:	f7ff bde0 	b.w	80042b2 <__swbuf_r>
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	1c58      	adds	r0, r3, #1
 80046f6:	6010      	str	r0, [r2, #0]
 80046f8:	7019      	strb	r1, [r3, #0]
 80046fa:	4608      	mov	r0, r1
 80046fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004700:	4770      	bx	lr

08004702 <__sfputs_r>:
 8004702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004704:	4606      	mov	r6, r0
 8004706:	460f      	mov	r7, r1
 8004708:	4614      	mov	r4, r2
 800470a:	18d5      	adds	r5, r2, r3
 800470c:	42ac      	cmp	r4, r5
 800470e:	d101      	bne.n	8004714 <__sfputs_r+0x12>
 8004710:	2000      	movs	r0, #0
 8004712:	e007      	b.n	8004724 <__sfputs_r+0x22>
 8004714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004718:	463a      	mov	r2, r7
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff ffda 	bl	80046d4 <__sfputc_r>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d1f3      	bne.n	800470c <__sfputs_r+0xa>
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004728 <_vfiprintf_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	460d      	mov	r5, r1
 800472e:	b09d      	sub	sp, #116	@ 0x74
 8004730:	4614      	mov	r4, r2
 8004732:	4698      	mov	r8, r3
 8004734:	4606      	mov	r6, r0
 8004736:	b118      	cbz	r0, 8004740 <_vfiprintf_r+0x18>
 8004738:	6a03      	ldr	r3, [r0, #32]
 800473a:	b90b      	cbnz	r3, 8004740 <_vfiprintf_r+0x18>
 800473c:	f7ff fc72 	bl	8004024 <__sinit>
 8004740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004742:	07d9      	lsls	r1, r3, #31
 8004744:	d405      	bmi.n	8004752 <_vfiprintf_r+0x2a>
 8004746:	89ab      	ldrh	r3, [r5, #12]
 8004748:	059a      	lsls	r2, r3, #22
 800474a:	d402      	bmi.n	8004752 <_vfiprintf_r+0x2a>
 800474c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800474e:	f7ff febe 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	d501      	bpl.n	800475c <_vfiprintf_r+0x34>
 8004758:	692b      	ldr	r3, [r5, #16]
 800475a:	b99b      	cbnz	r3, 8004784 <_vfiprintf_r+0x5c>
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff fde6 	bl	8004330 <__swsetup_r>
 8004764:	b170      	cbz	r0, 8004784 <_vfiprintf_r+0x5c>
 8004766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004768:	07dc      	lsls	r4, r3, #31
 800476a:	d504      	bpl.n	8004776 <_vfiprintf_r+0x4e>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	b01d      	add	sp, #116	@ 0x74
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	0598      	lsls	r0, r3, #22
 800477a:	d4f7      	bmi.n	800476c <_vfiprintf_r+0x44>
 800477c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800477e:	f7ff fea7 	bl	80044d0 <__retarget_lock_release_recursive>
 8004782:	e7f3      	b.n	800476c <_vfiprintf_r+0x44>
 8004784:	2300      	movs	r3, #0
 8004786:	9309      	str	r3, [sp, #36]	@ 0x24
 8004788:	2320      	movs	r3, #32
 800478a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800478e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004792:	2330      	movs	r3, #48	@ 0x30
 8004794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004944 <_vfiprintf_r+0x21c>
 8004798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800479c:	f04f 0901 	mov.w	r9, #1
 80047a0:	4623      	mov	r3, r4
 80047a2:	469a      	mov	sl, r3
 80047a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a8:	b10a      	cbz	r2, 80047ae <_vfiprintf_r+0x86>
 80047aa:	2a25      	cmp	r2, #37	@ 0x25
 80047ac:	d1f9      	bne.n	80047a2 <_vfiprintf_r+0x7a>
 80047ae:	ebba 0b04 	subs.w	fp, sl, r4
 80047b2:	d00b      	beq.n	80047cc <_vfiprintf_r+0xa4>
 80047b4:	465b      	mov	r3, fp
 80047b6:	4622      	mov	r2, r4
 80047b8:	4629      	mov	r1, r5
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7ff ffa1 	bl	8004702 <__sfputs_r>
 80047c0:	3001      	adds	r0, #1
 80047c2:	f000 80a7 	beq.w	8004914 <_vfiprintf_r+0x1ec>
 80047c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047c8:	445a      	add	r2, fp
 80047ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80047cc:	f89a 3000 	ldrb.w	r3, [sl]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 809f 	beq.w	8004914 <_vfiprintf_r+0x1ec>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295
 80047dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e0:	f10a 0a01 	add.w	sl, sl, #1
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80047ee:	4654      	mov	r4, sl
 80047f0:	2205      	movs	r2, #5
 80047f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f6:	4853      	ldr	r0, [pc, #332]	@ (8004944 <_vfiprintf_r+0x21c>)
 80047f8:	f7fb fd0a 	bl	8000210 <memchr>
 80047fc:	9a04      	ldr	r2, [sp, #16]
 80047fe:	b9d8      	cbnz	r0, 8004838 <_vfiprintf_r+0x110>
 8004800:	06d1      	lsls	r1, r2, #27
 8004802:	bf44      	itt	mi
 8004804:	2320      	movmi	r3, #32
 8004806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800480a:	0713      	lsls	r3, r2, #28
 800480c:	bf44      	itt	mi
 800480e:	232b      	movmi	r3, #43	@ 0x2b
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004814:	f89a 3000 	ldrb.w	r3, [sl]
 8004818:	2b2a      	cmp	r3, #42	@ 0x2a
 800481a:	d015      	beq.n	8004848 <_vfiprintf_r+0x120>
 800481c:	9a07      	ldr	r2, [sp, #28]
 800481e:	4654      	mov	r4, sl
 8004820:	2000      	movs	r0, #0
 8004822:	f04f 0c0a 	mov.w	ip, #10
 8004826:	4621      	mov	r1, r4
 8004828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800482c:	3b30      	subs	r3, #48	@ 0x30
 800482e:	2b09      	cmp	r3, #9
 8004830:	d94b      	bls.n	80048ca <_vfiprintf_r+0x1a2>
 8004832:	b1b0      	cbz	r0, 8004862 <_vfiprintf_r+0x13a>
 8004834:	9207      	str	r2, [sp, #28]
 8004836:	e014      	b.n	8004862 <_vfiprintf_r+0x13a>
 8004838:	eba0 0308 	sub.w	r3, r0, r8
 800483c:	fa09 f303 	lsl.w	r3, r9, r3
 8004840:	4313      	orrs	r3, r2
 8004842:	9304      	str	r3, [sp, #16]
 8004844:	46a2      	mov	sl, r4
 8004846:	e7d2      	b.n	80047ee <_vfiprintf_r+0xc6>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	1d19      	adds	r1, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	9103      	str	r1, [sp, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	bfbb      	ittet	lt
 8004854:	425b      	neglt	r3, r3
 8004856:	f042 0202 	orrlt.w	r2, r2, #2
 800485a:	9307      	strge	r3, [sp, #28]
 800485c:	9307      	strlt	r3, [sp, #28]
 800485e:	bfb8      	it	lt
 8004860:	9204      	strlt	r2, [sp, #16]
 8004862:	7823      	ldrb	r3, [r4, #0]
 8004864:	2b2e      	cmp	r3, #46	@ 0x2e
 8004866:	d10a      	bne.n	800487e <_vfiprintf_r+0x156>
 8004868:	7863      	ldrb	r3, [r4, #1]
 800486a:	2b2a      	cmp	r3, #42	@ 0x2a
 800486c:	d132      	bne.n	80048d4 <_vfiprintf_r+0x1ac>
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	9203      	str	r2, [sp, #12]
 8004876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800487a:	3402      	adds	r4, #2
 800487c:	9305      	str	r3, [sp, #20]
 800487e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004954 <_vfiprintf_r+0x22c>
 8004882:	7821      	ldrb	r1, [r4, #0]
 8004884:	2203      	movs	r2, #3
 8004886:	4650      	mov	r0, sl
 8004888:	f7fb fcc2 	bl	8000210 <memchr>
 800488c:	b138      	cbz	r0, 800489e <_vfiprintf_r+0x176>
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	eba0 000a 	sub.w	r0, r0, sl
 8004894:	2240      	movs	r2, #64	@ 0x40
 8004896:	4082      	lsls	r2, r0
 8004898:	4313      	orrs	r3, r2
 800489a:	3401      	adds	r4, #1
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a2:	4829      	ldr	r0, [pc, #164]	@ (8004948 <_vfiprintf_r+0x220>)
 80048a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048a8:	2206      	movs	r2, #6
 80048aa:	f7fb fcb1 	bl	8000210 <memchr>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d03f      	beq.n	8004932 <_vfiprintf_r+0x20a>
 80048b2:	4b26      	ldr	r3, [pc, #152]	@ (800494c <_vfiprintf_r+0x224>)
 80048b4:	bb1b      	cbnz	r3, 80048fe <_vfiprintf_r+0x1d6>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	3307      	adds	r3, #7
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	3308      	adds	r3, #8
 80048c0:	9303      	str	r3, [sp, #12]
 80048c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c4:	443b      	add	r3, r7
 80048c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c8:	e76a      	b.n	80047a0 <_vfiprintf_r+0x78>
 80048ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ce:	460c      	mov	r4, r1
 80048d0:	2001      	movs	r0, #1
 80048d2:	e7a8      	b.n	8004826 <_vfiprintf_r+0xfe>
 80048d4:	2300      	movs	r3, #0
 80048d6:	3401      	adds	r4, #1
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 0c0a 	mov.w	ip, #10
 80048e0:	4620      	mov	r0, r4
 80048e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e6:	3a30      	subs	r2, #48	@ 0x30
 80048e8:	2a09      	cmp	r2, #9
 80048ea:	d903      	bls.n	80048f4 <_vfiprintf_r+0x1cc>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0c6      	beq.n	800487e <_vfiprintf_r+0x156>
 80048f0:	9105      	str	r1, [sp, #20]
 80048f2:	e7c4      	b.n	800487e <_vfiprintf_r+0x156>
 80048f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f8:	4604      	mov	r4, r0
 80048fa:	2301      	movs	r3, #1
 80048fc:	e7f0      	b.n	80048e0 <_vfiprintf_r+0x1b8>
 80048fe:	ab03      	add	r3, sp, #12
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	462a      	mov	r2, r5
 8004904:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <_vfiprintf_r+0x228>)
 8004906:	a904      	add	r1, sp, #16
 8004908:	4630      	mov	r0, r6
 800490a:	f3af 8000 	nop.w
 800490e:	4607      	mov	r7, r0
 8004910:	1c78      	adds	r0, r7, #1
 8004912:	d1d6      	bne.n	80048c2 <_vfiprintf_r+0x19a>
 8004914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004916:	07d9      	lsls	r1, r3, #31
 8004918:	d405      	bmi.n	8004926 <_vfiprintf_r+0x1fe>
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	059a      	lsls	r2, r3, #22
 800491e:	d402      	bmi.n	8004926 <_vfiprintf_r+0x1fe>
 8004920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004922:	f7ff fdd5 	bl	80044d0 <__retarget_lock_release_recursive>
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	065b      	lsls	r3, r3, #25
 800492a:	f53f af1f 	bmi.w	800476c <_vfiprintf_r+0x44>
 800492e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004930:	e71e      	b.n	8004770 <_vfiprintf_r+0x48>
 8004932:	ab03      	add	r3, sp, #12
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462a      	mov	r2, r5
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <_vfiprintf_r+0x228>)
 800493a:	a904      	add	r1, sp, #16
 800493c:	4630      	mov	r0, r6
 800493e:	f000 f879 	bl	8004a34 <_printf_i>
 8004942:	e7e4      	b.n	800490e <_vfiprintf_r+0x1e6>
 8004944:	080050a4 	.word	0x080050a4
 8004948:	080050ae 	.word	0x080050ae
 800494c:	00000000 	.word	0x00000000
 8004950:	08004703 	.word	0x08004703
 8004954:	080050aa 	.word	0x080050aa

08004958 <_printf_common>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	4616      	mov	r6, r2
 800495e:	4698      	mov	r8, r3
 8004960:	688a      	ldr	r2, [r1, #8]
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004968:	4293      	cmp	r3, r2
 800496a:	bfb8      	it	lt
 800496c:	4613      	movlt	r3, r2
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004974:	4607      	mov	r7, r0
 8004976:	460c      	mov	r4, r1
 8004978:	b10a      	cbz	r2, 800497e <_printf_common+0x26>
 800497a:	3301      	adds	r3, #1
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	bf42      	ittt	mi
 8004984:	6833      	ldrmi	r3, [r6, #0]
 8004986:	3302      	addmi	r3, #2
 8004988:	6033      	strmi	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	f015 0506 	ands.w	r5, r5, #6
 8004990:	d106      	bne.n	80049a0 <_printf_common+0x48>
 8004992:	f104 0a19 	add.w	sl, r4, #25
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc26      	bgt.n	80049ee <_printf_common+0x96>
 80049a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	3b00      	subs	r3, #0
 80049a8:	bf18      	it	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	0692      	lsls	r2, r2, #26
 80049ae:	d42b      	bmi.n	8004a08 <_printf_common+0xb0>
 80049b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049b4:	4641      	mov	r1, r8
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c8      	blx	r9
 80049ba:	3001      	adds	r0, #1
 80049bc:	d01e      	beq.n	80049fc <_printf_common+0xa4>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	6922      	ldr	r2, [r4, #16]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf02      	ittt	eq
 80049ca:	68e5      	ldreq	r5, [r4, #12]
 80049cc:	6833      	ldreq	r3, [r6, #0]
 80049ce:	1aed      	subeq	r5, r5, r3
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	bf0c      	ite	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	2500      	movne	r5, #0
 80049da:	4293      	cmp	r3, r2
 80049dc:	bfc4      	itt	gt
 80049de:	1a9b      	subgt	r3, r3, r2
 80049e0:	18ed      	addgt	r5, r5, r3
 80049e2:	2600      	movs	r6, #0
 80049e4:	341a      	adds	r4, #26
 80049e6:	42b5      	cmp	r5, r6
 80049e8:	d11a      	bne.n	8004a20 <_printf_common+0xc8>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e008      	b.n	8004a00 <_printf_common+0xa8>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4652      	mov	r2, sl
 80049f2:	4641      	mov	r1, r8
 80049f4:	4638      	mov	r0, r7
 80049f6:	47c8      	blx	r9
 80049f8:	3001      	adds	r0, #1
 80049fa:	d103      	bne.n	8004a04 <_printf_common+0xac>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a04:	3501      	adds	r5, #1
 8004a06:	e7c6      	b.n	8004996 <_printf_common+0x3e>
 8004a08:	18e1      	adds	r1, r4, r3
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	2030      	movs	r0, #48	@ 0x30
 8004a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a12:	4422      	add	r2, r4
 8004a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	e7c7      	b.n	80049b0 <_printf_common+0x58>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4622      	mov	r2, r4
 8004a24:	4641      	mov	r1, r8
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c8      	blx	r9
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d0e6      	beq.n	80049fc <_printf_common+0xa4>
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7d9      	b.n	80049e6 <_printf_common+0x8e>
	...

08004a34 <_printf_i>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	7e0f      	ldrb	r7, [r1, #24]
 8004a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a3c:	2f78      	cmp	r7, #120	@ 0x78
 8004a3e:	4691      	mov	r9, r2
 8004a40:	4680      	mov	r8, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	469a      	mov	sl, r3
 8004a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a4a:	d807      	bhi.n	8004a5c <_printf_i+0x28>
 8004a4c:	2f62      	cmp	r7, #98	@ 0x62
 8004a4e:	d80a      	bhi.n	8004a66 <_printf_i+0x32>
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80d1 	beq.w	8004bf8 <_printf_i+0x1c4>
 8004a56:	2f58      	cmp	r7, #88	@ 0x58
 8004a58:	f000 80b8 	beq.w	8004bcc <_printf_i+0x198>
 8004a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a64:	e03a      	b.n	8004adc <_printf_i+0xa8>
 8004a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	d8f6      	bhi.n	8004a5c <_printf_i+0x28>
 8004a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_printf_i+0x40>)
 8004a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004a5d 	.word	0x08004a5d
 8004a80:	08004a5d 	.word	0x08004a5d
 8004a84:	08004a5d 	.word	0x08004a5d
 8004a88:	08004a5d 	.word	0x08004a5d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a5d 	.word	0x08004a5d
 8004a94:	08004a5d 	.word	0x08004a5d
 8004a98:	08004a5d 	.word	0x08004a5d
 8004a9c:	08004a5d 	.word	0x08004a5d
 8004aa0:	08004bdf 	.word	0x08004bdf
 8004aa4:	08004b0b 	.word	0x08004b0b
 8004aa8:	08004b99 	.word	0x08004b99
 8004aac:	08004a5d 	.word	0x08004a5d
 8004ab0:	08004a5d 	.word	0x08004a5d
 8004ab4:	08004c01 	.word	0x08004c01
 8004ab8:	08004a5d 	.word	0x08004a5d
 8004abc:	08004b0b 	.word	0x08004b0b
 8004ac0:	08004a5d 	.word	0x08004a5d
 8004ac4:	08004a5d 	.word	0x08004a5d
 8004ac8:	08004ba1 	.word	0x08004ba1
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6032      	str	r2, [r6, #0]
 8004ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09c      	b.n	8004c1a <_printf_i+0x1e6>
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	1d19      	adds	r1, r3, #4
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	0606      	lsls	r6, r0, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xbc>
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	e003      	b.n	8004af8 <_printf_i+0xc4>
 8004af0:	0645      	lsls	r5, r0, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xb8>
 8004af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	da03      	bge.n	8004b04 <_printf_i+0xd0>
 8004afc:	232d      	movs	r3, #45	@ 0x2d
 8004afe:	426d      	negs	r5, r5
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b04:	4858      	ldr	r0, [pc, #352]	@ (8004c68 <_printf_i+0x234>)
 8004b06:	230a      	movs	r3, #10
 8004b08:	e011      	b.n	8004b2e <_printf_i+0xfa>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	0608      	lsls	r0, r1, #24
 8004b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0xe8>
 8004b16:	0649      	lsls	r1, r1, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b1e:	4852      	ldr	r0, [pc, #328]	@ (8004c68 <_printf_i+0x234>)
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	bf14      	ite	ne
 8004b24:	230a      	movne	r3, #10
 8004b26:	2308      	moveq	r3, #8
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b2e:	6866      	ldr	r6, [r4, #4]
 8004b30:	60a6      	str	r6, [r4, #8]
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	db05      	blt.n	8004b42 <_printf_i+0x10e>
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	432e      	orrs	r6, r5
 8004b3a:	f021 0104 	bic.w	r1, r1, #4
 8004b3e:	6021      	str	r1, [r4, #0]
 8004b40:	d04b      	beq.n	8004bda <_printf_i+0x1a6>
 8004b42:	4616      	mov	r6, r2
 8004b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b48:	fb03 5711 	mls	r7, r3, r1, r5
 8004b4c:	5dc7      	ldrb	r7, [r0, r7]
 8004b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b52:	462f      	mov	r7, r5
 8004b54:	42bb      	cmp	r3, r7
 8004b56:	460d      	mov	r5, r1
 8004b58:	d9f4      	bls.n	8004b44 <_printf_i+0x110>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d10b      	bne.n	8004b76 <_printf_i+0x142>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	07df      	lsls	r7, r3, #31
 8004b62:	d508      	bpl.n	8004b76 <_printf_i+0x142>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	6861      	ldr	r1, [r4, #4]
 8004b68:	4299      	cmp	r1, r3
 8004b6a:	bfde      	ittt	le
 8004b6c:	2330      	movle	r3, #48	@ 0x30
 8004b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b76:	1b92      	subs	r2, r2, r6
 8004b78:	6122      	str	r2, [r4, #16]
 8004b7a:	f8cd a000 	str.w	sl, [sp]
 8004b7e:	464b      	mov	r3, r9
 8004b80:	aa03      	add	r2, sp, #12
 8004b82:	4621      	mov	r1, r4
 8004b84:	4640      	mov	r0, r8
 8004b86:	f7ff fee7 	bl	8004958 <_printf_common>
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d14a      	bne.n	8004c24 <_printf_i+0x1f0>
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b92:	b004      	add	sp, #16
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f043 0320 	orr.w	r3, r3, #32
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	4832      	ldr	r0, [pc, #200]	@ (8004c6c <_printf_i+0x238>)
 8004ba2:	2778      	movs	r7, #120	@ 0x78
 8004ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	6831      	ldr	r1, [r6, #0]
 8004bac:	061f      	lsls	r7, r3, #24
 8004bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bb2:	d402      	bmi.n	8004bba <_printf_i+0x186>
 8004bb4:	065f      	lsls	r7, r3, #25
 8004bb6:	bf48      	it	mi
 8004bb8:	b2ad      	uxthmi	r5, r5
 8004bba:	6031      	str	r1, [r6, #0]
 8004bbc:	07d9      	lsls	r1, r3, #31
 8004bbe:	bf44      	itt	mi
 8004bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc4:	6023      	strmi	r3, [r4, #0]
 8004bc6:	b11d      	cbz	r5, 8004bd0 <_printf_i+0x19c>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	e7ad      	b.n	8004b28 <_printf_i+0xf4>
 8004bcc:	4826      	ldr	r0, [pc, #152]	@ (8004c68 <_printf_i+0x234>)
 8004bce:	e7e9      	b.n	8004ba4 <_printf_i+0x170>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	e7f6      	b.n	8004bc8 <_printf_i+0x194>
 8004bda:	4616      	mov	r6, r2
 8004bdc:	e7bd      	b.n	8004b5a <_printf_i+0x126>
 8004bde:	6833      	ldr	r3, [r6, #0]
 8004be0:	6825      	ldr	r5, [r4, #0]
 8004be2:	6961      	ldr	r1, [r4, #20]
 8004be4:	1d18      	adds	r0, r3, #4
 8004be6:	6030      	str	r0, [r6, #0]
 8004be8:	062e      	lsls	r6, r5, #24
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	d501      	bpl.n	8004bf2 <_printf_i+0x1be>
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	e002      	b.n	8004bf8 <_printf_i+0x1c4>
 8004bf2:	0668      	lsls	r0, r5, #25
 8004bf4:	d5fb      	bpl.n	8004bee <_printf_i+0x1ba>
 8004bf6:	8019      	strh	r1, [r3, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	e7bc      	b.n	8004b7a <_printf_i+0x146>
 8004c00:	6833      	ldr	r3, [r6, #0]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	6032      	str	r2, [r6, #0]
 8004c06:	681e      	ldr	r6, [r3, #0]
 8004c08:	6862      	ldr	r2, [r4, #4]
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f7fb faff 	bl	8000210 <memchr>
 8004c12:	b108      	cbz	r0, 8004c18 <_printf_i+0x1e4>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	6060      	str	r0, [r4, #4]
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c22:	e7aa      	b.n	8004b7a <_printf_i+0x146>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	4632      	mov	r2, r6
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	47d0      	blx	sl
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d0ad      	beq.n	8004b8e <_printf_i+0x15a>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	079b      	lsls	r3, r3, #30
 8004c36:	d413      	bmi.n	8004c60 <_printf_i+0x22c>
 8004c38:	68e0      	ldr	r0, [r4, #12]
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	bfb8      	it	lt
 8004c40:	4618      	movlt	r0, r3
 8004c42:	e7a6      	b.n	8004b92 <_printf_i+0x15e>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4632      	mov	r2, r6
 8004c48:	4649      	mov	r1, r9
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	47d0      	blx	sl
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d09d      	beq.n	8004b8e <_printf_i+0x15a>
 8004c52:	3501      	adds	r5, #1
 8004c54:	68e3      	ldr	r3, [r4, #12]
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	1a5b      	subs	r3, r3, r1
 8004c5a:	42ab      	cmp	r3, r5
 8004c5c:	dcf2      	bgt.n	8004c44 <_printf_i+0x210>
 8004c5e:	e7eb      	b.n	8004c38 <_printf_i+0x204>
 8004c60:	2500      	movs	r5, #0
 8004c62:	f104 0619 	add.w	r6, r4, #25
 8004c66:	e7f5      	b.n	8004c54 <_printf_i+0x220>
 8004c68:	080050b5 	.word	0x080050b5
 8004c6c:	080050c6 	.word	0x080050c6

08004c70 <__sflush_r>:
 8004c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	0716      	lsls	r6, r2, #28
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	d454      	bmi.n	8004d2a <__sflush_r+0xba>
 8004c80:	684b      	ldr	r3, [r1, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc02      	bgt.n	8004c8c <__sflush_r+0x1c>
 8004c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dd48      	ble.n	8004d1e <__sflush_r+0xae>
 8004c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d045      	beq.n	8004d1e <__sflush_r+0xae>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c98:	682f      	ldr	r7, [r5, #0]
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	d030      	beq.n	8004d02 <__sflush_r+0x92>
 8004ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	0759      	lsls	r1, r3, #29
 8004ca6:	d505      	bpl.n	8004cb4 <__sflush_r+0x44>
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cae:	b10b      	cbz	r3, 8004cb4 <__sflush_r+0x44>
 8004cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cb8:	6a21      	ldr	r1, [r4, #32]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b0      	blx	r6
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	d106      	bne.n	8004cd2 <__sflush_r+0x62>
 8004cc4:	6829      	ldr	r1, [r5, #0]
 8004cc6:	291d      	cmp	r1, #29
 8004cc8:	d82b      	bhi.n	8004d22 <__sflush_r+0xb2>
 8004cca:	4a2a      	ldr	r2, [pc, #168]	@ (8004d74 <__sflush_r+0x104>)
 8004ccc:	40ca      	lsrs	r2, r1
 8004cce:	07d6      	lsls	r6, r2, #31
 8004cd0:	d527      	bpl.n	8004d22 <__sflush_r+0xb2>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	6062      	str	r2, [r4, #4]
 8004cd6:	04d9      	lsls	r1, r3, #19
 8004cd8:	6922      	ldr	r2, [r4, #16]
 8004cda:	6022      	str	r2, [r4, #0]
 8004cdc:	d504      	bpl.n	8004ce8 <__sflush_r+0x78>
 8004cde:	1c42      	adds	r2, r0, #1
 8004ce0:	d101      	bne.n	8004ce6 <__sflush_r+0x76>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	b903      	cbnz	r3, 8004ce8 <__sflush_r+0x78>
 8004ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cea:	602f      	str	r7, [r5, #0]
 8004cec:	b1b9      	cbz	r1, 8004d1e <__sflush_r+0xae>
 8004cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	d002      	beq.n	8004cfc <__sflush_r+0x8c>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7ff fbec 	bl	80044d4 <_free_r>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d00:	e00d      	b.n	8004d1e <__sflush_r+0xae>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b0      	blx	r6
 8004d08:	4602      	mov	r2, r0
 8004d0a:	1c50      	adds	r0, r2, #1
 8004d0c:	d1c9      	bne.n	8004ca2 <__sflush_r+0x32>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0c6      	beq.n	8004ca2 <__sflush_r+0x32>
 8004d14:	2b1d      	cmp	r3, #29
 8004d16:	d001      	beq.n	8004d1c <__sflush_r+0xac>
 8004d18:	2b16      	cmp	r3, #22
 8004d1a:	d11e      	bne.n	8004d5a <__sflush_r+0xea>
 8004d1c:	602f      	str	r7, [r5, #0]
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e022      	b.n	8004d68 <__sflush_r+0xf8>
 8004d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	e01b      	b.n	8004d62 <__sflush_r+0xf2>
 8004d2a:	690f      	ldr	r7, [r1, #16]
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	d0f6      	beq.n	8004d1e <__sflush_r+0xae>
 8004d30:	0793      	lsls	r3, r2, #30
 8004d32:	680e      	ldr	r6, [r1, #0]
 8004d34:	bf08      	it	eq
 8004d36:	694b      	ldreq	r3, [r1, #20]
 8004d38:	600f      	str	r7, [r1, #0]
 8004d3a:	bf18      	it	ne
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	eba6 0807 	sub.w	r8, r6, r7
 8004d42:	608b      	str	r3, [r1, #8]
 8004d44:	f1b8 0f00 	cmp.w	r8, #0
 8004d48:	dde9      	ble.n	8004d1e <__sflush_r+0xae>
 8004d4a:	6a21      	ldr	r1, [r4, #32]
 8004d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d4e:	4643      	mov	r3, r8
 8004d50:	463a      	mov	r2, r7
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b0      	blx	r6
 8004d56:	2800      	cmp	r0, #0
 8004d58:	dc08      	bgt.n	8004d6c <__sflush_r+0xfc>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d6c:	4407      	add	r7, r0
 8004d6e:	eba8 0800 	sub.w	r8, r8, r0
 8004d72:	e7e7      	b.n	8004d44 <__sflush_r+0xd4>
 8004d74:	20400001 	.word	0x20400001

08004d78 <_fflush_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	b913      	cbnz	r3, 8004d88 <_fflush_r+0x10>
 8004d82:	2500      	movs	r5, #0
 8004d84:	4628      	mov	r0, r5
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	b118      	cbz	r0, 8004d92 <_fflush_r+0x1a>
 8004d8a:	6a03      	ldr	r3, [r0, #32]
 8004d8c:	b90b      	cbnz	r3, 8004d92 <_fflush_r+0x1a>
 8004d8e:	f7ff f949 	bl	8004024 <__sinit>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f3      	beq.n	8004d82 <_fflush_r+0xa>
 8004d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d9c:	07d0      	lsls	r0, r2, #31
 8004d9e:	d404      	bmi.n	8004daa <_fflush_r+0x32>
 8004da0:	0599      	lsls	r1, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_fflush_r+0x32>
 8004da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004da6:	f7ff fb92 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7ff ff5f 	bl	8004c70 <__sflush_r>
 8004db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db4:	07da      	lsls	r2, r3, #31
 8004db6:	4605      	mov	r5, r0
 8004db8:	d4e4      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	059b      	lsls	r3, r3, #22
 8004dbe:	d4e1      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dc2:	f7ff fb85 	bl	80044d0 <__retarget_lock_release_recursive>
 8004dc6:	e7dd      	b.n	8004d84 <_fflush_r+0xc>

08004dc8 <__swhatbuf_r>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	460c      	mov	r4, r1
 8004dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	b096      	sub	sp, #88	@ 0x58
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	461e      	mov	r6, r3
 8004dd8:	da0d      	bge.n	8004df6 <__swhatbuf_r+0x2e>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2340      	movne	r3, #64	@ 0x40
 8004de8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004dec:	2000      	movs	r0, #0
 8004dee:	6031      	str	r1, [r6, #0]
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	b016      	add	sp, #88	@ 0x58
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	466a      	mov	r2, sp
 8004df8:	f000 f848 	bl	8004e8c <_fstat_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	dbec      	blt.n	8004dda <__swhatbuf_r+0x12>
 8004e00:	9901      	ldr	r1, [sp, #4]
 8004e02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e0a:	4259      	negs	r1, r3
 8004e0c:	4159      	adcs	r1, r3
 8004e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e12:	e7eb      	b.n	8004dec <__swhatbuf_r+0x24>

08004e14 <__smakebuf_r>:
 8004e14:	898b      	ldrh	r3, [r1, #12]
 8004e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e18:	079d      	lsls	r5, r3, #30
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	d507      	bpl.n	8004e30 <__smakebuf_r+0x1c>
 8004e20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	2301      	movs	r3, #1
 8004e2a:	6163      	str	r3, [r4, #20]
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	ab01      	add	r3, sp, #4
 8004e32:	466a      	mov	r2, sp
 8004e34:	f7ff ffc8 	bl	8004dc8 <__swhatbuf_r>
 8004e38:	9f00      	ldr	r7, [sp, #0]
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff fbbc 	bl	80045bc <_malloc_r>
 8004e44:	b948      	cbnz	r0, 8004e5a <__smakebuf_r+0x46>
 8004e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4a:	059a      	lsls	r2, r3, #22
 8004e4c:	d4ee      	bmi.n	8004e2c <__smakebuf_r+0x18>
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	e7e2      	b.n	8004e20 <__smakebuf_r+0xc>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	6020      	str	r0, [r4, #0]
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e6a:	b15b      	cbz	r3, 8004e84 <__smakebuf_r+0x70>
 8004e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 f81d 	bl	8004eb0 <_isatty_r>
 8004e76:	b128      	cbz	r0, 8004e84 <__smakebuf_r+0x70>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	431d      	orrs	r5, r3
 8004e88:	81a5      	strh	r5, [r4, #12]
 8004e8a:	e7cf      	b.n	8004e2c <__smakebuf_r+0x18>

08004e8c <_fstat_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d07      	ldr	r5, [pc, #28]	@ (8004eac <_fstat_r+0x20>)
 8004e90:	2300      	movs	r3, #0
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	f7fc f924 	bl	80010e6 <_fstat>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d102      	bne.n	8004ea8 <_fstat_r+0x1c>
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	b103      	cbz	r3, 8004ea8 <_fstat_r+0x1c>
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	200002d4 	.word	0x200002d4

08004eb0 <_isatty_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d06      	ldr	r5, [pc, #24]	@ (8004ecc <_isatty_r+0x1c>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	f7fc f923 	bl	8001106 <_isatty>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_isatty_r+0x1a>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_isatty_r+0x1a>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	200002d4 	.word	0x200002d4

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	@ (8004eec <_sbrk_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc f92c 	bl	8001138 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200002d4 	.word	0x200002d4

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
