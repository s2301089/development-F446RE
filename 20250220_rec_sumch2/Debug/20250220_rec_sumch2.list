
20250220_rec_sumch2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000055d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080045e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08004648  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004648  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc69  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9c  00000000  00000000  00013d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00015ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a71  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022afe  00000000  00000000  00017471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010111  00000000  00000000  00039f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2dde  00000000  00000000  0004a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ce5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  0011cea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  00120f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004518 	.word	0x08004518

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004518 	.word	0x08004518

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 80005a6:	4b4f      	ldr	r3, [pc, #316]	@ (80006e4 <main+0x144>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f892 	bl	80036d8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fbfa 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f8aa 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9bc 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f990 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f964 	bl	8000890 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005c8:	f000 f902 	bl	80007d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  unsigned char revdata[REV_SIZE] = {};
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	f8c3 2003 	str.w	r2, [r3, #3]
  unsigned char getdata,revsum;
  int timeout = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4841      	ldr	r0, [pc, #260]	@ (80006e8 <main+0x148>)
 80005e4:	f001 fd30 	bl	8002048 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_GetState(huart);
	  status = HAL_UART_Receive(&huart1, &getdata, 1, WAIT);
 80005e8:	1cf9      	adds	r1, r7, #3
 80005ea:	230a      	movs	r3, #10
 80005ec:	2201      	movs	r2, #1
 80005ee:	483f      	ldr	r0, [pc, #252]	@ (80006ec <main+0x14c>)
 80005f0:	f002 fa8d 	bl	8002b0e <HAL_UART_Receive>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	  if(status == HAL_OK){
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d153      	bne.n	80006a6 <main+0x106>
		  if(getdata == 0xAF){
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	2baf      	cmp	r3, #175	@ 0xaf
 8000602:	d160      	bne.n	80006c6 <main+0x126>
			  revdata[0] = getdata;
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	713b      	strb	r3, [r7, #4]
			  status = HAL_UART_Receive(&huart1, revdata+1, 10, WAIT * 10);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	3101      	adds	r1, #1
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	220a      	movs	r2, #10
 8000610:	4836      	ldr	r0, [pc, #216]	@ (80006ec <main+0x14c>)
 8000612:	f002 fa7c 	bl	8002b0e <HAL_UART_Receive>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
//				  }else {
//					  i--;
//				  }
////
//			  }
			  if(status == HAL_OK){
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d134      	bne.n	800068a <main+0xea>
				  if(revdata[10] == 0xED){
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2bed      	cmp	r3, #237	@ 0xed
 8000624:	d11b      	bne.n	800065e <main+0xbe>
					  revsum = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	77fb      	strb	r3, [r7, #31]
					  for(int i = 1;i < REV_SIZE -2;i++){
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <main+0xa4>
						  revsum += (int)revdata[i];
 8000630:	1d3a      	adds	r2, r7, #4
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	7ffb      	ldrb	r3, [r7, #31]
 800063a:	4413      	add	r3, r2
 800063c:	77fb      	strb	r3, [r7, #31]
					  for(int i = 1;i < REV_SIZE -2;i++){
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b08      	cmp	r3, #8
 8000648:	ddf2      	ble.n	8000630 <main+0x90>
//						  printf("%2d-%02x ",i,revdata[i]);
					  }
					  if(revdata[9] == revsum){
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	7ffa      	ldrb	r2, [r7, #31]
 800064e:	429a      	cmp	r2, r3
 8000650:	d025      	beq.n	800069e <main+0xfe>
//						  }
					  }else {
//						  for(int i = 0;i < REV_SIZE;i++){
//							  printf("%2d:%02x ",i,revdata[i]);
//						  }
						  printf("sum is not true %02x",revsum);
 8000652:	7ffb      	ldrb	r3, [r7, #31]
 8000654:	4619      	mov	r1, r3
 8000656:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <main+0x150>)
 8000658:	f002 ffce 	bl	80035f8 <iprintf>
 800065c:	e01f      	b.n	800069e <main+0xfe>
					  }
				  }else {
					  for(int i = 0;i < REV_SIZE;i++){
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	e00b      	b.n	800067c <main+0xdc>
						  printf("%2d:%02x ",i,revdata[i]);
 8000664:	1d3a      	adds	r2, r7, #4
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	6939      	ldr	r1, [r7, #16]
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <main+0x154>)
 8000672:	f002 ffc1 	bl	80035f8 <iprintf>
					  for(int i = 0;i < REV_SIZE;i++){
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	3301      	adds	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b0a      	cmp	r3, #10
 8000680:	ddf0      	ble.n	8000664 <main+0xc4>
					  }
					  printf("not END");
 8000682:	481d      	ldr	r0, [pc, #116]	@ (80006f8 <main+0x158>)
 8000684:	f002 ffb8 	bl	80035f8 <iprintf>
 8000688:	e009      	b.n	800069e <main+0xfe>
				  }
			  }else if(status == HAL_TIMEOUT){
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d103      	bne.n	8000698 <main+0xf8>
//				  printf("not HAL_OK");
				  printf("timeout");
 8000690:	481a      	ldr	r0, [pc, #104]	@ (80006fc <main+0x15c>)
 8000692:	f002 ffb1 	bl	80035f8 <iprintf>
 8000696:	e002      	b.n	800069e <main+0xfe>
			  }else {
				  printf("not HAL_OK");
 8000698:	4819      	ldr	r0, [pc, #100]	@ (8000700 <main+0x160>)
 800069a:	f002 ffad 	bl	80035f8 <iprintf>
			  }


			  printf("\r\n");
 800069e:	4819      	ldr	r0, [pc, #100]	@ (8000704 <main+0x164>)
 80006a0:	f003 f812 	bl	80036c8 <puts>
 80006a4:	e00f      	b.n	80006c6 <main+0x126>
		  }
	  }else /*if(status == HAL_TIMEOUT)*/{
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80006a6:	2101      	movs	r1, #1
 80006a8:	4817      	ldr	r0, [pc, #92]	@ (8000708 <main+0x168>)
 80006aa:	f000 ff00 	bl	80014ae <HAL_GPIO_TogglePin>
		  timeout++;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	3301      	adds	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
		  if(timeout >= TIMEOUT_MAX){
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	2b0e      	cmp	r3, #14
 80006b8:	dd05      	ble.n	80006c6 <main+0x126>
//			  for(int i = 0;i < REV_SIZE;i++){
//				  printf("%2d:%02x ",i,revdata[i]);
//			  }
			  printf("timeout  %2d\r\n",timeout);
 80006ba:	69b9      	ldr	r1, [r7, #24]
 80006bc:	4813      	ldr	r0, [pc, #76]	@ (800070c <main+0x16c>)
 80006be:	f002 ff9b 	bl	80035f8 <iprintf>
			  timeout = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
		  }
	  }
	  memset(revdata,0x00,sizeof(revdata));
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	220b      	movs	r2, #11
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 f997 	bl	8003a00 <memset>
	  HAL_UART_Abort(&huart1);
 80006d2:	4806      	ldr	r0, [pc, #24]	@ (80006ec <main+0x14c>)
 80006d4:	f002 fab2 	bl	8002c3c <HAL_UART_Abort>
//	  if ( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE) ){
	      __HAL_UART_CLEAR_FLAG(&huart1,UART_FLAG_RXNE |UART_FLAG_ORE);
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <main+0x14c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f06f 0228 	mvn.w	r2, #40	@ 0x28
 80006e0:	601a      	str	r2, [r3, #0]
  {
 80006e2:	e77d      	b.n	80005e0 <main+0x40>
 80006e4:	20000018 	.word	0x20000018
 80006e8:	20000084 	.word	0x20000084
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	08004530 	.word	0x08004530
 80006f4:	08004548 	.word	0x08004548
 80006f8:	08004554 	.word	0x08004554
 80006fc:	0800455c 	.word	0x0800455c
 8000700:	08004564 	.word	0x08004564
 8000704:	08004570 	.word	0x08004570
 8000708:	40020000 	.word	0x40020000
 800070c:	08004574 	.word	0x08004574

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f96e 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <SystemClock_Config+0xb8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <SystemClock_Config+0xb8>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <SystemClock_Config+0xb8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <SystemClock_Config+0xbc>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <SystemClock_Config+0xbc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f971 	bl	8001a6c <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000790:	f000 f918 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fe98 	bl	80014e4 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ba:	f000 f903 	bl	80009c4 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_TIM2_Init+0xbc>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_TIM2_Init+0xbc>)
 80007fc:	2253      	movs	r2, #83	@ 0x53
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000808:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081a:	481c      	ldr	r0, [pc, #112]	@ (800088c <MX_TIM2_Init+0xbc>)
 800081c:	f001 fbc4 	bl	8001fa8 <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000826:	f000 f8cd 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	4619      	mov	r1, r3
 8000838:	4814      	ldr	r0, [pc, #80]	@ (800088c <MX_TIM2_Init+0xbc>)
 800083a:	f002 f811 	bl	8002860 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000844:	f000 f8be 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000848:	2360      	movs	r3, #96	@ 0x60
 800084a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000860:	f001 fcba 	bl	80021d8 <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800086a:	f000 f8ab 	bl	80009c4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	699a      	ldr	r2, [r3, #24]
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800087c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800087e:	4803      	ldr	r0, [pc, #12]	@ (800088c <MX_TIM2_Init+0xbc>)
 8000880:	f000 f8ee 	bl	8000a60 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000084 	.word	0x20000084

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f002 f846 	bl	8002958 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f877 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40011000 	.word	0x40011000

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f002 f81c 	bl	8002958 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f84d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000114 	.word	0x20000114
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_GPIO_Init+0x5c>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x5c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_GPIO_Init+0x5c>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	480a      	ldr	r0, [pc, #40]	@ (8000998 <MX_GPIO_Init+0x60>)
 800096e:	f000 fd85 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000972:	2301      	movs	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0x60>)
 8000988:	f000 fbe4 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr,int len){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, WAIT);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	230a      	movs	r3, #10
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <_write+0x24>)
 80009b2:	f002 f821 	bl	80029f8 <HAL_UART_Transmit>
	return len;
 80009b6:	687b      	ldr	r3, [r7, #4]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000114 	.word	0x20000114

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a30:	d10d      	bne.n	8000a4e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a80:	d11d      	bne.n	8000abe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <HAL_TIM_MspPostInit+0x6c>)
 8000aba:	f000 fb4b 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a32      	ldr	r2, [pc, #200]	@ (8000bb8 <HAL_UART_MspInit+0xe8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12d      	bne.n	8000b4e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a30      	ldr	r2, [pc, #192]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a29      	ldr	r2, [pc, #164]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <HAL_UART_MspInit+0xf0>)
 8000b48:	f000 fb04 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4c:	e030      	b.n	8000bb0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <HAL_UART_MspInit+0xf4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d12b      	bne.n	8000bb0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_UART_MspInit+0xec>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b90:	230c      	movs	r3, #12
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_UART_MspInit+0xf0>)
 8000bac:	f000 fad2 	bl	8001154 <HAL_GPIO_Init>
}
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f917 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e00a      	b.n	8000c4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c38:	f3af 8000 	nop.w
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbf0      	blt.n	8000c38 <_read+0x12>
  }

  return len;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c88:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_isatty>:

int _isatty(int file)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f002 fed0 	bl	8003a9c <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	2000015c 	.word	0x2000015c
 8000d30:	200002b0 	.word	0x200002b0

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d5c:	f7ff ffea 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f002 fe8f 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fc09 	bl	80005a0 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d9c:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8000da0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da4:	200002b0 	.word	0x200002b0

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f90d 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdf6 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f917 	bl	8001042 <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f8ed 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000160 	.word	0x20000160

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000160 	.word	0x20000160

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff47 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff5c 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffb0 	bl	8000fb0 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ff06 	bl	8000e78 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d008      	beq.n	800108c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e052      	b.n	8001132 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0216 	bic.w	r2, r2, #22
 800109a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_DMA_Abort+0x62>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e013      	b.n	8001106 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fecb 	bl	8000e78 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d90c      	bls.n	8001106 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e015      	b.n	8001132 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e4      	bne.n	80010de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001118:	223f      	movs	r2, #63	@ 0x3f
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e165      	b.n	800143c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 8154 	bne.w	8001436 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d005      	beq.n	80011a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d130      	bne.n	8001208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d017      	beq.n	8001244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ae 	beq.w	8001436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b5d      	ldr	r3, [pc, #372]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a58      	ldr	r2, [pc, #352]	@ (8001458 <HAL_GPIO_Init+0x304>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	@ (800145c <HAL_GPIO_Init+0x308>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_GPIO_Init+0x30c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	@ (8001464 <HAL_GPIO_Init+0x310>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	@ (8001468 <HAL_GPIO_Init+0x314>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <HAL_GPIO_Init+0x318>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x20a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	@ (8001470 <HAL_GPIO_Init+0x31c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x206>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <HAL_GPIO_Init+0x320>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x202>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4935      	ldr	r1, [pc, #212]	@ (8001458 <HAL_GPIO_Init+0x304>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <HAL_GPIO_Init+0x324>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a31      	ldr	r2, [pc, #196]	@ (8001478 <HAL_GPIO_Init+0x324>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <HAL_GPIO_Init+0x324>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a26      	ldr	r2, [pc, #152]	@ (8001478 <HAL_GPIO_Init+0x324>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <HAL_GPIO_Init+0x324>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <HAL_GPIO_Init+0x324>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_GPIO_Init+0x324>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001430:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_GPIO_Init+0x324>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae96 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40013800 	.word	0x40013800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40021400 	.word	0x40021400
 8001474:	40021800 	.word	0x40021800
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c0:	887a      	ldrh	r2, [r7, #2]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	400b      	ands	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0cc      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b68      	ldr	r3, [pc, #416]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d90c      	bls.n	8001520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b65      	ldr	r3, [pc, #404]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b63      	ldr	r3, [pc, #396]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0b8      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001538:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a58      	ldr	r2, [pc, #352]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800155a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155c:	4b50      	ldr	r3, [pc, #320]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	494d      	ldr	r1, [pc, #308]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d044      	beq.n	8001604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d119      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e07f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e067      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f023 0203 	bic.w	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4934      	ldr	r1, [pc, #208]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d4:	f7ff fc50 	bl	8000e78 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff fc4c 	bl	8000e78 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e04f      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 020c 	and.w	r2, r3, #12
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d1eb      	bne.n	80015dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d20c      	bcs.n	800162c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e032      	b.n	8001692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4916      	ldr	r1, [pc, #88]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166a:	f000 f855 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 800166e:	4602      	mov	r2, r0
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	490a      	ldr	r1, [pc, #40]	@ (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	5ccb      	ldrb	r3, [r1, r3]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fbb0 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	08004584 	.word	0x08004584
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000

080016c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016cc:	f7ff fff0 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	0a9b      	lsrs	r3, r3, #10
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4903      	ldr	r1, [pc, #12]	@ (80016ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	08004594 	.word	0x08004594

080016f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f4:	f7ff ffdc 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016f8:	4602      	mov	r2, r0
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0b5b      	lsrs	r3, r3, #13
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	4903      	ldr	r1, [pc, #12]	@ (8001714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	08004594 	.word	0x08004594

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b0a6      	sub	sp, #152	@ 0x98
 800171e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173e:	4bc8      	ldr	r3, [pc, #800]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b0c      	cmp	r3, #12
 8001748:	f200 817e 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x330>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <HAL_RCC_GetSysClockFreq+0x3c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001789 	.word	0x08001789
 8001758:	08001a49 	.word	0x08001a49
 800175c:	08001a49 	.word	0x08001a49
 8001760:	08001a49 	.word	0x08001a49
 8001764:	08001791 	.word	0x08001791
 8001768:	08001a49 	.word	0x08001a49
 800176c:	08001a49 	.word	0x08001a49
 8001770:	08001a49 	.word	0x08001a49
 8001774:	08001799 	.word	0x08001799
 8001778:	08001a49 	.word	0x08001a49
 800177c:	08001a49 	.word	0x08001a49
 8001780:	08001a49 	.word	0x08001a49
 8001784:	08001903 	.word	0x08001903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4bb6      	ldr	r3, [pc, #728]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800178a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800178e:	e15f      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001790:	4bb5      	ldr	r3, [pc, #724]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8001792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001796:	e15b      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4bb1      	ldr	r3, [pc, #708]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a4:	4bae      	ldr	r3, [pc, #696]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d031      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b0:	4bab      	ldr	r3, [pc, #684]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	2200      	movs	r2, #0
 80017b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017c4:	2300      	movs	r3, #0
 80017c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80017ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017ce:	462a      	mov	r2, r5
 80017d0:	fb03 f202 	mul.w	r2, r3, r2
 80017d4:	2300      	movs	r3, #0
 80017d6:	4621      	mov	r1, r4
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	4aa2      	ldr	r2, [pc, #648]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80017e0:	4621      	mov	r1, r4
 80017e2:	fba1 1202 	umull	r1, r2, r1, r2
 80017e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80017e8:	460a      	mov	r2, r1
 80017ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80017ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80017ee:	4413      	add	r3, r2
 80017f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017f6:	2200      	movs	r2, #0
 80017f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001800:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001804:	f7fe fd54 	bl	80002b0 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001812:	e064      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b92      	ldr	r3, [pc, #584]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	653b      	str	r3, [r7, #80]	@ 0x50
 800181e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001828:	2300      	movs	r3, #0
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800182c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001830:	4622      	mov	r2, r4
 8001832:	462b      	mov	r3, r5
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	0159      	lsls	r1, r3, #5
 800183e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001842:	0150      	lsls	r0, r2, #5
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4621      	mov	r1, r4
 800184a:	1a51      	subs	r1, r2, r1
 800184c:	6139      	str	r1, [r7, #16]
 800184e:	4629      	mov	r1, r5
 8001850:	eb63 0301 	sbc.w	r3, r3, r1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001862:	4659      	mov	r1, fp
 8001864:	018b      	lsls	r3, r1, #6
 8001866:	4651      	mov	r1, sl
 8001868:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186c:	4651      	mov	r1, sl
 800186e:	018a      	lsls	r2, r1, #6
 8001870:	4651      	mov	r1, sl
 8001872:	ebb2 0801 	subs.w	r8, r2, r1
 8001876:	4659      	mov	r1, fp
 8001878:	eb63 0901 	sbc.w	r9, r3, r1
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001888:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001890:	4690      	mov	r8, r2
 8001892:	4699      	mov	r9, r3
 8001894:	4623      	mov	r3, r4
 8001896:	eb18 0303 	adds.w	r3, r8, r3
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	462b      	mov	r3, r5
 800189e:	eb49 0303 	adc.w	r3, r9, r3
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018b0:	4629      	mov	r1, r5
 80018b2:	028b      	lsls	r3, r1, #10
 80018b4:	4621      	mov	r1, r4
 80018b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ba:	4621      	mov	r1, r4
 80018bc:	028a      	lsls	r2, r1, #10
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018c6:	2200      	movs	r2, #0
 80018c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80018ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80018cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018d0:	f7fe fcee 	bl	80002b0 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018de:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0c1b      	lsrs	r3, r3, #16
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	3301      	adds	r3, #1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80018f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001900:	e0a6      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800190a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b54      	ldr	r3, [pc, #336]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02a      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b51      	ldr	r3, [pc, #324]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	2200      	movs	r2, #0
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800192c:	2100      	movs	r1, #0
 800192e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8001930:	fb03 f201 	mul.w	r2, r3, r1
 8001934:	2300      	movs	r3, #0
 8001936:	fb00 f303 	mul.w	r3, r0, r3
 800193a:	4413      	add	r3, r2
 800193c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x350>)
 800193e:	fba0 1202 	umull	r1, r2, r0, r2
 8001942:	677a      	str	r2, [r7, #116]	@ 0x74
 8001944:	460a      	mov	r2, r1
 8001946:	673a      	str	r2, [r7, #112]	@ 0x70
 8001948:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800194a:	4413      	add	r3, r2
 800194c:	677b      	str	r3, [r7, #116]	@ 0x74
 800194e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001952:	2200      	movs	r2, #0
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
 8001956:	637a      	str	r2, [r7, #52]	@ 0x34
 8001958:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800195c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001960:	f7fe fca6 	bl	80002b0 <__aeabi_uldivmod>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4613      	mov	r3, r2
 800196a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800196e:	e05b      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001970:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	2200      	movs	r2, #0
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
 8001988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800198c:	4642      	mov	r2, r8
 800198e:	464b      	mov	r3, r9
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0159      	lsls	r1, r3, #5
 800199a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199e:	0150      	lsls	r0, r2, #5
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4641      	mov	r1, r8
 80019a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019aa:	4649      	mov	r1, r9
 80019ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019c4:	ebb2 040a 	subs.w	r4, r2, sl
 80019c8:	eb63 050b 	sbc.w	r5, r3, fp
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	00eb      	lsls	r3, r5, #3
 80019d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019da:	00e2      	lsls	r2, r4, #3
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
 80019e0:	4643      	mov	r3, r8
 80019e2:	18e3      	adds	r3, r4, r3
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	464b      	mov	r3, r9
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fa:	4629      	mov	r1, r5
 80019fc:	028b      	lsls	r3, r1, #10
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a04:	4621      	mov	r1, r4
 8001a06:	028a      	lsls	r2, r1, #10
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a10:	2200      	movs	r2, #0
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	61fa      	str	r2, [r7, #28]
 8001a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a1a:	f7fe fc49 	bl	80002b0 <__aeabi_uldivmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4613      	mov	r3, r2
 8001a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0f1b      	lsrs	r3, r3, #28
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a46:	e003      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3798      	adds	r7, #152	@ 0x98
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	017d7840 	.word	0x017d7840

08001a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e28d      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8083 	beq.w	8001b92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d019      	beq.n	8001acc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a98:	4b91      	ldr	r3, [pc, #580]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ab0:	d00c      	beq.n	8001acc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d112      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abe:	4b88      	ldr	r3, [pc, #544]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	4b84      	ldr	r3, [pc, #528]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d05b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x124>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d157      	bne.n	8001b90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e25a      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x90>
 8001aee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xcc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xb4>
 8001b06:	4b76      	ldr	r3, [pc, #472]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b73      	ldr	r3, [pc, #460]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a72      	ldr	r2, [pc, #456]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xcc>
 8001b20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f99a 	bl	8000e78 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f996 	bl	8000e78 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e21f      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xdc>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f986 	bl	8000e78 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f982 	bl	8000e78 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e20b      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b57      	ldr	r3, [pc, #348]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x104>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06f      	beq.n	8001c7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9e:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d017      	beq.n	8001bda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001baa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d105      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b44      	ldr	r3, [pc, #272]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x186>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1d3      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4937      	ldr	r1, [pc, #220]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_RCC_OscConfig+0x278>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f92f 	bl	8000e78 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f92b 	bl	8000e78 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1b4      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4925      	ldr	r1, [pc, #148]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_OscConfig+0x278>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f90e 	bl	8000e78 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f90a 	bl	8000e78 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e193      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f8ee 	bl	8000e78 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f8ea 	bl	8000e78 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e173      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x234>
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f8d7 	bl	8000e78 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f8d3 	bl	8000e78 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e15c      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b8a      	ldr	r3, [pc, #552]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b83      	ldr	r3, [pc, #524]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b7c      	ldr	r3, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b79      	ldr	r3, [pc, #484]	@ (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b76      	ldr	r3, [pc, #472]	@ (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a75      	ldr	r2, [pc, #468]	@ (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f893 	bl	8000e78 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff f88f 	bl	8000e78 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e118      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b6c      	ldr	r3, [pc, #432]	@ (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x31e>
 8001d7c:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d80:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x358>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x340>
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	4a60      	ldr	r2, [pc, #384]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	4a5d      	ldr	r2, [pc, #372]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x358>
 8001dac:	4b5a      	ldr	r3, [pc, #360]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a59      	ldr	r2, [pc, #356]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbc:	4a56      	ldr	r2, [pc, #344]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f854 	bl	8000e78 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f850 	bl	8000e78 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0d7      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b4b      	ldr	r3, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x368>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f83e 	bl	8000e78 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f83a 	bl	8000e78 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0c1      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80ad 	beq.w	8001f98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d060      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d145      	bne.n	8001ede <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f80e 	bl	8000e78 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f80a 	bl	8000e78 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e093      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	071b      	lsls	r3, r3, #28
 8001eaa:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7fe ffdf 	bl	8000e78 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe ffdb 	bl	8000e78 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e064      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x452>
 8001edc:	e05c      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ffc8 	bl	8000e78 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ffc4 	bl	8000e78 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04d      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x480>
 8001f0a:	e045      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e040      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <HAL_RCC_OscConfig+0x538>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d030      	beq.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d129      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d122      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d119      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10f      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fd26 	bl	8000a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 f9b8 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_TIM_PWM_Start+0x24>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e022      	b.n	80020b2 <HAL_TIM_PWM_Start+0x6a>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d109      	bne.n	8002086 <HAL_TIM_PWM_Start+0x3e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e015      	b.n	80020b2 <HAL_TIM_PWM_Start+0x6a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d109      	bne.n	80020a0 <HAL_TIM_PWM_Start+0x58>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e008      	b.n	80020b2 <HAL_TIM_PWM_Start+0x6a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07c      	b.n	80021b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PWM_Start+0x82>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c8:	e013      	b.n	80020f2 <HAL_TIM_PWM_Start+0xaa>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Start+0x92>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d8:	e00b      	b.n	80020f2 <HAL_TIM_PWM_Start+0xaa>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d104      	bne.n	80020ea <HAL_TIM_PWM_Start+0xa2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e8:	e003      	b.n	80020f2 <HAL_TIM_PWM_Start+0xaa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fb8a 	bl	8002814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <HAL_TIM_PWM_Start+0x174>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIM_PWM_Start+0xcc>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2c      	ldr	r2, [pc, #176]	@ (80021c0 <HAL_TIM_PWM_Start+0x178>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_TIM_PWM_Start+0xd0>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_TIM_PWM_Start+0xd2>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a22      	ldr	r2, [pc, #136]	@ (80021bc <HAL_TIM_PWM_Start+0x174>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d01d      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_TIM_PWM_Start+0x17c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1d      	ldr	r2, [pc, #116]	@ (80021c8 <HAL_TIM_PWM_Start+0x180>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1c      	ldr	r2, [pc, #112]	@ (80021cc <HAL_TIM_PWM_Start+0x184>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <HAL_TIM_PWM_Start+0x178>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_TIM_PWM_Start+0x188>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_TIM_PWM_Start+0x136>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_TIM_PWM_Start+0x18c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d111      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d010      	beq.n	80021b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	e007      	b.n	80021b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40001800 	.word	0x40001800

080021d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0ae      	b.n	8002354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	f200 809f 	bhi.w	8002344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002206:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002241 	.word	0x08002241
 8002210:	08002345 	.word	0x08002345
 8002214:	08002345 	.word	0x08002345
 8002218:	08002345 	.word	0x08002345
 800221c:	08002281 	.word	0x08002281
 8002220:	08002345 	.word	0x08002345
 8002224:	08002345 	.word	0x08002345
 8002228:	08002345 	.word	0x08002345
 800222c:	080022c3 	.word	0x080022c3
 8002230:	08002345 	.word	0x08002345
 8002234:	08002345 	.word	0x08002345
 8002238:	08002345 	.word	0x08002345
 800223c:	08002303 	.word	0x08002303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f934 	bl	80024b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	619a      	str	r2, [r3, #24]
      break;
 800227e:	e064      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f984 	bl	8002594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800229a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6999      	ldr	r1, [r3, #24]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
      break;
 80022c0:	e043      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f9d9 	bl	8002680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0208 	orr.w	r2, r2, #8
 80022dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0204 	bic.w	r2, r2, #4
 80022ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
      break;
 8002300:	e023      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fa2d 	bl	8002768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800231c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	61da      	str	r2, [r3, #28]
      break;
 8002342:	e002      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	75fb      	strb	r3, [r7, #23]
      break;
 8002348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002352:	7dfb      	ldrb	r3, [r7, #23]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a46      	ldr	r2, [pc, #280]	@ (8002488 <TIM_Base_SetConfig+0x12c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237a:	d00f      	beq.n	800239c <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a43      	ldr	r2, [pc, #268]	@ (800248c <TIM_Base_SetConfig+0x130>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00b      	beq.n	800239c <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a42      	ldr	r2, [pc, #264]	@ (8002490 <TIM_Base_SetConfig+0x134>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a41      	ldr	r2, [pc, #260]	@ (8002494 <TIM_Base_SetConfig+0x138>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <TIM_Base_SetConfig+0x13c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <TIM_Base_SetConfig+0x12c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023bc:	d027      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a32      	ldr	r2, [pc, #200]	@ (800248c <TIM_Base_SetConfig+0x130>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d023      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a31      	ldr	r2, [pc, #196]	@ (8002490 <TIM_Base_SetConfig+0x134>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <TIM_Base_SetConfig+0x138>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01b      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002498 <TIM_Base_SetConfig+0x13c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d017      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <TIM_Base_SetConfig+0x140>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <TIM_Base_SetConfig+0x144>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00f      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <TIM_Base_SetConfig+0x148>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	@ (80024a8 <TIM_Base_SetConfig+0x14c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2a      	ldr	r2, [pc, #168]	@ (80024ac <TIM_Base_SetConfig+0x150>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a29      	ldr	r2, [pc, #164]	@ (80024b0 <TIM_Base_SetConfig+0x154>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d108      	bne.n	8002420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <TIM_Base_SetConfig+0x12c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <TIM_Base_SetConfig+0xf8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <TIM_Base_SetConfig+0x13c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d103      	bne.n	800245c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f023 0201 	bic.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  }
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800
 8002494:	40000c00 	.word	0x40000c00
 8002498:	40010400 	.word	0x40010400
 800249c:	40014000 	.word	0x40014000
 80024a0:	40014400 	.word	0x40014400
 80024a4:	40014800 	.word	0x40014800
 80024a8:	40001800 	.word	0x40001800
 80024ac:	40001c00 	.word	0x40001c00
 80024b0:	40002000 	.word	0x40002000

080024b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 0201 	bic.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 0302 	bic.w	r3, r3, #2
 80024fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a20      	ldr	r2, [pc, #128]	@ (800258c <TIM_OC1_SetConfig+0xd8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_OC1_SetConfig+0x64>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <TIM_OC1_SetConfig+0xdc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d10c      	bne.n	8002532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0308 	bic.w	r3, r3, #8
 800251e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <TIM_OC1_SetConfig+0xd8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <TIM_OC1_SetConfig+0x8e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <TIM_OC1_SetConfig+0xdc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d111      	bne.n	8002566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	621a      	str	r2, [r3, #32]
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40010000 	.word	0x40010000
 8002590:	40010400 	.word	0x40010400

08002594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 0210 	bic.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0320 	bic.w	r3, r3, #32
 80025de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <TIM_OC2_SetConfig+0xe4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_OC2_SetConfig+0x68>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a21      	ldr	r2, [pc, #132]	@ (800267c <TIM_OC2_SetConfig+0xe8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10d      	bne.n	8002618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <TIM_OC2_SetConfig+0xe4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_OC2_SetConfig+0x94>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a16      	ldr	r2, [pc, #88]	@ (800267c <TIM_OC2_SetConfig+0xe8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d113      	bne.n	8002650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800262e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40010000 	.word	0x40010000
 800267c:	40010400 	.word	0x40010400

08002680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a21      	ldr	r2, [pc, #132]	@ (8002760 <TIM_OC3_SetConfig+0xe0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d003      	beq.n	80026e6 <TIM_OC3_SetConfig+0x66>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <TIM_OC3_SetConfig+0xe4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10d      	bne.n	8002702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <TIM_OC3_SetConfig+0xe0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d003      	beq.n	8002712 <TIM_OC3_SetConfig+0x92>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <TIM_OC3_SetConfig+0xe4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d113      	bne.n	800273a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40010000 	.word	0x40010000
 8002764:	40010400 	.word	0x40010400

08002768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	031b      	lsls	r3, r3, #12
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a12      	ldr	r2, [pc, #72]	@ (800280c <TIM_OC4_SetConfig+0xa4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_OC4_SetConfig+0x68>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a11      	ldr	r2, [pc, #68]	@ (8002810 <TIM_OC4_SetConfig+0xa8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d109      	bne.n	80027e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000
 8002810:	40010400 	.word	0x40010400

08002814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2201      	movs	r2, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e05a      	b.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c4:	d01d      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	@ (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10c      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40010400 	.word	0x40010400
 8002950:	40014000 	.word	0x40014000
 8002954:	40001800 	.word	0x40001800

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e042      	b.n	80029f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe f8a6 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	@ 0x24
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 faf5 	bl	8002f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d175      	bne.n	8002b04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Transmit+0x2c>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e06e      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	@ 0x21
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fa1f 	bl	8000e78 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6c:	e02e      	b.n	8002acc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f9ca 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e03a      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cb      	bne.n	8002a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	@ 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f996 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e006      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b08a      	sub	sp, #40	@ 0x28
 8002b12:	af02      	add	r7, sp, #8
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 8081 	bne.w	8002c32 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_UART_Receive+0x2e>
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e079      	b.n	8002c34 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2222      	movs	r2, #34	@ 0x22
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b54:	f7fe f990 	bl	8000e78 <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6e:	d108      	bne.n	8002b82 <HAL_UART_Receive+0x74>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e003      	b.n	8002b8a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b8a:	e047      	b.n	8002c1c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2120      	movs	r1, #32
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f93b 	bl	8002e12 <UART_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e042      	b.n	8002c34 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10c      	bne.n	8002bce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	3302      	adds	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	e01f      	b.n	8002c0e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd6:	d007      	beq.n	8002be8 <HAL_UART_Receive+0xda>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_UART_Receive+0xe8>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e008      	b.n	8002c08 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1b2      	bne.n	8002b8c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0a0      	sub	sp, #128	@ 0x80
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8002c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c56:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8002c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c64:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002c66:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002c6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8002c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3314      	adds	r3, #20
 8002c96:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002c98:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d119      	bne.n	8002ce8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	f023 0310 	bic.w	r3, r3, #16
 8002cca:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002cd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	2b80      	cmp	r3, #128	@ 0x80
 8002cf4:	d136      	bne.n	8002d64 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3314      	adds	r3, #20
 8002cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	e853 3f00 	ldrex	r3, [r3]
 8002d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3314      	adds	r3, #20
 8002d14:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e5      	bne.n	8002cf6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	2200      	movs	r2, #0
 8002d38:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f98b 	bl	800105a <HAL_DMA_Abort>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe f9f3 	bl	800113a <HAL_DMA_GetError>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d104      	bne.n	8002d64 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e052      	b.n	8002e0a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d136      	bne.n	8002de0 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d92:	61ba      	str	r2, [r7, #24]
 8002d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e5      	bne.n	8002d72 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	2200      	movs	r2, #0
 8002db4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f94d 	bl	800105a <HAL_DMA_Abort>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f9b5 	bl	800113a <HAL_DMA_GetError>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d104      	bne.n	8002de0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e014      	b.n	8002e0a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3780      	adds	r7, #128	@ 0x80
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	e03b      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d037      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe f824 	bl	8000e78 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e03a      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b80      	cmp	r3, #128	@ 0x80
 8002e58:	d020      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b40      	cmp	r3, #64	@ 0x40
 8002e5e:	d01d      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d116      	bne.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f81d 	bl	8002ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e00f      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d0b4      	beq.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b095      	sub	sp, #84	@ 0x54
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eec:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e5      	bne.n	8002ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d119      	bne.n	8002f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f5c:	61ba      	str	r2, [r7, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f7e:	bf00      	nop
 8002f80:	3754      	adds	r7, #84	@ 0x54
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b0c0      	sub	sp, #256	@ 0x100
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	ea40 0301 	orr.w	r3, r0, r1
 8002fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fe4:	f021 010c 	bic.w	r1, r1, #12
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	6999      	ldr	r1, [r3, #24]
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	ea40 0301 	orr.w	r3, r0, r1
 8003012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b8f      	ldr	r3, [pc, #572]	@ (8003258 <UART_SetConfig+0x2cc>)
 800301c:	429a      	cmp	r2, r3
 800301e:	d005      	beq.n	800302c <UART_SetConfig+0xa0>
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b8d      	ldr	r3, [pc, #564]	@ (800325c <UART_SetConfig+0x2d0>)
 8003028:	429a      	cmp	r2, r3
 800302a:	d104      	bne.n	8003036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800302c:	f7fe fb60 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 8003030:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003034:	e003      	b.n	800303e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7fe fb47 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
 800303a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003048:	f040 810c 	bne.w	8003264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800304c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003056:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800305a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800305e:	4622      	mov	r2, r4
 8003060:	462b      	mov	r3, r5
 8003062:	1891      	adds	r1, r2, r2
 8003064:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003066:	415b      	adcs	r3, r3
 8003068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800306a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800306e:	4621      	mov	r1, r4
 8003070:	eb12 0801 	adds.w	r8, r2, r1
 8003074:	4629      	mov	r1, r5
 8003076:	eb43 0901 	adc.w	r9, r3, r1
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800308e:	4690      	mov	r8, r2
 8003090:	4699      	mov	r9, r3
 8003092:	4623      	mov	r3, r4
 8003094:	eb18 0303 	adds.w	r3, r8, r3
 8003098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800309c:	462b      	mov	r3, r5
 800309e:	eb49 0303 	adc.w	r3, r9, r3
 80030a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ba:	460b      	mov	r3, r1
 80030bc:	18db      	adds	r3, r3, r3
 80030be:	653b      	str	r3, [r7, #80]	@ 0x50
 80030c0:	4613      	mov	r3, r2
 80030c2:	eb42 0303 	adc.w	r3, r2, r3
 80030c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030d0:	f7fd f8ee 	bl	80002b0 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4b61      	ldr	r3, [pc, #388]	@ (8003260 <UART_SetConfig+0x2d4>)
 80030da:	fba3 2302 	umull	r2, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	011c      	lsls	r4, r3, #4
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	1891      	adds	r1, r2, r2
 80030fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030fc:	415b      	adcs	r3, r3
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003104:	4641      	mov	r1, r8
 8003106:	eb12 0a01 	adds.w	sl, r2, r1
 800310a:	4649      	mov	r1, r9
 800310c:	eb43 0b01 	adc.w	fp, r3, r1
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800311c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003124:	4692      	mov	sl, r2
 8003126:	469b      	mov	fp, r3
 8003128:	4643      	mov	r3, r8
 800312a:	eb1a 0303 	adds.w	r3, sl, r3
 800312e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003132:	464b      	mov	r3, r9
 8003134:	eb4b 0303 	adc.w	r3, fp, r3
 8003138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003148:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800314c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003150:	460b      	mov	r3, r1
 8003152:	18db      	adds	r3, r3, r3
 8003154:	643b      	str	r3, [r7, #64]	@ 0x40
 8003156:	4613      	mov	r3, r2
 8003158:	eb42 0303 	adc.w	r3, r2, r3
 800315c:	647b      	str	r3, [r7, #68]	@ 0x44
 800315e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003166:	f7fd f8a3 	bl	80002b0 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4611      	mov	r1, r2
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <UART_SetConfig+0x2d4>)
 8003172:	fba3 2301 	umull	r2, r3, r3, r1
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2264      	movs	r2, #100	@ 0x64
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	1acb      	subs	r3, r1, r3
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003186:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <UART_SetConfig+0x2d4>)
 8003188:	fba3 2302 	umull	r2, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003194:	441c      	add	r4, r3
 8003196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800319a:	2200      	movs	r2, #0
 800319c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031a8:	4642      	mov	r2, r8
 80031aa:	464b      	mov	r3, r9
 80031ac:	1891      	adds	r1, r2, r2
 80031ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031b0:	415b      	adcs	r3, r3
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031b8:	4641      	mov	r1, r8
 80031ba:	1851      	adds	r1, r2, r1
 80031bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80031be:	4649      	mov	r1, r9
 80031c0:	414b      	adcs	r3, r1
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031d0:	4659      	mov	r1, fp
 80031d2:	00cb      	lsls	r3, r1, #3
 80031d4:	4651      	mov	r1, sl
 80031d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031da:	4651      	mov	r1, sl
 80031dc:	00ca      	lsls	r2, r1, #3
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	4642      	mov	r2, r8
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031ec:	464b      	mov	r3, r9
 80031ee:	460a      	mov	r2, r1
 80031f0:	eb42 0303 	adc.w	r3, r2, r3
 80031f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003204:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800320c:	460b      	mov	r3, r1
 800320e:	18db      	adds	r3, r3, r3
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003212:	4613      	mov	r3, r2
 8003214:	eb42 0303 	adc.w	r3, r2, r3
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800321e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003222:	f7fd f845 	bl	80002b0 <__aeabi_uldivmod>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <UART_SetConfig+0x2d4>)
 800322c:	fba3 1302 	umull	r1, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	2164      	movs	r1, #100	@ 0x64
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	3332      	adds	r3, #50	@ 0x32
 800323e:	4a08      	ldr	r2, [pc, #32]	@ (8003260 <UART_SetConfig+0x2d4>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4422      	add	r2, r4
 8003252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003254:	e106      	b.n	8003464 <UART_SetConfig+0x4d8>
 8003256:	bf00      	nop
 8003258:	40011000 	.word	0x40011000
 800325c:	40011400 	.word	0x40011400
 8003260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003268:	2200      	movs	r2, #0
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800326e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003276:	4642      	mov	r2, r8
 8003278:	464b      	mov	r3, r9
 800327a:	1891      	adds	r1, r2, r2
 800327c:	6239      	str	r1, [r7, #32]
 800327e:	415b      	adcs	r3, r3
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
 8003282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003286:	4641      	mov	r1, r8
 8003288:	1854      	adds	r4, r2, r1
 800328a:	4649      	mov	r1, r9
 800328c:	eb43 0501 	adc.w	r5, r3, r1
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	00eb      	lsls	r3, r5, #3
 800329a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329e:	00e2      	lsls	r2, r4, #3
 80032a0:	4614      	mov	r4, r2
 80032a2:	461d      	mov	r5, r3
 80032a4:	4643      	mov	r3, r8
 80032a6:	18e3      	adds	r3, r4, r3
 80032a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032ac:	464b      	mov	r3, r9
 80032ae:	eb45 0303 	adc.w	r3, r5, r3
 80032b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032d2:	4629      	mov	r1, r5
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	4621      	mov	r1, r4
 80032d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032dc:	4621      	mov	r1, r4
 80032de:	008a      	lsls	r2, r1, #2
 80032e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032e4:	f7fc ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4b60      	ldr	r3, [pc, #384]	@ (8003470 <UART_SetConfig+0x4e4>)
 80032ee:	fba3 2302 	umull	r2, r3, r3, r2
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	011c      	lsls	r4, r3, #4
 80032f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003308:	4642      	mov	r2, r8
 800330a:	464b      	mov	r3, r9
 800330c:	1891      	adds	r1, r2, r2
 800330e:	61b9      	str	r1, [r7, #24]
 8003310:	415b      	adcs	r3, r3
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003318:	4641      	mov	r1, r8
 800331a:	1851      	adds	r1, r2, r1
 800331c:	6139      	str	r1, [r7, #16]
 800331e:	4649      	mov	r1, r9
 8003320:	414b      	adcs	r3, r1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003330:	4659      	mov	r1, fp
 8003332:	00cb      	lsls	r3, r1, #3
 8003334:	4651      	mov	r1, sl
 8003336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333a:	4651      	mov	r1, sl
 800333c:	00ca      	lsls	r2, r1, #3
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	4603      	mov	r3, r0
 8003344:	4642      	mov	r2, r8
 8003346:	189b      	adds	r3, r3, r2
 8003348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800334c:	464b      	mov	r3, r9
 800334e:	460a      	mov	r2, r1
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003362:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003370:	4649      	mov	r1, r9
 8003372:	008b      	lsls	r3, r1, #2
 8003374:	4641      	mov	r1, r8
 8003376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337a:	4641      	mov	r1, r8
 800337c:	008a      	lsls	r2, r1, #2
 800337e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003382:	f7fc ff95 	bl	80002b0 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4611      	mov	r1, r2
 800338c:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <UART_SetConfig+0x4e4>)
 800338e:	fba3 2301 	umull	r2, r3, r3, r1
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2264      	movs	r2, #100	@ 0x64
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	1acb      	subs	r3, r1, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	@ 0x32
 80033a0:	4a33      	ldr	r2, [pc, #204]	@ (8003470 <UART_SetConfig+0x4e4>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ac:	441c      	add	r4, r3
 80033ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b2:	2200      	movs	r2, #0
 80033b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	415b      	adcs	r3, r3
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033cc:	4641      	mov	r1, r8
 80033ce:	1851      	adds	r1, r2, r1
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	4649      	mov	r1, r9
 80033d4:	414b      	adcs	r3, r1
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033e4:	4659      	mov	r1, fp
 80033e6:	00cb      	lsls	r3, r1, #3
 80033e8:	4651      	mov	r1, sl
 80033ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ee:	4651      	mov	r1, sl
 80033f0:	00ca      	lsls	r2, r1, #3
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	4642      	mov	r2, r8
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033fe:	464b      	mov	r3, r9
 8003400:	460a      	mov	r2, r1
 8003402:	eb42 0303 	adc.w	r3, r2, r3
 8003406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	663b      	str	r3, [r7, #96]	@ 0x60
 8003412:	667a      	str	r2, [r7, #100]	@ 0x64
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003432:	f7fc ff3d 	bl	80002b0 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <UART_SetConfig+0x4e4>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	@ 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	3332      	adds	r3, #50	@ 0x32
 800344e:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <UART_SetConfig+0x4e4>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4422      	add	r2, r4
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800346a:	46bd      	mov	sp, r7
 800346c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003470:	51eb851f 	.word	0x51eb851f

08003474 <std>:
 8003474:	2300      	movs	r3, #0
 8003476:	b510      	push	{r4, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	e9c0 3300 	strd	r3, r3, [r0]
 800347e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	8181      	strh	r1, [r0, #12]
 8003486:	6643      	str	r3, [r0, #100]	@ 0x64
 8003488:	81c2      	strh	r2, [r0, #14]
 800348a:	6183      	str	r3, [r0, #24]
 800348c:	4619      	mov	r1, r3
 800348e:	2208      	movs	r2, #8
 8003490:	305c      	adds	r0, #92	@ 0x5c
 8003492:	f000 fab5 	bl	8003a00 <memset>
 8003496:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <std+0x58>)
 8003498:	6263      	str	r3, [r4, #36]	@ 0x24
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <std+0x5c>)
 800349c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <std+0x60>)
 80034a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <std+0x64>)
 80034a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <std+0x68>)
 80034a8:	6224      	str	r4, [r4, #32]
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d006      	beq.n	80034bc <std+0x48>
 80034ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034b2:	4294      	cmp	r4, r2
 80034b4:	d002      	beq.n	80034bc <std+0x48>
 80034b6:	33d0      	adds	r3, #208	@ 0xd0
 80034b8:	429c      	cmp	r4, r3
 80034ba:	d105      	bne.n	80034c8 <std+0x54>
 80034bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c4:	f000 bb14 	b.w	8003af0 <__retarget_lock_init_recursive>
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	bf00      	nop
 80034cc:	08003851 	.word	0x08003851
 80034d0:	08003873 	.word	0x08003873
 80034d4:	080038ab 	.word	0x080038ab
 80034d8:	080038cf 	.word	0x080038cf
 80034dc:	20000164 	.word	0x20000164

080034e0 <stdio_exit_handler>:
 80034e0:	4a02      	ldr	r2, [pc, #8]	@ (80034ec <stdio_exit_handler+0xc>)
 80034e2:	4903      	ldr	r1, [pc, #12]	@ (80034f0 <stdio_exit_handler+0x10>)
 80034e4:	4803      	ldr	r0, [pc, #12]	@ (80034f4 <stdio_exit_handler+0x14>)
 80034e6:	f000 b869 	b.w	80035bc <_fwalk_sglue>
 80034ea:	bf00      	nop
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	080043a1 	.word	0x080043a1
 80034f4:	2000001c 	.word	0x2000001c

080034f8 <cleanup_stdio>:
 80034f8:	6841      	ldr	r1, [r0, #4]
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <cleanup_stdio+0x34>)
 80034fc:	4299      	cmp	r1, r3
 80034fe:	b510      	push	{r4, lr}
 8003500:	4604      	mov	r4, r0
 8003502:	d001      	beq.n	8003508 <cleanup_stdio+0x10>
 8003504:	f000 ff4c 	bl	80043a0 <_fflush_r>
 8003508:	68a1      	ldr	r1, [r4, #8]
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <cleanup_stdio+0x38>)
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <cleanup_stdio+0x1e>
 8003510:	4620      	mov	r0, r4
 8003512:	f000 ff45 	bl	80043a0 <_fflush_r>
 8003516:	68e1      	ldr	r1, [r4, #12]
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <cleanup_stdio+0x3c>)
 800351a:	4299      	cmp	r1, r3
 800351c:	d004      	beq.n	8003528 <cleanup_stdio+0x30>
 800351e:	4620      	mov	r0, r4
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003524:	f000 bf3c 	b.w	80043a0 <_fflush_r>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	20000164 	.word	0x20000164
 8003530:	200001cc 	.word	0x200001cc
 8003534:	20000234 	.word	0x20000234

08003538 <global_stdio_init.part.0>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <global_stdio_init.part.0+0x30>)
 800353c:	4c0b      	ldr	r4, [pc, #44]	@ (800356c <global_stdio_init.part.0+0x34>)
 800353e:	4a0c      	ldr	r2, [pc, #48]	@ (8003570 <global_stdio_init.part.0+0x38>)
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	4620      	mov	r0, r4
 8003544:	2200      	movs	r2, #0
 8003546:	2104      	movs	r1, #4
 8003548:	f7ff ff94 	bl	8003474 <std>
 800354c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003550:	2201      	movs	r2, #1
 8003552:	2109      	movs	r1, #9
 8003554:	f7ff ff8e 	bl	8003474 <std>
 8003558:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800355c:	2202      	movs	r2, #2
 800355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003562:	2112      	movs	r1, #18
 8003564:	f7ff bf86 	b.w	8003474 <std>
 8003568:	2000029c 	.word	0x2000029c
 800356c:	20000164 	.word	0x20000164
 8003570:	080034e1 	.word	0x080034e1

08003574 <__sfp_lock_acquire>:
 8003574:	4801      	ldr	r0, [pc, #4]	@ (800357c <__sfp_lock_acquire+0x8>)
 8003576:	f000 babc 	b.w	8003af2 <__retarget_lock_acquire_recursive>
 800357a:	bf00      	nop
 800357c:	200002a5 	.word	0x200002a5

08003580 <__sfp_lock_release>:
 8003580:	4801      	ldr	r0, [pc, #4]	@ (8003588 <__sfp_lock_release+0x8>)
 8003582:	f000 bab7 	b.w	8003af4 <__retarget_lock_release_recursive>
 8003586:	bf00      	nop
 8003588:	200002a5 	.word	0x200002a5

0800358c <__sinit>:
 800358c:	b510      	push	{r4, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	f7ff fff0 	bl	8003574 <__sfp_lock_acquire>
 8003594:	6a23      	ldr	r3, [r4, #32]
 8003596:	b11b      	cbz	r3, 80035a0 <__sinit+0x14>
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f7ff bff0 	b.w	8003580 <__sfp_lock_release>
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <__sinit+0x28>)
 80035a2:	6223      	str	r3, [r4, #32]
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <__sinit+0x2c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f5      	bne.n	8003598 <__sinit+0xc>
 80035ac:	f7ff ffc4 	bl	8003538 <global_stdio_init.part.0>
 80035b0:	e7f2      	b.n	8003598 <__sinit+0xc>
 80035b2:	bf00      	nop
 80035b4:	080034f9 	.word	0x080034f9
 80035b8:	2000029c 	.word	0x2000029c

080035bc <_fwalk_sglue>:
 80035bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c0:	4607      	mov	r7, r0
 80035c2:	4688      	mov	r8, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	2600      	movs	r6, #0
 80035c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035cc:	f1b9 0901 	subs.w	r9, r9, #1
 80035d0:	d505      	bpl.n	80035de <_fwalk_sglue+0x22>
 80035d2:	6824      	ldr	r4, [r4, #0]
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d1f7      	bne.n	80035c8 <_fwalk_sglue+0xc>
 80035d8:	4630      	mov	r0, r6
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d907      	bls.n	80035f4 <_fwalk_sglue+0x38>
 80035e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035e8:	3301      	adds	r3, #1
 80035ea:	d003      	beq.n	80035f4 <_fwalk_sglue+0x38>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	4306      	orrs	r6, r0
 80035f4:	3568      	adds	r5, #104	@ 0x68
 80035f6:	e7e9      	b.n	80035cc <_fwalk_sglue+0x10>

080035f8 <iprintf>:
 80035f8:	b40f      	push	{r0, r1, r2, r3}
 80035fa:	b507      	push	{r0, r1, r2, lr}
 80035fc:	4906      	ldr	r1, [pc, #24]	@ (8003618 <iprintf+0x20>)
 80035fe:	ab04      	add	r3, sp, #16
 8003600:	6808      	ldr	r0, [r1, #0]
 8003602:	f853 2b04 	ldr.w	r2, [r3], #4
 8003606:	6881      	ldr	r1, [r0, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	f000 fb9f 	bl	8003d4c <_vfiprintf_r>
 800360e:	b003      	add	sp, #12
 8003610:	f85d eb04 	ldr.w	lr, [sp], #4
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr
 8003618:	20000018 	.word	0x20000018

0800361c <_puts_r>:
 800361c:	6a03      	ldr	r3, [r0, #32]
 800361e:	b570      	push	{r4, r5, r6, lr}
 8003620:	6884      	ldr	r4, [r0, #8]
 8003622:	4605      	mov	r5, r0
 8003624:	460e      	mov	r6, r1
 8003626:	b90b      	cbnz	r3, 800362c <_puts_r+0x10>
 8003628:	f7ff ffb0 	bl	800358c <__sinit>
 800362c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d405      	bmi.n	800363e <_puts_r+0x22>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	0598      	lsls	r0, r3, #22
 8003636:	d402      	bmi.n	800363e <_puts_r+0x22>
 8003638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800363a:	f000 fa5a 	bl	8003af2 <__retarget_lock_acquire_recursive>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	0719      	lsls	r1, r3, #28
 8003642:	d502      	bpl.n	800364a <_puts_r+0x2e>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d135      	bne.n	80036b6 <_puts_r+0x9a>
 800364a:	4621      	mov	r1, r4
 800364c:	4628      	mov	r0, r5
 800364e:	f000 f981 	bl	8003954 <__swsetup_r>
 8003652:	b380      	cbz	r0, 80036b6 <_puts_r+0x9a>
 8003654:	f04f 35ff 	mov.w	r5, #4294967295
 8003658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800365a:	07da      	lsls	r2, r3, #31
 800365c:	d405      	bmi.n	800366a <_puts_r+0x4e>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	059b      	lsls	r3, r3, #22
 8003662:	d402      	bmi.n	800366a <_puts_r+0x4e>
 8003664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003666:	f000 fa45 	bl	8003af4 <__retarget_lock_release_recursive>
 800366a:	4628      	mov	r0, r5
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	2b00      	cmp	r3, #0
 8003670:	da04      	bge.n	800367c <_puts_r+0x60>
 8003672:	69a2      	ldr	r2, [r4, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	dc17      	bgt.n	80036a8 <_puts_r+0x8c>
 8003678:	290a      	cmp	r1, #10
 800367a:	d015      	beq.n	80036a8 <_puts_r+0x8c>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	6022      	str	r2, [r4, #0]
 8003682:	7019      	strb	r1, [r3, #0]
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800368a:	3b01      	subs	r3, #1
 800368c:	60a3      	str	r3, [r4, #8]
 800368e:	2900      	cmp	r1, #0
 8003690:	d1ed      	bne.n	800366e <_puts_r+0x52>
 8003692:	2b00      	cmp	r3, #0
 8003694:	da11      	bge.n	80036ba <_puts_r+0x9e>
 8003696:	4622      	mov	r2, r4
 8003698:	210a      	movs	r1, #10
 800369a:	4628      	mov	r0, r5
 800369c:	f000 f91b 	bl	80038d6 <__swbuf_r>
 80036a0:	3001      	adds	r0, #1
 80036a2:	d0d7      	beq.n	8003654 <_puts_r+0x38>
 80036a4:	250a      	movs	r5, #10
 80036a6:	e7d7      	b.n	8003658 <_puts_r+0x3c>
 80036a8:	4622      	mov	r2, r4
 80036aa:	4628      	mov	r0, r5
 80036ac:	f000 f913 	bl	80038d6 <__swbuf_r>
 80036b0:	3001      	adds	r0, #1
 80036b2:	d1e7      	bne.n	8003684 <_puts_r+0x68>
 80036b4:	e7ce      	b.n	8003654 <_puts_r+0x38>
 80036b6:	3e01      	subs	r6, #1
 80036b8:	e7e4      	b.n	8003684 <_puts_r+0x68>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	6022      	str	r2, [r4, #0]
 80036c0:	220a      	movs	r2, #10
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e7ee      	b.n	80036a4 <_puts_r+0x88>
	...

080036c8 <puts>:
 80036c8:	4b02      	ldr	r3, [pc, #8]	@ (80036d4 <puts+0xc>)
 80036ca:	4601      	mov	r1, r0
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	f7ff bfa5 	b.w	800361c <_puts_r>
 80036d2:	bf00      	nop
 80036d4:	20000018 	.word	0x20000018

080036d8 <setbuf>:
 80036d8:	fab1 f281 	clz	r2, r1
 80036dc:	0952      	lsrs	r2, r2, #5
 80036de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036e2:	0052      	lsls	r2, r2, #1
 80036e4:	f000 b800 	b.w	80036e8 <setvbuf>

080036e8 <setvbuf>:
 80036e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036ec:	461d      	mov	r5, r3
 80036ee:	4b57      	ldr	r3, [pc, #348]	@ (800384c <setvbuf+0x164>)
 80036f0:	681f      	ldr	r7, [r3, #0]
 80036f2:	4604      	mov	r4, r0
 80036f4:	460e      	mov	r6, r1
 80036f6:	4690      	mov	r8, r2
 80036f8:	b127      	cbz	r7, 8003704 <setvbuf+0x1c>
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	b913      	cbnz	r3, 8003704 <setvbuf+0x1c>
 80036fe:	4638      	mov	r0, r7
 8003700:	f7ff ff44 	bl	800358c <__sinit>
 8003704:	f1b8 0f02 	cmp.w	r8, #2
 8003708:	d006      	beq.n	8003718 <setvbuf+0x30>
 800370a:	f1b8 0f01 	cmp.w	r8, #1
 800370e:	f200 809a 	bhi.w	8003846 <setvbuf+0x15e>
 8003712:	2d00      	cmp	r5, #0
 8003714:	f2c0 8097 	blt.w	8003846 <setvbuf+0x15e>
 8003718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800371a:	07d9      	lsls	r1, r3, #31
 800371c:	d405      	bmi.n	800372a <setvbuf+0x42>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	059a      	lsls	r2, r3, #22
 8003722:	d402      	bmi.n	800372a <setvbuf+0x42>
 8003724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003726:	f000 f9e4 	bl	8003af2 <__retarget_lock_acquire_recursive>
 800372a:	4621      	mov	r1, r4
 800372c:	4638      	mov	r0, r7
 800372e:	f000 fe37 	bl	80043a0 <_fflush_r>
 8003732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003734:	b141      	cbz	r1, 8003748 <setvbuf+0x60>
 8003736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800373a:	4299      	cmp	r1, r3
 800373c:	d002      	beq.n	8003744 <setvbuf+0x5c>
 800373e:	4638      	mov	r0, r7
 8003740:	f000 f9da 	bl	8003af8 <_free_r>
 8003744:	2300      	movs	r3, #0
 8003746:	6363      	str	r3, [r4, #52]	@ 0x34
 8003748:	2300      	movs	r3, #0
 800374a:	61a3      	str	r3, [r4, #24]
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	d503      	bpl.n	800375c <setvbuf+0x74>
 8003754:	6921      	ldr	r1, [r4, #16]
 8003756:	4638      	mov	r0, r7
 8003758:	f000 f9ce 	bl	8003af8 <_free_r>
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f1b8 0f02 	cmp.w	r8, #2
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	d061      	beq.n	8003832 <setvbuf+0x14a>
 800376e:	ab01      	add	r3, sp, #4
 8003770:	466a      	mov	r2, sp
 8003772:	4621      	mov	r1, r4
 8003774:	4638      	mov	r0, r7
 8003776:	f000 fe3b 	bl	80043f0 <__swhatbuf_r>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	4318      	orrs	r0, r3
 800377e:	81a0      	strh	r0, [r4, #12]
 8003780:	bb2d      	cbnz	r5, 80037ce <setvbuf+0xe6>
 8003782:	9d00      	ldr	r5, [sp, #0]
 8003784:	4628      	mov	r0, r5
 8003786:	f000 fa01 	bl	8003b8c <malloc>
 800378a:	4606      	mov	r6, r0
 800378c:	2800      	cmp	r0, #0
 800378e:	d152      	bne.n	8003836 <setvbuf+0x14e>
 8003790:	f8dd 9000 	ldr.w	r9, [sp]
 8003794:	45a9      	cmp	r9, r5
 8003796:	d140      	bne.n	800381a <setvbuf+0x132>
 8003798:	f04f 35ff 	mov.w	r5, #4294967295
 800379c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a0:	f043 0202 	orr.w	r2, r3, #2
 80037a4:	81a2      	strh	r2, [r4, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	60a2      	str	r2, [r4, #8]
 80037aa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	6122      	str	r2, [r4, #16]
 80037b2:	2201      	movs	r2, #1
 80037b4:	6162      	str	r2, [r4, #20]
 80037b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037b8:	07d6      	lsls	r6, r2, #31
 80037ba:	d404      	bmi.n	80037c6 <setvbuf+0xde>
 80037bc:	0598      	lsls	r0, r3, #22
 80037be:	d402      	bmi.n	80037c6 <setvbuf+0xde>
 80037c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037c2:	f000 f997 	bl	8003af4 <__retarget_lock_release_recursive>
 80037c6:	4628      	mov	r0, r5
 80037c8:	b003      	add	sp, #12
 80037ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0d8      	beq.n	8003784 <setvbuf+0x9c>
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	b913      	cbnz	r3, 80037dc <setvbuf+0xf4>
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff fed8 	bl	800358c <__sinit>
 80037dc:	f1b8 0f01 	cmp.w	r8, #1
 80037e0:	bf08      	it	eq
 80037e2:	89a3      	ldrheq	r3, [r4, #12]
 80037e4:	6026      	str	r6, [r4, #0]
 80037e6:	bf04      	itt	eq
 80037e8:	f043 0301 	orreq.w	r3, r3, #1
 80037ec:	81a3      	strheq	r3, [r4, #12]
 80037ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f2:	f013 0208 	ands.w	r2, r3, #8
 80037f6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80037fa:	d01e      	beq.n	800383a <setvbuf+0x152>
 80037fc:	07d9      	lsls	r1, r3, #31
 80037fe:	bf41      	itttt	mi
 8003800:	2200      	movmi	r2, #0
 8003802:	426d      	negmi	r5, r5
 8003804:	60a2      	strmi	r2, [r4, #8]
 8003806:	61a5      	strmi	r5, [r4, #24]
 8003808:	bf58      	it	pl
 800380a:	60a5      	strpl	r5, [r4, #8]
 800380c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800380e:	07d2      	lsls	r2, r2, #31
 8003810:	d401      	bmi.n	8003816 <setvbuf+0x12e>
 8003812:	059b      	lsls	r3, r3, #22
 8003814:	d513      	bpl.n	800383e <setvbuf+0x156>
 8003816:	2500      	movs	r5, #0
 8003818:	e7d5      	b.n	80037c6 <setvbuf+0xde>
 800381a:	4648      	mov	r0, r9
 800381c:	f000 f9b6 	bl	8003b8c <malloc>
 8003820:	4606      	mov	r6, r0
 8003822:	2800      	cmp	r0, #0
 8003824:	d0b8      	beq.n	8003798 <setvbuf+0xb0>
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	464d      	mov	r5, r9
 8003830:	e7cf      	b.n	80037d2 <setvbuf+0xea>
 8003832:	2500      	movs	r5, #0
 8003834:	e7b2      	b.n	800379c <setvbuf+0xb4>
 8003836:	46a9      	mov	r9, r5
 8003838:	e7f5      	b.n	8003826 <setvbuf+0x13e>
 800383a:	60a2      	str	r2, [r4, #8]
 800383c:	e7e6      	b.n	800380c <setvbuf+0x124>
 800383e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003840:	f000 f958 	bl	8003af4 <__retarget_lock_release_recursive>
 8003844:	e7e7      	b.n	8003816 <setvbuf+0x12e>
 8003846:	f04f 35ff 	mov.w	r5, #4294967295
 800384a:	e7bc      	b.n	80037c6 <setvbuf+0xde>
 800384c:	20000018 	.word	0x20000018

08003850 <__sread>:
 8003850:	b510      	push	{r4, lr}
 8003852:	460c      	mov	r4, r1
 8003854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003858:	f000 f8fc 	bl	8003a54 <_read_r>
 800385c:	2800      	cmp	r0, #0
 800385e:	bfab      	itete	ge
 8003860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003862:	89a3      	ldrhlt	r3, [r4, #12]
 8003864:	181b      	addge	r3, r3, r0
 8003866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800386a:	bfac      	ite	ge
 800386c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800386e:	81a3      	strhlt	r3, [r4, #12]
 8003870:	bd10      	pop	{r4, pc}

08003872 <__swrite>:
 8003872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003876:	461f      	mov	r7, r3
 8003878:	898b      	ldrh	r3, [r1, #12]
 800387a:	05db      	lsls	r3, r3, #23
 800387c:	4605      	mov	r5, r0
 800387e:	460c      	mov	r4, r1
 8003880:	4616      	mov	r6, r2
 8003882:	d505      	bpl.n	8003890 <__swrite+0x1e>
 8003884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003888:	2302      	movs	r3, #2
 800388a:	2200      	movs	r2, #0
 800388c:	f000 f8d0 	bl	8003a30 <_lseek_r>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	4632      	mov	r2, r6
 800389e:	463b      	mov	r3, r7
 80038a0:	4628      	mov	r0, r5
 80038a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	f000 b8e7 	b.w	8003a78 <_write_r>

080038aa <__sseek>:
 80038aa:	b510      	push	{r4, lr}
 80038ac:	460c      	mov	r4, r1
 80038ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b2:	f000 f8bd 	bl	8003a30 <_lseek_r>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	bf15      	itete	ne
 80038bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038c6:	81a3      	strheq	r3, [r4, #12]
 80038c8:	bf18      	it	ne
 80038ca:	81a3      	strhne	r3, [r4, #12]
 80038cc:	bd10      	pop	{r4, pc}

080038ce <__sclose>:
 80038ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d2:	f000 b89d 	b.w	8003a10 <_close_r>

080038d6 <__swbuf_r>:
 80038d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d8:	460e      	mov	r6, r1
 80038da:	4614      	mov	r4, r2
 80038dc:	4605      	mov	r5, r0
 80038de:	b118      	cbz	r0, 80038e8 <__swbuf_r+0x12>
 80038e0:	6a03      	ldr	r3, [r0, #32]
 80038e2:	b90b      	cbnz	r3, 80038e8 <__swbuf_r+0x12>
 80038e4:	f7ff fe52 	bl	800358c <__sinit>
 80038e8:	69a3      	ldr	r3, [r4, #24]
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	071a      	lsls	r2, r3, #28
 80038f0:	d501      	bpl.n	80038f6 <__swbuf_r+0x20>
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	b943      	cbnz	r3, 8003908 <__swbuf_r+0x32>
 80038f6:	4621      	mov	r1, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 f82b 	bl	8003954 <__swsetup_r>
 80038fe:	b118      	cbz	r0, 8003908 <__swbuf_r+0x32>
 8003900:	f04f 37ff 	mov.w	r7, #4294967295
 8003904:	4638      	mov	r0, r7
 8003906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	6922      	ldr	r2, [r4, #16]
 800390c:	1a98      	subs	r0, r3, r2
 800390e:	6963      	ldr	r3, [r4, #20]
 8003910:	b2f6      	uxtb	r6, r6
 8003912:	4283      	cmp	r3, r0
 8003914:	4637      	mov	r7, r6
 8003916:	dc05      	bgt.n	8003924 <__swbuf_r+0x4e>
 8003918:	4621      	mov	r1, r4
 800391a:	4628      	mov	r0, r5
 800391c:	f000 fd40 	bl	80043a0 <_fflush_r>
 8003920:	2800      	cmp	r0, #0
 8003922:	d1ed      	bne.n	8003900 <__swbuf_r+0x2a>
 8003924:	68a3      	ldr	r3, [r4, #8]
 8003926:	3b01      	subs	r3, #1
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	6022      	str	r2, [r4, #0]
 8003930:	701e      	strb	r6, [r3, #0]
 8003932:	6962      	ldr	r2, [r4, #20]
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	429a      	cmp	r2, r3
 8003938:	d004      	beq.n	8003944 <__swbuf_r+0x6e>
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	07db      	lsls	r3, r3, #31
 800393e:	d5e1      	bpl.n	8003904 <__swbuf_r+0x2e>
 8003940:	2e0a      	cmp	r6, #10
 8003942:	d1df      	bne.n	8003904 <__swbuf_r+0x2e>
 8003944:	4621      	mov	r1, r4
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fd2a 	bl	80043a0 <_fflush_r>
 800394c:	2800      	cmp	r0, #0
 800394e:	d0d9      	beq.n	8003904 <__swbuf_r+0x2e>
 8003950:	e7d6      	b.n	8003900 <__swbuf_r+0x2a>
	...

08003954 <__swsetup_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <__swsetup_r+0xa8>)
 8003958:	4605      	mov	r5, r0
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	460c      	mov	r4, r1
 800395e:	b118      	cbz	r0, 8003968 <__swsetup_r+0x14>
 8003960:	6a03      	ldr	r3, [r0, #32]
 8003962:	b90b      	cbnz	r3, 8003968 <__swsetup_r+0x14>
 8003964:	f7ff fe12 	bl	800358c <__sinit>
 8003968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d422      	bmi.n	80039b6 <__swsetup_r+0x62>
 8003970:	06da      	lsls	r2, r3, #27
 8003972:	d407      	bmi.n	8003984 <__swsetup_r+0x30>
 8003974:	2209      	movs	r2, #9
 8003976:	602a      	str	r2, [r5, #0]
 8003978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	e033      	b.n	80039ec <__swsetup_r+0x98>
 8003984:	0758      	lsls	r0, r3, #29
 8003986:	d512      	bpl.n	80039ae <__swsetup_r+0x5a>
 8003988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800398a:	b141      	cbz	r1, 800399e <__swsetup_r+0x4a>
 800398c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003990:	4299      	cmp	r1, r3
 8003992:	d002      	beq.n	800399a <__swsetup_r+0x46>
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f8af 	bl	8003af8 <_free_r>
 800399a:	2300      	movs	r3, #0
 800399c:	6363      	str	r3, [r4, #52]	@ 0x34
 800399e:	89a3      	ldrh	r3, [r4, #12]
 80039a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	2300      	movs	r3, #0
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	b94b      	cbnz	r3, 80039ce <__swsetup_r+0x7a>
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c4:	d003      	beq.n	80039ce <__swsetup_r+0x7a>
 80039c6:	4621      	mov	r1, r4
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 fd37 	bl	800443c <__smakebuf_r>
 80039ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d2:	f013 0201 	ands.w	r2, r3, #1
 80039d6:	d00a      	beq.n	80039ee <__swsetup_r+0x9a>
 80039d8:	2200      	movs	r2, #0
 80039da:	60a2      	str	r2, [r4, #8]
 80039dc:	6962      	ldr	r2, [r4, #20]
 80039de:	4252      	negs	r2, r2
 80039e0:	61a2      	str	r2, [r4, #24]
 80039e2:	6922      	ldr	r2, [r4, #16]
 80039e4:	b942      	cbnz	r2, 80039f8 <__swsetup_r+0xa4>
 80039e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039ea:	d1c5      	bne.n	8003978 <__swsetup_r+0x24>
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	0799      	lsls	r1, r3, #30
 80039f0:	bf58      	it	pl
 80039f2:	6962      	ldrpl	r2, [r4, #20]
 80039f4:	60a2      	str	r2, [r4, #8]
 80039f6:	e7f4      	b.n	80039e2 <__swsetup_r+0x8e>
 80039f8:	2000      	movs	r0, #0
 80039fa:	e7f7      	b.n	80039ec <__swsetup_r+0x98>
 80039fc:	20000018 	.word	0x20000018

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <_close_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4d06      	ldr	r5, [pc, #24]	@ (8003a2c <_close_r+0x1c>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	f7fd f920 	bl	8000c60 <_close>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_close_r+0x1a>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_close_r+0x1a>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	200002a0 	.word	0x200002a0

08003a30 <_lseek_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4d07      	ldr	r5, [pc, #28]	@ (8003a50 <_lseek_r+0x20>)
 8003a34:	4604      	mov	r4, r0
 8003a36:	4608      	mov	r0, r1
 8003a38:	4611      	mov	r1, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	602a      	str	r2, [r5, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7fd f935 	bl	8000cae <_lseek>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_lseek_r+0x1e>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_lseek_r+0x1e>
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	200002a0 	.word	0x200002a0

08003a54 <_read_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4d07      	ldr	r5, [pc, #28]	@ (8003a74 <_read_r+0x20>)
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	2200      	movs	r2, #0
 8003a60:	602a      	str	r2, [r5, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f7fd f8df 	bl	8000c26 <_read>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_read_r+0x1e>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_read_r+0x1e>
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	200002a0 	.word	0x200002a0

08003a78 <_write_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d07      	ldr	r5, [pc, #28]	@ (8003a98 <_write_r+0x20>)
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	4608      	mov	r0, r1
 8003a80:	4611      	mov	r1, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	602a      	str	r2, [r5, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7fc ff88 	bl	800099c <_write>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_write_r+0x1e>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_write_r+0x1e>
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	200002a0 	.word	0x200002a0

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	@ (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000018 	.word	0x20000018

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	@ (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 fd2c 	bl	8004518 <_init>
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	080045d8 	.word	0x080045d8
 8003ae4:	080045d8 	.word	0x080045d8
 8003ae8:	080045d8 	.word	0x080045d8
 8003aec:	080045dc 	.word	0x080045dc

08003af0 <__retarget_lock_init_recursive>:
 8003af0:	4770      	bx	lr

08003af2 <__retarget_lock_acquire_recursive>:
 8003af2:	4770      	bx	lr

08003af4 <__retarget_lock_release_recursive>:
 8003af4:	4770      	bx	lr
	...

08003af8 <_free_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4605      	mov	r5, r0
 8003afc:	2900      	cmp	r1, #0
 8003afe:	d041      	beq.n	8003b84 <_free_r+0x8c>
 8003b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b04:	1f0c      	subs	r4, r1, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfb8      	it	lt
 8003b0a:	18e4      	addlt	r4, r4, r3
 8003b0c:	f000 f8e8 	bl	8003ce0 <__malloc_lock>
 8003b10:	4a1d      	ldr	r2, [pc, #116]	@ (8003b88 <_free_r+0x90>)
 8003b12:	6813      	ldr	r3, [r2, #0]
 8003b14:	b933      	cbnz	r3, 8003b24 <_free_r+0x2c>
 8003b16:	6063      	str	r3, [r4, #4]
 8003b18:	6014      	str	r4, [r2, #0]
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b20:	f000 b8e4 	b.w	8003cec <__malloc_unlock>
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d908      	bls.n	8003b3a <_free_r+0x42>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	1821      	adds	r1, r4, r0
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	bf01      	itttt	eq
 8003b30:	6819      	ldreq	r1, [r3, #0]
 8003b32:	685b      	ldreq	r3, [r3, #4]
 8003b34:	1809      	addeq	r1, r1, r0
 8003b36:	6021      	streq	r1, [r4, #0]
 8003b38:	e7ed      	b.n	8003b16 <_free_r+0x1e>
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b10b      	cbz	r3, 8003b44 <_free_r+0x4c>
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d9fa      	bls.n	8003b3a <_free_r+0x42>
 8003b44:	6811      	ldr	r1, [r2, #0]
 8003b46:	1850      	adds	r0, r2, r1
 8003b48:	42a0      	cmp	r0, r4
 8003b4a:	d10b      	bne.n	8003b64 <_free_r+0x6c>
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	4401      	add	r1, r0
 8003b50:	1850      	adds	r0, r2, r1
 8003b52:	4283      	cmp	r3, r0
 8003b54:	6011      	str	r1, [r2, #0]
 8003b56:	d1e0      	bne.n	8003b1a <_free_r+0x22>
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	6053      	str	r3, [r2, #4]
 8003b5e:	4408      	add	r0, r1
 8003b60:	6010      	str	r0, [r2, #0]
 8003b62:	e7da      	b.n	8003b1a <_free_r+0x22>
 8003b64:	d902      	bls.n	8003b6c <_free_r+0x74>
 8003b66:	230c      	movs	r3, #12
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	e7d6      	b.n	8003b1a <_free_r+0x22>
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	1821      	adds	r1, r4, r0
 8003b70:	428b      	cmp	r3, r1
 8003b72:	bf04      	itt	eq
 8003b74:	6819      	ldreq	r1, [r3, #0]
 8003b76:	685b      	ldreq	r3, [r3, #4]
 8003b78:	6063      	str	r3, [r4, #4]
 8003b7a:	bf04      	itt	eq
 8003b7c:	1809      	addeq	r1, r1, r0
 8003b7e:	6021      	streq	r1, [r4, #0]
 8003b80:	6054      	str	r4, [r2, #4]
 8003b82:	e7ca      	b.n	8003b1a <_free_r+0x22>
 8003b84:	bd38      	pop	{r3, r4, r5, pc}
 8003b86:	bf00      	nop
 8003b88:	200002ac 	.word	0x200002ac

08003b8c <malloc>:
 8003b8c:	4b02      	ldr	r3, [pc, #8]	@ (8003b98 <malloc+0xc>)
 8003b8e:	4601      	mov	r1, r0
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	f000 b825 	b.w	8003be0 <_malloc_r>
 8003b96:	bf00      	nop
 8003b98:	20000018 	.word	0x20000018

08003b9c <sbrk_aligned>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003bdc <sbrk_aligned+0x40>)
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b911      	cbnz	r1, 8003bae <sbrk_aligned+0x12>
 8003ba8:	f000 fca6 	bl	80044f8 <_sbrk_r>
 8003bac:	6030      	str	r0, [r6, #0]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fca1 	bl	80044f8 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d103      	bne.n	8003bc2 <sbrk_aligned+0x26>
 8003bba:	f04f 34ff 	mov.w	r4, #4294967295
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	1cc4      	adds	r4, r0, #3
 8003bc4:	f024 0403 	bic.w	r4, r4, #3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d0f8      	beq.n	8003bbe <sbrk_aligned+0x22>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fc92 	bl	80044f8 <_sbrk_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d1f2      	bne.n	8003bbe <sbrk_aligned+0x22>
 8003bd8:	e7ef      	b.n	8003bba <sbrk_aligned+0x1e>
 8003bda:	bf00      	nop
 8003bdc:	200002a8 	.word	0x200002a8

08003be0 <_malloc_r>:
 8003be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be4:	1ccd      	adds	r5, r1, #3
 8003be6:	f025 0503 	bic.w	r5, r5, #3
 8003bea:	3508      	adds	r5, #8
 8003bec:	2d0c      	cmp	r5, #12
 8003bee:	bf38      	it	cc
 8003bf0:	250c      	movcc	r5, #12
 8003bf2:	2d00      	cmp	r5, #0
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	db01      	blt.n	8003bfc <_malloc_r+0x1c>
 8003bf8:	42a9      	cmp	r1, r5
 8003bfa:	d904      	bls.n	8003c06 <_malloc_r+0x26>
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	2000      	movs	r0, #0
 8003c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cdc <_malloc_r+0xfc>
 8003c0a:	f000 f869 	bl	8003ce0 <__malloc_lock>
 8003c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c12:	461c      	mov	r4, r3
 8003c14:	bb44      	cbnz	r4, 8003c68 <_malloc_r+0x88>
 8003c16:	4629      	mov	r1, r5
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff ffbf 	bl	8003b9c <sbrk_aligned>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	4604      	mov	r4, r0
 8003c22:	d158      	bne.n	8003cd6 <_malloc_r+0xf6>
 8003c24:	f8d8 4000 	ldr.w	r4, [r8]
 8003c28:	4627      	mov	r7, r4
 8003c2a:	2f00      	cmp	r7, #0
 8003c2c:	d143      	bne.n	8003cb6 <_malloc_r+0xd6>
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	d04b      	beq.n	8003cca <_malloc_r+0xea>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4639      	mov	r1, r7
 8003c36:	4630      	mov	r0, r6
 8003c38:	eb04 0903 	add.w	r9, r4, r3
 8003c3c:	f000 fc5c 	bl	80044f8 <_sbrk_r>
 8003c40:	4581      	cmp	r9, r0
 8003c42:	d142      	bne.n	8003cca <_malloc_r+0xea>
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	1a6d      	subs	r5, r5, r1
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff ffa6 	bl	8003b9c <sbrk_aligned>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d03a      	beq.n	8003cca <_malloc_r+0xea>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	442b      	add	r3, r5
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	bb62      	cbnz	r2, 8003cbc <_malloc_r+0xdc>
 8003c62:	f8c8 7000 	str.w	r7, [r8]
 8003c66:	e00f      	b.n	8003c88 <_malloc_r+0xa8>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	1b52      	subs	r2, r2, r5
 8003c6c:	d420      	bmi.n	8003cb0 <_malloc_r+0xd0>
 8003c6e:	2a0b      	cmp	r2, #11
 8003c70:	d917      	bls.n	8003ca2 <_malloc_r+0xc2>
 8003c72:	1961      	adds	r1, r4, r5
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	6025      	str	r5, [r4, #0]
 8003c78:	bf18      	it	ne
 8003c7a:	6059      	strne	r1, [r3, #4]
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	bf08      	it	eq
 8003c80:	f8c8 1000 	streq.w	r1, [r8]
 8003c84:	5162      	str	r2, [r4, r5]
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 f82f 	bl	8003cec <__malloc_unlock>
 8003c8e:	f104 000b 	add.w	r0, r4, #11
 8003c92:	1d23      	adds	r3, r4, #4
 8003c94:	f020 0007 	bic.w	r0, r0, #7
 8003c98:	1ac2      	subs	r2, r0, r3
 8003c9a:	bf1c      	itt	ne
 8003c9c:	1a1b      	subne	r3, r3, r0
 8003c9e:	50a3      	strne	r3, [r4, r2]
 8003ca0:	e7af      	b.n	8003c02 <_malloc_r+0x22>
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	bf0c      	ite	eq
 8003ca8:	f8c8 2000 	streq.w	r2, [r8]
 8003cac:	605a      	strne	r2, [r3, #4]
 8003cae:	e7eb      	b.n	8003c88 <_malloc_r+0xa8>
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	6864      	ldr	r4, [r4, #4]
 8003cb4:	e7ae      	b.n	8003c14 <_malloc_r+0x34>
 8003cb6:	463c      	mov	r4, r7
 8003cb8:	687f      	ldr	r7, [r7, #4]
 8003cba:	e7b6      	b.n	8003c2a <_malloc_r+0x4a>
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d1fb      	bne.n	8003cbc <_malloc_r+0xdc>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6053      	str	r3, [r2, #4]
 8003cc8:	e7de      	b.n	8003c88 <_malloc_r+0xa8>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 f80c 	bl	8003cec <__malloc_unlock>
 8003cd4:	e794      	b.n	8003c00 <_malloc_r+0x20>
 8003cd6:	6005      	str	r5, [r0, #0]
 8003cd8:	e7d6      	b.n	8003c88 <_malloc_r+0xa8>
 8003cda:	bf00      	nop
 8003cdc:	200002ac 	.word	0x200002ac

08003ce0 <__malloc_lock>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	@ (8003ce8 <__malloc_lock+0x8>)
 8003ce2:	f7ff bf06 	b.w	8003af2 <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	200002a4 	.word	0x200002a4

08003cec <__malloc_unlock>:
 8003cec:	4801      	ldr	r0, [pc, #4]	@ (8003cf4 <__malloc_unlock+0x8>)
 8003cee:	f7ff bf01 	b.w	8003af4 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200002a4 	.word	0x200002a4

08003cf8 <__sfputc_r>:
 8003cf8:	6893      	ldr	r3, [r2, #8]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	b410      	push	{r4}
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	da08      	bge.n	8003d16 <__sfputc_r+0x1e>
 8003d04:	6994      	ldr	r4, [r2, #24]
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	db01      	blt.n	8003d0e <__sfputc_r+0x16>
 8003d0a:	290a      	cmp	r1, #10
 8003d0c:	d103      	bne.n	8003d16 <__sfputc_r+0x1e>
 8003d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d12:	f7ff bde0 	b.w	80038d6 <__swbuf_r>
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	1c58      	adds	r0, r3, #1
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	7019      	strb	r1, [r3, #0]
 8003d1e:	4608      	mov	r0, r1
 8003d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <__sfputs_r>:
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	18d5      	adds	r5, r2, r3
 8003d30:	42ac      	cmp	r4, r5
 8003d32:	d101      	bne.n	8003d38 <__sfputs_r+0x12>
 8003d34:	2000      	movs	r0, #0
 8003d36:	e007      	b.n	8003d48 <__sfputs_r+0x22>
 8003d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3c:	463a      	mov	r2, r7
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffda 	bl	8003cf8 <__sfputc_r>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d1f3      	bne.n	8003d30 <__sfputs_r+0xa>
 8003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d4c <_vfiprintf_r>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	460d      	mov	r5, r1
 8003d52:	b09d      	sub	sp, #116	@ 0x74
 8003d54:	4614      	mov	r4, r2
 8003d56:	4698      	mov	r8, r3
 8003d58:	4606      	mov	r6, r0
 8003d5a:	b118      	cbz	r0, 8003d64 <_vfiprintf_r+0x18>
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b90b      	cbnz	r3, 8003d64 <_vfiprintf_r+0x18>
 8003d60:	f7ff fc14 	bl	800358c <__sinit>
 8003d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d66:	07d9      	lsls	r1, r3, #31
 8003d68:	d405      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	059a      	lsls	r2, r3, #22
 8003d6e:	d402      	bmi.n	8003d76 <_vfiprintf_r+0x2a>
 8003d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d72:	f7ff febe 	bl	8003af2 <__retarget_lock_acquire_recursive>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	d501      	bpl.n	8003d80 <_vfiprintf_r+0x34>
 8003d7c:	692b      	ldr	r3, [r5, #16]
 8003d7e:	b99b      	cbnz	r3, 8003da8 <_vfiprintf_r+0x5c>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4630      	mov	r0, r6
 8003d84:	f7ff fde6 	bl	8003954 <__swsetup_r>
 8003d88:	b170      	cbz	r0, 8003da8 <_vfiprintf_r+0x5c>
 8003d8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d8c:	07dc      	lsls	r4, r3, #31
 8003d8e:	d504      	bpl.n	8003d9a <_vfiprintf_r+0x4e>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	b01d      	add	sp, #116	@ 0x74
 8003d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	0598      	lsls	r0, r3, #22
 8003d9e:	d4f7      	bmi.n	8003d90 <_vfiprintf_r+0x44>
 8003da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003da2:	f7ff fea7 	bl	8003af4 <__retarget_lock_release_recursive>
 8003da6:	e7f3      	b.n	8003d90 <_vfiprintf_r+0x44>
 8003da8:	2300      	movs	r3, #0
 8003daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dac:	2320      	movs	r3, #32
 8003dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db6:	2330      	movs	r3, #48	@ 0x30
 8003db8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f68 <_vfiprintf_r+0x21c>
 8003dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dc0:	f04f 0901 	mov.w	r9, #1
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	469a      	mov	sl, r3
 8003dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_vfiprintf_r+0x86>
 8003dce:	2a25      	cmp	r2, #37	@ 0x25
 8003dd0:	d1f9      	bne.n	8003dc6 <_vfiprintf_r+0x7a>
 8003dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003dd6:	d00b      	beq.n	8003df0 <_vfiprintf_r+0xa4>
 8003dd8:	465b      	mov	r3, fp
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff ffa1 	bl	8003d26 <__sfputs_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	f000 80a7 	beq.w	8003f38 <_vfiprintf_r+0x1ec>
 8003dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dec:	445a      	add	r2, fp
 8003dee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003df0:	f89a 3000 	ldrb.w	r3, [sl]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 809f 	beq.w	8003f38 <_vfiprintf_r+0x1ec>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e04:	f10a 0a01 	add.w	sl, sl, #1
 8003e08:	9304      	str	r3, [sp, #16]
 8003e0a:	9307      	str	r3, [sp, #28]
 8003e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e12:	4654      	mov	r4, sl
 8003e14:	2205      	movs	r2, #5
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	4853      	ldr	r0, [pc, #332]	@ (8003f68 <_vfiprintf_r+0x21c>)
 8003e1c:	f7fc f9f8 	bl	8000210 <memchr>
 8003e20:	9a04      	ldr	r2, [sp, #16]
 8003e22:	b9d8      	cbnz	r0, 8003e5c <_vfiprintf_r+0x110>
 8003e24:	06d1      	lsls	r1, r2, #27
 8003e26:	bf44      	itt	mi
 8003e28:	2320      	movmi	r3, #32
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e2e:	0713      	lsls	r3, r2, #28
 8003e30:	bf44      	itt	mi
 8003e32:	232b      	movmi	r3, #43	@ 0x2b
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e38:	f89a 3000 	ldrb.w	r3, [sl]
 8003e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e3e:	d015      	beq.n	8003e6c <_vfiprintf_r+0x120>
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	4654      	mov	r4, sl
 8003e44:	2000      	movs	r0, #0
 8003e46:	f04f 0c0a 	mov.w	ip, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e50:	3b30      	subs	r3, #48	@ 0x30
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d94b      	bls.n	8003eee <_vfiprintf_r+0x1a2>
 8003e56:	b1b0      	cbz	r0, 8003e86 <_vfiprintf_r+0x13a>
 8003e58:	9207      	str	r2, [sp, #28]
 8003e5a:	e014      	b.n	8003e86 <_vfiprintf_r+0x13a>
 8003e5c:	eba0 0308 	sub.w	r3, r0, r8
 8003e60:	fa09 f303 	lsl.w	r3, r9, r3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	46a2      	mov	sl, r4
 8003e6a:	e7d2      	b.n	8003e12 <_vfiprintf_r+0xc6>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	9103      	str	r1, [sp, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfbb      	ittet	lt
 8003e78:	425b      	neglt	r3, r3
 8003e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e7e:	9307      	strge	r3, [sp, #28]
 8003e80:	9307      	strlt	r3, [sp, #28]
 8003e82:	bfb8      	it	lt
 8003e84:	9204      	strlt	r2, [sp, #16]
 8003e86:	7823      	ldrb	r3, [r4, #0]
 8003e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e8a:	d10a      	bne.n	8003ea2 <_vfiprintf_r+0x156>
 8003e8c:	7863      	ldrb	r3, [r4, #1]
 8003e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e90:	d132      	bne.n	8003ef8 <_vfiprintf_r+0x1ac>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d1a      	adds	r2, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9203      	str	r2, [sp, #12]
 8003e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e9e:	3402      	adds	r4, #2
 8003ea0:	9305      	str	r3, [sp, #20]
 8003ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f78 <_vfiprintf_r+0x22c>
 8003ea6:	7821      	ldrb	r1, [r4, #0]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	4650      	mov	r0, sl
 8003eac:	f7fc f9b0 	bl	8000210 <memchr>
 8003eb0:	b138      	cbz	r0, 8003ec2 <_vfiprintf_r+0x176>
 8003eb2:	9b04      	ldr	r3, [sp, #16]
 8003eb4:	eba0 000a 	sub.w	r0, r0, sl
 8003eb8:	2240      	movs	r2, #64	@ 0x40
 8003eba:	4082      	lsls	r2, r0
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	3401      	adds	r4, #1
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec6:	4829      	ldr	r0, [pc, #164]	@ (8003f6c <_vfiprintf_r+0x220>)
 8003ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ecc:	2206      	movs	r2, #6
 8003ece:	f7fc f99f 	bl	8000210 <memchr>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d03f      	beq.n	8003f56 <_vfiprintf_r+0x20a>
 8003ed6:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <_vfiprintf_r+0x224>)
 8003ed8:	bb1b      	cbnz	r3, 8003f22 <_vfiprintf_r+0x1d6>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	3307      	adds	r3, #7
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ee8:	443b      	add	r3, r7
 8003eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eec:	e76a      	b.n	8003dc4 <_vfiprintf_r+0x78>
 8003eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	e7a8      	b.n	8003e4a <_vfiprintf_r+0xfe>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	3401      	adds	r4, #1
 8003efc:	9305      	str	r3, [sp, #20]
 8003efe:	4619      	mov	r1, r3
 8003f00:	f04f 0c0a 	mov.w	ip, #10
 8003f04:	4620      	mov	r0, r4
 8003f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f0a:	3a30      	subs	r2, #48	@ 0x30
 8003f0c:	2a09      	cmp	r2, #9
 8003f0e:	d903      	bls.n	8003f18 <_vfiprintf_r+0x1cc>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0c6      	beq.n	8003ea2 <_vfiprintf_r+0x156>
 8003f14:	9105      	str	r1, [sp, #20]
 8003f16:	e7c4      	b.n	8003ea2 <_vfiprintf_r+0x156>
 8003f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e7f0      	b.n	8003f04 <_vfiprintf_r+0x1b8>
 8003f22:	ab03      	add	r3, sp, #12
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	462a      	mov	r2, r5
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <_vfiprintf_r+0x228>)
 8003f2a:	a904      	add	r1, sp, #16
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f3af 8000 	nop.w
 8003f32:	4607      	mov	r7, r0
 8003f34:	1c78      	adds	r0, r7, #1
 8003f36:	d1d6      	bne.n	8003ee6 <_vfiprintf_r+0x19a>
 8003f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f3a:	07d9      	lsls	r1, r3, #31
 8003f3c:	d405      	bmi.n	8003f4a <_vfiprintf_r+0x1fe>
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	059a      	lsls	r2, r3, #22
 8003f42:	d402      	bmi.n	8003f4a <_vfiprintf_r+0x1fe>
 8003f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f46:	f7ff fdd5 	bl	8003af4 <__retarget_lock_release_recursive>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	065b      	lsls	r3, r3, #25
 8003f4e:	f53f af1f 	bmi.w	8003d90 <_vfiprintf_r+0x44>
 8003f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f54:	e71e      	b.n	8003d94 <_vfiprintf_r+0x48>
 8003f56:	ab03      	add	r3, sp, #12
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <_vfiprintf_r+0x228>)
 8003f5e:	a904      	add	r1, sp, #16
 8003f60:	4630      	mov	r0, r6
 8003f62:	f000 f879 	bl	8004058 <_printf_i>
 8003f66:	e7e4      	b.n	8003f32 <_vfiprintf_r+0x1e6>
 8003f68:	0800459c 	.word	0x0800459c
 8003f6c:	080045a6 	.word	0x080045a6
 8003f70:	00000000 	.word	0x00000000
 8003f74:	08003d27 	.word	0x08003d27
 8003f78:	080045a2 	.word	0x080045a2

08003f7c <_printf_common>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	4616      	mov	r6, r2
 8003f82:	4698      	mov	r8, r3
 8003f84:	688a      	ldr	r2, [r1, #8]
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bfb8      	it	lt
 8003f90:	4613      	movlt	r3, r2
 8003f92:	6033      	str	r3, [r6, #0]
 8003f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f98:	4607      	mov	r7, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	b10a      	cbz	r2, 8003fa2 <_printf_common+0x26>
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	0699      	lsls	r1, r3, #26
 8003fa6:	bf42      	ittt	mi
 8003fa8:	6833      	ldrmi	r3, [r6, #0]
 8003faa:	3302      	addmi	r3, #2
 8003fac:	6033      	strmi	r3, [r6, #0]
 8003fae:	6825      	ldr	r5, [r4, #0]
 8003fb0:	f015 0506 	ands.w	r5, r5, #6
 8003fb4:	d106      	bne.n	8003fc4 <_printf_common+0x48>
 8003fb6:	f104 0a19 	add.w	sl, r4, #25
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	6832      	ldr	r2, [r6, #0]
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	42ab      	cmp	r3, r5
 8003fc2:	dc26      	bgt.n	8004012 <_printf_common+0x96>
 8003fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	3b00      	subs	r3, #0
 8003fcc:	bf18      	it	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	0692      	lsls	r2, r2, #26
 8003fd2:	d42b      	bmi.n	800402c <_printf_common+0xb0>
 8003fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c8      	blx	r9
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d01e      	beq.n	8004020 <_printf_common+0xa4>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	f003 0306 	and.w	r3, r3, #6
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	bf02      	ittt	eq
 8003fee:	68e5      	ldreq	r5, [r4, #12]
 8003ff0:	6833      	ldreq	r3, [r6, #0]
 8003ff2:	1aed      	subeq	r5, r5, r3
 8003ff4:	68a3      	ldr	r3, [r4, #8]
 8003ff6:	bf0c      	ite	eq
 8003ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ffc:	2500      	movne	r5, #0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bfc4      	itt	gt
 8004002:	1a9b      	subgt	r3, r3, r2
 8004004:	18ed      	addgt	r5, r5, r3
 8004006:	2600      	movs	r6, #0
 8004008:	341a      	adds	r4, #26
 800400a:	42b5      	cmp	r5, r6
 800400c:	d11a      	bne.n	8004044 <_printf_common+0xc8>
 800400e:	2000      	movs	r0, #0
 8004010:	e008      	b.n	8004024 <_printf_common+0xa8>
 8004012:	2301      	movs	r3, #1
 8004014:	4652      	mov	r2, sl
 8004016:	4641      	mov	r1, r8
 8004018:	4638      	mov	r0, r7
 800401a:	47c8      	blx	r9
 800401c:	3001      	adds	r0, #1
 800401e:	d103      	bne.n	8004028 <_printf_common+0xac>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004028:	3501      	adds	r5, #1
 800402a:	e7c6      	b.n	8003fba <_printf_common+0x3e>
 800402c:	18e1      	adds	r1, r4, r3
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	2030      	movs	r0, #48	@ 0x30
 8004032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004036:	4422      	add	r2, r4
 8004038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800403c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004040:	3302      	adds	r3, #2
 8004042:	e7c7      	b.n	8003fd4 <_printf_common+0x58>
 8004044:	2301      	movs	r3, #1
 8004046:	4622      	mov	r2, r4
 8004048:	4641      	mov	r1, r8
 800404a:	4638      	mov	r0, r7
 800404c:	47c8      	blx	r9
 800404e:	3001      	adds	r0, #1
 8004050:	d0e6      	beq.n	8004020 <_printf_common+0xa4>
 8004052:	3601      	adds	r6, #1
 8004054:	e7d9      	b.n	800400a <_printf_common+0x8e>
	...

08004058 <_printf_i>:
 8004058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	7e0f      	ldrb	r7, [r1, #24]
 800405e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004060:	2f78      	cmp	r7, #120	@ 0x78
 8004062:	4691      	mov	r9, r2
 8004064:	4680      	mov	r8, r0
 8004066:	460c      	mov	r4, r1
 8004068:	469a      	mov	sl, r3
 800406a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800406e:	d807      	bhi.n	8004080 <_printf_i+0x28>
 8004070:	2f62      	cmp	r7, #98	@ 0x62
 8004072:	d80a      	bhi.n	800408a <_printf_i+0x32>
 8004074:	2f00      	cmp	r7, #0
 8004076:	f000 80d2 	beq.w	800421e <_printf_i+0x1c6>
 800407a:	2f58      	cmp	r7, #88	@ 0x58
 800407c:	f000 80b9 	beq.w	80041f2 <_printf_i+0x19a>
 8004080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004088:	e03a      	b.n	8004100 <_printf_i+0xa8>
 800408a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800408e:	2b15      	cmp	r3, #21
 8004090:	d8f6      	bhi.n	8004080 <_printf_i+0x28>
 8004092:	a101      	add	r1, pc, #4	@ (adr r1, 8004098 <_printf_i+0x40>)
 8004094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004098:	080040f1 	.word	0x080040f1
 800409c:	08004105 	.word	0x08004105
 80040a0:	08004081 	.word	0x08004081
 80040a4:	08004081 	.word	0x08004081
 80040a8:	08004081 	.word	0x08004081
 80040ac:	08004081 	.word	0x08004081
 80040b0:	08004105 	.word	0x08004105
 80040b4:	08004081 	.word	0x08004081
 80040b8:	08004081 	.word	0x08004081
 80040bc:	08004081 	.word	0x08004081
 80040c0:	08004081 	.word	0x08004081
 80040c4:	08004205 	.word	0x08004205
 80040c8:	0800412f 	.word	0x0800412f
 80040cc:	080041bf 	.word	0x080041bf
 80040d0:	08004081 	.word	0x08004081
 80040d4:	08004081 	.word	0x08004081
 80040d8:	08004227 	.word	0x08004227
 80040dc:	08004081 	.word	0x08004081
 80040e0:	0800412f 	.word	0x0800412f
 80040e4:	08004081 	.word	0x08004081
 80040e8:	08004081 	.word	0x08004081
 80040ec:	080041c7 	.word	0x080041c7
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6032      	str	r2, [r6, #0]
 80040f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004100:	2301      	movs	r3, #1
 8004102:	e09d      	b.n	8004240 <_printf_i+0x1e8>
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1d19      	adds	r1, r3, #4
 800410a:	6031      	str	r1, [r6, #0]
 800410c:	0606      	lsls	r6, r0, #24
 800410e:	d501      	bpl.n	8004114 <_printf_i+0xbc>
 8004110:	681d      	ldr	r5, [r3, #0]
 8004112:	e003      	b.n	800411c <_printf_i+0xc4>
 8004114:	0645      	lsls	r5, r0, #25
 8004116:	d5fb      	bpl.n	8004110 <_printf_i+0xb8>
 8004118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800411c:	2d00      	cmp	r5, #0
 800411e:	da03      	bge.n	8004128 <_printf_i+0xd0>
 8004120:	232d      	movs	r3, #45	@ 0x2d
 8004122:	426d      	negs	r5, r5
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004128:	4859      	ldr	r0, [pc, #356]	@ (8004290 <_printf_i+0x238>)
 800412a:	230a      	movs	r3, #10
 800412c:	e011      	b.n	8004152 <_printf_i+0xfa>
 800412e:	6821      	ldr	r1, [r4, #0]
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	0608      	lsls	r0, r1, #24
 8004134:	f853 5b04 	ldr.w	r5, [r3], #4
 8004138:	d402      	bmi.n	8004140 <_printf_i+0xe8>
 800413a:	0649      	lsls	r1, r1, #25
 800413c:	bf48      	it	mi
 800413e:	b2ad      	uxthmi	r5, r5
 8004140:	2f6f      	cmp	r7, #111	@ 0x6f
 8004142:	4853      	ldr	r0, [pc, #332]	@ (8004290 <_printf_i+0x238>)
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	bf14      	ite	ne
 8004148:	230a      	movne	r3, #10
 800414a:	2308      	moveq	r3, #8
 800414c:	2100      	movs	r1, #0
 800414e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004152:	6866      	ldr	r6, [r4, #4]
 8004154:	60a6      	str	r6, [r4, #8]
 8004156:	2e00      	cmp	r6, #0
 8004158:	bfa2      	ittt	ge
 800415a:	6821      	ldrge	r1, [r4, #0]
 800415c:	f021 0104 	bicge.w	r1, r1, #4
 8004160:	6021      	strge	r1, [r4, #0]
 8004162:	b90d      	cbnz	r5, 8004168 <_printf_i+0x110>
 8004164:	2e00      	cmp	r6, #0
 8004166:	d04b      	beq.n	8004200 <_printf_i+0x1a8>
 8004168:	4616      	mov	r6, r2
 800416a:	fbb5 f1f3 	udiv	r1, r5, r3
 800416e:	fb03 5711 	mls	r7, r3, r1, r5
 8004172:	5dc7      	ldrb	r7, [r0, r7]
 8004174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004178:	462f      	mov	r7, r5
 800417a:	42bb      	cmp	r3, r7
 800417c:	460d      	mov	r5, r1
 800417e:	d9f4      	bls.n	800416a <_printf_i+0x112>
 8004180:	2b08      	cmp	r3, #8
 8004182:	d10b      	bne.n	800419c <_printf_i+0x144>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	07df      	lsls	r7, r3, #31
 8004188:	d508      	bpl.n	800419c <_printf_i+0x144>
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	6861      	ldr	r1, [r4, #4]
 800418e:	4299      	cmp	r1, r3
 8004190:	bfde      	ittt	le
 8004192:	2330      	movle	r3, #48	@ 0x30
 8004194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800419c:	1b92      	subs	r2, r2, r6
 800419e:	6122      	str	r2, [r4, #16]
 80041a0:	f8cd a000 	str.w	sl, [sp]
 80041a4:	464b      	mov	r3, r9
 80041a6:	aa03      	add	r2, sp, #12
 80041a8:	4621      	mov	r1, r4
 80041aa:	4640      	mov	r0, r8
 80041ac:	f7ff fee6 	bl	8003f7c <_printf_common>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d14a      	bne.n	800424a <_printf_i+0x1f2>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b004      	add	sp, #16
 80041ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	f043 0320 	orr.w	r3, r3, #32
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	4833      	ldr	r0, [pc, #204]	@ (8004294 <_printf_i+0x23c>)
 80041c8:	2778      	movs	r7, #120	@ 0x78
 80041ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	6831      	ldr	r1, [r6, #0]
 80041d2:	061f      	lsls	r7, r3, #24
 80041d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80041d8:	d402      	bmi.n	80041e0 <_printf_i+0x188>
 80041da:	065f      	lsls	r7, r3, #25
 80041dc:	bf48      	it	mi
 80041de:	b2ad      	uxthmi	r5, r5
 80041e0:	6031      	str	r1, [r6, #0]
 80041e2:	07d9      	lsls	r1, r3, #31
 80041e4:	bf44      	itt	mi
 80041e6:	f043 0320 	orrmi.w	r3, r3, #32
 80041ea:	6023      	strmi	r3, [r4, #0]
 80041ec:	b11d      	cbz	r5, 80041f6 <_printf_i+0x19e>
 80041ee:	2310      	movs	r3, #16
 80041f0:	e7ac      	b.n	800414c <_printf_i+0xf4>
 80041f2:	4827      	ldr	r0, [pc, #156]	@ (8004290 <_printf_i+0x238>)
 80041f4:	e7e9      	b.n	80041ca <_printf_i+0x172>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	f023 0320 	bic.w	r3, r3, #32
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	e7f6      	b.n	80041ee <_printf_i+0x196>
 8004200:	4616      	mov	r6, r2
 8004202:	e7bd      	b.n	8004180 <_printf_i+0x128>
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	6961      	ldr	r1, [r4, #20]
 800420a:	1d18      	adds	r0, r3, #4
 800420c:	6030      	str	r0, [r6, #0]
 800420e:	062e      	lsls	r6, r5, #24
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	d501      	bpl.n	8004218 <_printf_i+0x1c0>
 8004214:	6019      	str	r1, [r3, #0]
 8004216:	e002      	b.n	800421e <_printf_i+0x1c6>
 8004218:	0668      	lsls	r0, r5, #25
 800421a:	d5fb      	bpl.n	8004214 <_printf_i+0x1bc>
 800421c:	8019      	strh	r1, [r3, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	6123      	str	r3, [r4, #16]
 8004222:	4616      	mov	r6, r2
 8004224:	e7bc      	b.n	80041a0 <_printf_i+0x148>
 8004226:	6833      	ldr	r3, [r6, #0]
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	6032      	str	r2, [r6, #0]
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	2100      	movs	r1, #0
 8004232:	4630      	mov	r0, r6
 8004234:	f7fb ffec 	bl	8000210 <memchr>
 8004238:	b108      	cbz	r0, 800423e <_printf_i+0x1e6>
 800423a:	1b80      	subs	r0, r0, r6
 800423c:	6060      	str	r0, [r4, #4]
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	2300      	movs	r3, #0
 8004244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004248:	e7aa      	b.n	80041a0 <_printf_i+0x148>
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	4632      	mov	r2, r6
 800424e:	4649      	mov	r1, r9
 8004250:	4640      	mov	r0, r8
 8004252:	47d0      	blx	sl
 8004254:	3001      	adds	r0, #1
 8004256:	d0ad      	beq.n	80041b4 <_printf_i+0x15c>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	079b      	lsls	r3, r3, #30
 800425c:	d413      	bmi.n	8004286 <_printf_i+0x22e>
 800425e:	68e0      	ldr	r0, [r4, #12]
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	4298      	cmp	r0, r3
 8004264:	bfb8      	it	lt
 8004266:	4618      	movlt	r0, r3
 8004268:	e7a6      	b.n	80041b8 <_printf_i+0x160>
 800426a:	2301      	movs	r3, #1
 800426c:	4632      	mov	r2, r6
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	47d0      	blx	sl
 8004274:	3001      	adds	r0, #1
 8004276:	d09d      	beq.n	80041b4 <_printf_i+0x15c>
 8004278:	3501      	adds	r5, #1
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	9903      	ldr	r1, [sp, #12]
 800427e:	1a5b      	subs	r3, r3, r1
 8004280:	42ab      	cmp	r3, r5
 8004282:	dcf2      	bgt.n	800426a <_printf_i+0x212>
 8004284:	e7eb      	b.n	800425e <_printf_i+0x206>
 8004286:	2500      	movs	r5, #0
 8004288:	f104 0619 	add.w	r6, r4, #25
 800428c:	e7f5      	b.n	800427a <_printf_i+0x222>
 800428e:	bf00      	nop
 8004290:	080045ad 	.word	0x080045ad
 8004294:	080045be 	.word	0x080045be

08004298 <__sflush_r>:
 8004298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	0716      	lsls	r6, r2, #28
 80042a2:	4605      	mov	r5, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	d454      	bmi.n	8004352 <__sflush_r+0xba>
 80042a8:	684b      	ldr	r3, [r1, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dc02      	bgt.n	80042b4 <__sflush_r+0x1c>
 80042ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd48      	ble.n	8004346 <__sflush_r+0xae>
 80042b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d045      	beq.n	8004346 <__sflush_r+0xae>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042c0:	682f      	ldr	r7, [r5, #0]
 80042c2:	6a21      	ldr	r1, [r4, #32]
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	d030      	beq.n	800432a <__sflush_r+0x92>
 80042c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	0759      	lsls	r1, r3, #29
 80042ce:	d505      	bpl.n	80042dc <__sflush_r+0x44>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042d6:	b10b      	cbz	r3, 80042dc <__sflush_r+0x44>
 80042d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042e0:	6a21      	ldr	r1, [r4, #32]
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	d106      	bne.n	80042fa <__sflush_r+0x62>
 80042ec:	6829      	ldr	r1, [r5, #0]
 80042ee:	291d      	cmp	r1, #29
 80042f0:	d82b      	bhi.n	800434a <__sflush_r+0xb2>
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <__sflush_r+0x104>)
 80042f4:	410a      	asrs	r2, r1
 80042f6:	07d6      	lsls	r6, r2, #31
 80042f8:	d427      	bmi.n	800434a <__sflush_r+0xb2>
 80042fa:	2200      	movs	r2, #0
 80042fc:	6062      	str	r2, [r4, #4]
 80042fe:	04d9      	lsls	r1, r3, #19
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	d504      	bpl.n	8004310 <__sflush_r+0x78>
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	d101      	bne.n	800430e <__sflush_r+0x76>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	b903      	cbnz	r3, 8004310 <__sflush_r+0x78>
 800430e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	b1b9      	cbz	r1, 8004346 <__sflush_r+0xae>
 8004316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800431a:	4299      	cmp	r1, r3
 800431c:	d002      	beq.n	8004324 <__sflush_r+0x8c>
 800431e:	4628      	mov	r0, r5
 8004320:	f7ff fbea 	bl	8003af8 <_free_r>
 8004324:	2300      	movs	r3, #0
 8004326:	6363      	str	r3, [r4, #52]	@ 0x34
 8004328:	e00d      	b.n	8004346 <__sflush_r+0xae>
 800432a:	2301      	movs	r3, #1
 800432c:	4628      	mov	r0, r5
 800432e:	47b0      	blx	r6
 8004330:	4602      	mov	r2, r0
 8004332:	1c50      	adds	r0, r2, #1
 8004334:	d1c9      	bne.n	80042ca <__sflush_r+0x32>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0c6      	beq.n	80042ca <__sflush_r+0x32>
 800433c:	2b1d      	cmp	r3, #29
 800433e:	d001      	beq.n	8004344 <__sflush_r+0xac>
 8004340:	2b16      	cmp	r3, #22
 8004342:	d11e      	bne.n	8004382 <__sflush_r+0xea>
 8004344:	602f      	str	r7, [r5, #0]
 8004346:	2000      	movs	r0, #0
 8004348:	e022      	b.n	8004390 <__sflush_r+0xf8>
 800434a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434e:	b21b      	sxth	r3, r3
 8004350:	e01b      	b.n	800438a <__sflush_r+0xf2>
 8004352:	690f      	ldr	r7, [r1, #16]
 8004354:	2f00      	cmp	r7, #0
 8004356:	d0f6      	beq.n	8004346 <__sflush_r+0xae>
 8004358:	0793      	lsls	r3, r2, #30
 800435a:	680e      	ldr	r6, [r1, #0]
 800435c:	bf08      	it	eq
 800435e:	694b      	ldreq	r3, [r1, #20]
 8004360:	600f      	str	r7, [r1, #0]
 8004362:	bf18      	it	ne
 8004364:	2300      	movne	r3, #0
 8004366:	eba6 0807 	sub.w	r8, r6, r7
 800436a:	608b      	str	r3, [r1, #8]
 800436c:	f1b8 0f00 	cmp.w	r8, #0
 8004370:	dde9      	ble.n	8004346 <__sflush_r+0xae>
 8004372:	6a21      	ldr	r1, [r4, #32]
 8004374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004376:	4643      	mov	r3, r8
 8004378:	463a      	mov	r2, r7
 800437a:	4628      	mov	r0, r5
 800437c:	47b0      	blx	r6
 800437e:	2800      	cmp	r0, #0
 8004380:	dc08      	bgt.n	8004394 <__sflush_r+0xfc>
 8004382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	4407      	add	r7, r0
 8004396:	eba8 0800 	sub.w	r8, r8, r0
 800439a:	e7e7      	b.n	800436c <__sflush_r+0xd4>
 800439c:	dfbffffe 	.word	0xdfbffffe

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b913      	cbnz	r3, 80043b0 <_fflush_r+0x10>
 80043aa:	2500      	movs	r5, #0
 80043ac:	4628      	mov	r0, r5
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	b118      	cbz	r0, 80043ba <_fflush_r+0x1a>
 80043b2:	6a03      	ldr	r3, [r0, #32]
 80043b4:	b90b      	cbnz	r3, 80043ba <_fflush_r+0x1a>
 80043b6:	f7ff f8e9 	bl	800358c <__sinit>
 80043ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f3      	beq.n	80043aa <_fflush_r+0xa>
 80043c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043c4:	07d0      	lsls	r0, r2, #31
 80043c6:	d404      	bmi.n	80043d2 <_fflush_r+0x32>
 80043c8:	0599      	lsls	r1, r3, #22
 80043ca:	d402      	bmi.n	80043d2 <_fflush_r+0x32>
 80043cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ce:	f7ff fb90 	bl	8003af2 <__retarget_lock_acquire_recursive>
 80043d2:	4628      	mov	r0, r5
 80043d4:	4621      	mov	r1, r4
 80043d6:	f7ff ff5f 	bl	8004298 <__sflush_r>
 80043da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043dc:	07da      	lsls	r2, r3, #31
 80043de:	4605      	mov	r5, r0
 80043e0:	d4e4      	bmi.n	80043ac <_fflush_r+0xc>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	059b      	lsls	r3, r3, #22
 80043e6:	d4e1      	bmi.n	80043ac <_fflush_r+0xc>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f7ff fb83 	bl	8003af4 <__retarget_lock_release_recursive>
 80043ee:	e7dd      	b.n	80043ac <_fflush_r+0xc>

080043f0 <__swhatbuf_r>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	460c      	mov	r4, r1
 80043f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f8:	2900      	cmp	r1, #0
 80043fa:	b096      	sub	sp, #88	@ 0x58
 80043fc:	4615      	mov	r5, r2
 80043fe:	461e      	mov	r6, r3
 8004400:	da0d      	bge.n	800441e <__swhatbuf_r+0x2e>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	bf14      	ite	ne
 800440e:	2340      	movne	r3, #64	@ 0x40
 8004410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004414:	2000      	movs	r0, #0
 8004416:	6031      	str	r1, [r6, #0]
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	b016      	add	sp, #88	@ 0x58
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	466a      	mov	r2, sp
 8004420:	f000 f848 	bl	80044b4 <_fstat_r>
 8004424:	2800      	cmp	r0, #0
 8004426:	dbec      	blt.n	8004402 <__swhatbuf_r+0x12>
 8004428:	9901      	ldr	r1, [sp, #4]
 800442a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800442e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004432:	4259      	negs	r1, r3
 8004434:	4159      	adcs	r1, r3
 8004436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800443a:	e7eb      	b.n	8004414 <__swhatbuf_r+0x24>

0800443c <__smakebuf_r>:
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004440:	079d      	lsls	r5, r3, #30
 8004442:	4606      	mov	r6, r0
 8004444:	460c      	mov	r4, r1
 8004446:	d507      	bpl.n	8004458 <__smakebuf_r+0x1c>
 8004448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	6123      	str	r3, [r4, #16]
 8004450:	2301      	movs	r3, #1
 8004452:	6163      	str	r3, [r4, #20]
 8004454:	b003      	add	sp, #12
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004458:	ab01      	add	r3, sp, #4
 800445a:	466a      	mov	r2, sp
 800445c:	f7ff ffc8 	bl	80043f0 <__swhatbuf_r>
 8004460:	9f00      	ldr	r7, [sp, #0]
 8004462:	4605      	mov	r5, r0
 8004464:	4639      	mov	r1, r7
 8004466:	4630      	mov	r0, r6
 8004468:	f7ff fbba 	bl	8003be0 <_malloc_r>
 800446c:	b948      	cbnz	r0, 8004482 <__smakebuf_r+0x46>
 800446e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004472:	059a      	lsls	r2, r3, #22
 8004474:	d4ee      	bmi.n	8004454 <__smakebuf_r+0x18>
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	e7e2      	b.n	8004448 <__smakebuf_r+0xc>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	6020      	str	r0, [r4, #0]
 8004486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	9b01      	ldr	r3, [sp, #4]
 800448e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004492:	b15b      	cbz	r3, 80044ac <__smakebuf_r+0x70>
 8004494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f81d 	bl	80044d8 <_isatty_r>
 800449e:	b128      	cbz	r0, 80044ac <__smakebuf_r+0x70>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	431d      	orrs	r5, r3
 80044b0:	81a5      	strh	r5, [r4, #12]
 80044b2:	e7cf      	b.n	8004454 <__smakebuf_r+0x18>

080044b4 <_fstat_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d07      	ldr	r5, [pc, #28]	@ (80044d4 <_fstat_r+0x20>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	f7fc fbd9 	bl	8000c78 <_fstat>
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d102      	bne.n	80044d0 <_fstat_r+0x1c>
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	b103      	cbz	r3, 80044d0 <_fstat_r+0x1c>
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	bd38      	pop	{r3, r4, r5, pc}
 80044d2:	bf00      	nop
 80044d4:	200002a0 	.word	0x200002a0

080044d8 <_isatty_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d06      	ldr	r5, [pc, #24]	@ (80044f4 <_isatty_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc fbd8 	bl	8000c98 <_isatty>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_isatty_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_isatty_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	200002a0 	.word	0x200002a0

080044f8 <_sbrk_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d06      	ldr	r5, [pc, #24]	@ (8004514 <_sbrk_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fbe0 	bl	8000cc8 <_sbrk>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_sbrk_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_sbrk_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	200002a0 	.word	0x200002a0

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
