
20250303_revstruct1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e6c  08002e6c  00003e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e94  08002e94  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00003e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e98  08002e98  00003e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002e9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002f04  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002f04  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c30  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a3  00000000  00000000  0000eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023a8  00000000  00000000  0000f14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009942  00000000  00000000  000114f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca5d8  00000000  00000000  0001ae35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e540d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  000e5450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  000e7858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e54 	.word	0x08002e54

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002e54 	.word	0x08002e54

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <main+0x38>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 f838 	bl	80025b4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa7e 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f812 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f89a 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f86e 	bl	8000630 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("snct\r\n");
 8000554:	4805      	ldr	r0, [pc, #20]	@ (800056c <main+0x3c>)
 8000556:	f002 f825 	bl	80025a4 <puts>
	  HAL_Delay(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800055e:	f000 fae3 	bl	8000b28 <HAL_Delay>
	  printf("snct\r\n");
 8000562:	bf00      	nop
 8000564:	e7f6      	b.n	8000554 <main+0x24>
 8000566:	bf00      	nop
 8000568:	20000018 	.word	0x20000018
 800056c:	08002e6c 	.word	0x08002e6c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	@ 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f9ac 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 f81b 	bl	8001620 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f8c0 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fd42 	bl	8001098 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061a:	f000 f8ab 	bl	8000774 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f001 fa78 	bl	8001b5c <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f87f 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_GPIO_Init+0xbc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	481b      	ldr	r0, [pc, #108]	@ (8000744 <MX_GPIO_Init+0xc0>)
 80006d8:	f000 fcc4 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	4819      	ldr	r0, [pc, #100]	@ (8000748 <MX_GPIO_Init+0xc4>)
 80006e2:	f000 fcbf 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_GPIO_Init+0xc0>)
 80006fe:	f000 fb1d 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <MX_GPIO_Init+0xc0>)
 8000716:	f000 fb11 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_GPIO_Init+0xc4>)
 8000732:	f000 fb03 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400

0800074c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr,int len){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	b29a      	uxth	r2, r3
 800075c:	230a      	movs	r3, #10
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <_write+0x24>)
 8000762:	f001 fa4b 	bl	8001bfc <HAL_UART_Transmit>
	return len;
 8000766:	687b      	ldr	r3, [r7, #4]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000084 	.word	0x20000084

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000794:	6453      	str	r3, [r2, #68]	@ 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	@ (8000854 <HAL_UART_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12b      	bne.n	800084a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0x88>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <HAL_UART_MspInit+0x8c>)
 8000846:	f000 fa79 	bl	8000d3c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40004400 	.word	0x40004400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f917 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e00a      	b.n	80008e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d0:	f3af 8000 	nop.w
 80008d4:	4601      	mov	r1, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	b2ca      	uxtb	r2, r1
 80008de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dbf0      	blt.n	80008d0 <_read+0x12>
  }

  return len;
 80008ee:	687b      	ldr	r3, [r7, #4]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000920:	605a      	str	r2, [r3, #4]
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_isatty>:

int _isatty(int file)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000938:	2301      	movs	r3, #1
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f001 fff2 	bl	8002978 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20020000 	.word	0x20020000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200000cc 	.word	0x200000cc
 80009c8:	20000220 	.word	0x20000220

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f001 ffb1 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fd85 	bl	8000530 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a34:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 8000a38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a3c:	20000220 	.word	0x20000220

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f931 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe82 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f93b 	bl	8000d22 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f911 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000d0 	.word	0x200000d0

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000d0 	.word	0x200000d0

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff47 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff5c 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffb0 	bl	8000c90 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e165      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8154 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ae 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a5c      	ldr	r2, [pc, #368]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a58      	ldr	r2, [pc, #352]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <HAL_GPIO_Init+0x308>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001048 <HAL_GPIO_Init+0x30c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <HAL_GPIO_Init+0x310>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001050 <HAL_GPIO_Init+0x314>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	@ (8001054 <HAL_GPIO_Init+0x318>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x20a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001058 <HAL_GPIO_Init+0x31c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x206>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	@ (800105c <HAL_GPIO_Init+0x320>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_GPIO_Init+0x324>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae96 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0cc      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b68      	ldr	r3, [pc, #416]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d90c      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b65      	ldr	r3, [pc, #404]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c2:	4b63      	ldr	r3, [pc, #396]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0b8      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	4b59      	ldr	r3, [pc, #356]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a58      	ldr	r2, [pc, #352]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001104:	4b53      	ldr	r3, [pc, #332]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a52      	ldr	r2, [pc, #328]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800110e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001110:	4b50      	ldr	r3, [pc, #320]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	494d      	ldr	r1, [pc, #308]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	4313      	orrs	r3, r2
 8001120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d044      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b47      	ldr	r3, [pc, #284]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d119      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001152:	2b03      	cmp	r3, #3
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e067      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b37      	ldr	r3, [pc, #220]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4934      	ldr	r1, [pc, #208]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fcc2 	bl	8000b10 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fcbe 	bl	8000b10 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e04f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d20c      	bcs.n	80011e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e032      	b.n	8001246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4916      	ldr	r1, [pc, #88]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121e:	f000 f855 	bl	80012cc <HAL_RCC_GetSysClockFreq>
 8001222:	4602      	mov	r2, r0
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	490a      	ldr	r1, [pc, #40]	@ (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	5ccb      	ldrb	r3, [r1, r3]
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	4a09      	ldr	r2, [pc, #36]	@ (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc22 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00
 8001254:	40023800 	.word	0x40023800
 8001258:	08002e74 	.word	0x08002e74
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_RCC_GetHCLKFreq+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001280:	f7ff fff0 	bl	8001264 <HAL_RCC_GetHCLKFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	0a9b      	lsrs	r3, r3, #10
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	4903      	ldr	r1, [pc, #12]	@ (80012a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001292:	5ccb      	ldrb	r3, [r1, r3]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	08002e84 	.word	0x08002e84

080012a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012a8:	f7ff ffdc 	bl	8001264 <HAL_RCC_GetHCLKFreq>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	0b5b      	lsrs	r3, r3, #13
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	4903      	ldr	r1, [pc, #12]	@ (80012c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	08002e84 	.word	0x08002e84

080012cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d0:	b0a6      	sub	sp, #152	@ 0x98
 80012d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f2:	4bc8      	ldr	r3, [pc, #800]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	f200 817e 	bhi.w	80015fc <HAL_RCC_GetSysClockFreq+0x330>
 8001300:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	0800133d 	.word	0x0800133d
 800130c:	080015fd 	.word	0x080015fd
 8001310:	080015fd 	.word	0x080015fd
 8001314:	080015fd 	.word	0x080015fd
 8001318:	08001345 	.word	0x08001345
 800131c:	080015fd 	.word	0x080015fd
 8001320:	080015fd 	.word	0x080015fd
 8001324:	080015fd 	.word	0x080015fd
 8001328:	0800134d 	.word	0x0800134d
 800132c:	080015fd 	.word	0x080015fd
 8001330:	080015fd 	.word	0x080015fd
 8001334:	080015fd 	.word	0x080015fd
 8001338:	080014b7 	.word	0x080014b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800133c:	4bb6      	ldr	r3, [pc, #728]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x34c>)
 800133e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001342:	e15f      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001344:	4bb5      	ldr	r3, [pc, #724]	@ (800161c <HAL_RCC_GetSysClockFreq+0x350>)
 8001346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800134a:	e15b      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800134c:	4bb1      	ldr	r3, [pc, #708]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001358:	4bae      	ldr	r3, [pc, #696]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d031      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001364:	4bab      	ldr	r3, [pc, #684]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	2200      	movs	r2, #0
 800136c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800136e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001376:	663b      	str	r3, [r7, #96]	@ 0x60
 8001378:	2300      	movs	r3, #0
 800137a:	667b      	str	r3, [r7, #100]	@ 0x64
 800137c:	4ba7      	ldr	r3, [pc, #668]	@ (800161c <HAL_RCC_GetSysClockFreq+0x350>)
 800137e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001382:	462a      	mov	r2, r5
 8001384:	fb03 f202 	mul.w	r2, r3, r2
 8001388:	2300      	movs	r3, #0
 800138a:	4621      	mov	r1, r4
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	4aa2      	ldr	r2, [pc, #648]	@ (800161c <HAL_RCC_GetSysClockFreq+0x350>)
 8001394:	4621      	mov	r1, r4
 8001396:	fba1 1202 	umull	r1, r2, r1, r2
 800139a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800139c:	460a      	mov	r2, r1
 800139e:	67ba      	str	r2, [r7, #120]	@ 0x78
 80013a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013a2:	4413      	add	r3, r2
 80013a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013aa:	2200      	movs	r2, #0
 80013ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80013b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80013b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80013b8:	f7fe ff24 	bl	8000204 <__aeabi_uldivmod>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4613      	mov	r3, r2
 80013c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013c6:	e064      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c8:	4b92      	ldr	r3, [pc, #584]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	2200      	movs	r2, #0
 80013d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80013d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80013d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013dc:	2300      	movs	r3, #0
 80013de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80013e4:	4622      	mov	r2, r4
 80013e6:	462b      	mov	r3, r5
 80013e8:	f04f 0000 	mov.w	r0, #0
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	0159      	lsls	r1, r3, #5
 80013f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f6:	0150      	lsls	r0, r2, #5
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4621      	mov	r1, r4
 80013fe:	1a51      	subs	r1, r2, r1
 8001400:	6139      	str	r1, [r7, #16]
 8001402:	4629      	mov	r1, r5
 8001404:	eb63 0301 	sbc.w	r3, r3, r1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001416:	4659      	mov	r1, fp
 8001418:	018b      	lsls	r3, r1, #6
 800141a:	4651      	mov	r1, sl
 800141c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001420:	4651      	mov	r1, sl
 8001422:	018a      	lsls	r2, r1, #6
 8001424:	4651      	mov	r1, sl
 8001426:	ebb2 0801 	subs.w	r8, r2, r1
 800142a:	4659      	mov	r1, fp
 800142c:	eb63 0901 	sbc.w	r9, r3, r1
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800143c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001440:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001444:	4690      	mov	r8, r2
 8001446:	4699      	mov	r9, r3
 8001448:	4623      	mov	r3, r4
 800144a:	eb18 0303 	adds.w	r3, r8, r3
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	462b      	mov	r3, r5
 8001452:	eb49 0303 	adc.w	r3, r9, r3
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001464:	4629      	mov	r1, r5
 8001466:	028b      	lsls	r3, r1, #10
 8001468:	4621      	mov	r1, r4
 800146a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800146e:	4621      	mov	r1, r4
 8001470:	028a      	lsls	r2, r1, #10
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800147a:	2200      	movs	r2, #0
 800147c:	643b      	str	r3, [r7, #64]	@ 0x40
 800147e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001484:	f7fe febe 	bl	8000204 <__aeabi_uldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4613      	mov	r3, r2
 800148e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001492:	4b60      	ldr	r3, [pc, #384]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	3301      	adds	r3, #1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80014a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80014a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014b4:	e0a6      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b6:	4b57      	ldr	r3, [pc, #348]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c2:	4b54      	ldr	r3, [pc, #336]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d02a      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ce:	4b51      	ldr	r3, [pc, #324]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	099b      	lsrs	r3, r3, #6
 80014d4:	2200      	movs	r2, #0
 80014d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014e0:	2100      	movs	r1, #0
 80014e2:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_RCC_GetSysClockFreq+0x350>)
 80014e4:	fb03 f201 	mul.w	r2, r3, r1
 80014e8:	2300      	movs	r3, #0
 80014ea:	fb00 f303 	mul.w	r3, r0, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	4a4a      	ldr	r2, [pc, #296]	@ (800161c <HAL_RCC_GetSysClockFreq+0x350>)
 80014f2:	fba0 1202 	umull	r1, r2, r0, r2
 80014f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80014f8:	460a      	mov	r2, r1
 80014fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80014fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014fe:	4413      	add	r3, r2
 8001500:	677b      	str	r3, [r7, #116]	@ 0x74
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	2200      	movs	r2, #0
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
 800150a:	637a      	str	r2, [r7, #52]	@ 0x34
 800150c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001510:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001514:	f7fe fe76 	bl	8000204 <__aeabi_uldivmod>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4613      	mov	r3, r2
 800151e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001522:	e05b      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	623b      	str	r3, [r7, #32]
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
 800153c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001540:	4642      	mov	r2, r8
 8001542:	464b      	mov	r3, r9
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0159      	lsls	r1, r3, #5
 800154e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001552:	0150      	lsls	r0, r2, #5
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4641      	mov	r1, r8
 800155a:	ebb2 0a01 	subs.w	sl, r2, r1
 800155e:	4649      	mov	r1, r9
 8001560:	eb63 0b01 	sbc.w	fp, r3, r1
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001578:	ebb2 040a 	subs.w	r4, r2, sl
 800157c:	eb63 050b 	sbc.w	r5, r3, fp
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	00eb      	lsls	r3, r5, #3
 800158a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800158e:	00e2      	lsls	r2, r4, #3
 8001590:	4614      	mov	r4, r2
 8001592:	461d      	mov	r5, r3
 8001594:	4643      	mov	r3, r8
 8001596:	18e3      	adds	r3, r4, r3
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	464b      	mov	r3, r9
 800159c:	eb45 0303 	adc.w	r3, r5, r3
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ae:	4629      	mov	r1, r5
 80015b0:	028b      	lsls	r3, r1, #10
 80015b2:	4621      	mov	r1, r4
 80015b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015b8:	4621      	mov	r1, r4
 80015ba:	028a      	lsls	r2, r1, #10
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015c4:	2200      	movs	r2, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	61fa      	str	r2, [r7, #28]
 80015ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ce:	f7fe fe19 	bl	8000204 <__aeabi_uldivmod>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4613      	mov	r3, r2
 80015d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x348>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0f1b      	lsrs	r3, r3, #28
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80015ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015fa:	e003      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001608:	4618      	mov	r0, r3
 800160a:	3798      	adds	r7, #152	@ 0x98
 800160c:	46bd      	mov	sp, r7
 800160e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	00f42400 	.word	0x00f42400
 800161c:	017d7840 	.word	0x017d7840

08001620 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e28d      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8083 	beq.w	8001746 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001640:	4b94      	ldr	r3, [pc, #592]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d019      	beq.n	8001680 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800164c:	4b91      	ldr	r3, [pc, #580]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
        || \
 8001654:	2b08      	cmp	r3, #8
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001658:	4b8e      	ldr	r3, [pc, #568]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001664:	d00c      	beq.n	8001680 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001666:	4b8b      	ldr	r3, [pc, #556]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d112      	bne.n	8001698 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001672:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800167e:	d10b      	bne.n	8001698 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	4b84      	ldr	r3, [pc, #528]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d05b      	beq.n	8001744 <HAL_RCC_OscConfig+0x124>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d157      	bne.n	8001744 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e25a      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_OscConfig+0x90>
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e01d      	b.n	80016ec <HAL_RCC_OscConfig+0xcc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0xb4>
 80016ba:	4b76      	ldr	r3, [pc, #472]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b73      	ldr	r3, [pc, #460]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a72      	ldr	r2, [pc, #456]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0xcc>
 80016d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa0c 	bl	8000b10 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fa08 	bl	8000b10 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e21f      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b61      	ldr	r3, [pc, #388]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0xdc>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff f9f8 	bl	8000b10 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff f9f4 	bl	8000b10 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e20b      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x104>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06f      	beq.n	8001832 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001752:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d017      	beq.n	800178e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800175e:	4b4d      	ldr	r3, [pc, #308]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
        || \
 8001766:	2b08      	cmp	r3, #8
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x186>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1d3      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4937      	ldr	r1, [pc, #220]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_OscConfig+0x278>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff f9a1 	bl	8000b10 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff f99d 	bl	8000b10 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1b4      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4925      	ldr	r1, [pc, #148]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_OscConfig+0x278>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff f980 	bl	8000b10 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff f97c 	bl	8000b10 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e193      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d036      	beq.n	80018ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d016      	beq.n	8001874 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_RCC_OscConfig+0x27c>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff f960 	bl	8000b10 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff f95c 	bl	8000b10 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e173      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_OscConfig+0x274>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x234>
 8001872:	e01b      	b.n	80018ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_OscConfig+0x27c>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff f949 	bl	8000b10 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e00e      	b.n	80018a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff f945 	bl	8000b10 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d907      	bls.n	80018a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e15c      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
 8001894:	40023800 	.word	0x40023800
 8001898:	42470000 	.word	0x42470000
 800189c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b8a      	ldr	r3, [pc, #552]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ea      	bne.n	8001882 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8097 	beq.w	80019e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b83      	ldr	r3, [pc, #524]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b7f      	ldr	r3, [pc, #508]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a7e      	ldr	r2, [pc, #504]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018da:	4b7c      	ldr	r3, [pc, #496]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b79      	ldr	r3, [pc, #484]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b76      	ldr	r3, [pc, #472]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a75      	ldr	r2, [pc, #468]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b0>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff f905 	bl	8000b10 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff f901 	bl	8000b10 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e118      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x31e>
 8001930:	4b66      	ldr	r3, [pc, #408]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001934:	4a65      	ldr	r2, [pc, #404]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	@ 0x70
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x358>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x340>
 8001946:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	4a60      	ldr	r2, [pc, #384]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	@ 0x70
 8001952:	4b5e      	ldr	r3, [pc, #376]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	4a5d      	ldr	r2, [pc, #372]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x358>
 8001960:	4b5a      	ldr	r3, [pc, #360]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001964:	4a59      	ldr	r2, [pc, #356]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	@ 0x70
 800196c:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001970:	4a56      	ldr	r2, [pc, #344]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff f8c6 	bl	8000b10 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff f8c2 	bl	8000b10 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0d7      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ee      	beq.n	8001988 <HAL_RCC_OscConfig+0x368>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f8b0 	bl	8000b10 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f8ac 	bl	8000b10 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0c1      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	4b40      	ldr	r3, [pc, #256]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ee      	bne.n	80019b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a3a      	ldr	r2, [pc, #232]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80ad 	beq.w	8001b4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d060      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d145      	bne.n	8001a92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <HAL_RCC_OscConfig+0x4b4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f880 	bl	8000b10 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f87c 	bl	8000b10 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e093      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	071b      	lsls	r3, r3, #28
 8001a5e:	491b      	ldr	r1, [pc, #108]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_RCC_OscConfig+0x4b4>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f851 	bl	8000b10 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f84d 	bl	8000b10 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e064      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x452>
 8001a90:	e05c      	b.n	8001b4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_RCC_OscConfig+0x4b4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f83a 	bl	8000b10 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f836 	bl	8000b10 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04d      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x480>
 8001abe:	e045      	b.n	8001b4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e040      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <HAL_RCC_OscConfig+0x538>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d030      	beq.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d129      	bne.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d122      	bne.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d119      	bne.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e042      	b.n	8001bf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7fe fe24 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	@ 0x24
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f973 	bl	8001e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d175      	bne.n	8001d08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_UART_Transmit+0x2c>
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e06e      	b.n	8001d0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	@ 0x21
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3a:	f7fe ff69 	bl	8000b10 <HAL_GetTick>
 8001c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c54:	d108      	bne.n	8001c68 <HAL_UART_Transmit+0x6c>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	e003      	b.n	8001c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c70:	e02e      	b.n	8001cd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2180      	movs	r1, #128	@ 0x80
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f848 	bl	8001d12 <UART_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e03a      	b.n	8001d0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10b      	bne.n	8001cb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3302      	adds	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e007      	b.n	8001cc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1cb      	bne.n	8001c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2140      	movs	r1, #64	@ 0x40
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f814 	bl	8001d12 <UART_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e006      	b.n	8001d0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d22:	e03b      	b.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2a:	d037      	beq.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2c:	f7fe fef0 	bl	8000b10 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	6a3a      	ldr	r2, [r7, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d302      	bcc.n	8001d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e03a      	b.n	8001dbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b80      	cmp	r3, #128	@ 0x80
 8001d58:	d020      	beq.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b40      	cmp	r3, #64	@ 0x40
 8001d5e:	d01d      	beq.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d116      	bne.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f81d 	bl	8001dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00f      	b.n	8001dbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d0b4      	beq.n	8001d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b095      	sub	sp, #84	@ 0x54
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd6:	e853 3f00 	ldrex	r3, [r3]
 8001dda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	330c      	adds	r3, #12
 8001dea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dec:	643a      	str	r2, [r7, #64]	@ 0x40
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001df4:	e841 2300 	strex	r3, r2, [r1]
 8001df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e5      	bne.n	8001dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3314      	adds	r3, #20
 8001e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	e853 3f00 	ldrex	r3, [r3]
 8001e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e28:	e841 2300 	strex	r3, r2, [r1]
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e5      	bne.n	8001e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d119      	bne.n	8001e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	e853 3f00 	ldrex	r3, [r3]
 8001e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f023 0310 	bic.w	r3, r3, #16
 8001e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e5c:	61ba      	str	r2, [r7, #24]
 8001e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	e841 2300 	strex	r3, r2, [r1]
 8001e68:	613b      	str	r3, [r7, #16]
   return(result);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e5      	bne.n	8001e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e7e:	bf00      	nop
 8001e80:	3754      	adds	r7, #84	@ 0x54
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e90:	b0c0      	sub	sp, #256	@ 0x100
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	ea40 0301 	orr.w	r3, r0, r1
 8001eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ee4:	f021 010c 	bic.w	r1, r1, #12
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f06:	6999      	ldr	r1, [r3, #24]
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	ea40 0301 	orr.w	r3, r0, r1
 8001f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002158 <UART_SetConfig+0x2cc>)
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d005      	beq.n	8001f2c <UART_SetConfig+0xa0>
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b8d      	ldr	r3, [pc, #564]	@ (800215c <UART_SetConfig+0x2d0>)
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d104      	bne.n	8001f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f2c:	f7ff f9ba 	bl	80012a4 <HAL_RCC_GetPCLK2Freq>
 8001f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f34:	e003      	b.n	8001f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f36:	f7ff f9a1 	bl	800127c <HAL_RCC_GetPCLK1Freq>
 8001f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f48:	f040 810c 	bne.w	8002164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f5e:	4622      	mov	r2, r4
 8001f60:	462b      	mov	r3, r5
 8001f62:	1891      	adds	r1, r2, r2
 8001f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f66:	415b      	adcs	r3, r3
 8001f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f6e:	4621      	mov	r1, r4
 8001f70:	eb12 0801 	adds.w	r8, r2, r1
 8001f74:	4629      	mov	r1, r5
 8001f76:	eb43 0901 	adc.w	r9, r3, r1
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f8e:	4690      	mov	r8, r2
 8001f90:	4699      	mov	r9, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	eb18 0303 	adds.w	r3, r8, r3
 8001f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	eb49 0303 	adc.w	r3, r9, r3
 8001fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001fba:	460b      	mov	r3, r1
 8001fbc:	18db      	adds	r3, r3, r3
 8001fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	eb42 0303 	adc.w	r3, r2, r3
 8001fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fd0:	f7fe f918 	bl	8000204 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <UART_SetConfig+0x2d4>)
 8001fda:	fba3 2302 	umull	r2, r3, r3, r2
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	011c      	lsls	r4, r3, #4
 8001fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ff4:	4642      	mov	r2, r8
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	1891      	adds	r1, r2, r2
 8001ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ffc:	415b      	adcs	r3, r3
 8001ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002004:	4641      	mov	r1, r8
 8002006:	eb12 0a01 	adds.w	sl, r2, r1
 800200a:	4649      	mov	r1, r9
 800200c:	eb43 0b01 	adc.w	fp, r3, r1
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800201c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002024:	4692      	mov	sl, r2
 8002026:	469b      	mov	fp, r3
 8002028:	4643      	mov	r3, r8
 800202a:	eb1a 0303 	adds.w	r3, sl, r3
 800202e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002032:	464b      	mov	r3, r9
 8002034:	eb4b 0303 	adc.w	r3, fp, r3
 8002038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800204c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002050:	460b      	mov	r3, r1
 8002052:	18db      	adds	r3, r3, r3
 8002054:	643b      	str	r3, [r7, #64]	@ 0x40
 8002056:	4613      	mov	r3, r2
 8002058:	eb42 0303 	adc.w	r3, r2, r3
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
 800205e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002066:	f7fe f8cd 	bl	8000204 <__aeabi_uldivmod>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4611      	mov	r1, r2
 8002070:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <UART_SetConfig+0x2d4>)
 8002072:	fba3 2301 	umull	r2, r3, r3, r1
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2264      	movs	r2, #100	@ 0x64
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	1acb      	subs	r3, r1, r3
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002086:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <UART_SetConfig+0x2d4>)
 8002088:	fba3 2302 	umull	r2, r3, r3, r2
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002094:	441c      	add	r4, r3
 8002096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	1891      	adds	r1, r2, r2
 80020ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020b0:	415b      	adcs	r3, r3
 80020b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020b8:	4641      	mov	r1, r8
 80020ba:	1851      	adds	r1, r2, r1
 80020bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80020be:	4649      	mov	r1, r9
 80020c0:	414b      	adcs	r3, r1
 80020c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80020d0:	4659      	mov	r1, fp
 80020d2:	00cb      	lsls	r3, r1, #3
 80020d4:	4651      	mov	r1, sl
 80020d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020da:	4651      	mov	r1, sl
 80020dc:	00ca      	lsls	r2, r1, #3
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	4642      	mov	r2, r8
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020ec:	464b      	mov	r3, r9
 80020ee:	460a      	mov	r2, r1
 80020f0:	eb42 0303 	adc.w	r3, r2, r3
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800210c:	460b      	mov	r3, r1
 800210e:	18db      	adds	r3, r3, r3
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002112:	4613      	mov	r3, r2
 8002114:	eb42 0303 	adc.w	r3, r2, r3
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800211a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800211e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002122:	f7fe f86f 	bl	8000204 <__aeabi_uldivmod>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <UART_SetConfig+0x2d4>)
 800212c:	fba3 1302 	umull	r1, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	2164      	movs	r1, #100	@ 0x64
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	3332      	adds	r3, #50	@ 0x32
 800213e:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <UART_SetConfig+0x2d4>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4422      	add	r2, r4
 8002152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002154:	e106      	b.n	8002364 <UART_SetConfig+0x4d8>
 8002156:	bf00      	nop
 8002158:	40011000 	.word	0x40011000
 800215c:	40011400 	.word	0x40011400
 8002160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002168:	2200      	movs	r2, #0
 800216a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800216e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002176:	4642      	mov	r2, r8
 8002178:	464b      	mov	r3, r9
 800217a:	1891      	adds	r1, r2, r2
 800217c:	6239      	str	r1, [r7, #32]
 800217e:	415b      	adcs	r3, r3
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
 8002182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002186:	4641      	mov	r1, r8
 8002188:	1854      	adds	r4, r2, r1
 800218a:	4649      	mov	r1, r9
 800218c:	eb43 0501 	adc.w	r5, r3, r1
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	00eb      	lsls	r3, r5, #3
 800219a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800219e:	00e2      	lsls	r2, r4, #3
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	18e3      	adds	r3, r4, r3
 80021a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021ac:	464b      	mov	r3, r9
 80021ae:	eb45 0303 	adc.w	r3, r5, r3
 80021b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80021b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021d2:	4629      	mov	r1, r5
 80021d4:	008b      	lsls	r3, r1, #2
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021dc:	4621      	mov	r1, r4
 80021de:	008a      	lsls	r2, r1, #2
 80021e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021e4:	f7fe f80e 	bl	8000204 <__aeabi_uldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4b60      	ldr	r3, [pc, #384]	@ (8002370 <UART_SetConfig+0x4e4>)
 80021ee:	fba3 2302 	umull	r2, r3, r3, r2
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	011c      	lsls	r4, r3, #4
 80021f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002208:	4642      	mov	r2, r8
 800220a:	464b      	mov	r3, r9
 800220c:	1891      	adds	r1, r2, r2
 800220e:	61b9      	str	r1, [r7, #24]
 8002210:	415b      	adcs	r3, r3
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002218:	4641      	mov	r1, r8
 800221a:	1851      	adds	r1, r2, r1
 800221c:	6139      	str	r1, [r7, #16]
 800221e:	4649      	mov	r1, r9
 8002220:	414b      	adcs	r3, r1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002230:	4659      	mov	r1, fp
 8002232:	00cb      	lsls	r3, r1, #3
 8002234:	4651      	mov	r1, sl
 8002236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223a:	4651      	mov	r1, sl
 800223c:	00ca      	lsls	r2, r1, #3
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	4603      	mov	r3, r0
 8002244:	4642      	mov	r2, r8
 8002246:	189b      	adds	r3, r3, r2
 8002248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800224c:	464b      	mov	r3, r9
 800224e:	460a      	mov	r2, r1
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002270:	4649      	mov	r1, r9
 8002272:	008b      	lsls	r3, r1, #2
 8002274:	4641      	mov	r1, r8
 8002276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800227a:	4641      	mov	r1, r8
 800227c:	008a      	lsls	r2, r1, #2
 800227e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002282:	f7fd ffbf 	bl	8000204 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4611      	mov	r1, r2
 800228c:	4b38      	ldr	r3, [pc, #224]	@ (8002370 <UART_SetConfig+0x4e4>)
 800228e:	fba3 2301 	umull	r2, r3, r3, r1
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2264      	movs	r2, #100	@ 0x64
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	1acb      	subs	r3, r1, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	@ 0x32
 80022a0:	4a33      	ldr	r2, [pc, #204]	@ (8002370 <UART_SetConfig+0x4e4>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ac:	441c      	add	r4, r3
 80022ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b2:	2200      	movs	r2, #0
 80022b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80022b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80022b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	1891      	adds	r1, r2, r2
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	415b      	adcs	r3, r3
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022cc:	4641      	mov	r1, r8
 80022ce:	1851      	adds	r1, r2, r1
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	4649      	mov	r1, r9
 80022d4:	414b      	adcs	r3, r1
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022e4:	4659      	mov	r1, fp
 80022e6:	00cb      	lsls	r3, r1, #3
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ee:	4651      	mov	r1, sl
 80022f0:	00ca      	lsls	r2, r1, #3
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	4642      	mov	r2, r8
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022fe:	464b      	mov	r3, r9
 8002300:	460a      	mov	r2, r1
 8002302:	eb42 0303 	adc.w	r3, r2, r3
 8002306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	663b      	str	r3, [r7, #96]	@ 0x60
 8002312:	667a      	str	r2, [r7, #100]	@ 0x64
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002320:	4649      	mov	r1, r9
 8002322:	008b      	lsls	r3, r1, #2
 8002324:	4641      	mov	r1, r8
 8002326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800232a:	4641      	mov	r1, r8
 800232c:	008a      	lsls	r2, r1, #2
 800232e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002332:	f7fd ff67 	bl	8000204 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <UART_SetConfig+0x4e4>)
 800233c:	fba3 1302 	umull	r1, r3, r3, r2
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	2164      	movs	r1, #100	@ 0x64
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	3332      	adds	r3, #50	@ 0x32
 800234e:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <UART_SetConfig+0x4e4>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4422      	add	r2, r4
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800236a:	46bd      	mov	sp, r7
 800236c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002370:	51eb851f 	.word	0x51eb851f

08002374 <std>:
 8002374:	2300      	movs	r3, #0
 8002376:	b510      	push	{r4, lr}
 8002378:	4604      	mov	r4, r0
 800237a:	e9c0 3300 	strd	r3, r3, [r0]
 800237e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002382:	6083      	str	r3, [r0, #8]
 8002384:	8181      	strh	r1, [r0, #12]
 8002386:	6643      	str	r3, [r0, #100]	@ 0x64
 8002388:	81c2      	strh	r2, [r0, #14]
 800238a:	6183      	str	r3, [r0, #24]
 800238c:	4619      	mov	r1, r3
 800238e:	2208      	movs	r2, #8
 8002390:	305c      	adds	r0, #92	@ 0x5c
 8002392:	f000 faa3 	bl	80028dc <memset>
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <std+0x58>)
 8002398:	6263      	str	r3, [r4, #36]	@ 0x24
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <std+0x5c>)
 800239c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <std+0x60>)
 80023a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <std+0x64>)
 80023a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <std+0x68>)
 80023a8:	6224      	str	r4, [r4, #32]
 80023aa:	429c      	cmp	r4, r3
 80023ac:	d006      	beq.n	80023bc <std+0x48>
 80023ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023b2:	4294      	cmp	r4, r2
 80023b4:	d002      	beq.n	80023bc <std+0x48>
 80023b6:	33d0      	adds	r3, #208	@ 0xd0
 80023b8:	429c      	cmp	r4, r3
 80023ba:	d105      	bne.n	80023c8 <std+0x54>
 80023bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c4:	f000 bb02 	b.w	80029cc <__retarget_lock_init_recursive>
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	0800272d 	.word	0x0800272d
 80023d0:	0800274f 	.word	0x0800274f
 80023d4:	08002787 	.word	0x08002787
 80023d8:	080027ab 	.word	0x080027ab
 80023dc:	200000d4 	.word	0x200000d4

080023e0 <stdio_exit_handler>:
 80023e0:	4a02      	ldr	r2, [pc, #8]	@ (80023ec <stdio_exit_handler+0xc>)
 80023e2:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <stdio_exit_handler+0x10>)
 80023e4:	4803      	ldr	r0, [pc, #12]	@ (80023f4 <stdio_exit_handler+0x14>)
 80023e6:	f000 b869 	b.w	80024bc <_fwalk_sglue>
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	08002cdd 	.word	0x08002cdd
 80023f4:	2000001c 	.word	0x2000001c

080023f8 <cleanup_stdio>:
 80023f8:	6841      	ldr	r1, [r0, #4]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <cleanup_stdio+0x34>)
 80023fc:	4299      	cmp	r1, r3
 80023fe:	b510      	push	{r4, lr}
 8002400:	4604      	mov	r4, r0
 8002402:	d001      	beq.n	8002408 <cleanup_stdio+0x10>
 8002404:	f000 fc6a 	bl	8002cdc <_fflush_r>
 8002408:	68a1      	ldr	r1, [r4, #8]
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <cleanup_stdio+0x38>)
 800240c:	4299      	cmp	r1, r3
 800240e:	d002      	beq.n	8002416 <cleanup_stdio+0x1e>
 8002410:	4620      	mov	r0, r4
 8002412:	f000 fc63 	bl	8002cdc <_fflush_r>
 8002416:	68e1      	ldr	r1, [r4, #12]
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <cleanup_stdio+0x3c>)
 800241a:	4299      	cmp	r1, r3
 800241c:	d004      	beq.n	8002428 <cleanup_stdio+0x30>
 800241e:	4620      	mov	r0, r4
 8002420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002424:	f000 bc5a 	b.w	8002cdc <_fflush_r>
 8002428:	bd10      	pop	{r4, pc}
 800242a:	bf00      	nop
 800242c:	200000d4 	.word	0x200000d4
 8002430:	2000013c 	.word	0x2000013c
 8002434:	200001a4 	.word	0x200001a4

08002438 <global_stdio_init.part.0>:
 8002438:	b510      	push	{r4, lr}
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <global_stdio_init.part.0+0x30>)
 800243c:	4c0b      	ldr	r4, [pc, #44]	@ (800246c <global_stdio_init.part.0+0x34>)
 800243e:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <global_stdio_init.part.0+0x38>)
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	4620      	mov	r0, r4
 8002444:	2200      	movs	r2, #0
 8002446:	2104      	movs	r1, #4
 8002448:	f7ff ff94 	bl	8002374 <std>
 800244c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002450:	2201      	movs	r2, #1
 8002452:	2109      	movs	r1, #9
 8002454:	f7ff ff8e 	bl	8002374 <std>
 8002458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800245c:	2202      	movs	r2, #2
 800245e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002462:	2112      	movs	r1, #18
 8002464:	f7ff bf86 	b.w	8002374 <std>
 8002468:	2000020c 	.word	0x2000020c
 800246c:	200000d4 	.word	0x200000d4
 8002470:	080023e1 	.word	0x080023e1

08002474 <__sfp_lock_acquire>:
 8002474:	4801      	ldr	r0, [pc, #4]	@ (800247c <__sfp_lock_acquire+0x8>)
 8002476:	f000 baaa 	b.w	80029ce <__retarget_lock_acquire_recursive>
 800247a:	bf00      	nop
 800247c:	20000215 	.word	0x20000215

08002480 <__sfp_lock_release>:
 8002480:	4801      	ldr	r0, [pc, #4]	@ (8002488 <__sfp_lock_release+0x8>)
 8002482:	f000 baa5 	b.w	80029d0 <__retarget_lock_release_recursive>
 8002486:	bf00      	nop
 8002488:	20000215 	.word	0x20000215

0800248c <__sinit>:
 800248c:	b510      	push	{r4, lr}
 800248e:	4604      	mov	r4, r0
 8002490:	f7ff fff0 	bl	8002474 <__sfp_lock_acquire>
 8002494:	6a23      	ldr	r3, [r4, #32]
 8002496:	b11b      	cbz	r3, 80024a0 <__sinit+0x14>
 8002498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800249c:	f7ff bff0 	b.w	8002480 <__sfp_lock_release>
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__sinit+0x28>)
 80024a2:	6223      	str	r3, [r4, #32]
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__sinit+0x2c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f5      	bne.n	8002498 <__sinit+0xc>
 80024ac:	f7ff ffc4 	bl	8002438 <global_stdio_init.part.0>
 80024b0:	e7f2      	b.n	8002498 <__sinit+0xc>
 80024b2:	bf00      	nop
 80024b4:	080023f9 	.word	0x080023f9
 80024b8:	2000020c 	.word	0x2000020c

080024bc <_fwalk_sglue>:
 80024bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024c0:	4607      	mov	r7, r0
 80024c2:	4688      	mov	r8, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	2600      	movs	r6, #0
 80024c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024cc:	f1b9 0901 	subs.w	r9, r9, #1
 80024d0:	d505      	bpl.n	80024de <_fwalk_sglue+0x22>
 80024d2:	6824      	ldr	r4, [r4, #0]
 80024d4:	2c00      	cmp	r4, #0
 80024d6:	d1f7      	bne.n	80024c8 <_fwalk_sglue+0xc>
 80024d8:	4630      	mov	r0, r6
 80024da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024de:	89ab      	ldrh	r3, [r5, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d907      	bls.n	80024f4 <_fwalk_sglue+0x38>
 80024e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024e8:	3301      	adds	r3, #1
 80024ea:	d003      	beq.n	80024f4 <_fwalk_sglue+0x38>
 80024ec:	4629      	mov	r1, r5
 80024ee:	4638      	mov	r0, r7
 80024f0:	47c0      	blx	r8
 80024f2:	4306      	orrs	r6, r0
 80024f4:	3568      	adds	r5, #104	@ 0x68
 80024f6:	e7e9      	b.n	80024cc <_fwalk_sglue+0x10>

080024f8 <_puts_r>:
 80024f8:	6a03      	ldr	r3, [r0, #32]
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	6884      	ldr	r4, [r0, #8]
 80024fe:	4605      	mov	r5, r0
 8002500:	460e      	mov	r6, r1
 8002502:	b90b      	cbnz	r3, 8002508 <_puts_r+0x10>
 8002504:	f7ff ffc2 	bl	800248c <__sinit>
 8002508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800250a:	07db      	lsls	r3, r3, #31
 800250c:	d405      	bmi.n	800251a <_puts_r+0x22>
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	0598      	lsls	r0, r3, #22
 8002512:	d402      	bmi.n	800251a <_puts_r+0x22>
 8002514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002516:	f000 fa5a 	bl	80029ce <__retarget_lock_acquire_recursive>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	0719      	lsls	r1, r3, #28
 800251e:	d502      	bpl.n	8002526 <_puts_r+0x2e>
 8002520:	6923      	ldr	r3, [r4, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d135      	bne.n	8002592 <_puts_r+0x9a>
 8002526:	4621      	mov	r1, r4
 8002528:	4628      	mov	r0, r5
 800252a:	f000 f981 	bl	8002830 <__swsetup_r>
 800252e:	b380      	cbz	r0, 8002592 <_puts_r+0x9a>
 8002530:	f04f 35ff 	mov.w	r5, #4294967295
 8002534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002536:	07da      	lsls	r2, r3, #31
 8002538:	d405      	bmi.n	8002546 <_puts_r+0x4e>
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	059b      	lsls	r3, r3, #22
 800253e:	d402      	bmi.n	8002546 <_puts_r+0x4e>
 8002540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002542:	f000 fa45 	bl	80029d0 <__retarget_lock_release_recursive>
 8002546:	4628      	mov	r0, r5
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	2b00      	cmp	r3, #0
 800254c:	da04      	bge.n	8002558 <_puts_r+0x60>
 800254e:	69a2      	ldr	r2, [r4, #24]
 8002550:	429a      	cmp	r2, r3
 8002552:	dc17      	bgt.n	8002584 <_puts_r+0x8c>
 8002554:	290a      	cmp	r1, #10
 8002556:	d015      	beq.n	8002584 <_puts_r+0x8c>
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	6022      	str	r2, [r4, #0]
 800255e:	7019      	strb	r1, [r3, #0]
 8002560:	68a3      	ldr	r3, [r4, #8]
 8002562:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002566:	3b01      	subs	r3, #1
 8002568:	60a3      	str	r3, [r4, #8]
 800256a:	2900      	cmp	r1, #0
 800256c:	d1ed      	bne.n	800254a <_puts_r+0x52>
 800256e:	2b00      	cmp	r3, #0
 8002570:	da11      	bge.n	8002596 <_puts_r+0x9e>
 8002572:	4622      	mov	r2, r4
 8002574:	210a      	movs	r1, #10
 8002576:	4628      	mov	r0, r5
 8002578:	f000 f91b 	bl	80027b2 <__swbuf_r>
 800257c:	3001      	adds	r0, #1
 800257e:	d0d7      	beq.n	8002530 <_puts_r+0x38>
 8002580:	250a      	movs	r5, #10
 8002582:	e7d7      	b.n	8002534 <_puts_r+0x3c>
 8002584:	4622      	mov	r2, r4
 8002586:	4628      	mov	r0, r5
 8002588:	f000 f913 	bl	80027b2 <__swbuf_r>
 800258c:	3001      	adds	r0, #1
 800258e:	d1e7      	bne.n	8002560 <_puts_r+0x68>
 8002590:	e7ce      	b.n	8002530 <_puts_r+0x38>
 8002592:	3e01      	subs	r6, #1
 8002594:	e7e4      	b.n	8002560 <_puts_r+0x68>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	6022      	str	r2, [r4, #0]
 800259c:	220a      	movs	r2, #10
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e7ee      	b.n	8002580 <_puts_r+0x88>
	...

080025a4 <puts>:
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <puts+0xc>)
 80025a6:	4601      	mov	r1, r0
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f7ff bfa5 	b.w	80024f8 <_puts_r>
 80025ae:	bf00      	nop
 80025b0:	20000018 	.word	0x20000018

080025b4 <setbuf>:
 80025b4:	fab1 f281 	clz	r2, r1
 80025b8:	0952      	lsrs	r2, r2, #5
 80025ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	f000 b800 	b.w	80025c4 <setvbuf>

080025c4 <setvbuf>:
 80025c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80025c8:	461d      	mov	r5, r3
 80025ca:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <setvbuf+0x164>)
 80025cc:	681f      	ldr	r7, [r3, #0]
 80025ce:	4604      	mov	r4, r0
 80025d0:	460e      	mov	r6, r1
 80025d2:	4690      	mov	r8, r2
 80025d4:	b127      	cbz	r7, 80025e0 <setvbuf+0x1c>
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	b913      	cbnz	r3, 80025e0 <setvbuf+0x1c>
 80025da:	4638      	mov	r0, r7
 80025dc:	f7ff ff56 	bl	800248c <__sinit>
 80025e0:	f1b8 0f02 	cmp.w	r8, #2
 80025e4:	d006      	beq.n	80025f4 <setvbuf+0x30>
 80025e6:	f1b8 0f01 	cmp.w	r8, #1
 80025ea:	f200 809a 	bhi.w	8002722 <setvbuf+0x15e>
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	f2c0 8097 	blt.w	8002722 <setvbuf+0x15e>
 80025f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025f6:	07d9      	lsls	r1, r3, #31
 80025f8:	d405      	bmi.n	8002606 <setvbuf+0x42>
 80025fa:	89a3      	ldrh	r3, [r4, #12]
 80025fc:	059a      	lsls	r2, r3, #22
 80025fe:	d402      	bmi.n	8002606 <setvbuf+0x42>
 8002600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002602:	f000 f9e4 	bl	80029ce <__retarget_lock_acquire_recursive>
 8002606:	4621      	mov	r1, r4
 8002608:	4638      	mov	r0, r7
 800260a:	f000 fb67 	bl	8002cdc <_fflush_r>
 800260e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002610:	b141      	cbz	r1, 8002624 <setvbuf+0x60>
 8002612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002616:	4299      	cmp	r1, r3
 8002618:	d002      	beq.n	8002620 <setvbuf+0x5c>
 800261a:	4638      	mov	r0, r7
 800261c:	f000 f9da 	bl	80029d4 <_free_r>
 8002620:	2300      	movs	r3, #0
 8002622:	6363      	str	r3, [r4, #52]	@ 0x34
 8002624:	2300      	movs	r3, #0
 8002626:	61a3      	str	r3, [r4, #24]
 8002628:	6063      	str	r3, [r4, #4]
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	d503      	bpl.n	8002638 <setvbuf+0x74>
 8002630:	6921      	ldr	r1, [r4, #16]
 8002632:	4638      	mov	r0, r7
 8002634:	f000 f9ce 	bl	80029d4 <_free_r>
 8002638:	89a3      	ldrh	r3, [r4, #12]
 800263a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	f1b8 0f02 	cmp.w	r8, #2
 8002646:	81a3      	strh	r3, [r4, #12]
 8002648:	d061      	beq.n	800270e <setvbuf+0x14a>
 800264a:	ab01      	add	r3, sp, #4
 800264c:	466a      	mov	r2, sp
 800264e:	4621      	mov	r1, r4
 8002650:	4638      	mov	r0, r7
 8002652:	f000 fb6b 	bl	8002d2c <__swhatbuf_r>
 8002656:	89a3      	ldrh	r3, [r4, #12]
 8002658:	4318      	orrs	r0, r3
 800265a:	81a0      	strh	r0, [r4, #12]
 800265c:	bb2d      	cbnz	r5, 80026aa <setvbuf+0xe6>
 800265e:	9d00      	ldr	r5, [sp, #0]
 8002660:	4628      	mov	r0, r5
 8002662:	f000 fa01 	bl	8002a68 <malloc>
 8002666:	4606      	mov	r6, r0
 8002668:	2800      	cmp	r0, #0
 800266a:	d152      	bne.n	8002712 <setvbuf+0x14e>
 800266c:	f8dd 9000 	ldr.w	r9, [sp]
 8002670:	45a9      	cmp	r9, r5
 8002672:	d140      	bne.n	80026f6 <setvbuf+0x132>
 8002674:	f04f 35ff 	mov.w	r5, #4294967295
 8002678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	81a2      	strh	r2, [r4, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	60a2      	str	r2, [r4, #8]
 8002686:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800268a:	6022      	str	r2, [r4, #0]
 800268c:	6122      	str	r2, [r4, #16]
 800268e:	2201      	movs	r2, #1
 8002690:	6162      	str	r2, [r4, #20]
 8002692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002694:	07d6      	lsls	r6, r2, #31
 8002696:	d404      	bmi.n	80026a2 <setvbuf+0xde>
 8002698:	0598      	lsls	r0, r3, #22
 800269a:	d402      	bmi.n	80026a2 <setvbuf+0xde>
 800269c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800269e:	f000 f997 	bl	80029d0 <__retarget_lock_release_recursive>
 80026a2:	4628      	mov	r0, r5
 80026a4:	b003      	add	sp, #12
 80026a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026aa:	2e00      	cmp	r6, #0
 80026ac:	d0d8      	beq.n	8002660 <setvbuf+0x9c>
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	b913      	cbnz	r3, 80026b8 <setvbuf+0xf4>
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7ff feea 	bl	800248c <__sinit>
 80026b8:	f1b8 0f01 	cmp.w	r8, #1
 80026bc:	bf08      	it	eq
 80026be:	89a3      	ldrheq	r3, [r4, #12]
 80026c0:	6026      	str	r6, [r4, #0]
 80026c2:	bf04      	itt	eq
 80026c4:	f043 0301 	orreq.w	r3, r3, #1
 80026c8:	81a3      	strheq	r3, [r4, #12]
 80026ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ce:	f013 0208 	ands.w	r2, r3, #8
 80026d2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80026d6:	d01e      	beq.n	8002716 <setvbuf+0x152>
 80026d8:	07d9      	lsls	r1, r3, #31
 80026da:	bf41      	itttt	mi
 80026dc:	2200      	movmi	r2, #0
 80026de:	426d      	negmi	r5, r5
 80026e0:	60a2      	strmi	r2, [r4, #8]
 80026e2:	61a5      	strmi	r5, [r4, #24]
 80026e4:	bf58      	it	pl
 80026e6:	60a5      	strpl	r5, [r4, #8]
 80026e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80026ea:	07d2      	lsls	r2, r2, #31
 80026ec:	d401      	bmi.n	80026f2 <setvbuf+0x12e>
 80026ee:	059b      	lsls	r3, r3, #22
 80026f0:	d513      	bpl.n	800271a <setvbuf+0x156>
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7d5      	b.n	80026a2 <setvbuf+0xde>
 80026f6:	4648      	mov	r0, r9
 80026f8:	f000 f9b6 	bl	8002a68 <malloc>
 80026fc:	4606      	mov	r6, r0
 80026fe:	2800      	cmp	r0, #0
 8002700:	d0b8      	beq.n	8002674 <setvbuf+0xb0>
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002708:	81a3      	strh	r3, [r4, #12]
 800270a:	464d      	mov	r5, r9
 800270c:	e7cf      	b.n	80026ae <setvbuf+0xea>
 800270e:	2500      	movs	r5, #0
 8002710:	e7b2      	b.n	8002678 <setvbuf+0xb4>
 8002712:	46a9      	mov	r9, r5
 8002714:	e7f5      	b.n	8002702 <setvbuf+0x13e>
 8002716:	60a2      	str	r2, [r4, #8]
 8002718:	e7e6      	b.n	80026e8 <setvbuf+0x124>
 800271a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800271c:	f000 f958 	bl	80029d0 <__retarget_lock_release_recursive>
 8002720:	e7e7      	b.n	80026f2 <setvbuf+0x12e>
 8002722:	f04f 35ff 	mov.w	r5, #4294967295
 8002726:	e7bc      	b.n	80026a2 <setvbuf+0xde>
 8002728:	20000018 	.word	0x20000018

0800272c <__sread>:
 800272c:	b510      	push	{r4, lr}
 800272e:	460c      	mov	r4, r1
 8002730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002734:	f000 f8fc 	bl	8002930 <_read_r>
 8002738:	2800      	cmp	r0, #0
 800273a:	bfab      	itete	ge
 800273c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800273e:	89a3      	ldrhlt	r3, [r4, #12]
 8002740:	181b      	addge	r3, r3, r0
 8002742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002746:	bfac      	ite	ge
 8002748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800274a:	81a3      	strhlt	r3, [r4, #12]
 800274c:	bd10      	pop	{r4, pc}

0800274e <__swrite>:
 800274e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002752:	461f      	mov	r7, r3
 8002754:	898b      	ldrh	r3, [r1, #12]
 8002756:	05db      	lsls	r3, r3, #23
 8002758:	4605      	mov	r5, r0
 800275a:	460c      	mov	r4, r1
 800275c:	4616      	mov	r6, r2
 800275e:	d505      	bpl.n	800276c <__swrite+0x1e>
 8002760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002764:	2302      	movs	r3, #2
 8002766:	2200      	movs	r2, #0
 8002768:	f000 f8d0 	bl	800290c <_lseek_r>
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002776:	81a3      	strh	r3, [r4, #12]
 8002778:	4632      	mov	r2, r6
 800277a:	463b      	mov	r3, r7
 800277c:	4628      	mov	r0, r5
 800277e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002782:	f000 b8e7 	b.w	8002954 <_write_r>

08002786 <__sseek>:
 8002786:	b510      	push	{r4, lr}
 8002788:	460c      	mov	r4, r1
 800278a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800278e:	f000 f8bd 	bl	800290c <_lseek_r>
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	bf15      	itete	ne
 8002798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800279a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800279e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027a2:	81a3      	strheq	r3, [r4, #12]
 80027a4:	bf18      	it	ne
 80027a6:	81a3      	strhne	r3, [r4, #12]
 80027a8:	bd10      	pop	{r4, pc}

080027aa <__sclose>:
 80027aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ae:	f000 b89d 	b.w	80028ec <_close_r>

080027b2 <__swbuf_r>:
 80027b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b4:	460e      	mov	r6, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	4605      	mov	r5, r0
 80027ba:	b118      	cbz	r0, 80027c4 <__swbuf_r+0x12>
 80027bc:	6a03      	ldr	r3, [r0, #32]
 80027be:	b90b      	cbnz	r3, 80027c4 <__swbuf_r+0x12>
 80027c0:	f7ff fe64 	bl	800248c <__sinit>
 80027c4:	69a3      	ldr	r3, [r4, #24]
 80027c6:	60a3      	str	r3, [r4, #8]
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	071a      	lsls	r2, r3, #28
 80027cc:	d501      	bpl.n	80027d2 <__swbuf_r+0x20>
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	b943      	cbnz	r3, 80027e4 <__swbuf_r+0x32>
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f000 f82b 	bl	8002830 <__swsetup_r>
 80027da:	b118      	cbz	r0, 80027e4 <__swbuf_r+0x32>
 80027dc:	f04f 37ff 	mov.w	r7, #4294967295
 80027e0:	4638      	mov	r0, r7
 80027e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	6922      	ldr	r2, [r4, #16]
 80027e8:	1a98      	subs	r0, r3, r2
 80027ea:	6963      	ldr	r3, [r4, #20]
 80027ec:	b2f6      	uxtb	r6, r6
 80027ee:	4283      	cmp	r3, r0
 80027f0:	4637      	mov	r7, r6
 80027f2:	dc05      	bgt.n	8002800 <__swbuf_r+0x4e>
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f000 fa70 	bl	8002cdc <_fflush_r>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d1ed      	bne.n	80027dc <__swbuf_r+0x2a>
 8002800:	68a3      	ldr	r3, [r4, #8]
 8002802:	3b01      	subs	r3, #1
 8002804:	60a3      	str	r3, [r4, #8]
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	6022      	str	r2, [r4, #0]
 800280c:	701e      	strb	r6, [r3, #0]
 800280e:	6962      	ldr	r2, [r4, #20]
 8002810:	1c43      	adds	r3, r0, #1
 8002812:	429a      	cmp	r2, r3
 8002814:	d004      	beq.n	8002820 <__swbuf_r+0x6e>
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	07db      	lsls	r3, r3, #31
 800281a:	d5e1      	bpl.n	80027e0 <__swbuf_r+0x2e>
 800281c:	2e0a      	cmp	r6, #10
 800281e:	d1df      	bne.n	80027e0 <__swbuf_r+0x2e>
 8002820:	4621      	mov	r1, r4
 8002822:	4628      	mov	r0, r5
 8002824:	f000 fa5a 	bl	8002cdc <_fflush_r>
 8002828:	2800      	cmp	r0, #0
 800282a:	d0d9      	beq.n	80027e0 <__swbuf_r+0x2e>
 800282c:	e7d6      	b.n	80027dc <__swbuf_r+0x2a>
	...

08002830 <__swsetup_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <__swsetup_r+0xa8>)
 8002834:	4605      	mov	r5, r0
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	460c      	mov	r4, r1
 800283a:	b118      	cbz	r0, 8002844 <__swsetup_r+0x14>
 800283c:	6a03      	ldr	r3, [r0, #32]
 800283e:	b90b      	cbnz	r3, 8002844 <__swsetup_r+0x14>
 8002840:	f7ff fe24 	bl	800248c <__sinit>
 8002844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002848:	0719      	lsls	r1, r3, #28
 800284a:	d422      	bmi.n	8002892 <__swsetup_r+0x62>
 800284c:	06da      	lsls	r2, r3, #27
 800284e:	d407      	bmi.n	8002860 <__swsetup_r+0x30>
 8002850:	2209      	movs	r2, #9
 8002852:	602a      	str	r2, [r5, #0]
 8002854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	e033      	b.n	80028c8 <__swsetup_r+0x98>
 8002860:	0758      	lsls	r0, r3, #29
 8002862:	d512      	bpl.n	800288a <__swsetup_r+0x5a>
 8002864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002866:	b141      	cbz	r1, 800287a <__swsetup_r+0x4a>
 8002868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800286c:	4299      	cmp	r1, r3
 800286e:	d002      	beq.n	8002876 <__swsetup_r+0x46>
 8002870:	4628      	mov	r0, r5
 8002872:	f000 f8af 	bl	80029d4 <_free_r>
 8002876:	2300      	movs	r3, #0
 8002878:	6363      	str	r3, [r4, #52]	@ 0x34
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	2300      	movs	r3, #0
 8002884:	6063      	str	r3, [r4, #4]
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	81a3      	strh	r3, [r4, #12]
 8002892:	6923      	ldr	r3, [r4, #16]
 8002894:	b94b      	cbnz	r3, 80028aa <__swsetup_r+0x7a>
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800289c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a0:	d003      	beq.n	80028aa <__swsetup_r+0x7a>
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f000 fa67 	bl	8002d78 <__smakebuf_r>
 80028aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ae:	f013 0201 	ands.w	r2, r3, #1
 80028b2:	d00a      	beq.n	80028ca <__swsetup_r+0x9a>
 80028b4:	2200      	movs	r2, #0
 80028b6:	60a2      	str	r2, [r4, #8]
 80028b8:	6962      	ldr	r2, [r4, #20]
 80028ba:	4252      	negs	r2, r2
 80028bc:	61a2      	str	r2, [r4, #24]
 80028be:	6922      	ldr	r2, [r4, #16]
 80028c0:	b942      	cbnz	r2, 80028d4 <__swsetup_r+0xa4>
 80028c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028c6:	d1c5      	bne.n	8002854 <__swsetup_r+0x24>
 80028c8:	bd38      	pop	{r3, r4, r5, pc}
 80028ca:	0799      	lsls	r1, r3, #30
 80028cc:	bf58      	it	pl
 80028ce:	6962      	ldrpl	r2, [r4, #20]
 80028d0:	60a2      	str	r2, [r4, #8]
 80028d2:	e7f4      	b.n	80028be <__swsetup_r+0x8e>
 80028d4:	2000      	movs	r0, #0
 80028d6:	e7f7      	b.n	80028c8 <__swsetup_r+0x98>
 80028d8:	20000018 	.word	0x20000018

080028dc <memset>:
 80028dc:	4402      	add	r2, r0
 80028de:	4603      	mov	r3, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_close_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4d06      	ldr	r5, [pc, #24]	@ (8002908 <_close_r+0x1c>)
 80028f0:	2300      	movs	r3, #0
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fd fffe 	bl	80008f8 <_close>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_close_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_close_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000210 	.word	0x20000210

0800290c <_lseek_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4d07      	ldr	r5, [pc, #28]	@ (800292c <_lseek_r+0x20>)
 8002910:	4604      	mov	r4, r0
 8002912:	4608      	mov	r0, r1
 8002914:	4611      	mov	r1, r2
 8002916:	2200      	movs	r2, #0
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7fe f813 	bl	8000946 <_lseek>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_lseek_r+0x1e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_lseek_r+0x1e>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	20000210 	.word	0x20000210

08002930 <_read_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4d07      	ldr	r5, [pc, #28]	@ (8002950 <_read_r+0x20>)
 8002934:	4604      	mov	r4, r0
 8002936:	4608      	mov	r0, r1
 8002938:	4611      	mov	r1, r2
 800293a:	2200      	movs	r2, #0
 800293c:	602a      	str	r2, [r5, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	f7fd ffbd 	bl	80008be <_read>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_read_r+0x1e>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	b103      	cbz	r3, 800294e <_read_r+0x1e>
 800294c:	6023      	str	r3, [r4, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	20000210 	.word	0x20000210

08002954 <_write_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4d07      	ldr	r5, [pc, #28]	@ (8002974 <_write_r+0x20>)
 8002958:	4604      	mov	r4, r0
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	2200      	movs	r2, #0
 8002960:	602a      	str	r2, [r5, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f7fd fef2 	bl	800074c <_write>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_write_r+0x1e>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_write_r+0x1e>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	20000210 	.word	0x20000210

08002978 <__errno>:
 8002978:	4b01      	ldr	r3, [pc, #4]	@ (8002980 <__errno+0x8>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000018 	.word	0x20000018

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4d0d      	ldr	r5, [pc, #52]	@ (80029bc <__libc_init_array+0x38>)
 8002988:	4c0d      	ldr	r4, [pc, #52]	@ (80029c0 <__libc_init_array+0x3c>)
 800298a:	1b64      	subs	r4, r4, r5
 800298c:	10a4      	asrs	r4, r4, #2
 800298e:	2600      	movs	r6, #0
 8002990:	42a6      	cmp	r6, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	4d0b      	ldr	r5, [pc, #44]	@ (80029c4 <__libc_init_array+0x40>)
 8002996:	4c0c      	ldr	r4, [pc, #48]	@ (80029c8 <__libc_init_array+0x44>)
 8002998:	f000 fa5c 	bl	8002e54 <_init>
 800299c:	1b64      	subs	r4, r4, r5
 800299e:	10a4      	asrs	r4, r4, #2
 80029a0:	2600      	movs	r6, #0
 80029a2:	42a6      	cmp	r6, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ac:	4798      	blx	r3
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b6:	4798      	blx	r3
 80029b8:	3601      	adds	r6, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002e94 	.word	0x08002e94
 80029c0:	08002e94 	.word	0x08002e94
 80029c4:	08002e94 	.word	0x08002e94
 80029c8:	08002e98 	.word	0x08002e98

080029cc <__retarget_lock_init_recursive>:
 80029cc:	4770      	bx	lr

080029ce <__retarget_lock_acquire_recursive>:
 80029ce:	4770      	bx	lr

080029d0 <__retarget_lock_release_recursive>:
 80029d0:	4770      	bx	lr
	...

080029d4 <_free_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4605      	mov	r5, r0
 80029d8:	2900      	cmp	r1, #0
 80029da:	d041      	beq.n	8002a60 <_free_r+0x8c>
 80029dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e0:	1f0c      	subs	r4, r1, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bfb8      	it	lt
 80029e6:	18e4      	addlt	r4, r4, r3
 80029e8:	f000 f8e8 	bl	8002bbc <__malloc_lock>
 80029ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <_free_r+0x90>)
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	b933      	cbnz	r3, 8002a00 <_free_r+0x2c>
 80029f2:	6063      	str	r3, [r4, #4]
 80029f4:	6014      	str	r4, [r2, #0]
 80029f6:	4628      	mov	r0, r5
 80029f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029fc:	f000 b8e4 	b.w	8002bc8 <__malloc_unlock>
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d908      	bls.n	8002a16 <_free_r+0x42>
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	1821      	adds	r1, r4, r0
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf01      	itttt	eq
 8002a0c:	6819      	ldreq	r1, [r3, #0]
 8002a0e:	685b      	ldreq	r3, [r3, #4]
 8002a10:	1809      	addeq	r1, r1, r0
 8002a12:	6021      	streq	r1, [r4, #0]
 8002a14:	e7ed      	b.n	80029f2 <_free_r+0x1e>
 8002a16:	461a      	mov	r2, r3
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b10b      	cbz	r3, 8002a20 <_free_r+0x4c>
 8002a1c:	42a3      	cmp	r3, r4
 8002a1e:	d9fa      	bls.n	8002a16 <_free_r+0x42>
 8002a20:	6811      	ldr	r1, [r2, #0]
 8002a22:	1850      	adds	r0, r2, r1
 8002a24:	42a0      	cmp	r0, r4
 8002a26:	d10b      	bne.n	8002a40 <_free_r+0x6c>
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	4401      	add	r1, r0
 8002a2c:	1850      	adds	r0, r2, r1
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	6011      	str	r1, [r2, #0]
 8002a32:	d1e0      	bne.n	80029f6 <_free_r+0x22>
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	6053      	str	r3, [r2, #4]
 8002a3a:	4408      	add	r0, r1
 8002a3c:	6010      	str	r0, [r2, #0]
 8002a3e:	e7da      	b.n	80029f6 <_free_r+0x22>
 8002a40:	d902      	bls.n	8002a48 <_free_r+0x74>
 8002a42:	230c      	movs	r3, #12
 8002a44:	602b      	str	r3, [r5, #0]
 8002a46:	e7d6      	b.n	80029f6 <_free_r+0x22>
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	1821      	adds	r1, r4, r0
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	bf04      	itt	eq
 8002a50:	6819      	ldreq	r1, [r3, #0]
 8002a52:	685b      	ldreq	r3, [r3, #4]
 8002a54:	6063      	str	r3, [r4, #4]
 8002a56:	bf04      	itt	eq
 8002a58:	1809      	addeq	r1, r1, r0
 8002a5a:	6021      	streq	r1, [r4, #0]
 8002a5c:	6054      	str	r4, [r2, #4]
 8002a5e:	e7ca      	b.n	80029f6 <_free_r+0x22>
 8002a60:	bd38      	pop	{r3, r4, r5, pc}
 8002a62:	bf00      	nop
 8002a64:	2000021c 	.word	0x2000021c

08002a68 <malloc>:
 8002a68:	4b02      	ldr	r3, [pc, #8]	@ (8002a74 <malloc+0xc>)
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f000 b825 	b.w	8002abc <_malloc_r>
 8002a72:	bf00      	nop
 8002a74:	20000018 	.word	0x20000018

08002a78 <sbrk_aligned>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002ab8 <sbrk_aligned+0x40>)
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	6831      	ldr	r1, [r6, #0]
 8002a80:	4605      	mov	r5, r0
 8002a82:	b911      	cbnz	r1, 8002a8a <sbrk_aligned+0x12>
 8002a84:	f000 f9d6 	bl	8002e34 <_sbrk_r>
 8002a88:	6030      	str	r0, [r6, #0]
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f000 f9d1 	bl	8002e34 <_sbrk_r>
 8002a92:	1c43      	adds	r3, r0, #1
 8002a94:	d103      	bne.n	8002a9e <sbrk_aligned+0x26>
 8002a96:	f04f 34ff 	mov.w	r4, #4294967295
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	1cc4      	adds	r4, r0, #3
 8002aa0:	f024 0403 	bic.w	r4, r4, #3
 8002aa4:	42a0      	cmp	r0, r4
 8002aa6:	d0f8      	beq.n	8002a9a <sbrk_aligned+0x22>
 8002aa8:	1a21      	subs	r1, r4, r0
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f000 f9c2 	bl	8002e34 <_sbrk_r>
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d1f2      	bne.n	8002a9a <sbrk_aligned+0x22>
 8002ab4:	e7ef      	b.n	8002a96 <sbrk_aligned+0x1e>
 8002ab6:	bf00      	nop
 8002ab8:	20000218 	.word	0x20000218

08002abc <_malloc_r>:
 8002abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ac0:	1ccd      	adds	r5, r1, #3
 8002ac2:	f025 0503 	bic.w	r5, r5, #3
 8002ac6:	3508      	adds	r5, #8
 8002ac8:	2d0c      	cmp	r5, #12
 8002aca:	bf38      	it	cc
 8002acc:	250c      	movcc	r5, #12
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	db01      	blt.n	8002ad8 <_malloc_r+0x1c>
 8002ad4:	42a9      	cmp	r1, r5
 8002ad6:	d904      	bls.n	8002ae2 <_malloc_r+0x26>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	6033      	str	r3, [r6, #0]
 8002adc:	2000      	movs	r0, #0
 8002ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bb8 <_malloc_r+0xfc>
 8002ae6:	f000 f869 	bl	8002bbc <__malloc_lock>
 8002aea:	f8d8 3000 	ldr.w	r3, [r8]
 8002aee:	461c      	mov	r4, r3
 8002af0:	bb44      	cbnz	r4, 8002b44 <_malloc_r+0x88>
 8002af2:	4629      	mov	r1, r5
 8002af4:	4630      	mov	r0, r6
 8002af6:	f7ff ffbf 	bl	8002a78 <sbrk_aligned>
 8002afa:	1c43      	adds	r3, r0, #1
 8002afc:	4604      	mov	r4, r0
 8002afe:	d158      	bne.n	8002bb2 <_malloc_r+0xf6>
 8002b00:	f8d8 4000 	ldr.w	r4, [r8]
 8002b04:	4627      	mov	r7, r4
 8002b06:	2f00      	cmp	r7, #0
 8002b08:	d143      	bne.n	8002b92 <_malloc_r+0xd6>
 8002b0a:	2c00      	cmp	r4, #0
 8002b0c:	d04b      	beq.n	8002ba6 <_malloc_r+0xea>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	4639      	mov	r1, r7
 8002b12:	4630      	mov	r0, r6
 8002b14:	eb04 0903 	add.w	r9, r4, r3
 8002b18:	f000 f98c 	bl	8002e34 <_sbrk_r>
 8002b1c:	4581      	cmp	r9, r0
 8002b1e:	d142      	bne.n	8002ba6 <_malloc_r+0xea>
 8002b20:	6821      	ldr	r1, [r4, #0]
 8002b22:	1a6d      	subs	r5, r5, r1
 8002b24:	4629      	mov	r1, r5
 8002b26:	4630      	mov	r0, r6
 8002b28:	f7ff ffa6 	bl	8002a78 <sbrk_aligned>
 8002b2c:	3001      	adds	r0, #1
 8002b2e:	d03a      	beq.n	8002ba6 <_malloc_r+0xea>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	442b      	add	r3, r5
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	f8d8 3000 	ldr.w	r3, [r8]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	bb62      	cbnz	r2, 8002b98 <_malloc_r+0xdc>
 8002b3e:	f8c8 7000 	str.w	r7, [r8]
 8002b42:	e00f      	b.n	8002b64 <_malloc_r+0xa8>
 8002b44:	6822      	ldr	r2, [r4, #0]
 8002b46:	1b52      	subs	r2, r2, r5
 8002b48:	d420      	bmi.n	8002b8c <_malloc_r+0xd0>
 8002b4a:	2a0b      	cmp	r2, #11
 8002b4c:	d917      	bls.n	8002b7e <_malloc_r+0xc2>
 8002b4e:	1961      	adds	r1, r4, r5
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	6025      	str	r5, [r4, #0]
 8002b54:	bf18      	it	ne
 8002b56:	6059      	strne	r1, [r3, #4]
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	bf08      	it	eq
 8002b5c:	f8c8 1000 	streq.w	r1, [r8]
 8002b60:	5162      	str	r2, [r4, r5]
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 f82f 	bl	8002bc8 <__malloc_unlock>
 8002b6a:	f104 000b 	add.w	r0, r4, #11
 8002b6e:	1d23      	adds	r3, r4, #4
 8002b70:	f020 0007 	bic.w	r0, r0, #7
 8002b74:	1ac2      	subs	r2, r0, r3
 8002b76:	bf1c      	itt	ne
 8002b78:	1a1b      	subne	r3, r3, r0
 8002b7a:	50a3      	strne	r3, [r4, r2]
 8002b7c:	e7af      	b.n	8002ade <_malloc_r+0x22>
 8002b7e:	6862      	ldr	r2, [r4, #4]
 8002b80:	42a3      	cmp	r3, r4
 8002b82:	bf0c      	ite	eq
 8002b84:	f8c8 2000 	streq.w	r2, [r8]
 8002b88:	605a      	strne	r2, [r3, #4]
 8002b8a:	e7eb      	b.n	8002b64 <_malloc_r+0xa8>
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	6864      	ldr	r4, [r4, #4]
 8002b90:	e7ae      	b.n	8002af0 <_malloc_r+0x34>
 8002b92:	463c      	mov	r4, r7
 8002b94:	687f      	ldr	r7, [r7, #4]
 8002b96:	e7b6      	b.n	8002b06 <_malloc_r+0x4a>
 8002b98:	461a      	mov	r2, r3
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	42a3      	cmp	r3, r4
 8002b9e:	d1fb      	bne.n	8002b98 <_malloc_r+0xdc>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	e7de      	b.n	8002b64 <_malloc_r+0xa8>
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	6033      	str	r3, [r6, #0]
 8002baa:	4630      	mov	r0, r6
 8002bac:	f000 f80c 	bl	8002bc8 <__malloc_unlock>
 8002bb0:	e794      	b.n	8002adc <_malloc_r+0x20>
 8002bb2:	6005      	str	r5, [r0, #0]
 8002bb4:	e7d6      	b.n	8002b64 <_malloc_r+0xa8>
 8002bb6:	bf00      	nop
 8002bb8:	2000021c 	.word	0x2000021c

08002bbc <__malloc_lock>:
 8002bbc:	4801      	ldr	r0, [pc, #4]	@ (8002bc4 <__malloc_lock+0x8>)
 8002bbe:	f7ff bf06 	b.w	80029ce <__retarget_lock_acquire_recursive>
 8002bc2:	bf00      	nop
 8002bc4:	20000214 	.word	0x20000214

08002bc8 <__malloc_unlock>:
 8002bc8:	4801      	ldr	r0, [pc, #4]	@ (8002bd0 <__malloc_unlock+0x8>)
 8002bca:	f7ff bf01 	b.w	80029d0 <__retarget_lock_release_recursive>
 8002bce:	bf00      	nop
 8002bd0:	20000214 	.word	0x20000214

08002bd4 <__sflush_r>:
 8002bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bdc:	0716      	lsls	r6, r2, #28
 8002bde:	4605      	mov	r5, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	d454      	bmi.n	8002c8e <__sflush_r+0xba>
 8002be4:	684b      	ldr	r3, [r1, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dc02      	bgt.n	8002bf0 <__sflush_r+0x1c>
 8002bea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	dd48      	ble.n	8002c82 <__sflush_r+0xae>
 8002bf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d045      	beq.n	8002c82 <__sflush_r+0xae>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bfc:	682f      	ldr	r7, [r5, #0]
 8002bfe:	6a21      	ldr	r1, [r4, #32]
 8002c00:	602b      	str	r3, [r5, #0]
 8002c02:	d030      	beq.n	8002c66 <__sflush_r+0x92>
 8002c04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	0759      	lsls	r1, r3, #29
 8002c0a:	d505      	bpl.n	8002c18 <__sflush_r+0x44>
 8002c0c:	6863      	ldr	r3, [r4, #4]
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c12:	b10b      	cbz	r3, 8002c18 <__sflush_r+0x44>
 8002c14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c1c:	6a21      	ldr	r1, [r4, #32]
 8002c1e:	4628      	mov	r0, r5
 8002c20:	47b0      	blx	r6
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	d106      	bne.n	8002c36 <__sflush_r+0x62>
 8002c28:	6829      	ldr	r1, [r5, #0]
 8002c2a:	291d      	cmp	r1, #29
 8002c2c:	d82b      	bhi.n	8002c86 <__sflush_r+0xb2>
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd8 <__sflush_r+0x104>)
 8002c30:	40ca      	lsrs	r2, r1
 8002c32:	07d6      	lsls	r6, r2, #31
 8002c34:	d527      	bpl.n	8002c86 <__sflush_r+0xb2>
 8002c36:	2200      	movs	r2, #0
 8002c38:	6062      	str	r2, [r4, #4]
 8002c3a:	04d9      	lsls	r1, r3, #19
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	6022      	str	r2, [r4, #0]
 8002c40:	d504      	bpl.n	8002c4c <__sflush_r+0x78>
 8002c42:	1c42      	adds	r2, r0, #1
 8002c44:	d101      	bne.n	8002c4a <__sflush_r+0x76>
 8002c46:	682b      	ldr	r3, [r5, #0]
 8002c48:	b903      	cbnz	r3, 8002c4c <__sflush_r+0x78>
 8002c4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c4e:	602f      	str	r7, [r5, #0]
 8002c50:	b1b9      	cbz	r1, 8002c82 <__sflush_r+0xae>
 8002c52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c56:	4299      	cmp	r1, r3
 8002c58:	d002      	beq.n	8002c60 <__sflush_r+0x8c>
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f7ff feba 	bl	80029d4 <_free_r>
 8002c60:	2300      	movs	r3, #0
 8002c62:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c64:	e00d      	b.n	8002c82 <__sflush_r+0xae>
 8002c66:	2301      	movs	r3, #1
 8002c68:	4628      	mov	r0, r5
 8002c6a:	47b0      	blx	r6
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	1c50      	adds	r0, r2, #1
 8002c70:	d1c9      	bne.n	8002c06 <__sflush_r+0x32>
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0c6      	beq.n	8002c06 <__sflush_r+0x32>
 8002c78:	2b1d      	cmp	r3, #29
 8002c7a:	d001      	beq.n	8002c80 <__sflush_r+0xac>
 8002c7c:	2b16      	cmp	r3, #22
 8002c7e:	d11e      	bne.n	8002cbe <__sflush_r+0xea>
 8002c80:	602f      	str	r7, [r5, #0]
 8002c82:	2000      	movs	r0, #0
 8002c84:	e022      	b.n	8002ccc <__sflush_r+0xf8>
 8002c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	e01b      	b.n	8002cc6 <__sflush_r+0xf2>
 8002c8e:	690f      	ldr	r7, [r1, #16]
 8002c90:	2f00      	cmp	r7, #0
 8002c92:	d0f6      	beq.n	8002c82 <__sflush_r+0xae>
 8002c94:	0793      	lsls	r3, r2, #30
 8002c96:	680e      	ldr	r6, [r1, #0]
 8002c98:	bf08      	it	eq
 8002c9a:	694b      	ldreq	r3, [r1, #20]
 8002c9c:	600f      	str	r7, [r1, #0]
 8002c9e:	bf18      	it	ne
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	eba6 0807 	sub.w	r8, r6, r7
 8002ca6:	608b      	str	r3, [r1, #8]
 8002ca8:	f1b8 0f00 	cmp.w	r8, #0
 8002cac:	dde9      	ble.n	8002c82 <__sflush_r+0xae>
 8002cae:	6a21      	ldr	r1, [r4, #32]
 8002cb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002cb2:	4643      	mov	r3, r8
 8002cb4:	463a      	mov	r2, r7
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	47b0      	blx	r6
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	dc08      	bgt.n	8002cd0 <__sflush_r+0xfc>
 8002cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc6:	81a3      	strh	r3, [r4, #12]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cd0:	4407      	add	r7, r0
 8002cd2:	eba8 0800 	sub.w	r8, r8, r0
 8002cd6:	e7e7      	b.n	8002ca8 <__sflush_r+0xd4>
 8002cd8:	20400001 	.word	0x20400001

08002cdc <_fflush_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	690b      	ldr	r3, [r1, #16]
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	b913      	cbnz	r3, 8002cec <_fflush_r+0x10>
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	4628      	mov	r0, r5
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	b118      	cbz	r0, 8002cf6 <_fflush_r+0x1a>
 8002cee:	6a03      	ldr	r3, [r0, #32]
 8002cf0:	b90b      	cbnz	r3, 8002cf6 <_fflush_r+0x1a>
 8002cf2:	f7ff fbcb 	bl	800248c <__sinit>
 8002cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f3      	beq.n	8002ce6 <_fflush_r+0xa>
 8002cfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d00:	07d0      	lsls	r0, r2, #31
 8002d02:	d404      	bmi.n	8002d0e <_fflush_r+0x32>
 8002d04:	0599      	lsls	r1, r3, #22
 8002d06:	d402      	bmi.n	8002d0e <_fflush_r+0x32>
 8002d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d0a:	f7ff fe60 	bl	80029ce <__retarget_lock_acquire_recursive>
 8002d0e:	4628      	mov	r0, r5
 8002d10:	4621      	mov	r1, r4
 8002d12:	f7ff ff5f 	bl	8002bd4 <__sflush_r>
 8002d16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d18:	07da      	lsls	r2, r3, #31
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	d4e4      	bmi.n	8002ce8 <_fflush_r+0xc>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	059b      	lsls	r3, r3, #22
 8002d22:	d4e1      	bmi.n	8002ce8 <_fflush_r+0xc>
 8002d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d26:	f7ff fe53 	bl	80029d0 <__retarget_lock_release_recursive>
 8002d2a:	e7dd      	b.n	8002ce8 <_fflush_r+0xc>

08002d2c <__swhatbuf_r>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	460c      	mov	r4, r1
 8002d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d34:	2900      	cmp	r1, #0
 8002d36:	b096      	sub	sp, #88	@ 0x58
 8002d38:	4615      	mov	r5, r2
 8002d3a:	461e      	mov	r6, r3
 8002d3c:	da0d      	bge.n	8002d5a <__swhatbuf_r+0x2e>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2340      	movne	r3, #64	@ 0x40
 8002d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d50:	2000      	movs	r0, #0
 8002d52:	6031      	str	r1, [r6, #0]
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	b016      	add	sp, #88	@ 0x58
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	466a      	mov	r2, sp
 8002d5c:	f000 f848 	bl	8002df0 <_fstat_r>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	dbec      	blt.n	8002d3e <__swhatbuf_r+0x12>
 8002d64:	9901      	ldr	r1, [sp, #4]
 8002d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d6e:	4259      	negs	r1, r3
 8002d70:	4159      	adcs	r1, r3
 8002d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d76:	e7eb      	b.n	8002d50 <__swhatbuf_r+0x24>

08002d78 <__smakebuf_r>:
 8002d78:	898b      	ldrh	r3, [r1, #12]
 8002d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d7c:	079d      	lsls	r5, r3, #30
 8002d7e:	4606      	mov	r6, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	d507      	bpl.n	8002d94 <__smakebuf_r+0x1c>
 8002d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	6123      	str	r3, [r4, #16]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6163      	str	r3, [r4, #20]
 8002d90:	b003      	add	sp, #12
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	ab01      	add	r3, sp, #4
 8002d96:	466a      	mov	r2, sp
 8002d98:	f7ff ffc8 	bl	8002d2c <__swhatbuf_r>
 8002d9c:	9f00      	ldr	r7, [sp, #0]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	4639      	mov	r1, r7
 8002da2:	4630      	mov	r0, r6
 8002da4:	f7ff fe8a 	bl	8002abc <_malloc_r>
 8002da8:	b948      	cbnz	r0, 8002dbe <__smakebuf_r+0x46>
 8002daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dae:	059a      	lsls	r2, r3, #22
 8002db0:	d4ee      	bmi.n	8002d90 <__smakebuf_r+0x18>
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	e7e2      	b.n	8002d84 <__smakebuf_r+0xc>
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	6020      	str	r0, [r4, #0]
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	9b01      	ldr	r3, [sp, #4]
 8002dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002dce:	b15b      	cbz	r3, 8002de8 <__smakebuf_r+0x70>
 8002dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 f81d 	bl	8002e14 <_isatty_r>
 8002dda:	b128      	cbz	r0, 8002de8 <__smakebuf_r+0x70>
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	81a3      	strh	r3, [r4, #12]
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	431d      	orrs	r5, r3
 8002dec:	81a5      	strh	r5, [r4, #12]
 8002dee:	e7cf      	b.n	8002d90 <__smakebuf_r+0x18>

08002df0 <_fstat_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	4d07      	ldr	r5, [pc, #28]	@ (8002e10 <_fstat_r+0x20>)
 8002df4:	2300      	movs	r3, #0
 8002df6:	4604      	mov	r4, r0
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	f7fd fd87 	bl	8000910 <_fstat>
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d102      	bne.n	8002e0c <_fstat_r+0x1c>
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	b103      	cbz	r3, 8002e0c <_fstat_r+0x1c>
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000210 	.word	0x20000210

08002e14 <_isatty_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4d06      	ldr	r5, [pc, #24]	@ (8002e30 <_isatty_r+0x1c>)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	602b      	str	r3, [r5, #0]
 8002e20:	f7fd fd86 	bl	8000930 <_isatty>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d102      	bne.n	8002e2e <_isatty_r+0x1a>
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	b103      	cbz	r3, 8002e2e <_isatty_r+0x1a>
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
 8002e30:	20000210 	.word	0x20000210

08002e34 <_sbrk_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4d06      	ldr	r5, [pc, #24]	@ (8002e50 <_sbrk_r+0x1c>)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fd fd8e 	bl	8000960 <_sbrk>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_sbrk_r+0x1a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_sbrk_r+0x1a>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	20000210 	.word	0x20000210

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
