
20250310_meka3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08008c10  08008c10  00009c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009238  08009238  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009240  08009240  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009244  08009244  0000a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009248  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d4  0800941c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800941c  0000b408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aea3  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002077  00000000  00000000  000160a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00018120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ab  00000000  00000000  000189f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a34  00000000  00000000  000190a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c676  00000000  00000000  0003bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb580  00000000  00000000  0004814d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001136cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  00113710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00116f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bf8 	.word	0x08008bf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008bf8 	.word	0x08008bf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b988 	b.w	8000f50 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	468e      	mov	lr, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d962      	bls.n	8000d34 <__udivmoddi4+0xdc>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	b14e      	cbz	r6, 8000c88 <__udivmoddi4+0x30>
 8000c74:	f1c6 0320 	rsb	r3, r6, #32
 8000c78:	fa01 f806 	lsl.w	r8, r1, r6
 8000c7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	ea43 0808 	orr.w	r8, r3, r8
 8000c86:	40b4      	lsls	r4, r6
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cac:	f080 80ea 	bcs.w	8000e84 <__udivmoddi4+0x22c>
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f240 80e7 	bls.w	8000e84 <__udivmoddi4+0x22c>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	443b      	add	r3, r7
 8000cba:	1a9a      	subs	r2, r3, r2
 8000cbc:	b2a3      	uxth	r3, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cce:	459c      	cmp	ip, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x8e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	f080 80d6 	bcs.w	8000e88 <__udivmoddi4+0x230>
 8000cdc:	459c      	cmp	ip, r3
 8000cde:	f240 80d3 	bls.w	8000e88 <__udivmoddi4+0x230>
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cea:	eba3 030c 	sub.w	r3, r3, ip
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40f3      	lsrs	r3, r6
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xb6>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb0>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x14c>
 8000d16:	4573      	cmp	r3, lr
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xc8>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 8105 	bhi.w	8000f2a <__udivmoddi4+0x2d2>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4690      	mov	r8, r2
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e5      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f000 8090 	beq.w	8000e5a <__udivmoddi4+0x202>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	f040 80a4 	bne.w	8000e8c <__udivmoddi4+0x234>
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	b280      	uxth	r0, r0
 8000d4e:	b2bc      	uxth	r4, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x11e>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x11c>
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	f200 80e0 	bhi.w	8000f34 <__udivmoddi4+0x2dc>
 8000d74:	46c4      	mov	ip, r8
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d84:	fb02 f404 	mul.w	r4, r2, r4
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x144>
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x142>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f200 80ca 	bhi.w	8000f2e <__udivmoddi4+0x2d6>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa0e f401 	lsl.w	r4, lr, r1
 8000db4:	fa20 f306 	lsr.w	r3, r0, r6
 8000db8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	fa1f fc87 	uxth.w	ip, r7
 8000dca:	fbbe f0f9 	udiv	r0, lr, r9
 8000dce:	0c1c      	lsrs	r4, r3, #16
 8000dd0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dd4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x1a0>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dea:	f080 809c 	bcs.w	8000f26 <__udivmoddi4+0x2ce>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f240 8099 	bls.w	8000f26 <__udivmoddi4+0x2ce>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	fa1f fe83 	uxth.w	lr, r3
 8000e00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e04:	fb09 4413 	mls	r4, r9, r3, r4
 8000e08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1ce>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e1a:	f080 8082 	bcs.w	8000f22 <__udivmoddi4+0x2ca>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d97f      	bls.n	8000f22 <__udivmoddi4+0x2ca>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e32:	4564      	cmp	r4, ip
 8000e34:	4673      	mov	r3, lr
 8000e36:	46e1      	mov	r9, ip
 8000e38:	d362      	bcc.n	8000f00 <__udivmoddi4+0x2a8>
 8000e3a:	d05f      	beq.n	8000efc <__udivmoddi4+0x2a4>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x1fe>
 8000e3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e42:	eb64 0409 	sbc.w	r4, r4, r9
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	431e      	orrs	r6, r3
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e74f      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000e5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e5e:	0c01      	lsrs	r1, r0, #16
 8000e60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e64:	b280      	uxth	r0, r0
 8000e66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	463c      	mov	r4, r7
 8000e70:	46b8      	mov	r8, r7
 8000e72:	46be      	mov	lr, r7
 8000e74:	2620      	movs	r6, #32
 8000e76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e7a:	eba2 0208 	sub.w	r2, r2, r8
 8000e7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e82:	e766      	b.n	8000d52 <__udivmoddi4+0xfa>
 8000e84:	4601      	mov	r1, r0
 8000e86:	e718      	b.n	8000cba <__udivmoddi4+0x62>
 8000e88:	4610      	mov	r0, r2
 8000e8a:	e72c      	b.n	8000ce6 <__udivmoddi4+0x8e>
 8000e8c:	f1c6 0220 	rsb	r2, r6, #32
 8000e90:	fa2e f302 	lsr.w	r3, lr, r2
 8000e94:	40b7      	lsls	r7, r6
 8000e96:	40b1      	lsls	r1, r6
 8000e98:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ea6:	b2bc      	uxth	r4, r7
 8000ea8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb08 f904 	mul.w	r9, r8, r4
 8000eb6:	40b0      	lsls	r0, r6
 8000eb8:	4589      	cmp	r9, r1
 8000eba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	d93e      	bls.n	8000f40 <__udivmoddi4+0x2e8>
 8000ec2:	1879      	adds	r1, r7, r1
 8000ec4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x276>
 8000eca:	4589      	cmp	r9, r1
 8000ecc:	d81f      	bhi.n	8000f0e <__udivmoddi4+0x2b6>
 8000ece:	eba1 0109 	sub.w	r1, r1, r9
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d229      	bcs.n	8000f3c <__udivmoddi4+0x2e4>
 8000ee8:	18ba      	adds	r2, r7, r2
 8000eea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eee:	d2c4      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef0:	4542      	cmp	r2, r8
 8000ef2:	d2c2      	bcs.n	8000e7a <__udivmoddi4+0x222>
 8000ef4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef8:	443a      	add	r2, r7
 8000efa:	e7be      	b.n	8000e7a <__udivmoddi4+0x222>
 8000efc:	45f0      	cmp	r8, lr
 8000efe:	d29d      	bcs.n	8000e3c <__udivmoddi4+0x1e4>
 8000f00:	ebbe 0302 	subs.w	r3, lr, r2
 8000f04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f08:	3801      	subs	r0, #1
 8000f0a:	46e1      	mov	r9, ip
 8000f0c:	e796      	b.n	8000e3c <__udivmoddi4+0x1e4>
 8000f0e:	eba7 0909 	sub.w	r9, r7, r9
 8000f12:	4449      	add	r1, r9
 8000f14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1c:	fb09 f804 	mul.w	r8, r9, r4
 8000f20:	e7db      	b.n	8000eda <__udivmoddi4+0x282>
 8000f22:	4673      	mov	r3, lr
 8000f24:	e77f      	b.n	8000e26 <__udivmoddi4+0x1ce>
 8000f26:	4650      	mov	r0, sl
 8000f28:	e766      	b.n	8000df8 <__udivmoddi4+0x1a0>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e6fd      	b.n	8000d2a <__udivmoddi4+0xd2>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3a02      	subs	r2, #2
 8000f32:	e733      	b.n	8000d9c <__udivmoddi4+0x144>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	443b      	add	r3, r7
 8000f3a:	e71c      	b.n	8000d76 <__udivmoddi4+0x11e>
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	e79c      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f40:	eba1 0109 	sub.w	r1, r1, r9
 8000f44:	46c4      	mov	ip, r8
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fb09 f804 	mul.w	r8, r9, r4
 8000f4e:	e7c4      	b.n	8000eda <__udivmoddi4+0x282>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <STprintf>:
#include <stdio.h>
#include "STprintf.h"

static UART_HandleTypeDef* Huart;

void STprintf(UART_HandleTypeDef* huart){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	setbuf(stdout,NULL);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <STprintf+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fd05 	bl	8004974 <setbuf>
	Huart = huart;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <STprintf+0x28>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	200001f0 	.word	0x200001f0

08000f80 <_write>:

int _write(int file,char *ptr,int len){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(Huart, (uint8_t*)ptr, len, 10);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <_write+0x28>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	f001 ffbc 	bl	8002f14 <HAL_UART_Transmit>
	return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <getDataIT>:
	}
	return;
}

// IT Function
void getDataIT(UART_HandleTypeDef* huart){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	FAF = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <getDataIT+0x20>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4904      	ldr	r1, [pc, #16]	@ (8000fd0 <getDataIT+0x24>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f833 	bl	800302a <HAL_UART_Receive_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000201 	.word	0x20000201
 8000fd0:	200001ff 	.word	0x200001ff

08000fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	FAF = 1;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <HAL_UART_RxCpltCallback+0x94>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
	static int GIcount;
	static int Itimeout;
	if(GIdata == 0xaf){
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2baf      	cmp	r3, #175	@ 0xaf
 8000fe8:	d106      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0x24>
		AFF = true;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		GIcount = 0;
 8000ff0:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
	}else{
		Itimeout++;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001000:	6013      	str	r3, [r2, #0]
		if(Itimeout >= TIMEOUT_MAX){
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b09      	cmp	r3, #9
 8001008:	dd02      	ble.n	8001010 <HAL_UART_RxCpltCallback+0x3c>
			Itimeout = 0;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_UART_RxCpltCallback+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01e      	beq.n	8001056 <HAL_UART_RxCpltCallback+0x82>
		AIdata[GIcount] = GIdata;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 8001022:	54d1      	strb	r1, [r2, r3]
		GIcount++;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 800102c:	6013      	str	r3, [r2, #0]
		if(GIcount == REV_SIZE){
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	d10f      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x82>
			AFF = false;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_UART_RxCpltCallback+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			if(ChSUM(AIdata) == 0xed){
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800103e:	f000 f821 	bl	8001084 <ChSUM>
 8001042:	4603      	mov	r3, r0
 8001044:	2bed      	cmp	r3, #237	@ 0xed
 8001046:	d103      	bne.n	8001050 <HAL_UART_RxCpltCallback+0x7c>
				AddStruct(&data,AIdata);
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <HAL_UART_RxCpltCallback+0xa8>)
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <HAL_UART_RxCpltCallback+0xac>)
 800104c:	f000 f846 	bl	80010dc <AddStruct>
			}
			GIcount = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_UART_RxCpltCallback+0xa0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &GIdata, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <HAL_UART_RxCpltCallback+0x98>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 ffe5 	bl	800302a <HAL_UART_Receive_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000201 	.word	0x20000201
 800106c:	200001ff 	.word	0x200001ff
 8001070:	20000200 	.word	0x20000200
 8001074:	2000021c 	.word	0x2000021c
 8001078:	20000220 	.word	0x20000220
 800107c:	200001f4 	.word	0x200001f4
 8001080:	20000204 	.word	0x20000204

08001084 <ChSUM>:

// All Function
uint8_t ChSUM(uint8_t* Adata){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(Adata[10] == 0xed){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	330a      	adds	r3, #10
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2bed      	cmp	r3, #237	@ 0xed
 8001094:	d11b      	bne.n	80010ce <ChSUM+0x4a>
		uint8_t revsum = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e009      	b.n	80010b4 <ChSUM+0x30>
			revsum += (int)Adata[i];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4413      	add	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	ddf2      	ble.n	80010a0 <ChSUM+0x1c>
		}
		if(revsum == Adata[9]){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3309      	adds	r3, #9
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d101      	bne.n	80010ca <ChSUM+0x46>
			return 0xed;
 80010c6:	23ed      	movs	r3, #237	@ 0xed
 80010c8:	e002      	b.n	80010d0 <ChSUM+0x4c>
		}else{
			return 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <ChSUM+0x4c>
		}
	}else{
		return 0xff;
 80010ce:	23ff      	movs	r3, #255	@ 0xff
	}
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <AddStruct>:

void AddStruct(getdata* Udata,uint8_t* Adata){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	StructInit(Udata);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8bb 	bl	8001262 <StructInit>
	Udata->LX = Adata[1];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	789a      	ldrb	r2, [r3, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	795a      	ldrb	r2, [r3, #5]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	78da      	ldrb	r2, [r3, #3]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	791a      	ldrb	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	799a      	ldrb	r2, [r3, #6]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3307      	adds	r3, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <AddStruct+0x54>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <AddStruct+0x68>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3307      	adds	r3, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <AddStruct+0x7c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3307      	adds	r3, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <AddStruct+0x90>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3307      	adds	r3, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <AddStruct+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3307      	adds	r3, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <AddStruct+0xb8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3307      	adds	r3, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <AddStruct+0xcc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3307      	adds	r3, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da02      	bge.n	80011ba <AddStruct+0xde>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3308      	adds	r3, #8
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <AddStruct+0xf2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3308      	adds	r3, #8
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <AddStruct+0x106>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <AddStruct+0x11a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3308      	adds	r3, #8
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <AddStruct+0x12e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <AddStruct+0x142>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTIONS 	= 1;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <AddStruct+0x156>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3308      	adds	r3, #8
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <AddStruct+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3308      	adds	r3, #8
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <AddStruct+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	755a      	strb	r2, [r3, #21]

	return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <StructInit>:

void StructInit(getdata* Udata){
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	749a      	strb	r2, [r3, #18]
	Udata->OPTIONS = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	755a      	strb	r2, [r3, #21]

	return;
 80012ee:	bf00      	nop
}
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 fcab 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f821 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 f8d3 	bl	80014b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800130e:	f000 f87d 	bl	800140c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001312:	f000 f8a5 	bl	8001460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  STprintf(&huart2);
 8001316:	480a      	ldr	r0, [pc, #40]	@ (8001340 <main+0x44>)
 8001318:	f7ff fe1c 	bl	8000f54 <STprintf>
  uint8_t Out[8] = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDataIT(&huart1);
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <main+0x48>)
 8001326:	f7ff fe41 	bl	8000fac <getDataIT>
//		  AllShowP(data);
//	  }
//	  printf("%d ",FAF);
//	  printf("LX:%+4d LY:%+4d RX:%+4d RY:%+4d \r\n",halfX(data.LX),halfY(data.LY),halfX(data.RX),halfY(data.RY));
//	  HAL_Delay(250);
	  MoveST(Out,data.LX,data.LY,data.RY);
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <main+0x4c>)
 800132c:	7819      	ldrb	r1, [r3, #0]
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <main+0x4c>)
 8001330:	785a      	ldrb	r2, [r3, #1]
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <main+0x4c>)
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	4638      	mov	r0, r7
 8001338:	f000 f91a 	bl	8001570 <MoveST>
	  getDataIT(&huart1);
 800133c:	bf00      	nop
 800133e:	e7f1      	b.n	8001324 <main+0x28>
 8001340:	2000026c 	.word	0x2000026c
 8001344:	20000224 	.word	0x20000224
 8001348:	20000204 	.word	0x20000204

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	@ 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fc9e 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <SystemClock_Config+0xb8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <SystemClock_Config+0xb8>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <SystemClock_Config+0xb8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <SystemClock_Config+0xbc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001398:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <SystemClock_Config+0xbc>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <SystemClock_Config+0xbc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fab9 	bl	8002938 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013cc:	f000 f88c 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 ffe0 	bl	80023b0 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013f6:	f000 f877 	bl	80014e8 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_USART1_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001418:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800141c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001444:	f001 fd16 	bl	8002e74 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f000 f84b 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000224 	.word	0x20000224
 800145c:	40011000 	.word	0x40011000

08001460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_USART2_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800146c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_USART2_UART_Init+0x4c>)
 8001498:	f001 fcec 	bl	8002e74 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f000 f821 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	40004400 	.word	0x40004400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_GPIO_Init+0x30>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <Error_Handler+0x8>

080014f4 <halfX>:
#include <stdio.h>

// L / R , UP / DOWN , DIGITAL / PWM
enum {LUD,RUD,LDD,RDD,LUP,RUP,LDP,RDP};

signed char halfX(uint8_t X){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	if(X > 0x7f - TOLE_VALUE && X < 0x7f + TOLE_VALUE){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b75      	cmp	r3, #117	@ 0x75
 8001502:	d904      	bls.n	800150e <halfX+0x1a>
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b88      	cmp	r3, #136	@ 0x88
 8001508:	d801      	bhi.n	800150e <halfX+0x1a>
		return 0;
 800150a:	2300      	movs	r3, #0
 800150c:	e008      	b.n	8001520 <halfX+0x2c>
	}else {
		if(X - 0x7f < -0x7f){
			return -0x7f;
		}else if(X - 0x7f > 0x7f){
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2bff      	cmp	r3, #255	@ 0xff
 8001512:	d101      	bne.n	8001518 <halfX+0x24>
			return 0x7f;
 8001514:	237f      	movs	r3, #127	@ 0x7f
 8001516:	e003      	b.n	8001520 <halfX+0x2c>
		}else {
			return X - 0x7f;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3b7f      	subs	r3, #127	@ 0x7f
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b25b      	sxtb	r3, r3
		}
	}
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <halfY>:

signed char halfY(uint8_t Y){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	if(Y > 0x7f - TOLE_VALUE && Y < 0x7f + TOLE_VALUE){
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b75      	cmp	r3, #117	@ 0x75
 800153a:	d904      	bls.n	8001546 <halfY+0x1a>
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b88      	cmp	r3, #136	@ 0x88
 8001540:	d801      	bhi.n	8001546 <halfY+0x1a>
		return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e00d      	b.n	8001562 <halfY+0x36>
	}else {
		if(0x7f - Y < -0x7f){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800154c:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001550:	da02      	bge.n	8001558 <halfY+0x2c>
			return -0x7f;
 8001552:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001556:	e004      	b.n	8001562 <halfY+0x36>
		}else if(0x7f - Y > 0x7f){
			return 0x7f;
		}else {
			return 0x7f - Y;
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b25b      	sxtb	r3, r3
		}
	}
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <MoveST>:

void MoveST(uint8_t *Udata,uint8_t stX,uint8_t stY,uint8_t stV){ // Udata[0] 左上 Udata[1] 右上 Udata[2] 左下 Udata[3] 右下
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b099      	sub	sp, #100	@ 0x64
 8001574:	af06      	add	r7, sp, #24
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	70fb      	strb	r3, [r7, #3]
 8001582:	460b      	mov	r3, r1
 8001584:	70bb      	strb	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	707b      	strb	r3, [r7, #1]
	double Z;
	double theta;
	double theta_plus;
	double COS;
	double SIN;
	PosX = halfX(stX);
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffb1 	bl	80014f4 <halfX>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	PosY = halfY(stY);
 8001598:	78bb      	ldrb	r3, [r7, #2]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffc6 	bl	800152c <halfY>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	Z = sqrt(pow(PosX,2) + pow(PosY,2));
 80015a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffda 	bl	8000564 <__aeabi_i2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	ed9f 1ba6 	vldr	d1, [pc, #664]	@ 8001850 <MoveST+0x2e0>
 80015b8:	ec43 2b10 	vmov	d0, r2, r3
 80015bc:	f005 fa02 	bl	80069c4 <pow>
 80015c0:	ec55 4b10 	vmov	r4, r5, d0
 80015c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffcb 	bl	8000564 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8001850 <MoveST+0x2e0>
 80015d6:	ec43 2b10 	vmov	d0, r2, r3
 80015da:	f005 f9f3 	bl	80069c4 <pow>
 80015de:	ec53 2b10 	vmov	r2, r3, d0
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe fe71 	bl	80002cc <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	ec43 2b17 	vmov	d7, r2, r3
 80015f2:	eeb0 0a47 	vmov.f32	s0, s14
 80015f6:	eef0 0a67 	vmov.f32	s1, s15
 80015fa:	f005 fa53 	bl	8006aa4 <sqrt>
 80015fe:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	theta = atan((double)PosY / (double)PosX);
 8001602:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffac 	bl	8000564 <__aeabi_i2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffa5 	bl	8000564 <__aeabi_i2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7ff f933 	bl	800088c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	ec43 2b17 	vmov	d7, r2, r3
 800162e:	eeb0 0a47 	vmov.f32	s0, s14
 8001632:	eef0 0a67 	vmov.f32	s1, s15
 8001636:	f005 fa63 	bl	8006b00 <atan>
 800163a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	if(PosX < 0){
 800163e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0a      	bge.n	800165c <MoveST+0xec>
		theta += M_PI;
 8001646:	a387      	add	r3, pc, #540	@ (adr r3, 8001864 <MoveST+0x2f4>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001650:	f7fe fe3c 	bl	80002cc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	}
	if(theta < 0){
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001668:	f7ff fa58 	bl	8000b1c <__aeabi_dcmplt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <MoveST+0x118>
		theta += 2 * M_PI;
 8001672:	a37e      	add	r3, pc, #504	@ (adr r3, 800186c <MoveST+0x2fc>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800167c:	f7fe fe26 	bl	80002cc <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	}
	theta_plus = theta + rad(PLUS);
 8001688:	ed9f 0b73 	vldr	d0, [pc, #460]	@ 8001858 <MoveST+0x2e8>
 800168c:	f000 f8f4 	bl	8001878 <rad>
 8001690:	ec53 2b10 	vmov	r2, r3, d0
 8001694:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001698:	f7fe fe18 	bl	80002cc <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	COS = Z * cos(theta_plus);
 80016a4:	ed97 0b08 	vldr	d0, [r7, #32]
 80016a8:	f005 fbc2 	bl	8006e30 <cos>
 80016ac:	ec53 2b10 	vmov	r2, r3, d0
 80016b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	Udata[LUP] = COS;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1d1c      	adds	r4, r3, #4
 80016c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c8:	f7ff fa8e 	bl	8000be8 <__aeabi_d2uiz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	7023      	strb	r3, [r4, #0]
//		Udata[LUD] = 1;
//	}else {
//		Udata[LUP] = (uint8_t)COS;
//		Udata[LUD] = 0;
//	}
	SIN = Z * sin(theta_plus);
 80016d2:	ed97 0b08 	vldr	d0, [r7, #32]
 80016d6:	f005 fc07 	bl	8006ee8 <sin>
 80016da:	ec53 2b10 	vmov	r2, r3, d0
 80016de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016e2:	f7fe ffa9 	bl	8000638 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	Udata[RUP] = SIN;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1d5c      	adds	r4, r3, #5
 80016f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f6:	f7ff fa77 	bl	8000be8 <__aeabi_d2uiz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	7023      	strb	r3, [r4, #0]
//		Udata[RUD] = 0;
//	}

//	Udata[LDD] = Udata[RUD];
//	Udata[RDD] = Udata[LUD];
	Udata[RDP] = Udata[RUP];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3307      	adds	r3, #7
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	7952      	ldrb	r2, [r2, #5]
 8001708:	701a      	strb	r2, [r3, #0]
	Udata[LDP] = Udata[LUP];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3306      	adds	r3, #6
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	7912      	ldrb	r2, [r2, #4]
 8001712:	701a      	strb	r2, [r3, #0]

	signed char Vroll;
	Vroll = halfY(stV);
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff08 	bl	800152c <halfY>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
	if(Vroll < 0){ //left
 8001720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da24      	bge.n	8001772 <MoveST+0x202>
		Udata[LUP] += Vroll;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	7819      	ldrb	r1, [r3, #0]
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	440a      	add	r2, r1
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
		Udata[LDP] += Vroll;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3306      	adds	r3, #6
 800173e:	7819      	ldrb	r1, [r3, #0]
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3306      	adds	r3, #6
 8001746:	440a      	add	r2, r1
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
		Udata[RUP] -= Vroll;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3305      	adds	r3, #5
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3305      	adds	r3, #5
 8001758:	1a8a      	subs	r2, r1, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
		Udata[RDP] -= Vroll;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3307      	adds	r3, #7
 8001762:	7819      	ldrb	r1, [r3, #0]
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3307      	adds	r3, #7
 800176a:	1a8a      	subs	r2, r1, r2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e023      	b.n	80017ba <MoveST+0x24a>
	}else{ // right
		Udata[LUP] -= Vroll;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	1a8a      	subs	r2, r1, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]
		Udata[LDP] -= Vroll;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3306      	adds	r3, #6
 8001788:	7819      	ldrb	r1, [r3, #0]
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3306      	adds	r3, #6
 8001790:	1a8a      	subs	r2, r1, r2
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
		Udata[RUP] += Vroll;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3305      	adds	r3, #5
 800179a:	7819      	ldrb	r1, [r3, #0]
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3305      	adds	r3, #5
 80017a2:	440a      	add	r2, r1
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]
		Udata[RDP] += Vroll;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3307      	adds	r3, #7
 80017ac:	7819      	ldrb	r1, [r3, #0]
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3307      	adds	r3, #7
 80017b4:	440a      	add	r2, r1
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0;i < 4;i++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017be:	e015      	b.n	80017ec <MoveST+0x27c>
				Udata[i+4] = -0x7f;
			}
			Udata[i] = 1;
			Udata[i+4] = 0x7f + Udata[i+4];
		}else{
			if(Udata[i+4] > 0x7f){
 80017c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c2:	3304      	adds	r3, #4
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da05      	bge.n	80017dc <MoveST+0x26c>
				Udata[i+4] = 0x7f;
 80017d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d2:	3304      	adds	r3, #4
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	227f      	movs	r2, #127	@ 0x7f
 80017da:	701a      	strb	r2, [r3, #0]
			}
			Udata[i] = 0;
 80017dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < 4;i++){
 80017e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e8:	3301      	adds	r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	dde6      	ble.n	80017c0 <MoveST+0x250>
		}
	}

	printf("左上 %d %2X 右上 %d %2X 左下 %d %2X 右下 %d %2X\r\n",Udata[LUD],Udata[LUP],Udata[RUD],Udata[RUP],Udata[LDD],Udata[LDP],Udata[RDD],Udata[RDP]);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461d      	mov	r5, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461e      	mov	r6, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	469c      	mov	ip, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3305      	adds	r3, #5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3302      	adds	r3, #2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3306      	adds	r3, #6
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3303      	adds	r3, #3
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461c      	mov	r4, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3307      	adds	r3, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	9403      	str	r4, [sp, #12]
 8001832:	9002      	str	r0, [sp, #8]
 8001834:	9101      	str	r1, [sp, #4]
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	4663      	mov	r3, ip
 800183a:	4632      	mov	r2, r6
 800183c:	4629      	mov	r1, r5
 800183e:	4808      	ldr	r0, [pc, #32]	@ (8001860 <MoveST+0x2f0>)
 8001840:	f003 f886 	bl	8004950 <iprintf>
}
 8001844:	bf00      	nop
 8001846:	374c      	adds	r7, #76	@ 0x4c
 8001848:	46bd      	mov	sp, r7
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184c:	f3af 8000 	nop.w
 8001850:	00000000 	.word	0x00000000
 8001854:	40000000 	.word	0x40000000
 8001858:	00000000 	.word	0x00000000
 800185c:	40468000 	.word	0x40468000
 8001860:	08008c10 	.word	0x08008c10
 8001864:	54442d18 	.word	0x54442d18
 8001868:	400921fb 	.word	0x400921fb
 800186c:	54442d18 	.word	0x54442d18
 8001870:	401921fb 	.word	0x401921fb
 8001874:	00000000 	.word	0x00000000

08001878 <rad>:

double deg(double rad){
	return (rad * 180) / M_PI;
}

double rad(double deg){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	ed87 0b00 	vstr	d0, [r7]
	return (deg * M_PI) / 180;
 8001882:	a30e      	add	r3, pc, #56	@ (adr r3, 80018bc <rad+0x44>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188c:	f7fe fed4 	bl	8000638 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <rad+0x40>)
 800189e:	f7fe fff5 	bl	800088c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	eef0 0a67 	vmov.f32	s1, s15
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40668000 	.word	0x40668000
 80018bc:	54442d18 	.word	0x54442d18
 80018c0:	400921fb 	.word	0x400921fb

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a36      	ldr	r2, [pc, #216]	@ (8001a0c <HAL_UART_MspInit+0xf8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d135      	bne.n	80019a2 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b32      	ldr	r3, [pc, #200]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800196e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001980:	2307      	movs	r3, #7
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4822      	ldr	r0, [pc, #136]	@ (8001a14 <HAL_UART_MspInit+0x100>)
 800198c:	f000 fb7c 	bl	8002088 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2025      	movs	r0, #37	@ 0x25
 8001996:	f000 faae 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800199a:	2025      	movs	r0, #37	@ 0x25
 800199c:	f000 fac7 	bl	8001f2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a0:	e030      	b.n	8001a04 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_UART_MspInit+0x104>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d12b      	bne.n	8001a04 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_UART_MspInit+0xfc>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e4:	230c      	movs	r3, #12
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f4:	2307      	movs	r3, #7
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <HAL_UART_MspInit+0x100>)
 8001a00:	f000 fb42 	bl	8002088 <HAL_GPIO_Init>
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	@ 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40004400 	.word	0x40004400

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <NMI_Handler+0x4>

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f945 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <USART1_IRQHandler+0x10>)
 8001a82:	f001 faf7 	bl	8003074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000224 	.word	0x20000224

08001a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return 1;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_kill>:

int _kill(int pid, int sig)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aaa:	f003 f949 	bl	8004d40 <__errno>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2216      	movs	r2, #22
 8001ab2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_exit>:

void _exit (int status)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffe7 	bl	8001aa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad2:	bf00      	nop
 8001ad4:	e7fd      	b.n	8001ad2 <_exit+0x12>

08001ad6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e00a      	b.n	8001afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae8:	f3af 8000 	nop.w
 8001aec:	4601      	mov	r1, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	b2ca      	uxtb	r2, r1
 8001af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbf0      	blt.n	8001ae8 <_read+0x12>
  }

  return len;
 8001b06:	687b      	ldr	r3, [r7, #4]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b38:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_isatty>:

int _isatty(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f003 f8ca 	bl	8004d40 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20020000 	.word	0x20020000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	200002b4 	.word	0x200002b4
 8001be0:	20000408 	.word	0x20000408

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c0c:	f7ff ffea 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f003 f889 	bl	8004d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff fb5f 	bl	80012fc <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c4c:	08009248 	.word	0x08009248
  ldr r2, =_sbss
 8001c50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c54:	20000408 	.word	0x20000408

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c60:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_Init+0x40>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_Init+0x40>)
 8001c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_Init+0x40>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f92b 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fe18 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f943 	bl	8001f4a <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f90b 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	200002b8 	.word	0x200002b8

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200002b8 	.word	0x200002b8

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff3e 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff31 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffa2 	bl	8001e9c <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff feda 	bl	8001d28 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e052      	b.n	800203a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0216 	bic.w	r2, r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <HAL_DMA_Abort+0x62>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0208 	bic.w	r2, r2, #8
 8001fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe4:	e013      	b.n	800200e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe6:	f7ff fe9f 	bl	8001d28 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d90c      	bls.n	800200e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e015      	b.n	800203a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e4      	bne.n	8001fe6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	223f      	movs	r2, #63	@ 0x3f
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e00c      	b.n	800207a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e165      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8154 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ae 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b5d      	ldr	r3, [pc, #372]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221c:	6453      	str	r3, [r2, #68]	@ 0x44
 800221e:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222a:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_GPIO_Init+0x304>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_GPIO_Init+0x308>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x21a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_GPIO_Init+0x30c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x216>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4d      	ldr	r2, [pc, #308]	@ (8002398 <HAL_GPIO_Init+0x310>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x212>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4c      	ldr	r2, [pc, #304]	@ (800239c <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x20e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x20a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4a      	ldr	r2, [pc, #296]	@ (80023a4 <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x206>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a49      	ldr	r2, [pc, #292]	@ (80023a8 <HAL_GPIO_Init+0x320>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x202>
 8002286:	2306      	movs	r3, #6
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228a:	2307      	movs	r3, #7
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	@ (800238c <HAL_GPIO_Init+0x304>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_GPIO_Init+0x324>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae96 	bls.w	80020a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7ff fc42 	bl	8001d28 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7ff fc3e 	bl	8001d28 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f855 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fba2 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08008c4c 	.word	0x08008c4c
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08008c5c 	.word	0x08008c5c

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffdc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	@ (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	08008c5c 	.word	0x08008c5c

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b0a6      	sub	sp, #152	@ 0x98
 80025ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260a:	4bc8      	ldr	r3, [pc, #800]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f200 817e 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x330>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_RCC_GetSysClockFreq+0x3c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002655 	.word	0x08002655
 8002624:	08002915 	.word	0x08002915
 8002628:	08002915 	.word	0x08002915
 800262c:	08002915 	.word	0x08002915
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002915 	.word	0x08002915
 8002638:	08002915 	.word	0x08002915
 800263c:	08002915 	.word	0x08002915
 8002640:	08002665 	.word	0x08002665
 8002644:	08002915 	.word	0x08002915
 8002648:	08002915 	.word	0x08002915
 800264c:	08002915 	.word	0x08002915
 8002650:	080027cf 	.word	0x080027cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4bb6      	ldr	r3, [pc, #728]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800265a:	e15f      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4bb5      	ldr	r3, [pc, #724]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 800265e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002662:	e15b      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4bb1      	ldr	r3, [pc, #708]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800266c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002670:	4bae      	ldr	r3, [pc, #696]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4bab      	ldr	r3, [pc, #684]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002690:	2300      	movs	r3, #0
 8002692:	667b      	str	r3, [r7, #100]	@ 0x64
 8002694:	4ba7      	ldr	r3, [pc, #668]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 8002696:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800269a:	462a      	mov	r2, r5
 800269c:	fb03 f202 	mul.w	r2, r3, r2
 80026a0:	2300      	movs	r3, #0
 80026a2:	4621      	mov	r1, r4
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	4aa2      	ldr	r2, [pc, #648]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 80026ac:	4621      	mov	r1, r4
 80026ae:	fba1 1202 	umull	r1, r2, r1, r2
 80026b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026b4:	460a      	mov	r2, r1
 80026b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026ba:	4413      	add	r3, r2
 80026bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c2:	2200      	movs	r2, #0
 80026c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026d0:	f7fe faaa 	bl	8000c28 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026de:	e064      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e0:	4b92      	ldr	r3, [pc, #584]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	2200      	movs	r2, #0
 80026e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80026ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f4:	2300      	movs	r3, #0
 80026f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80026fc:	4622      	mov	r2, r4
 80026fe:	462b      	mov	r3, r5
 8002700:	f04f 0000 	mov.w	r0, #0
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	0159      	lsls	r1, r3, #5
 800270a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270e:	0150      	lsls	r0, r2, #5
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4621      	mov	r1, r4
 8002716:	1a51      	subs	r1, r2, r1
 8002718:	6139      	str	r1, [r7, #16]
 800271a:	4629      	mov	r1, r5
 800271c:	eb63 0301 	sbc.w	r3, r3, r1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272e:	4659      	mov	r1, fp
 8002730:	018b      	lsls	r3, r1, #6
 8002732:	4651      	mov	r1, sl
 8002734:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002738:	4651      	mov	r1, sl
 800273a:	018a      	lsls	r2, r1, #6
 800273c:	4651      	mov	r1, sl
 800273e:	ebb2 0801 	subs.w	r8, r2, r1
 8002742:	4659      	mov	r1, fp
 8002744:	eb63 0901 	sbc.w	r9, r3, r1
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002754:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002758:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275c:	4690      	mov	r8, r2
 800275e:	4699      	mov	r9, r3
 8002760:	4623      	mov	r3, r4
 8002762:	eb18 0303 	adds.w	r3, r8, r3
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	462b      	mov	r3, r5
 800276a:	eb49 0303 	adc.w	r3, r9, r3
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277c:	4629      	mov	r1, r5
 800277e:	028b      	lsls	r3, r1, #10
 8002780:	4621      	mov	r1, r4
 8002782:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002786:	4621      	mov	r1, r4
 8002788:	028a      	lsls	r2, r1, #10
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002792:	2200      	movs	r2, #0
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
 8002796:	647a      	str	r2, [r7, #68]	@ 0x44
 8002798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800279c:	f7fe fa44 	bl	8000c28 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027aa:	4b60      	ldr	r3, [pc, #384]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	3301      	adds	r3, #1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80027bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027cc:	e0a6      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02a      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b51      	ldr	r3, [pc, #324]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	2200      	movs	r2, #0
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027f8:	2100      	movs	r1, #0
 80027fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 80027fc:	fb03 f201 	mul.w	r2, r3, r1
 8002800:	2300      	movs	r3, #0
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	4413      	add	r3, r2
 8002808:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 800280a:	fba0 1202 	umull	r1, r2, r0, r2
 800280e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002810:	460a      	mov	r2, r1
 8002812:	673a      	str	r2, [r7, #112]	@ 0x70
 8002814:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002816:	4413      	add	r3, r2
 8002818:	677b      	str	r3, [r7, #116]	@ 0x74
 800281a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281e:	2200      	movs	r2, #0
 8002820:	633b      	str	r3, [r7, #48]	@ 0x30
 8002822:	637a      	str	r2, [r7, #52]	@ 0x34
 8002824:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002828:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800282c:	f7fe f9fc 	bl	8000c28 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800283a:	e05b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	2200      	movs	r2, #0
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
 8002854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	f04f 0000 	mov.w	r0, #0
 8002860:	f04f 0100 	mov.w	r1, #0
 8002864:	0159      	lsls	r1, r3, #5
 8002866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286a:	0150      	lsls	r0, r2, #5
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4641      	mov	r1, r8
 8002872:	ebb2 0a01 	subs.w	sl, r2, r1
 8002876:	4649      	mov	r1, r9
 8002878:	eb63 0b01 	sbc.w	fp, r3, r1
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800288c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002890:	ebb2 040a 	subs.w	r4, r2, sl
 8002894:	eb63 050b 	sbc.w	r5, r3, fp
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	464b      	mov	r3, r9
 80028b4:	eb45 0303 	adc.w	r3, r5, r3
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c6:	4629      	mov	r1, r5
 80028c8:	028b      	lsls	r3, r1, #10
 80028ca:	4621      	mov	r1, r4
 80028cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d0:	4621      	mov	r1, r4
 80028d2:	028a      	lsls	r2, r1, #10
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028dc:	2200      	movs	r2, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e6:	f7fe f99f 	bl	8000c28 <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4613      	mov	r3, r2
 80028f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0f1b      	lsrs	r3, r3, #28
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002912:	e003      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800291a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002920:	4618      	mov	r0, r3
 8002922:	3798      	adds	r7, #152	@ 0x98
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	017d7840 	.word	0x017d7840

08002938 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e28d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8083 	beq.w	8002a5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002958:	4b94      	ldr	r3, [pc, #592]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d019      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002964:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
        || \
 800296c:	2b08      	cmp	r3, #8
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002970:	4b8e      	ldr	r3, [pc, #568]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800297c:	d00c      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d112      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x124>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e25a      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x90>
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xb4>
 80029d2:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a72      	ldr	r2, [pc, #456]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff f98c 	bl	8001d28 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff f988 	bl	8001d28 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e21f      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xdc>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f978 	bl	8001d28 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f974 	bl	8001d28 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e20b      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x104>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06f      	beq.n	8002b4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a6a:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b44      	ldr	r3, [pc, #272]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1d3      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4937      	ldr	r1, [pc, #220]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f921 	bl	8001d28 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff f91d 	bl	8001d28 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1b4      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4925      	ldr	r1, [pc, #148]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff f900 	bl	8001d28 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f8fc 	bl	8001d28 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e193      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d036      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f8e0 	bl	8001d28 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff f8dc 	bl	8001d28 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e173      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x234>
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7ff f8c9 	bl	8001d28 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f8c5 	bl	8001d28 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d907      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e15c      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ea      	bne.n	8002b9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8097 	beq.w	8002d00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b83      	ldr	r3, [pc, #524]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a7e      	ldr	r2, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f885 	bl	8001d28 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7ff f881 	bl	8001d28 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e118      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x31e>
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x340>
 8002c5e:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a60      	ldr	r2, [pc, #384]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c78:	4b5a      	ldr	r3, [pc, #360]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a59      	ldr	r2, [pc, #356]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7ff f846 	bl	8001d28 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f842 	bl	8001d28 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0d7      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x368>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7ff f830 	bl	8001d28 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f82c 	bl	8001d28 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0c1      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	4b40      	ldr	r3, [pc, #256]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ee      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80ad 	beq.w	8002e64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d145      	bne.n	8002daa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff f800 	bl	8001d28 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fffc 	bl	8001d28 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e093      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	491b      	ldr	r1, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe ffd1 	bl	8001d28 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe ffcd 	bl	8001d28 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e064      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x452>
 8002da8:	e05c      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe ffba 	bl	8001d28 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe ffb6 	bl	8001d28 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e04d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x480>
 8002dd6:	e045      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e040      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_RCC_OscConfig+0x538>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d129      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d119      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e042      	b.n	8002f0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe fd3a 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fdbd 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d175      	bne.n	8003020 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_UART_Transmit+0x2c>
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e06e      	b.n	8003022 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2221      	movs	r2, #33	@ 0x21
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fe fee9 	bl	8001d28 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Transmit+0x6c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f88:	e02e      	b.n	8002fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fb1f 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03a      	b.n	8003022 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cb      	bne.n	8002f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	@ 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 faeb 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	4613      	mov	r3, r2
 8003036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b20      	cmp	r3, #32
 8003042:	d112      	bne.n	800306a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Receive_IT+0x26>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e00b      	b.n	800306c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	461a      	mov	r2, r3
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fb12 	bl	800368a <UART_Start_Receive_IT>
 8003066:	4603      	mov	r3, r0
 8003068:	e000      	b.n	800306c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0ba      	sub	sp, #232	@ 0xe8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fbf2 	bl	80038bc <UART_Receive_IT>
      return;
 80030d8:	e25b      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80de 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
 80030e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80d1 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f043 0208 	orr.w	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81f2 	beq.w	8003588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fb7d 	bl	80038bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b40      	cmp	r3, #64	@ 0x40
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_UART_IRQHandler+0x17a>
 80031e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d04f      	beq.n	800328e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa85 	bl	80036fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b40      	cmp	r3, #64	@ 0x40
 8003200:	d141      	bne.n	8003286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800321c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3314      	adds	r3, #20
 800322a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800322e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800323a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1d9      	bne.n	8003202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d013      	beq.n	800327e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	4a7e      	ldr	r2, [pc, #504]	@ (8003454 <HAL_UART_IRQHandler+0x3e0>)
 800325c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe feed 	bl	8002042 <HAL_DMA_Abort_IT>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00e      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f994 	bl	80035ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00a      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f990 	bl	80035ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e006      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f98c 	bl	80035ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800329a:	e175      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	bf00      	nop
    return;
 800329e:	e173      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 814f 	bne.w	8003548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8148 	beq.w	8003548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8141 	beq.w	8003548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	f040 80b6 	bne.w	8003458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8145 	beq.w	800358c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800330a:	429a      	cmp	r2, r3
 800330c:	f080 813e 	bcs.w	800358c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003316:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003322:	f000 8088 	beq.w	8003436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800333c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800335e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800339a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800339e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e1      	bne.n	8003372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e3      	bne.n	80033ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003406:	f023 0310 	bic.w	r3, r3, #16
 800340a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003418:	65ba      	str	r2, [r7, #88]	@ 0x58
 800341a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800341e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e3      	bne.n	80033f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fd96 	bl	8001f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003444:	b29b      	uxth	r3, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8b7 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003452:	e09b      	b.n	800358c <HAL_UART_IRQHandler+0x518>
 8003454:	080037c5 	.word	0x080037c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 808e 	beq.w	8003590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8089 	beq.w	8003590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	623b      	str	r3, [r7, #32]
   return(result);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034da:	633a      	str	r2, [r7, #48]	@ 0x30
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e3      	bne.n	80034b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	60fb      	str	r3, [r7, #12]
   return(result);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0310 	bic.w	r3, r3, #16
 8003512:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003520:	61fa      	str	r2, [r7, #28]
 8003522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	617b      	str	r3, [r7, #20]
   return(result);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e3      	bne.n	80034fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f83d 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003546:	e023      	b.n	8003590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_UART_IRQHandler+0x4f4>
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f943 	bl	80037ec <UART_Transmit_IT>
    return;
 8003566:	e014      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_UART_IRQHandler+0x51e>
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f983 	bl	800388c <UART_EndTransmit_IT>
    return;
 8003586:	e004      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
    return;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
      return;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
      return;
 8003590:	bf00      	nop
  }
}
 8003592:	37e8      	adds	r7, #232	@ 0xe8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e8:	e03b      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d037      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fb99 	bl	8001d28 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <UART_WaitOnFlagUntilTimeout+0x30>
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e03a      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d023      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b80      	cmp	r3, #128	@ 0x80
 800361e:	d020      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	d01d      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d116      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f857 	bl	80036fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2208      	movs	r2, #8
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0b4      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2222      	movs	r2, #34	@ 0x22
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036fe:	b480      	push	{r7}
 8003700:	b095      	sub	sp, #84	@ 0x54
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800371c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003726:	643a      	str	r2, [r7, #64]	@ 0x40
 8003728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800372c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	61fb      	str	r3, [r7, #28]
   return(result);
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3314      	adds	r3, #20
 8003758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800375a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e5      	bne.n	800373a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	2b01      	cmp	r3, #1
 8003774:	d119      	bne.n	80037aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	60bb      	str	r3, [r7, #8]
   return(result);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f023 0310 	bic.w	r3, r3, #16
 800378c:	647b      	str	r3, [r7, #68]	@ 0x44
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003796:	61ba      	str	r2, [r7, #24]
 8003798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6979      	ldr	r1, [r7, #20]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037b8:	bf00      	nop
 80037ba:	3754      	adds	r7, #84	@ 0x54
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff fee4 	bl	80035ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b21      	cmp	r3, #33	@ 0x21
 80037fe:	d13e      	bne.n	800387e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003808:	d114      	bne.n	8003834 <UART_Transmit_IT+0x48>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d110      	bne.n	8003834 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003826:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]
 8003832:	e008      	b.n	8003846 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	1c59      	adds	r1, r3, #1
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6211      	str	r1, [r2, #32]
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29b      	uxth	r3, r3
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003868:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003878:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fe73 	bl	8003598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	@ 0x30
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b22      	cmp	r3, #34	@ 0x22
 80038ce:	f040 80ae 	bne.w	8003a2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d117      	bne.n	800390c <UART_Receive_IT+0x50>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d113      	bne.n	800390c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	@ 0x28
 800390a:	e026      	b.n	800395a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	d007      	beq.n	8003930 <UART_Receive_IT+0x74>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <UART_Receive_IT+0x82>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e008      	b.n	8003950 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800394a:	b2da      	uxtb	r2, r3
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800396a:	2b00      	cmp	r3, #0
 800396c:	d15d      	bne.n	8003a2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0220 	bic.w	r2, r2, #32
 800397c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800398c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d135      	bne.n	8003a20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 0310 	bic.w	r3, r3, #16
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	623a      	str	r2, [r7, #32]
 80039dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d10a      	bne.n	8003a12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fdd1 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
 8003a1e:	e002      	b.n	8003a26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd fad7 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e002      	b.n	8003a30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	@ 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	@ 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fd70 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7fe fd57 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b7c:	f7fd f854 	bl	8000c28 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c12:	f7fd f809 	bl	8000c28 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cce:	f7fc ffab 	bl	8000c28 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	@ 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	@ 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e106      	b.n	8003f10 <UART_SetConfig+0x4d8>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d90:	f7fc ff4a 	bl	8000c28 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e2e:	f7fc fefb 	bl	8000c28 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	@ 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	@ 0x32
 8003e4c:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e62:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eaa:	464b      	mov	r3, r9
 8003eac:	460a      	mov	r2, r1
 8003eae:	eb42 0303 	adc.w	r3, r2, r3
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ede:	f7fc fea3 	bl	8000c28 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	@ 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	3332      	adds	r3, #50	@ 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <UART_SetConfig+0x4e4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f16:	46bd      	mov	sp, r7
 8003f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <__cvt>:
 8003f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	ec57 6b10 	vmov	r6, r7, d0
 8003f28:	2f00      	cmp	r7, #0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	463b      	mov	r3, r7
 8003f30:	bfbb      	ittet	lt
 8003f32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003f36:	461f      	movlt	r7, r3
 8003f38:	2300      	movge	r3, #0
 8003f3a:	232d      	movlt	r3, #45	@ 0x2d
 8003f3c:	700b      	strb	r3, [r1, #0]
 8003f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003f44:	4691      	mov	r9, r2
 8003f46:	f023 0820 	bic.w	r8, r3, #32
 8003f4a:	bfbc      	itt	lt
 8003f4c:	4632      	movlt	r2, r6
 8003f4e:	4616      	movlt	r6, r2
 8003f50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f54:	d005      	beq.n	8003f62 <__cvt+0x42>
 8003f56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f5a:	d100      	bne.n	8003f5e <__cvt+0x3e>
 8003f5c:	3401      	adds	r4, #1
 8003f5e:	2102      	movs	r1, #2
 8003f60:	e000      	b.n	8003f64 <__cvt+0x44>
 8003f62:	2103      	movs	r1, #3
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	ab02      	add	r3, sp, #8
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	ec47 6b10 	vmov	d0, r6, r7
 8003f70:	4653      	mov	r3, sl
 8003f72:	4622      	mov	r2, r4
 8003f74:	f000 ff9c 	bl	8004eb0 <_dtoa_r>
 8003f78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	d119      	bne.n	8003fb4 <__cvt+0x94>
 8003f80:	f019 0f01 	tst.w	r9, #1
 8003f84:	d00e      	beq.n	8003fa4 <__cvt+0x84>
 8003f86:	eb00 0904 	add.w	r9, r0, r4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4630      	mov	r0, r6
 8003f90:	4639      	mov	r1, r7
 8003f92:	f7fc fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 8003f96:	b108      	cbz	r0, 8003f9c <__cvt+0x7c>
 8003f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f9c:	2230      	movs	r2, #48	@ 0x30
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	454b      	cmp	r3, r9
 8003fa2:	d31e      	bcc.n	8003fe2 <__cvt+0xc2>
 8003fa4:	9b03      	ldr	r3, [sp, #12]
 8003fa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fa8:	1b5b      	subs	r3, r3, r5
 8003faa:	4628      	mov	r0, r5
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	b004      	add	sp, #16
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fb8:	eb00 0904 	add.w	r9, r0, r4
 8003fbc:	d1e5      	bne.n	8003f8a <__cvt+0x6a>
 8003fbe:	7803      	ldrb	r3, [r0, #0]
 8003fc0:	2b30      	cmp	r3, #48	@ 0x30
 8003fc2:	d10a      	bne.n	8003fda <__cvt+0xba>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc fd9c 	bl	8000b08 <__aeabi_dcmpeq>
 8003fd0:	b918      	cbnz	r0, 8003fda <__cvt+0xba>
 8003fd2:	f1c4 0401 	rsb	r4, r4, #1
 8003fd6:	f8ca 4000 	str.w	r4, [sl]
 8003fda:	f8da 3000 	ldr.w	r3, [sl]
 8003fde:	4499      	add	r9, r3
 8003fe0:	e7d3      	b.n	8003f8a <__cvt+0x6a>
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	9103      	str	r1, [sp, #12]
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e7d9      	b.n	8003f9e <__cvt+0x7e>

08003fea <__exponent>:
 8003fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fec:	2900      	cmp	r1, #0
 8003fee:	bfba      	itte	lt
 8003ff0:	4249      	neglt	r1, r1
 8003ff2:	232d      	movlt	r3, #45	@ 0x2d
 8003ff4:	232b      	movge	r3, #43	@ 0x2b
 8003ff6:	2909      	cmp	r1, #9
 8003ff8:	7002      	strb	r2, [r0, #0]
 8003ffa:	7043      	strb	r3, [r0, #1]
 8003ffc:	dd29      	ble.n	8004052 <__exponent+0x68>
 8003ffe:	f10d 0307 	add.w	r3, sp, #7
 8004002:	461d      	mov	r5, r3
 8004004:	270a      	movs	r7, #10
 8004006:	461a      	mov	r2, r3
 8004008:	fbb1 f6f7 	udiv	r6, r1, r7
 800400c:	fb07 1416 	mls	r4, r7, r6, r1
 8004010:	3430      	adds	r4, #48	@ 0x30
 8004012:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004016:	460c      	mov	r4, r1
 8004018:	2c63      	cmp	r4, #99	@ 0x63
 800401a:	f103 33ff 	add.w	r3, r3, #4294967295
 800401e:	4631      	mov	r1, r6
 8004020:	dcf1      	bgt.n	8004006 <__exponent+0x1c>
 8004022:	3130      	adds	r1, #48	@ 0x30
 8004024:	1e94      	subs	r4, r2, #2
 8004026:	f803 1c01 	strb.w	r1, [r3, #-1]
 800402a:	1c41      	adds	r1, r0, #1
 800402c:	4623      	mov	r3, r4
 800402e:	42ab      	cmp	r3, r5
 8004030:	d30a      	bcc.n	8004048 <__exponent+0x5e>
 8004032:	f10d 0309 	add.w	r3, sp, #9
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ac      	cmp	r4, r5
 800403a:	bf88      	it	hi
 800403c:	2300      	movhi	r3, #0
 800403e:	3302      	adds	r3, #2
 8004040:	4403      	add	r3, r0
 8004042:	1a18      	subs	r0, r3, r0
 8004044:	b003      	add	sp, #12
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	f813 6b01 	ldrb.w	r6, [r3], #1
 800404c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004050:	e7ed      	b.n	800402e <__exponent+0x44>
 8004052:	2330      	movs	r3, #48	@ 0x30
 8004054:	3130      	adds	r1, #48	@ 0x30
 8004056:	7083      	strb	r3, [r0, #2]
 8004058:	70c1      	strb	r1, [r0, #3]
 800405a:	1d03      	adds	r3, r0, #4
 800405c:	e7f1      	b.n	8004042 <__exponent+0x58>
	...

08004060 <_printf_float>:
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b08d      	sub	sp, #52	@ 0x34
 8004066:	460c      	mov	r4, r1
 8004068:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800406c:	4616      	mov	r6, r2
 800406e:	461f      	mov	r7, r3
 8004070:	4605      	mov	r5, r0
 8004072:	f000 fe1b 	bl	8004cac <_localeconv_r>
 8004076:	6803      	ldr	r3, [r0, #0]
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc f918 	bl	80002b0 <strlen>
 8004080:	2300      	movs	r3, #0
 8004082:	930a      	str	r3, [sp, #40]	@ 0x28
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	9005      	str	r0, [sp, #20]
 800408a:	3307      	adds	r3, #7
 800408c:	f023 0307 	bic.w	r3, r3, #7
 8004090:	f103 0208 	add.w	r2, r3, #8
 8004094:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004098:	f8d4 b000 	ldr.w	fp, [r4]
 800409c:	f8c8 2000 	str.w	r2, [r8]
 80040a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80040a8:	9307      	str	r3, [sp, #28]
 80040aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80040ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80040b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040b6:	4b9c      	ldr	r3, [pc, #624]	@ (8004328 <_printf_float+0x2c8>)
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	f7fc fd56 	bl	8000b6c <__aeabi_dcmpun>
 80040c0:	bb70      	cbnz	r0, 8004120 <_printf_float+0xc0>
 80040c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c6:	4b98      	ldr	r3, [pc, #608]	@ (8004328 <_printf_float+0x2c8>)
 80040c8:	f04f 32ff 	mov.w	r2, #4294967295
 80040cc:	f7fc fd30 	bl	8000b30 <__aeabi_dcmple>
 80040d0:	bb30      	cbnz	r0, 8004120 <_printf_float+0xc0>
 80040d2:	2200      	movs	r2, #0
 80040d4:	2300      	movs	r3, #0
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80040de:	b110      	cbz	r0, 80040e6 <_printf_float+0x86>
 80040e0:	232d      	movs	r3, #45	@ 0x2d
 80040e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e6:	4a91      	ldr	r2, [pc, #580]	@ (800432c <_printf_float+0x2cc>)
 80040e8:	4b91      	ldr	r3, [pc, #580]	@ (8004330 <_printf_float+0x2d0>)
 80040ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80040ee:	bf8c      	ite	hi
 80040f0:	4690      	movhi	r8, r2
 80040f2:	4698      	movls	r8, r3
 80040f4:	2303      	movs	r3, #3
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	f02b 0304 	bic.w	r3, fp, #4
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	f04f 0900 	mov.w	r9, #0
 8004102:	9700      	str	r7, [sp, #0]
 8004104:	4633      	mov	r3, r6
 8004106:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004108:	4621      	mov	r1, r4
 800410a:	4628      	mov	r0, r5
 800410c:	f000 f9d2 	bl	80044b4 <_printf_common>
 8004110:	3001      	adds	r0, #1
 8004112:	f040 808d 	bne.w	8004230 <_printf_float+0x1d0>
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	b00d      	add	sp, #52	@ 0x34
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	4640      	mov	r0, r8
 8004126:	4649      	mov	r1, r9
 8004128:	f7fc fd20 	bl	8000b6c <__aeabi_dcmpun>
 800412c:	b140      	cbz	r0, 8004140 <_printf_float+0xe0>
 800412e:	464b      	mov	r3, r9
 8004130:	2b00      	cmp	r3, #0
 8004132:	bfbc      	itt	lt
 8004134:	232d      	movlt	r3, #45	@ 0x2d
 8004136:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800413a:	4a7e      	ldr	r2, [pc, #504]	@ (8004334 <_printf_float+0x2d4>)
 800413c:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <_printf_float+0x2d8>)
 800413e:	e7d4      	b.n	80040ea <_printf_float+0x8a>
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004146:	9206      	str	r2, [sp, #24]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	d13b      	bne.n	80041c4 <_printf_float+0x164>
 800414c:	2306      	movs	r3, #6
 800414e:	6063      	str	r3, [r4, #4]
 8004150:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004154:	2300      	movs	r3, #0
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	ab0a      	add	r3, sp, #40	@ 0x28
 800415c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004160:	ab09      	add	r3, sp, #36	@ 0x24
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	6861      	ldr	r1, [r4, #4]
 8004166:	ec49 8b10 	vmov	d0, r8, r9
 800416a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800416e:	4628      	mov	r0, r5
 8004170:	f7ff fed6 	bl	8003f20 <__cvt>
 8004174:	9b06      	ldr	r3, [sp, #24]
 8004176:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004178:	2b47      	cmp	r3, #71	@ 0x47
 800417a:	4680      	mov	r8, r0
 800417c:	d129      	bne.n	80041d2 <_printf_float+0x172>
 800417e:	1cc8      	adds	r0, r1, #3
 8004180:	db02      	blt.n	8004188 <_printf_float+0x128>
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	4299      	cmp	r1, r3
 8004186:	dd41      	ble.n	800420c <_printf_float+0x1ac>
 8004188:	f1aa 0a02 	sub.w	sl, sl, #2
 800418c:	fa5f fa8a 	uxtb.w	sl, sl
 8004190:	3901      	subs	r1, #1
 8004192:	4652      	mov	r2, sl
 8004194:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004198:	9109      	str	r1, [sp, #36]	@ 0x24
 800419a:	f7ff ff26 	bl	8003fea <__exponent>
 800419e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041a0:	1813      	adds	r3, r2, r0
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	4681      	mov	r9, r0
 80041a6:	6123      	str	r3, [r4, #16]
 80041a8:	dc02      	bgt.n	80041b0 <_printf_float+0x150>
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	07d2      	lsls	r2, r2, #31
 80041ae:	d501      	bpl.n	80041b4 <_printf_float+0x154>
 80041b0:	3301      	adds	r3, #1
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0a2      	beq.n	8004102 <_printf_float+0xa2>
 80041bc:	232d      	movs	r3, #45	@ 0x2d
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c2:	e79e      	b.n	8004102 <_printf_float+0xa2>
 80041c4:	9a06      	ldr	r2, [sp, #24]
 80041c6:	2a47      	cmp	r2, #71	@ 0x47
 80041c8:	d1c2      	bne.n	8004150 <_printf_float+0xf0>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c0      	bne.n	8004150 <_printf_float+0xf0>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e7bd      	b.n	800414e <_printf_float+0xee>
 80041d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041d6:	d9db      	bls.n	8004190 <_printf_float+0x130>
 80041d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80041dc:	d118      	bne.n	8004210 <_printf_float+0x1b0>
 80041de:	2900      	cmp	r1, #0
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	dd0b      	ble.n	80041fc <_printf_float+0x19c>
 80041e4:	6121      	str	r1, [r4, #16]
 80041e6:	b913      	cbnz	r3, 80041ee <_printf_float+0x18e>
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	07d0      	lsls	r0, r2, #31
 80041ec:	d502      	bpl.n	80041f4 <_printf_float+0x194>
 80041ee:	3301      	adds	r3, #1
 80041f0:	440b      	add	r3, r1
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	e7db      	b.n	80041b4 <_printf_float+0x154>
 80041fc:	b913      	cbnz	r3, 8004204 <_printf_float+0x1a4>
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	07d2      	lsls	r2, r2, #31
 8004202:	d501      	bpl.n	8004208 <_printf_float+0x1a8>
 8004204:	3302      	adds	r3, #2
 8004206:	e7f4      	b.n	80041f2 <_printf_float+0x192>
 8004208:	2301      	movs	r3, #1
 800420a:	e7f2      	b.n	80041f2 <_printf_float+0x192>
 800420c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004212:	4299      	cmp	r1, r3
 8004214:	db05      	blt.n	8004222 <_printf_float+0x1c2>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	6121      	str	r1, [r4, #16]
 800421a:	07d8      	lsls	r0, r3, #31
 800421c:	d5ea      	bpl.n	80041f4 <_printf_float+0x194>
 800421e:	1c4b      	adds	r3, r1, #1
 8004220:	e7e7      	b.n	80041f2 <_printf_float+0x192>
 8004222:	2900      	cmp	r1, #0
 8004224:	bfd4      	ite	le
 8004226:	f1c1 0202 	rsble	r2, r1, #2
 800422a:	2201      	movgt	r2, #1
 800422c:	4413      	add	r3, r2
 800422e:	e7e0      	b.n	80041f2 <_printf_float+0x192>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	055a      	lsls	r2, r3, #21
 8004234:	d407      	bmi.n	8004246 <_printf_float+0x1e6>
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	4642      	mov	r2, r8
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	d12b      	bne.n	800429c <_printf_float+0x23c>
 8004244:	e767      	b.n	8004116 <_printf_float+0xb6>
 8004246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800424a:	f240 80dd 	bls.w	8004408 <_printf_float+0x3a8>
 800424e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004252:	2200      	movs	r2, #0
 8004254:	2300      	movs	r3, #0
 8004256:	f7fc fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800425a:	2800      	cmp	r0, #0
 800425c:	d033      	beq.n	80042c6 <_printf_float+0x266>
 800425e:	4a37      	ldr	r2, [pc, #220]	@ (800433c <_printf_float+0x2dc>)
 8004260:	2301      	movs	r3, #1
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f af54 	beq.w	8004116 <_printf_float+0xb6>
 800426e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004272:	4543      	cmp	r3, r8
 8004274:	db02      	blt.n	800427c <_printf_float+0x21c>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	07d8      	lsls	r0, r3, #31
 800427a:	d50f      	bpl.n	800429c <_printf_float+0x23c>
 800427c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f af45 	beq.w	8004116 <_printf_float+0xb6>
 800428c:	f04f 0900 	mov.w	r9, #0
 8004290:	f108 38ff 	add.w	r8, r8, #4294967295
 8004294:	f104 0a1a 	add.w	sl, r4, #26
 8004298:	45c8      	cmp	r8, r9
 800429a:	dc09      	bgt.n	80042b0 <_printf_float+0x250>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	079b      	lsls	r3, r3, #30
 80042a0:	f100 8103 	bmi.w	80044aa <_printf_float+0x44a>
 80042a4:	68e0      	ldr	r0, [r4, #12]
 80042a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042a8:	4298      	cmp	r0, r3
 80042aa:	bfb8      	it	lt
 80042ac:	4618      	movlt	r0, r3
 80042ae:	e734      	b.n	800411a <_printf_float+0xba>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4652      	mov	r2, sl
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f af2b 	beq.w	8004116 <_printf_float+0xb6>
 80042c0:	f109 0901 	add.w	r9, r9, #1
 80042c4:	e7e8      	b.n	8004298 <_printf_float+0x238>
 80042c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dc39      	bgt.n	8004340 <_printf_float+0x2e0>
 80042cc:	4a1b      	ldr	r2, [pc, #108]	@ (800433c <_printf_float+0x2dc>)
 80042ce:	2301      	movs	r3, #1
 80042d0:	4631      	mov	r1, r6
 80042d2:	4628      	mov	r0, r5
 80042d4:	47b8      	blx	r7
 80042d6:	3001      	adds	r0, #1
 80042d8:	f43f af1d 	beq.w	8004116 <_printf_float+0xb6>
 80042dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80042e0:	ea59 0303 	orrs.w	r3, r9, r3
 80042e4:	d102      	bne.n	80042ec <_printf_float+0x28c>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	07d9      	lsls	r1, r3, #31
 80042ea:	d5d7      	bpl.n	800429c <_printf_float+0x23c>
 80042ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	f43f af0d 	beq.w	8004116 <_printf_float+0xb6>
 80042fc:	f04f 0a00 	mov.w	sl, #0
 8004300:	f104 0b1a 	add.w	fp, r4, #26
 8004304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004306:	425b      	negs	r3, r3
 8004308:	4553      	cmp	r3, sl
 800430a:	dc01      	bgt.n	8004310 <_printf_float+0x2b0>
 800430c:	464b      	mov	r3, r9
 800430e:	e793      	b.n	8004238 <_printf_float+0x1d8>
 8004310:	2301      	movs	r3, #1
 8004312:	465a      	mov	r2, fp
 8004314:	4631      	mov	r1, r6
 8004316:	4628      	mov	r0, r5
 8004318:	47b8      	blx	r7
 800431a:	3001      	adds	r0, #1
 800431c:	f43f aefb 	beq.w	8004116 <_printf_float+0xb6>
 8004320:	f10a 0a01 	add.w	sl, sl, #1
 8004324:	e7ee      	b.n	8004304 <_printf_float+0x2a4>
 8004326:	bf00      	nop
 8004328:	7fefffff 	.word	0x7fefffff
 800432c:	08008c68 	.word	0x08008c68
 8004330:	08008c64 	.word	0x08008c64
 8004334:	08008c70 	.word	0x08008c70
 8004338:	08008c6c 	.word	0x08008c6c
 800433c:	08008c74 	.word	0x08008c74
 8004340:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004342:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004346:	4553      	cmp	r3, sl
 8004348:	bfa8      	it	ge
 800434a:	4653      	movge	r3, sl
 800434c:	2b00      	cmp	r3, #0
 800434e:	4699      	mov	r9, r3
 8004350:	dc36      	bgt.n	80043c0 <_printf_float+0x360>
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800435a:	f104 021a 	add.w	r2, r4, #26
 800435e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004360:	9306      	str	r3, [sp, #24]
 8004362:	eba3 0309 	sub.w	r3, r3, r9
 8004366:	455b      	cmp	r3, fp
 8004368:	dc31      	bgt.n	80043ce <_printf_float+0x36e>
 800436a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436c:	459a      	cmp	sl, r3
 800436e:	dc3a      	bgt.n	80043e6 <_printf_float+0x386>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	07da      	lsls	r2, r3, #31
 8004374:	d437      	bmi.n	80043e6 <_printf_float+0x386>
 8004376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004378:	ebaa 0903 	sub.w	r9, sl, r3
 800437c:	9b06      	ldr	r3, [sp, #24]
 800437e:	ebaa 0303 	sub.w	r3, sl, r3
 8004382:	4599      	cmp	r9, r3
 8004384:	bfa8      	it	ge
 8004386:	4699      	movge	r9, r3
 8004388:	f1b9 0f00 	cmp.w	r9, #0
 800438c:	dc33      	bgt.n	80043f6 <_printf_float+0x396>
 800438e:	f04f 0800 	mov.w	r8, #0
 8004392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004396:	f104 0b1a 	add.w	fp, r4, #26
 800439a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800439c:	ebaa 0303 	sub.w	r3, sl, r3
 80043a0:	eba3 0309 	sub.w	r3, r3, r9
 80043a4:	4543      	cmp	r3, r8
 80043a6:	f77f af79 	ble.w	800429c <_printf_float+0x23c>
 80043aa:	2301      	movs	r3, #1
 80043ac:	465a      	mov	r2, fp
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f aeae 	beq.w	8004116 <_printf_float+0xb6>
 80043ba:	f108 0801 	add.w	r8, r8, #1
 80043be:	e7ec      	b.n	800439a <_printf_float+0x33a>
 80043c0:	4642      	mov	r2, r8
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	d1c2      	bne.n	8004352 <_printf_float+0x2f2>
 80043cc:	e6a3      	b.n	8004116 <_printf_float+0xb6>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	9206      	str	r2, [sp, #24]
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae9c 	beq.w	8004116 <_printf_float+0xb6>
 80043de:	9a06      	ldr	r2, [sp, #24]
 80043e0:	f10b 0b01 	add.w	fp, fp, #1
 80043e4:	e7bb      	b.n	800435e <_printf_float+0x2fe>
 80043e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ea:	4631      	mov	r1, r6
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b8      	blx	r7
 80043f0:	3001      	adds	r0, #1
 80043f2:	d1c0      	bne.n	8004376 <_printf_float+0x316>
 80043f4:	e68f      	b.n	8004116 <_printf_float+0xb6>
 80043f6:	9a06      	ldr	r2, [sp, #24]
 80043f8:	464b      	mov	r3, r9
 80043fa:	4442      	add	r2, r8
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	d1c3      	bne.n	800438e <_printf_float+0x32e>
 8004406:	e686      	b.n	8004116 <_printf_float+0xb6>
 8004408:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800440c:	f1ba 0f01 	cmp.w	sl, #1
 8004410:	dc01      	bgt.n	8004416 <_printf_float+0x3b6>
 8004412:	07db      	lsls	r3, r3, #31
 8004414:	d536      	bpl.n	8004484 <_printf_float+0x424>
 8004416:	2301      	movs	r3, #1
 8004418:	4642      	mov	r2, r8
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	f43f ae78 	beq.w	8004116 <_printf_float+0xb6>
 8004426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f ae70 	beq.w	8004116 <_printf_float+0xb6>
 8004436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800443a:	2200      	movs	r2, #0
 800443c:	2300      	movs	r3, #0
 800443e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004442:	f7fc fb61 	bl	8000b08 <__aeabi_dcmpeq>
 8004446:	b9c0      	cbnz	r0, 800447a <_printf_float+0x41a>
 8004448:	4653      	mov	r3, sl
 800444a:	f108 0201 	add.w	r2, r8, #1
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	d10c      	bne.n	8004472 <_printf_float+0x412>
 8004458:	e65d      	b.n	8004116 <_printf_float+0xb6>
 800445a:	2301      	movs	r3, #1
 800445c:	465a      	mov	r2, fp
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f ae56 	beq.w	8004116 <_printf_float+0xb6>
 800446a:	f108 0801 	add.w	r8, r8, #1
 800446e:	45d0      	cmp	r8, sl
 8004470:	dbf3      	blt.n	800445a <_printf_float+0x3fa>
 8004472:	464b      	mov	r3, r9
 8004474:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004478:	e6df      	b.n	800423a <_printf_float+0x1da>
 800447a:	f04f 0800 	mov.w	r8, #0
 800447e:	f104 0b1a 	add.w	fp, r4, #26
 8004482:	e7f4      	b.n	800446e <_printf_float+0x40e>
 8004484:	2301      	movs	r3, #1
 8004486:	4642      	mov	r2, r8
 8004488:	e7e1      	b.n	800444e <_printf_float+0x3ee>
 800448a:	2301      	movs	r3, #1
 800448c:	464a      	mov	r2, r9
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f ae3e 	beq.w	8004116 <_printf_float+0xb6>
 800449a:	f108 0801 	add.w	r8, r8, #1
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044a2:	1a5b      	subs	r3, r3, r1
 80044a4:	4543      	cmp	r3, r8
 80044a6:	dcf0      	bgt.n	800448a <_printf_float+0x42a>
 80044a8:	e6fc      	b.n	80042a4 <_printf_float+0x244>
 80044aa:	f04f 0800 	mov.w	r8, #0
 80044ae:	f104 0919 	add.w	r9, r4, #25
 80044b2:	e7f4      	b.n	800449e <_printf_float+0x43e>

080044b4 <_printf_common>:
 80044b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	4616      	mov	r6, r2
 80044ba:	4698      	mov	r8, r3
 80044bc:	688a      	ldr	r2, [r1, #8]
 80044be:	690b      	ldr	r3, [r1, #16]
 80044c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bfb8      	it	lt
 80044c8:	4613      	movlt	r3, r2
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044d0:	4607      	mov	r7, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	b10a      	cbz	r2, 80044da <_printf_common+0x26>
 80044d6:	3301      	adds	r3, #1
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	0699      	lsls	r1, r3, #26
 80044de:	bf42      	ittt	mi
 80044e0:	6833      	ldrmi	r3, [r6, #0]
 80044e2:	3302      	addmi	r3, #2
 80044e4:	6033      	strmi	r3, [r6, #0]
 80044e6:	6825      	ldr	r5, [r4, #0]
 80044e8:	f015 0506 	ands.w	r5, r5, #6
 80044ec:	d106      	bne.n	80044fc <_printf_common+0x48>
 80044ee:	f104 0a19 	add.w	sl, r4, #25
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	6832      	ldr	r2, [r6, #0]
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	dc26      	bgt.n	800454a <_printf_common+0x96>
 80044fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	3b00      	subs	r3, #0
 8004504:	bf18      	it	ne
 8004506:	2301      	movne	r3, #1
 8004508:	0692      	lsls	r2, r2, #26
 800450a:	d42b      	bmi.n	8004564 <_printf_common+0xb0>
 800450c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004510:	4641      	mov	r1, r8
 8004512:	4638      	mov	r0, r7
 8004514:	47c8      	blx	r9
 8004516:	3001      	adds	r0, #1
 8004518:	d01e      	beq.n	8004558 <_printf_common+0xa4>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf02      	ittt	eq
 8004526:	68e5      	ldreq	r5, [r4, #12]
 8004528:	6833      	ldreq	r3, [r6, #0]
 800452a:	1aed      	subeq	r5, r5, r3
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	bf0c      	ite	eq
 8004530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004534:	2500      	movne	r5, #0
 8004536:	4293      	cmp	r3, r2
 8004538:	bfc4      	itt	gt
 800453a:	1a9b      	subgt	r3, r3, r2
 800453c:	18ed      	addgt	r5, r5, r3
 800453e:	2600      	movs	r6, #0
 8004540:	341a      	adds	r4, #26
 8004542:	42b5      	cmp	r5, r6
 8004544:	d11a      	bne.n	800457c <_printf_common+0xc8>
 8004546:	2000      	movs	r0, #0
 8004548:	e008      	b.n	800455c <_printf_common+0xa8>
 800454a:	2301      	movs	r3, #1
 800454c:	4652      	mov	r2, sl
 800454e:	4641      	mov	r1, r8
 8004550:	4638      	mov	r0, r7
 8004552:	47c8      	blx	r9
 8004554:	3001      	adds	r0, #1
 8004556:	d103      	bne.n	8004560 <_printf_common+0xac>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004560:	3501      	adds	r5, #1
 8004562:	e7c6      	b.n	80044f2 <_printf_common+0x3e>
 8004564:	18e1      	adds	r1, r4, r3
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	2030      	movs	r0, #48	@ 0x30
 800456a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800456e:	4422      	add	r2, r4
 8004570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004578:	3302      	adds	r3, #2
 800457a:	e7c7      	b.n	800450c <_printf_common+0x58>
 800457c:	2301      	movs	r3, #1
 800457e:	4622      	mov	r2, r4
 8004580:	4641      	mov	r1, r8
 8004582:	4638      	mov	r0, r7
 8004584:	47c8      	blx	r9
 8004586:	3001      	adds	r0, #1
 8004588:	d0e6      	beq.n	8004558 <_printf_common+0xa4>
 800458a:	3601      	adds	r6, #1
 800458c:	e7d9      	b.n	8004542 <_printf_common+0x8e>
	...

08004590 <_printf_i>:
 8004590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	7e0f      	ldrb	r7, [r1, #24]
 8004596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004598:	2f78      	cmp	r7, #120	@ 0x78
 800459a:	4691      	mov	r9, r2
 800459c:	4680      	mov	r8, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	469a      	mov	sl, r3
 80045a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045a6:	d807      	bhi.n	80045b8 <_printf_i+0x28>
 80045a8:	2f62      	cmp	r7, #98	@ 0x62
 80045aa:	d80a      	bhi.n	80045c2 <_printf_i+0x32>
 80045ac:	2f00      	cmp	r7, #0
 80045ae:	f000 80d1 	beq.w	8004754 <_printf_i+0x1c4>
 80045b2:	2f58      	cmp	r7, #88	@ 0x58
 80045b4:	f000 80b8 	beq.w	8004728 <_printf_i+0x198>
 80045b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045c0:	e03a      	b.n	8004638 <_printf_i+0xa8>
 80045c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045c6:	2b15      	cmp	r3, #21
 80045c8:	d8f6      	bhi.n	80045b8 <_printf_i+0x28>
 80045ca:	a101      	add	r1, pc, #4	@ (adr r1, 80045d0 <_printf_i+0x40>)
 80045cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d0:	08004629 	.word	0x08004629
 80045d4:	0800463d 	.word	0x0800463d
 80045d8:	080045b9 	.word	0x080045b9
 80045dc:	080045b9 	.word	0x080045b9
 80045e0:	080045b9 	.word	0x080045b9
 80045e4:	080045b9 	.word	0x080045b9
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	080045b9 	.word	0x080045b9
 80045f0:	080045b9 	.word	0x080045b9
 80045f4:	080045b9 	.word	0x080045b9
 80045f8:	080045b9 	.word	0x080045b9
 80045fc:	0800473b 	.word	0x0800473b
 8004600:	08004667 	.word	0x08004667
 8004604:	080046f5 	.word	0x080046f5
 8004608:	080045b9 	.word	0x080045b9
 800460c:	080045b9 	.word	0x080045b9
 8004610:	0800475d 	.word	0x0800475d
 8004614:	080045b9 	.word	0x080045b9
 8004618:	08004667 	.word	0x08004667
 800461c:	080045b9 	.word	0x080045b9
 8004620:	080045b9 	.word	0x080045b9
 8004624:	080046fd 	.word	0x080046fd
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	1d1a      	adds	r2, r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6032      	str	r2, [r6, #0]
 8004630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004638:	2301      	movs	r3, #1
 800463a:	e09c      	b.n	8004776 <_printf_i+0x1e6>
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1d19      	adds	r1, r3, #4
 8004642:	6031      	str	r1, [r6, #0]
 8004644:	0606      	lsls	r6, r0, #24
 8004646:	d501      	bpl.n	800464c <_printf_i+0xbc>
 8004648:	681d      	ldr	r5, [r3, #0]
 800464a:	e003      	b.n	8004654 <_printf_i+0xc4>
 800464c:	0645      	lsls	r5, r0, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0xb8>
 8004650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004654:	2d00      	cmp	r5, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xd0>
 8004658:	232d      	movs	r3, #45	@ 0x2d
 800465a:	426d      	negs	r5, r5
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004660:	4858      	ldr	r0, [pc, #352]	@ (80047c4 <_printf_i+0x234>)
 8004662:	230a      	movs	r3, #10
 8004664:	e011      	b.n	800468a <_printf_i+0xfa>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	0608      	lsls	r0, r1, #24
 800466c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004670:	d402      	bmi.n	8004678 <_printf_i+0xe8>
 8004672:	0649      	lsls	r1, r1, #25
 8004674:	bf48      	it	mi
 8004676:	b2ad      	uxthmi	r5, r5
 8004678:	2f6f      	cmp	r7, #111	@ 0x6f
 800467a:	4852      	ldr	r0, [pc, #328]	@ (80047c4 <_printf_i+0x234>)
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	bf14      	ite	ne
 8004680:	230a      	movne	r3, #10
 8004682:	2308      	moveq	r3, #8
 8004684:	2100      	movs	r1, #0
 8004686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800468a:	6866      	ldr	r6, [r4, #4]
 800468c:	60a6      	str	r6, [r4, #8]
 800468e:	2e00      	cmp	r6, #0
 8004690:	db05      	blt.n	800469e <_printf_i+0x10e>
 8004692:	6821      	ldr	r1, [r4, #0]
 8004694:	432e      	orrs	r6, r5
 8004696:	f021 0104 	bic.w	r1, r1, #4
 800469a:	6021      	str	r1, [r4, #0]
 800469c:	d04b      	beq.n	8004736 <_printf_i+0x1a6>
 800469e:	4616      	mov	r6, r2
 80046a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a4:	fb03 5711 	mls	r7, r3, r1, r5
 80046a8:	5dc7      	ldrb	r7, [r0, r7]
 80046aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046ae:	462f      	mov	r7, r5
 80046b0:	42bb      	cmp	r3, r7
 80046b2:	460d      	mov	r5, r1
 80046b4:	d9f4      	bls.n	80046a0 <_printf_i+0x110>
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d10b      	bne.n	80046d2 <_printf_i+0x142>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07df      	lsls	r7, r3, #31
 80046be:	d508      	bpl.n	80046d2 <_printf_i+0x142>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	6861      	ldr	r1, [r4, #4]
 80046c4:	4299      	cmp	r1, r3
 80046c6:	bfde      	ittt	le
 80046c8:	2330      	movle	r3, #48	@ 0x30
 80046ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d2:	1b92      	subs	r2, r2, r6
 80046d4:	6122      	str	r2, [r4, #16]
 80046d6:	f8cd a000 	str.w	sl, [sp]
 80046da:	464b      	mov	r3, r9
 80046dc:	aa03      	add	r2, sp, #12
 80046de:	4621      	mov	r1, r4
 80046e0:	4640      	mov	r0, r8
 80046e2:	f7ff fee7 	bl	80044b4 <_printf_common>
 80046e6:	3001      	adds	r0, #1
 80046e8:	d14a      	bne.n	8004780 <_printf_i+0x1f0>
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	b004      	add	sp, #16
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	f043 0320 	orr.w	r3, r3, #32
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	4832      	ldr	r0, [pc, #200]	@ (80047c8 <_printf_i+0x238>)
 80046fe:	2778      	movs	r7, #120	@ 0x78
 8004700:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	061f      	lsls	r7, r3, #24
 800470a:	f851 5b04 	ldr.w	r5, [r1], #4
 800470e:	d402      	bmi.n	8004716 <_printf_i+0x186>
 8004710:	065f      	lsls	r7, r3, #25
 8004712:	bf48      	it	mi
 8004714:	b2ad      	uxthmi	r5, r5
 8004716:	6031      	str	r1, [r6, #0]
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	bf44      	itt	mi
 800471c:	f043 0320 	orrmi.w	r3, r3, #32
 8004720:	6023      	strmi	r3, [r4, #0]
 8004722:	b11d      	cbz	r5, 800472c <_printf_i+0x19c>
 8004724:	2310      	movs	r3, #16
 8004726:	e7ad      	b.n	8004684 <_printf_i+0xf4>
 8004728:	4826      	ldr	r0, [pc, #152]	@ (80047c4 <_printf_i+0x234>)
 800472a:	e7e9      	b.n	8004700 <_printf_i+0x170>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	f023 0320 	bic.w	r3, r3, #32
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	e7f6      	b.n	8004724 <_printf_i+0x194>
 8004736:	4616      	mov	r6, r2
 8004738:	e7bd      	b.n	80046b6 <_printf_i+0x126>
 800473a:	6833      	ldr	r3, [r6, #0]
 800473c:	6825      	ldr	r5, [r4, #0]
 800473e:	6961      	ldr	r1, [r4, #20]
 8004740:	1d18      	adds	r0, r3, #4
 8004742:	6030      	str	r0, [r6, #0]
 8004744:	062e      	lsls	r6, r5, #24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	d501      	bpl.n	800474e <_printf_i+0x1be>
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	e002      	b.n	8004754 <_printf_i+0x1c4>
 800474e:	0668      	lsls	r0, r5, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0x1ba>
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	4616      	mov	r6, r2
 800475a:	e7bc      	b.n	80046d6 <_printf_i+0x146>
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	6032      	str	r2, [r6, #0]
 8004762:	681e      	ldr	r6, [r3, #0]
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	2100      	movs	r1, #0
 8004768:	4630      	mov	r0, r6
 800476a:	f7fb fd51 	bl	8000210 <memchr>
 800476e:	b108      	cbz	r0, 8004774 <_printf_i+0x1e4>
 8004770:	1b80      	subs	r0, r0, r6
 8004772:	6060      	str	r0, [r4, #4]
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2300      	movs	r3, #0
 800477a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800477e:	e7aa      	b.n	80046d6 <_printf_i+0x146>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	4632      	mov	r2, r6
 8004784:	4649      	mov	r1, r9
 8004786:	4640      	mov	r0, r8
 8004788:	47d0      	blx	sl
 800478a:	3001      	adds	r0, #1
 800478c:	d0ad      	beq.n	80046ea <_printf_i+0x15a>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	079b      	lsls	r3, r3, #30
 8004792:	d413      	bmi.n	80047bc <_printf_i+0x22c>
 8004794:	68e0      	ldr	r0, [r4, #12]
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	4298      	cmp	r0, r3
 800479a:	bfb8      	it	lt
 800479c:	4618      	movlt	r0, r3
 800479e:	e7a6      	b.n	80046ee <_printf_i+0x15e>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4632      	mov	r2, r6
 80047a4:	4649      	mov	r1, r9
 80047a6:	4640      	mov	r0, r8
 80047a8:	47d0      	blx	sl
 80047aa:	3001      	adds	r0, #1
 80047ac:	d09d      	beq.n	80046ea <_printf_i+0x15a>
 80047ae:	3501      	adds	r5, #1
 80047b0:	68e3      	ldr	r3, [r4, #12]
 80047b2:	9903      	ldr	r1, [sp, #12]
 80047b4:	1a5b      	subs	r3, r3, r1
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	dcf2      	bgt.n	80047a0 <_printf_i+0x210>
 80047ba:	e7eb      	b.n	8004794 <_printf_i+0x204>
 80047bc:	2500      	movs	r5, #0
 80047be:	f104 0619 	add.w	r6, r4, #25
 80047c2:	e7f5      	b.n	80047b0 <_printf_i+0x220>
 80047c4:	08008c76 	.word	0x08008c76
 80047c8:	08008c87 	.word	0x08008c87

080047cc <std>:
 80047cc:	2300      	movs	r3, #0
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	e9c0 3300 	strd	r3, r3, [r0]
 80047d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047da:	6083      	str	r3, [r0, #8]
 80047dc:	8181      	strh	r1, [r0, #12]
 80047de:	6643      	str	r3, [r0, #100]	@ 0x64
 80047e0:	81c2      	strh	r2, [r0, #14]
 80047e2:	6183      	str	r3, [r0, #24]
 80047e4:	4619      	mov	r1, r3
 80047e6:	2208      	movs	r2, #8
 80047e8:	305c      	adds	r0, #92	@ 0x5c
 80047ea:	f000 fa57 	bl	8004c9c <memset>
 80047ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <std+0x58>)
 80047f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <std+0x5c>)
 80047f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047f6:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <std+0x60>)
 80047f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <std+0x64>)
 80047fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <std+0x68>)
 8004800:	6224      	str	r4, [r4, #32]
 8004802:	429c      	cmp	r4, r3
 8004804:	d006      	beq.n	8004814 <std+0x48>
 8004806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800480a:	4294      	cmp	r4, r2
 800480c:	d002      	beq.n	8004814 <std+0x48>
 800480e:	33d0      	adds	r3, #208	@ 0xd0
 8004810:	429c      	cmp	r4, r3
 8004812:	d105      	bne.n	8004820 <std+0x54>
 8004814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f000 baba 	b.w	8004d94 <__retarget_lock_init_recursive>
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	08004aed 	.word	0x08004aed
 8004828:	08004b0f 	.word	0x08004b0f
 800482c:	08004b47 	.word	0x08004b47
 8004830:	08004b6b 	.word	0x08004b6b
 8004834:	200002bc 	.word	0x200002bc

08004838 <stdio_exit_handler>:
 8004838:	4a02      	ldr	r2, [pc, #8]	@ (8004844 <stdio_exit_handler+0xc>)
 800483a:	4903      	ldr	r1, [pc, #12]	@ (8004848 <stdio_exit_handler+0x10>)
 800483c:	4803      	ldr	r0, [pc, #12]	@ (800484c <stdio_exit_handler+0x14>)
 800483e:	f000 b869 	b.w	8004914 <_fwalk_sglue>
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
 8004848:	080066d1 	.word	0x080066d1
 800484c:	2000001c 	.word	0x2000001c

08004850 <cleanup_stdio>:
 8004850:	6841      	ldr	r1, [r0, #4]
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <cleanup_stdio+0x34>)
 8004854:	4299      	cmp	r1, r3
 8004856:	b510      	push	{r4, lr}
 8004858:	4604      	mov	r4, r0
 800485a:	d001      	beq.n	8004860 <cleanup_stdio+0x10>
 800485c:	f001 ff38 	bl	80066d0 <_fflush_r>
 8004860:	68a1      	ldr	r1, [r4, #8]
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <cleanup_stdio+0x38>)
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <cleanup_stdio+0x1e>
 8004868:	4620      	mov	r0, r4
 800486a:	f001 ff31 	bl	80066d0 <_fflush_r>
 800486e:	68e1      	ldr	r1, [r4, #12]
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <cleanup_stdio+0x3c>)
 8004872:	4299      	cmp	r1, r3
 8004874:	d004      	beq.n	8004880 <cleanup_stdio+0x30>
 8004876:	4620      	mov	r0, r4
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487c:	f001 bf28 	b.w	80066d0 <_fflush_r>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	200002bc 	.word	0x200002bc
 8004888:	20000324 	.word	0x20000324
 800488c:	2000038c 	.word	0x2000038c

08004890 <global_stdio_init.part.0>:
 8004890:	b510      	push	{r4, lr}
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <global_stdio_init.part.0+0x30>)
 8004894:	4c0b      	ldr	r4, [pc, #44]	@ (80048c4 <global_stdio_init.part.0+0x34>)
 8004896:	4a0c      	ldr	r2, [pc, #48]	@ (80048c8 <global_stdio_init.part.0+0x38>)
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	4620      	mov	r0, r4
 800489c:	2200      	movs	r2, #0
 800489e:	2104      	movs	r1, #4
 80048a0:	f7ff ff94 	bl	80047cc <std>
 80048a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048a8:	2201      	movs	r2, #1
 80048aa:	2109      	movs	r1, #9
 80048ac:	f7ff ff8e 	bl	80047cc <std>
 80048b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048b4:	2202      	movs	r2, #2
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ba:	2112      	movs	r1, #18
 80048bc:	f7ff bf86 	b.w	80047cc <std>
 80048c0:	200003f4 	.word	0x200003f4
 80048c4:	200002bc 	.word	0x200002bc
 80048c8:	08004839 	.word	0x08004839

080048cc <__sfp_lock_acquire>:
 80048cc:	4801      	ldr	r0, [pc, #4]	@ (80048d4 <__sfp_lock_acquire+0x8>)
 80048ce:	f000 ba62 	b.w	8004d96 <__retarget_lock_acquire_recursive>
 80048d2:	bf00      	nop
 80048d4:	200003fd 	.word	0x200003fd

080048d8 <__sfp_lock_release>:
 80048d8:	4801      	ldr	r0, [pc, #4]	@ (80048e0 <__sfp_lock_release+0x8>)
 80048da:	f000 ba5d 	b.w	8004d98 <__retarget_lock_release_recursive>
 80048de:	bf00      	nop
 80048e0:	200003fd 	.word	0x200003fd

080048e4 <__sinit>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	f7ff fff0 	bl	80048cc <__sfp_lock_acquire>
 80048ec:	6a23      	ldr	r3, [r4, #32]
 80048ee:	b11b      	cbz	r3, 80048f8 <__sinit+0x14>
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f7ff bff0 	b.w	80048d8 <__sfp_lock_release>
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <__sinit+0x28>)
 80048fa:	6223      	str	r3, [r4, #32]
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <__sinit+0x2c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f5      	bne.n	80048f0 <__sinit+0xc>
 8004904:	f7ff ffc4 	bl	8004890 <global_stdio_init.part.0>
 8004908:	e7f2      	b.n	80048f0 <__sinit+0xc>
 800490a:	bf00      	nop
 800490c:	08004851 	.word	0x08004851
 8004910:	200003f4 	.word	0x200003f4

08004914 <_fwalk_sglue>:
 8004914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004918:	4607      	mov	r7, r0
 800491a:	4688      	mov	r8, r1
 800491c:	4614      	mov	r4, r2
 800491e:	2600      	movs	r6, #0
 8004920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004924:	f1b9 0901 	subs.w	r9, r9, #1
 8004928:	d505      	bpl.n	8004936 <_fwalk_sglue+0x22>
 800492a:	6824      	ldr	r4, [r4, #0]
 800492c:	2c00      	cmp	r4, #0
 800492e:	d1f7      	bne.n	8004920 <_fwalk_sglue+0xc>
 8004930:	4630      	mov	r0, r6
 8004932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d907      	bls.n	800494c <_fwalk_sglue+0x38>
 800493c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004940:	3301      	adds	r3, #1
 8004942:	d003      	beq.n	800494c <_fwalk_sglue+0x38>
 8004944:	4629      	mov	r1, r5
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	4306      	orrs	r6, r0
 800494c:	3568      	adds	r5, #104	@ 0x68
 800494e:	e7e9      	b.n	8004924 <_fwalk_sglue+0x10>

08004950 <iprintf>:
 8004950:	b40f      	push	{r0, r1, r2, r3}
 8004952:	b507      	push	{r0, r1, r2, lr}
 8004954:	4906      	ldr	r1, [pc, #24]	@ (8004970 <iprintf+0x20>)
 8004956:	ab04      	add	r3, sp, #16
 8004958:	6808      	ldr	r0, [r1, #0]
 800495a:	f853 2b04 	ldr.w	r2, [r3], #4
 800495e:	6881      	ldr	r1, [r0, #8]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	f001 fd19 	bl	8006398 <_vfiprintf_r>
 8004966:	b003      	add	sp, #12
 8004968:	f85d eb04 	ldr.w	lr, [sp], #4
 800496c:	b004      	add	sp, #16
 800496e:	4770      	bx	lr
 8004970:	20000018 	.word	0x20000018

08004974 <setbuf>:
 8004974:	fab1 f281 	clz	r2, r1
 8004978:	0952      	lsrs	r2, r2, #5
 800497a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800497e:	0052      	lsls	r2, r2, #1
 8004980:	f000 b800 	b.w	8004984 <setvbuf>

08004984 <setvbuf>:
 8004984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004988:	461d      	mov	r5, r3
 800498a:	4b57      	ldr	r3, [pc, #348]	@ (8004ae8 <setvbuf+0x164>)
 800498c:	681f      	ldr	r7, [r3, #0]
 800498e:	4604      	mov	r4, r0
 8004990:	460e      	mov	r6, r1
 8004992:	4690      	mov	r8, r2
 8004994:	b127      	cbz	r7, 80049a0 <setvbuf+0x1c>
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	b913      	cbnz	r3, 80049a0 <setvbuf+0x1c>
 800499a:	4638      	mov	r0, r7
 800499c:	f7ff ffa2 	bl	80048e4 <__sinit>
 80049a0:	f1b8 0f02 	cmp.w	r8, #2
 80049a4:	d006      	beq.n	80049b4 <setvbuf+0x30>
 80049a6:	f1b8 0f01 	cmp.w	r8, #1
 80049aa:	f200 809a 	bhi.w	8004ae2 <setvbuf+0x15e>
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	f2c0 8097 	blt.w	8004ae2 <setvbuf+0x15e>
 80049b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049b6:	07d9      	lsls	r1, r3, #31
 80049b8:	d405      	bmi.n	80049c6 <setvbuf+0x42>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	059a      	lsls	r2, r3, #22
 80049be:	d402      	bmi.n	80049c6 <setvbuf+0x42>
 80049c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049c2:	f000 f9e8 	bl	8004d96 <__retarget_lock_acquire_recursive>
 80049c6:	4621      	mov	r1, r4
 80049c8:	4638      	mov	r0, r7
 80049ca:	f001 fe81 	bl	80066d0 <_fflush_r>
 80049ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049d0:	b141      	cbz	r1, 80049e4 <setvbuf+0x60>
 80049d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d002      	beq.n	80049e0 <setvbuf+0x5c>
 80049da:	4638      	mov	r0, r7
 80049dc:	f001 f838 	bl	8005a50 <_free_r>
 80049e0:	2300      	movs	r3, #0
 80049e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049e4:	2300      	movs	r3, #0
 80049e6:	61a3      	str	r3, [r4, #24]
 80049e8:	6063      	str	r3, [r4, #4]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	d503      	bpl.n	80049f8 <setvbuf+0x74>
 80049f0:	6921      	ldr	r1, [r4, #16]
 80049f2:	4638      	mov	r0, r7
 80049f4:	f001 f82c 	bl	8005a50 <_free_r>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f1b8 0f02 	cmp.w	r8, #2
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	d061      	beq.n	8004ace <setvbuf+0x14a>
 8004a0a:	ab01      	add	r3, sp, #4
 8004a0c:	466a      	mov	r2, sp
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4638      	mov	r0, r7
 8004a12:	f001 fe85 	bl	8006720 <__swhatbuf_r>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	4318      	orrs	r0, r3
 8004a1a:	81a0      	strh	r0, [r4, #12]
 8004a1c:	bb2d      	cbnz	r5, 8004a6a <setvbuf+0xe6>
 8004a1e:	9d00      	ldr	r5, [sp, #0]
 8004a20:	4628      	mov	r0, r5
 8004a22:	f001 f85f 	bl	8005ae4 <malloc>
 8004a26:	4606      	mov	r6, r0
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d152      	bne.n	8004ad2 <setvbuf+0x14e>
 8004a2c:	f8dd 9000 	ldr.w	r9, [sp]
 8004a30:	45a9      	cmp	r9, r5
 8004a32:	d140      	bne.n	8004ab6 <setvbuf+0x132>
 8004a34:	f04f 35ff 	mov.w	r5, #4294967295
 8004a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3c:	f043 0202 	orr.w	r2, r3, #2
 8004a40:	81a2      	strh	r2, [r4, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	60a2      	str	r2, [r4, #8]
 8004a46:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	6122      	str	r2, [r4, #16]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	6162      	str	r2, [r4, #20]
 8004a52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a54:	07d6      	lsls	r6, r2, #31
 8004a56:	d404      	bmi.n	8004a62 <setvbuf+0xde>
 8004a58:	0598      	lsls	r0, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <setvbuf+0xde>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5e:	f000 f99b 	bl	8004d98 <__retarget_lock_release_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	b003      	add	sp, #12
 8004a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a6a:	2e00      	cmp	r6, #0
 8004a6c:	d0d8      	beq.n	8004a20 <setvbuf+0x9c>
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	b913      	cbnz	r3, 8004a78 <setvbuf+0xf4>
 8004a72:	4638      	mov	r0, r7
 8004a74:	f7ff ff36 	bl	80048e4 <__sinit>
 8004a78:	f1b8 0f01 	cmp.w	r8, #1
 8004a7c:	bf08      	it	eq
 8004a7e:	89a3      	ldrheq	r3, [r4, #12]
 8004a80:	6026      	str	r6, [r4, #0]
 8004a82:	bf04      	itt	eq
 8004a84:	f043 0301 	orreq.w	r3, r3, #1
 8004a88:	81a3      	strheq	r3, [r4, #12]
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	f013 0208 	ands.w	r2, r3, #8
 8004a92:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a96:	d01e      	beq.n	8004ad6 <setvbuf+0x152>
 8004a98:	07d9      	lsls	r1, r3, #31
 8004a9a:	bf41      	itttt	mi
 8004a9c:	2200      	movmi	r2, #0
 8004a9e:	426d      	negmi	r5, r5
 8004aa0:	60a2      	strmi	r2, [r4, #8]
 8004aa2:	61a5      	strmi	r5, [r4, #24]
 8004aa4:	bf58      	it	pl
 8004aa6:	60a5      	strpl	r5, [r4, #8]
 8004aa8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004aaa:	07d2      	lsls	r2, r2, #31
 8004aac:	d401      	bmi.n	8004ab2 <setvbuf+0x12e>
 8004aae:	059b      	lsls	r3, r3, #22
 8004ab0:	d513      	bpl.n	8004ada <setvbuf+0x156>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	e7d5      	b.n	8004a62 <setvbuf+0xde>
 8004ab6:	4648      	mov	r0, r9
 8004ab8:	f001 f814 	bl	8005ae4 <malloc>
 8004abc:	4606      	mov	r6, r0
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0b8      	beq.n	8004a34 <setvbuf+0xb0>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	464d      	mov	r5, r9
 8004acc:	e7cf      	b.n	8004a6e <setvbuf+0xea>
 8004ace:	2500      	movs	r5, #0
 8004ad0:	e7b2      	b.n	8004a38 <setvbuf+0xb4>
 8004ad2:	46a9      	mov	r9, r5
 8004ad4:	e7f5      	b.n	8004ac2 <setvbuf+0x13e>
 8004ad6:	60a2      	str	r2, [r4, #8]
 8004ad8:	e7e6      	b.n	8004aa8 <setvbuf+0x124>
 8004ada:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004adc:	f000 f95c 	bl	8004d98 <__retarget_lock_release_recursive>
 8004ae0:	e7e7      	b.n	8004ab2 <setvbuf+0x12e>
 8004ae2:	f04f 35ff 	mov.w	r5, #4294967295
 8004ae6:	e7bc      	b.n	8004a62 <setvbuf+0xde>
 8004ae8:	20000018 	.word	0x20000018

08004aec <__sread>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	f000 f900 	bl	8004cf8 <_read_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bfab      	itete	ge
 8004afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afe:	89a3      	ldrhlt	r3, [r4, #12]
 8004b00:	181b      	addge	r3, r3, r0
 8004b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b06:	bfac      	ite	ge
 8004b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b0a:	81a3      	strhlt	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__swrite>:
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	05db      	lsls	r3, r3, #23
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d505      	bpl.n	8004b2c <__swrite+0x1e>
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2302      	movs	r3, #2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f8d4 	bl	8004cd4 <_lseek_r>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	4632      	mov	r2, r6
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	f000 b8eb 	b.w	8004d1c <_write_r>

08004b46 <__sseek>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4e:	f000 f8c1 	bl	8004cd4 <_lseek_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	bf15      	itete	ne
 8004b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strheq	r3, [r4, #12]
 8004b64:	bf18      	it	ne
 8004b66:	81a3      	strhne	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__sclose>:
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 b8a1 	b.w	8004cb4 <_close_r>

08004b72 <__swbuf_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	460e      	mov	r6, r1
 8004b76:	4614      	mov	r4, r2
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b118      	cbz	r0, 8004b84 <__swbuf_r+0x12>
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	b90b      	cbnz	r3, 8004b84 <__swbuf_r+0x12>
 8004b80:	f7ff feb0 	bl	80048e4 <__sinit>
 8004b84:	69a3      	ldr	r3, [r4, #24]
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	071a      	lsls	r2, r3, #28
 8004b8c:	d501      	bpl.n	8004b92 <__swbuf_r+0x20>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	b943      	cbnz	r3, 8004ba4 <__swbuf_r+0x32>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f82b 	bl	8004bf0 <__swsetup_r>
 8004b9a:	b118      	cbz	r0, 8004ba4 <__swbuf_r+0x32>
 8004b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	b2f6      	uxtb	r6, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	4637      	mov	r7, r6
 8004bb2:	dc05      	bgt.n	8004bc0 <__swbuf_r+0x4e>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f001 fd8a 	bl	80066d0 <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1ed      	bne.n	8004b9c <__swbuf_r+0x2a>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	701e      	strb	r6, [r3, #0]
 8004bce:	6962      	ldr	r2, [r4, #20]
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d004      	beq.n	8004be0 <__swbuf_r+0x6e>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d5e1      	bpl.n	8004ba0 <__swbuf_r+0x2e>
 8004bdc:	2e0a      	cmp	r6, #10
 8004bde:	d1df      	bne.n	8004ba0 <__swbuf_r+0x2e>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f001 fd74 	bl	80066d0 <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d9      	beq.n	8004ba0 <__swbuf_r+0x2e>
 8004bec:	e7d6      	b.n	8004b9c <__swbuf_r+0x2a>
	...

08004bf0 <__swsetup_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <__swsetup_r+0xa8>)
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b118      	cbz	r0, 8004c04 <__swsetup_r+0x14>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <__swsetup_r+0x14>
 8004c00:	f7ff fe70 	bl	80048e4 <__sinit>
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d422      	bmi.n	8004c52 <__swsetup_r+0x62>
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d407      	bmi.n	8004c20 <__swsetup_r+0x30>
 8004c10:	2209      	movs	r2, #9
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	e033      	b.n	8004c88 <__swsetup_r+0x98>
 8004c20:	0758      	lsls	r0, r3, #29
 8004c22:	d512      	bpl.n	8004c4a <__swsetup_r+0x5a>
 8004c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c26:	b141      	cbz	r1, 8004c3a <__swsetup_r+0x4a>
 8004c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <__swsetup_r+0x46>
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 ff0d 	bl	8005a50 <_free_r>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	b94b      	cbnz	r3, 8004c6a <__swsetup_r+0x7a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d003      	beq.n	8004c6a <__swsetup_r+0x7a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f001 fd81 	bl	800676c <__smakebuf_r>
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f013 0201 	ands.w	r2, r3, #1
 8004c72:	d00a      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c74:	2200      	movs	r2, #0
 8004c76:	60a2      	str	r2, [r4, #8]
 8004c78:	6962      	ldr	r2, [r4, #20]
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	61a2      	str	r2, [r4, #24]
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	b942      	cbnz	r2, 8004c94 <__swsetup_r+0xa4>
 8004c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c86:	d1c5      	bne.n	8004c14 <__swsetup_r+0x24>
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	0799      	lsls	r1, r3, #30
 8004c8c:	bf58      	it	pl
 8004c8e:	6962      	ldrpl	r2, [r4, #20]
 8004c90:	60a2      	str	r2, [r4, #8]
 8004c92:	e7f4      	b.n	8004c7e <__swsetup_r+0x8e>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7f7      	b.n	8004c88 <__swsetup_r+0x98>
 8004c98:	20000018 	.word	0x20000018

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <_localeconv_r>:
 8004cac:	4800      	ldr	r0, [pc, #0]	@ (8004cb0 <_localeconv_r+0x4>)
 8004cae:	4770      	bx	lr
 8004cb0:	20000158 	.word	0x20000158

08004cb4 <_close_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	@ (8004cd0 <_close_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f7fc ff26 	bl	8001b10 <_close>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_close_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_close_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	200003f8 	.word	0x200003f8

08004cd4 <_lseek_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d07      	ldr	r5, [pc, #28]	@ (8004cf4 <_lseek_r+0x20>)
 8004cd8:	4604      	mov	r4, r0
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	602a      	str	r2, [r5, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f7fc ff3b 	bl	8001b5e <_lseek>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_lseek_r+0x1e>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_lseek_r+0x1e>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	200003f8 	.word	0x200003f8

08004cf8 <_read_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	@ (8004d18 <_read_r+0x20>)
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	2200      	movs	r2, #0
 8004d04:	602a      	str	r2, [r5, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7fc fee5 	bl	8001ad6 <_read>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_read_r+0x1e>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_read_r+0x1e>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	200003f8 	.word	0x200003f8

08004d1c <_write_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	@ (8004d3c <_write_r+0x20>)
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fc f928 	bl	8000f80 <_write>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_write_r+0x1e>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_write_r+0x1e>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	200003f8 	.word	0x200003f8

08004d40 <__errno>:
 8004d40:	4b01      	ldr	r3, [pc, #4]	@ (8004d48 <__errno+0x8>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000018 	.word	0x20000018

08004d4c <__libc_init_array>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d84 <__libc_init_array+0x38>)
 8004d50:	4c0d      	ldr	r4, [pc, #52]	@ (8004d88 <__libc_init_array+0x3c>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	2600      	movs	r6, #0
 8004d58:	42a6      	cmp	r6, r4
 8004d5a:	d109      	bne.n	8004d70 <__libc_init_array+0x24>
 8004d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8004d8c <__libc_init_array+0x40>)
 8004d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8004d90 <__libc_init_array+0x44>)
 8004d60:	f003 ff4a 	bl	8008bf8 <_init>
 8004d64:	1b64      	subs	r4, r4, r5
 8004d66:	10a4      	asrs	r4, r4, #2
 8004d68:	2600      	movs	r6, #0
 8004d6a:	42a6      	cmp	r6, r4
 8004d6c:	d105      	bne.n	8004d7a <__libc_init_array+0x2e>
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d74:	4798      	blx	r3
 8004d76:	3601      	adds	r6, #1
 8004d78:	e7ee      	b.n	8004d58 <__libc_init_array+0xc>
 8004d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7e:	4798      	blx	r3
 8004d80:	3601      	adds	r6, #1
 8004d82:	e7f2      	b.n	8004d6a <__libc_init_array+0x1e>
 8004d84:	08009240 	.word	0x08009240
 8004d88:	08009240 	.word	0x08009240
 8004d8c:	08009240 	.word	0x08009240
 8004d90:	08009244 	.word	0x08009244

08004d94 <__retarget_lock_init_recursive>:
 8004d94:	4770      	bx	lr

08004d96 <__retarget_lock_acquire_recursive>:
 8004d96:	4770      	bx	lr

08004d98 <__retarget_lock_release_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <quorem>:
 8004d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9e:	6903      	ldr	r3, [r0, #16]
 8004da0:	690c      	ldr	r4, [r1, #16]
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	4607      	mov	r7, r0
 8004da6:	db7e      	blt.n	8004ea6 <quorem+0x10c>
 8004da8:	3c01      	subs	r4, #1
 8004daa:	f101 0814 	add.w	r8, r1, #20
 8004dae:	00a3      	lsls	r3, r4, #2
 8004db0:	f100 0514 	add.w	r5, r0, #20
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dd0:	d32e      	bcc.n	8004e30 <quorem+0x96>
 8004dd2:	f04f 0a00 	mov.w	sl, #0
 8004dd6:	46c4      	mov	ip, r8
 8004dd8:	46ae      	mov	lr, r5
 8004dda:	46d3      	mov	fp, sl
 8004ddc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004de0:	b298      	uxth	r0, r3
 8004de2:	fb06 a000 	mla	r0, r6, r0, sl
 8004de6:	0c02      	lsrs	r2, r0, #16
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	fb06 2303 	mla	r3, r6, r3, r2
 8004dee:	f8de 2000 	ldr.w	r2, [lr]
 8004df2:	b280      	uxth	r0, r0
 8004df4:	b292      	uxth	r2, r2
 8004df6:	1a12      	subs	r2, r2, r0
 8004df8:	445a      	add	r2, fp
 8004dfa:	f8de 0000 	ldr.w	r0, [lr]
 8004dfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e12:	45e1      	cmp	r9, ip
 8004e14:	f84e 2b04 	str.w	r2, [lr], #4
 8004e18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e1c:	d2de      	bcs.n	8004ddc <quorem+0x42>
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	58eb      	ldr	r3, [r5, r3]
 8004e22:	b92b      	cbnz	r3, 8004e30 <quorem+0x96>
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	3b04      	subs	r3, #4
 8004e28:	429d      	cmp	r5, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	d32f      	bcc.n	8004e8e <quorem+0xf4>
 8004e2e:	613c      	str	r4, [r7, #16]
 8004e30:	4638      	mov	r0, r7
 8004e32:	f001 f97f 	bl	8006134 <__mcmp>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	db25      	blt.n	8004e86 <quorem+0xec>
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e42:	f8d1 c000 	ldr.w	ip, [r1]
 8004e46:	fa1f fe82 	uxth.w	lr, r2
 8004e4a:	fa1f f38c 	uxth.w	r3, ip
 8004e4e:	eba3 030e 	sub.w	r3, r3, lr
 8004e52:	4403      	add	r3, r0
 8004e54:	0c12      	lsrs	r2, r2, #16
 8004e56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e64:	45c1      	cmp	r9, r8
 8004e66:	f841 3b04 	str.w	r3, [r1], #4
 8004e6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e6e:	d2e6      	bcs.n	8004e3e <quorem+0xa4>
 8004e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e78:	b922      	cbnz	r2, 8004e84 <quorem+0xea>
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	429d      	cmp	r5, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	d30b      	bcc.n	8004e9a <quorem+0x100>
 8004e82:	613c      	str	r4, [r7, #16]
 8004e84:	3601      	adds	r6, #1
 8004e86:	4630      	mov	r0, r6
 8004e88:	b003      	add	sp, #12
 8004e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d1cb      	bne.n	8004e2e <quorem+0x94>
 8004e96:	3c01      	subs	r4, #1
 8004e98:	e7c6      	b.n	8004e28 <quorem+0x8e>
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	3b04      	subs	r3, #4
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	d1ef      	bne.n	8004e82 <quorem+0xe8>
 8004ea2:	3c01      	subs	r4, #1
 8004ea4:	e7ea      	b.n	8004e7c <quorem+0xe2>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	e7ee      	b.n	8004e88 <quorem+0xee>
 8004eaa:	0000      	movs	r0, r0
 8004eac:	0000      	movs	r0, r0
	...

08004eb0 <_dtoa_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	69c7      	ldr	r7, [r0, #28]
 8004eb6:	b097      	sub	sp, #92	@ 0x5c
 8004eb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004ebc:	ec55 4b10 	vmov	r4, r5, d0
 8004ec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004ec2:	9107      	str	r1, [sp, #28]
 8004ec4:	4681      	mov	r9, r0
 8004ec6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8004eca:	b97f      	cbnz	r7, 8004eec <_dtoa_r+0x3c>
 8004ecc:	2010      	movs	r0, #16
 8004ece:	f000 fe09 	bl	8005ae4 <malloc>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ed8:	b920      	cbnz	r0, 8004ee4 <_dtoa_r+0x34>
 8004eda:	4ba9      	ldr	r3, [pc, #676]	@ (8005180 <_dtoa_r+0x2d0>)
 8004edc:	21ef      	movs	r1, #239	@ 0xef
 8004ede:	48a9      	ldr	r0, [pc, #676]	@ (8005184 <_dtoa_r+0x2d4>)
 8004ee0:	f001 fcc0 	bl	8006864 <__assert_func>
 8004ee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ee8:	6007      	str	r7, [r0, #0]
 8004eea:	60c7      	str	r7, [r0, #12]
 8004eec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	b159      	cbz	r1, 8004f0c <_dtoa_r+0x5c>
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	604a      	str	r2, [r1, #4]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4093      	lsls	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
 8004efe:	4648      	mov	r0, r9
 8004f00:	f000 fee6 	bl	8005cd0 <_Bfree>
 8004f04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	1e2b      	subs	r3, r5, #0
 8004f0e:	bfb9      	ittee	lt
 8004f10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f14:	9305      	strlt	r3, [sp, #20]
 8004f16:	2300      	movge	r3, #0
 8004f18:	6033      	strge	r3, [r6, #0]
 8004f1a:	9f05      	ldr	r7, [sp, #20]
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8005188 <_dtoa_r+0x2d8>)
 8004f1e:	bfbc      	itt	lt
 8004f20:	2201      	movlt	r2, #1
 8004f22:	6032      	strlt	r2, [r6, #0]
 8004f24:	43bb      	bics	r3, r7
 8004f26:	d112      	bne.n	8004f4e <_dtoa_r+0x9e>
 8004f28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f34:	4323      	orrs	r3, r4
 8004f36:	f000 855a 	beq.w	80059ee <_dtoa_r+0xb3e>
 8004f3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800519c <_dtoa_r+0x2ec>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 855c 	beq.w	80059fe <_dtoa_r+0xb4e>
 8004f46:	f10a 0303 	add.w	r3, sl, #3
 8004f4a:	f000 bd56 	b.w	80059fa <_dtoa_r+0xb4a>
 8004f4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004f52:	2200      	movs	r2, #0
 8004f54:	ec51 0b17 	vmov	r0, r1, d7
 8004f58:	2300      	movs	r3, #0
 8004f5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004f5e:	f7fb fdd3 	bl	8000b08 <__aeabi_dcmpeq>
 8004f62:	4680      	mov	r8, r0
 8004f64:	b158      	cbz	r0, 8004f7e <_dtoa_r+0xce>
 8004f66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f68:	2301      	movs	r3, #1
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f6e:	b113      	cbz	r3, 8004f76 <_dtoa_r+0xc6>
 8004f70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004f72:	4b86      	ldr	r3, [pc, #536]	@ (800518c <_dtoa_r+0x2dc>)
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80051a0 <_dtoa_r+0x2f0>
 8004f7a:	f000 bd40 	b.w	80059fe <_dtoa_r+0xb4e>
 8004f7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004f82:	aa14      	add	r2, sp, #80	@ 0x50
 8004f84:	a915      	add	r1, sp, #84	@ 0x54
 8004f86:	4648      	mov	r0, r9
 8004f88:	f001 f984 	bl	8006294 <__d2b>
 8004f8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004f90:	9002      	str	r0, [sp, #8]
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d078      	beq.n	8005088 <_dtoa_r+0x1d8>
 8004f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004fa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004fac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4b76      	ldr	r3, [pc, #472]	@ (8005190 <_dtoa_r+0x2e0>)
 8004fb6:	f7fb f987 	bl	80002c8 <__aeabi_dsub>
 8004fba:	a36b      	add	r3, pc, #428	@ (adr r3, 8005168 <_dtoa_r+0x2b8>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb fb3a 	bl	8000638 <__aeabi_dmul>
 8004fc4:	a36a      	add	r3, pc, #424	@ (adr r3, 8005170 <_dtoa_r+0x2c0>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb f97f 	bl	80002cc <__adddf3>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	f7fb fac6 	bl	8000564 <__aeabi_i2d>
 8004fd8:	a367      	add	r3, pc, #412	@ (adr r3, 8005178 <_dtoa_r+0x2c8>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb fb2b 	bl	8000638 <__aeabi_dmul>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb f96f 	bl	80002cc <__adddf3>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	f7fb fdd1 	bl	8000b98 <__aeabi_d2iz>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4607      	mov	r7, r0
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fb fd8c 	bl	8000b1c <__aeabi_dcmplt>
 8005004:	b140      	cbz	r0, 8005018 <_dtoa_r+0x168>
 8005006:	4638      	mov	r0, r7
 8005008:	f7fb faac 	bl	8000564 <__aeabi_i2d>
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	f7fb fd7a 	bl	8000b08 <__aeabi_dcmpeq>
 8005014:	b900      	cbnz	r0, 8005018 <_dtoa_r+0x168>
 8005016:	3f01      	subs	r7, #1
 8005018:	2f16      	cmp	r7, #22
 800501a:	d852      	bhi.n	80050c2 <_dtoa_r+0x212>
 800501c:	4b5d      	ldr	r3, [pc, #372]	@ (8005194 <_dtoa_r+0x2e4>)
 800501e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800502a:	f7fb fd77 	bl	8000b1c <__aeabi_dcmplt>
 800502e:	2800      	cmp	r0, #0
 8005030:	d049      	beq.n	80050c6 <_dtoa_r+0x216>
 8005032:	3f01      	subs	r7, #1
 8005034:	2300      	movs	r3, #0
 8005036:	9310      	str	r3, [sp, #64]	@ 0x40
 8005038:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800503a:	1b9b      	subs	r3, r3, r6
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	bf45      	ittet	mi
 8005040:	f1c3 0301 	rsbmi	r3, r3, #1
 8005044:	9300      	strmi	r3, [sp, #0]
 8005046:	2300      	movpl	r3, #0
 8005048:	2300      	movmi	r3, #0
 800504a:	9206      	str	r2, [sp, #24]
 800504c:	bf54      	ite	pl
 800504e:	9300      	strpl	r3, [sp, #0]
 8005050:	9306      	strmi	r3, [sp, #24]
 8005052:	2f00      	cmp	r7, #0
 8005054:	db39      	blt.n	80050ca <_dtoa_r+0x21a>
 8005056:	9b06      	ldr	r3, [sp, #24]
 8005058:	970d      	str	r7, [sp, #52]	@ 0x34
 800505a:	443b      	add	r3, r7
 800505c:	9306      	str	r3, [sp, #24]
 800505e:	2300      	movs	r3, #0
 8005060:	9308      	str	r3, [sp, #32]
 8005062:	9b07      	ldr	r3, [sp, #28]
 8005064:	2b09      	cmp	r3, #9
 8005066:	d863      	bhi.n	8005130 <_dtoa_r+0x280>
 8005068:	2b05      	cmp	r3, #5
 800506a:	bfc4      	itt	gt
 800506c:	3b04      	subgt	r3, #4
 800506e:	9307      	strgt	r3, [sp, #28]
 8005070:	9b07      	ldr	r3, [sp, #28]
 8005072:	f1a3 0302 	sub.w	r3, r3, #2
 8005076:	bfcc      	ite	gt
 8005078:	2400      	movgt	r4, #0
 800507a:	2401      	movle	r4, #1
 800507c:	2b03      	cmp	r3, #3
 800507e:	d863      	bhi.n	8005148 <_dtoa_r+0x298>
 8005080:	e8df f003 	tbb	[pc, r3]
 8005084:	2b375452 	.word	0x2b375452
 8005088:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800508c:	441e      	add	r6, r3
 800508e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005092:	2b20      	cmp	r3, #32
 8005094:	bfc1      	itttt	gt
 8005096:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800509a:	409f      	lslgt	r7, r3
 800509c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80050a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80050a4:	bfd6      	itet	le
 80050a6:	f1c3 0320 	rsble	r3, r3, #32
 80050aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80050ae:	fa04 f003 	lslle.w	r0, r4, r3
 80050b2:	f7fb fa47 	bl	8000544 <__aeabi_ui2d>
 80050b6:	2201      	movs	r2, #1
 80050b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80050bc:	3e01      	subs	r6, #1
 80050be:	9212      	str	r2, [sp, #72]	@ 0x48
 80050c0:	e776      	b.n	8004fb0 <_dtoa_r+0x100>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7b7      	b.n	8005036 <_dtoa_r+0x186>
 80050c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80050c8:	e7b6      	b.n	8005038 <_dtoa_r+0x188>
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	1bdb      	subs	r3, r3, r7
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	427b      	negs	r3, r7
 80050d2:	9308      	str	r3, [sp, #32]
 80050d4:	2300      	movs	r3, #0
 80050d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80050d8:	e7c3      	b.n	8005062 <_dtoa_r+0x1b2>
 80050da:	2301      	movs	r3, #1
 80050dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050e0:	eb07 0b03 	add.w	fp, r7, r3
 80050e4:	f10b 0301 	add.w	r3, fp, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	9303      	str	r3, [sp, #12]
 80050ec:	bfb8      	it	lt
 80050ee:	2301      	movlt	r3, #1
 80050f0:	e006      	b.n	8005100 <_dtoa_r+0x250>
 80050f2:	2301      	movs	r3, #1
 80050f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd28      	ble.n	800514e <_dtoa_r+0x29e>
 80050fc:	469b      	mov	fp, r3
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005104:	2100      	movs	r1, #0
 8005106:	2204      	movs	r2, #4
 8005108:	f102 0514 	add.w	r5, r2, #20
 800510c:	429d      	cmp	r5, r3
 800510e:	d926      	bls.n	800515e <_dtoa_r+0x2ae>
 8005110:	6041      	str	r1, [r0, #4]
 8005112:	4648      	mov	r0, r9
 8005114:	f000 fd9c 	bl	8005c50 <_Balloc>
 8005118:	4682      	mov	sl, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	d142      	bne.n	80051a4 <_dtoa_r+0x2f4>
 800511e:	4b1e      	ldr	r3, [pc, #120]	@ (8005198 <_dtoa_r+0x2e8>)
 8005120:	4602      	mov	r2, r0
 8005122:	f240 11af 	movw	r1, #431	@ 0x1af
 8005126:	e6da      	b.n	8004ede <_dtoa_r+0x2e>
 8005128:	2300      	movs	r3, #0
 800512a:	e7e3      	b.n	80050f4 <_dtoa_r+0x244>
 800512c:	2300      	movs	r3, #0
 800512e:	e7d5      	b.n	80050dc <_dtoa_r+0x22c>
 8005130:	2401      	movs	r4, #1
 8005132:	2300      	movs	r3, #0
 8005134:	9307      	str	r3, [sp, #28]
 8005136:	9409      	str	r4, [sp, #36]	@ 0x24
 8005138:	f04f 3bff 	mov.w	fp, #4294967295
 800513c:	2200      	movs	r2, #0
 800513e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005142:	2312      	movs	r3, #18
 8005144:	920c      	str	r2, [sp, #48]	@ 0x30
 8005146:	e7db      	b.n	8005100 <_dtoa_r+0x250>
 8005148:	2301      	movs	r3, #1
 800514a:	9309      	str	r3, [sp, #36]	@ 0x24
 800514c:	e7f4      	b.n	8005138 <_dtoa_r+0x288>
 800514e:	f04f 0b01 	mov.w	fp, #1
 8005152:	f8cd b00c 	str.w	fp, [sp, #12]
 8005156:	465b      	mov	r3, fp
 8005158:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800515c:	e7d0      	b.n	8005100 <_dtoa_r+0x250>
 800515e:	3101      	adds	r1, #1
 8005160:	0052      	lsls	r2, r2, #1
 8005162:	e7d1      	b.n	8005108 <_dtoa_r+0x258>
 8005164:	f3af 8000 	nop.w
 8005168:	636f4361 	.word	0x636f4361
 800516c:	3fd287a7 	.word	0x3fd287a7
 8005170:	8b60c8b3 	.word	0x8b60c8b3
 8005174:	3fc68a28 	.word	0x3fc68a28
 8005178:	509f79fb 	.word	0x509f79fb
 800517c:	3fd34413 	.word	0x3fd34413
 8005180:	08008ca5 	.word	0x08008ca5
 8005184:	08008cbc 	.word	0x08008cbc
 8005188:	7ff00000 	.word	0x7ff00000
 800518c:	08008c75 	.word	0x08008c75
 8005190:	3ff80000 	.word	0x3ff80000
 8005194:	08008e10 	.word	0x08008e10
 8005198:	08008d14 	.word	0x08008d14
 800519c:	08008ca1 	.word	0x08008ca1
 80051a0:	08008c74 	.word	0x08008c74
 80051a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051a8:	6018      	str	r0, [r3, #0]
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	2b0e      	cmp	r3, #14
 80051ae:	f200 80a1 	bhi.w	80052f4 <_dtoa_r+0x444>
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	f000 809e 	beq.w	80052f4 <_dtoa_r+0x444>
 80051b8:	2f00      	cmp	r7, #0
 80051ba:	dd33      	ble.n	8005224 <_dtoa_r+0x374>
 80051bc:	4b9c      	ldr	r3, [pc, #624]	@ (8005430 <_dtoa_r+0x580>)
 80051be:	f007 020f 	and.w	r2, r7, #15
 80051c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c6:	ed93 7b00 	vldr	d7, [r3]
 80051ca:	05f8      	lsls	r0, r7, #23
 80051cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80051d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80051d4:	d516      	bpl.n	8005204 <_dtoa_r+0x354>
 80051d6:	4b97      	ldr	r3, [pc, #604]	@ (8005434 <_dtoa_r+0x584>)
 80051d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051e0:	f7fb fb54 	bl	800088c <__aeabi_ddiv>
 80051e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e8:	f004 040f 	and.w	r4, r4, #15
 80051ec:	2603      	movs	r6, #3
 80051ee:	4d91      	ldr	r5, [pc, #580]	@ (8005434 <_dtoa_r+0x584>)
 80051f0:	b954      	cbnz	r4, 8005208 <_dtoa_r+0x358>
 80051f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80051f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fa:	f7fb fb47 	bl	800088c <__aeabi_ddiv>
 80051fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005202:	e028      	b.n	8005256 <_dtoa_r+0x3a6>
 8005204:	2602      	movs	r6, #2
 8005206:	e7f2      	b.n	80051ee <_dtoa_r+0x33e>
 8005208:	07e1      	lsls	r1, r4, #31
 800520a:	d508      	bpl.n	800521e <_dtoa_r+0x36e>
 800520c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005210:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005214:	f7fb fa10 	bl	8000638 <__aeabi_dmul>
 8005218:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800521c:	3601      	adds	r6, #1
 800521e:	1064      	asrs	r4, r4, #1
 8005220:	3508      	adds	r5, #8
 8005222:	e7e5      	b.n	80051f0 <_dtoa_r+0x340>
 8005224:	f000 80af 	beq.w	8005386 <_dtoa_r+0x4d6>
 8005228:	427c      	negs	r4, r7
 800522a:	4b81      	ldr	r3, [pc, #516]	@ (8005430 <_dtoa_r+0x580>)
 800522c:	4d81      	ldr	r5, [pc, #516]	@ (8005434 <_dtoa_r+0x584>)
 800522e:	f004 020f 	and.w	r2, r4, #15
 8005232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800523e:	f7fb f9fb 	bl	8000638 <__aeabi_dmul>
 8005242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005246:	1124      	asrs	r4, r4, #4
 8005248:	2300      	movs	r3, #0
 800524a:	2602      	movs	r6, #2
 800524c:	2c00      	cmp	r4, #0
 800524e:	f040 808f 	bne.w	8005370 <_dtoa_r+0x4c0>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1d3      	bne.n	80051fe <_dtoa_r+0x34e>
 8005256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005258:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8094 	beq.w	800538a <_dtoa_r+0x4da>
 8005262:	4b75      	ldr	r3, [pc, #468]	@ (8005438 <_dtoa_r+0x588>)
 8005264:	2200      	movs	r2, #0
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fb fc57 	bl	8000b1c <__aeabi_dcmplt>
 800526e:	2800      	cmp	r0, #0
 8005270:	f000 808b 	beq.w	800538a <_dtoa_r+0x4da>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8087 	beq.w	800538a <_dtoa_r+0x4da>
 800527c:	f1bb 0f00 	cmp.w	fp, #0
 8005280:	dd34      	ble.n	80052ec <_dtoa_r+0x43c>
 8005282:	4620      	mov	r0, r4
 8005284:	4b6d      	ldr	r3, [pc, #436]	@ (800543c <_dtoa_r+0x58c>)
 8005286:	2200      	movs	r2, #0
 8005288:	4629      	mov	r1, r5
 800528a:	f7fb f9d5 	bl	8000638 <__aeabi_dmul>
 800528e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005292:	f107 38ff 	add.w	r8, r7, #4294967295
 8005296:	3601      	adds	r6, #1
 8005298:	465c      	mov	r4, fp
 800529a:	4630      	mov	r0, r6
 800529c:	f7fb f962 	bl	8000564 <__aeabi_i2d>
 80052a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052a4:	f7fb f9c8 	bl	8000638 <__aeabi_dmul>
 80052a8:	4b65      	ldr	r3, [pc, #404]	@ (8005440 <_dtoa_r+0x590>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f7fb f80e 	bl	80002cc <__adddf3>
 80052b0:	4605      	mov	r5, r0
 80052b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d16a      	bne.n	8005390 <_dtoa_r+0x4e0>
 80052ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052be:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <_dtoa_r+0x594>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	f7fb f801 	bl	80002c8 <__aeabi_dsub>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4633      	mov	r3, r6
 80052d2:	f7fb fc41 	bl	8000b58 <__aeabi_dcmpgt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f040 8298 	bne.w	800580c <_dtoa_r+0x95c>
 80052dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052e0:	462a      	mov	r2, r5
 80052e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80052e6:	f7fb fc19 	bl	8000b1c <__aeabi_dcmplt>
 80052ea:	bb38      	cbnz	r0, 800533c <_dtoa_r+0x48c>
 80052ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80052f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f2c0 8157 	blt.w	80055aa <_dtoa_r+0x6fa>
 80052fc:	2f0e      	cmp	r7, #14
 80052fe:	f300 8154 	bgt.w	80055aa <_dtoa_r+0x6fa>
 8005302:	4b4b      	ldr	r3, [pc, #300]	@ (8005430 <_dtoa_r+0x580>)
 8005304:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005308:	ed93 7b00 	vldr	d7, [r3]
 800530c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	ed8d 7b00 	vstr	d7, [sp]
 8005314:	f280 80e5 	bge.w	80054e2 <_dtoa_r+0x632>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f300 80e1 	bgt.w	80054e2 <_dtoa_r+0x632>
 8005320:	d10c      	bne.n	800533c <_dtoa_r+0x48c>
 8005322:	4b48      	ldr	r3, [pc, #288]	@ (8005444 <_dtoa_r+0x594>)
 8005324:	2200      	movs	r2, #0
 8005326:	ec51 0b17 	vmov	r0, r1, d7
 800532a:	f7fb f985 	bl	8000638 <__aeabi_dmul>
 800532e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005332:	f7fb fc07 	bl	8000b44 <__aeabi_dcmpge>
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 8266 	beq.w	8005808 <_dtoa_r+0x958>
 800533c:	2400      	movs	r4, #0
 800533e:	4625      	mov	r5, r4
 8005340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005342:	4656      	mov	r6, sl
 8005344:	ea6f 0803 	mvn.w	r8, r3
 8005348:	2700      	movs	r7, #0
 800534a:	4621      	mov	r1, r4
 800534c:	4648      	mov	r0, r9
 800534e:	f000 fcbf 	bl	8005cd0 <_Bfree>
 8005352:	2d00      	cmp	r5, #0
 8005354:	f000 80bd 	beq.w	80054d2 <_dtoa_r+0x622>
 8005358:	b12f      	cbz	r7, 8005366 <_dtoa_r+0x4b6>
 800535a:	42af      	cmp	r7, r5
 800535c:	d003      	beq.n	8005366 <_dtoa_r+0x4b6>
 800535e:	4639      	mov	r1, r7
 8005360:	4648      	mov	r0, r9
 8005362:	f000 fcb5 	bl	8005cd0 <_Bfree>
 8005366:	4629      	mov	r1, r5
 8005368:	4648      	mov	r0, r9
 800536a:	f000 fcb1 	bl	8005cd0 <_Bfree>
 800536e:	e0b0      	b.n	80054d2 <_dtoa_r+0x622>
 8005370:	07e2      	lsls	r2, r4, #31
 8005372:	d505      	bpl.n	8005380 <_dtoa_r+0x4d0>
 8005374:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005378:	f7fb f95e 	bl	8000638 <__aeabi_dmul>
 800537c:	3601      	adds	r6, #1
 800537e:	2301      	movs	r3, #1
 8005380:	1064      	asrs	r4, r4, #1
 8005382:	3508      	adds	r5, #8
 8005384:	e762      	b.n	800524c <_dtoa_r+0x39c>
 8005386:	2602      	movs	r6, #2
 8005388:	e765      	b.n	8005256 <_dtoa_r+0x3a6>
 800538a:	9c03      	ldr	r4, [sp, #12]
 800538c:	46b8      	mov	r8, r7
 800538e:	e784      	b.n	800529a <_dtoa_r+0x3ea>
 8005390:	4b27      	ldr	r3, [pc, #156]	@ (8005430 <_dtoa_r+0x580>)
 8005392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800539c:	4454      	add	r4, sl
 800539e:	2900      	cmp	r1, #0
 80053a0:	d054      	beq.n	800544c <_dtoa_r+0x59c>
 80053a2:	4929      	ldr	r1, [pc, #164]	@ (8005448 <_dtoa_r+0x598>)
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fb fa71 	bl	800088c <__aeabi_ddiv>
 80053aa:	4633      	mov	r3, r6
 80053ac:	462a      	mov	r2, r5
 80053ae:	f7fa ff8b 	bl	80002c8 <__aeabi_dsub>
 80053b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053b6:	4656      	mov	r6, sl
 80053b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053bc:	f7fb fbec 	bl	8000b98 <__aeabi_d2iz>
 80053c0:	4605      	mov	r5, r0
 80053c2:	f7fb f8cf 	bl	8000564 <__aeabi_i2d>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ce:	f7fa ff7b 	bl	80002c8 <__aeabi_dsub>
 80053d2:	3530      	adds	r5, #48	@ 0x30
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053dc:	f806 5b01 	strb.w	r5, [r6], #1
 80053e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80053e4:	f7fb fb9a 	bl	8000b1c <__aeabi_dcmplt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d172      	bne.n	80054d2 <_dtoa_r+0x622>
 80053ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053f0:	4911      	ldr	r1, [pc, #68]	@ (8005438 <_dtoa_r+0x588>)
 80053f2:	2000      	movs	r0, #0
 80053f4:	f7fa ff68 	bl	80002c8 <__aeabi_dsub>
 80053f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80053fc:	f7fb fb8e 	bl	8000b1c <__aeabi_dcmplt>
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 80b4 	bne.w	800556e <_dtoa_r+0x6be>
 8005406:	42a6      	cmp	r6, r4
 8005408:	f43f af70 	beq.w	80052ec <_dtoa_r+0x43c>
 800540c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005410:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <_dtoa_r+0x58c>)
 8005412:	2200      	movs	r2, #0
 8005414:	f7fb f910 	bl	8000638 <__aeabi_dmul>
 8005418:	4b08      	ldr	r3, [pc, #32]	@ (800543c <_dtoa_r+0x58c>)
 800541a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800541e:	2200      	movs	r2, #0
 8005420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005424:	f7fb f908 	bl	8000638 <__aeabi_dmul>
 8005428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800542c:	e7c4      	b.n	80053b8 <_dtoa_r+0x508>
 800542e:	bf00      	nop
 8005430:	08008e10 	.word	0x08008e10
 8005434:	08008de8 	.word	0x08008de8
 8005438:	3ff00000 	.word	0x3ff00000
 800543c:	40240000 	.word	0x40240000
 8005440:	401c0000 	.word	0x401c0000
 8005444:	40140000 	.word	0x40140000
 8005448:	3fe00000 	.word	0x3fe00000
 800544c:	4631      	mov	r1, r6
 800544e:	4628      	mov	r0, r5
 8005450:	f7fb f8f2 	bl	8000638 <__aeabi_dmul>
 8005454:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005458:	9413      	str	r4, [sp, #76]	@ 0x4c
 800545a:	4656      	mov	r6, sl
 800545c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005460:	f7fb fb9a 	bl	8000b98 <__aeabi_d2iz>
 8005464:	4605      	mov	r5, r0
 8005466:	f7fb f87d 	bl	8000564 <__aeabi_i2d>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005472:	f7fa ff29 	bl	80002c8 <__aeabi_dsub>
 8005476:	3530      	adds	r5, #48	@ 0x30
 8005478:	f806 5b01 	strb.w	r5, [r6], #1
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	42a6      	cmp	r6, r4
 8005482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	d124      	bne.n	80054d6 <_dtoa_r+0x626>
 800548c:	4baf      	ldr	r3, [pc, #700]	@ (800574c <_dtoa_r+0x89c>)
 800548e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005492:	f7fa ff1b 	bl	80002cc <__adddf3>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800549e:	f7fb fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d163      	bne.n	800556e <_dtoa_r+0x6be>
 80054a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80054aa:	49a8      	ldr	r1, [pc, #672]	@ (800574c <_dtoa_r+0x89c>)
 80054ac:	2000      	movs	r0, #0
 80054ae:	f7fa ff0b 	bl	80002c8 <__aeabi_dsub>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ba:	f7fb fb2f 	bl	8000b1c <__aeabi_dcmplt>
 80054be:	2800      	cmp	r0, #0
 80054c0:	f43f af14 	beq.w	80052ec <_dtoa_r+0x43c>
 80054c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054c6:	1e73      	subs	r3, r6, #1
 80054c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054ce:	2b30      	cmp	r3, #48	@ 0x30
 80054d0:	d0f8      	beq.n	80054c4 <_dtoa_r+0x614>
 80054d2:	4647      	mov	r7, r8
 80054d4:	e03b      	b.n	800554e <_dtoa_r+0x69e>
 80054d6:	4b9e      	ldr	r3, [pc, #632]	@ (8005750 <_dtoa_r+0x8a0>)
 80054d8:	f7fb f8ae 	bl	8000638 <__aeabi_dmul>
 80054dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e0:	e7bc      	b.n	800545c <_dtoa_r+0x5ac>
 80054e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80054e6:	4656      	mov	r6, sl
 80054e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fb f9cc 	bl	800088c <__aeabi_ddiv>
 80054f4:	f7fb fb50 	bl	8000b98 <__aeabi_d2iz>
 80054f8:	4680      	mov	r8, r0
 80054fa:	f7fb f833 	bl	8000564 <__aeabi_i2d>
 80054fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005502:	f7fb f899 	bl	8000638 <__aeabi_dmul>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005512:	f7fa fed9 	bl	80002c8 <__aeabi_dsub>
 8005516:	f806 4b01 	strb.w	r4, [r6], #1
 800551a:	9d03      	ldr	r5, [sp, #12]
 800551c:	eba6 040a 	sub.w	r4, r6, sl
 8005520:	42a5      	cmp	r5, r4
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	d133      	bne.n	8005590 <_dtoa_r+0x6e0>
 8005528:	f7fa fed0 	bl	80002cc <__adddf3>
 800552c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005530:	4604      	mov	r4, r0
 8005532:	460d      	mov	r5, r1
 8005534:	f7fb fb10 	bl	8000b58 <__aeabi_dcmpgt>
 8005538:	b9c0      	cbnz	r0, 800556c <_dtoa_r+0x6bc>
 800553a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800553e:	4620      	mov	r0, r4
 8005540:	4629      	mov	r1, r5
 8005542:	f7fb fae1 	bl	8000b08 <__aeabi_dcmpeq>
 8005546:	b110      	cbz	r0, 800554e <_dtoa_r+0x69e>
 8005548:	f018 0f01 	tst.w	r8, #1
 800554c:	d10e      	bne.n	800556c <_dtoa_r+0x6bc>
 800554e:	9902      	ldr	r1, [sp, #8]
 8005550:	4648      	mov	r0, r9
 8005552:	f000 fbbd 	bl	8005cd0 <_Bfree>
 8005556:	2300      	movs	r3, #0
 8005558:	7033      	strb	r3, [r6, #0]
 800555a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800555c:	3701      	adds	r7, #1
 800555e:	601f      	str	r7, [r3, #0]
 8005560:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 824b 	beq.w	80059fe <_dtoa_r+0xb4e>
 8005568:	601e      	str	r6, [r3, #0]
 800556a:	e248      	b.n	80059fe <_dtoa_r+0xb4e>
 800556c:	46b8      	mov	r8, r7
 800556e:	4633      	mov	r3, r6
 8005570:	461e      	mov	r6, r3
 8005572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005576:	2a39      	cmp	r2, #57	@ 0x39
 8005578:	d106      	bne.n	8005588 <_dtoa_r+0x6d8>
 800557a:	459a      	cmp	sl, r3
 800557c:	d1f8      	bne.n	8005570 <_dtoa_r+0x6c0>
 800557e:	2230      	movs	r2, #48	@ 0x30
 8005580:	f108 0801 	add.w	r8, r8, #1
 8005584:	f88a 2000 	strb.w	r2, [sl]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	3201      	adds	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e7a0      	b.n	80054d2 <_dtoa_r+0x622>
 8005590:	4b6f      	ldr	r3, [pc, #444]	@ (8005750 <_dtoa_r+0x8a0>)
 8005592:	2200      	movs	r2, #0
 8005594:	f7fb f850 	bl	8000638 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4604      	mov	r4, r0
 800559e:	460d      	mov	r5, r1
 80055a0:	f7fb fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d09f      	beq.n	80054e8 <_dtoa_r+0x638>
 80055a8:	e7d1      	b.n	800554e <_dtoa_r+0x69e>
 80055aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	f000 80ea 	beq.w	8005786 <_dtoa_r+0x8d6>
 80055b2:	9a07      	ldr	r2, [sp, #28]
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	f300 80cd 	bgt.w	8005754 <_dtoa_r+0x8a4>
 80055ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80055bc:	2a00      	cmp	r2, #0
 80055be:	f000 80c1 	beq.w	8005744 <_dtoa_r+0x894>
 80055c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80055c6:	9c08      	ldr	r4, [sp, #32]
 80055c8:	9e00      	ldr	r6, [sp, #0]
 80055ca:	9a00      	ldr	r2, [sp, #0]
 80055cc:	441a      	add	r2, r3
 80055ce:	9200      	str	r2, [sp, #0]
 80055d0:	9a06      	ldr	r2, [sp, #24]
 80055d2:	2101      	movs	r1, #1
 80055d4:	441a      	add	r2, r3
 80055d6:	4648      	mov	r0, r9
 80055d8:	9206      	str	r2, [sp, #24]
 80055da:	f000 fc2d 	bl	8005e38 <__i2b>
 80055de:	4605      	mov	r5, r0
 80055e0:	b166      	cbz	r6, 80055fc <_dtoa_r+0x74c>
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd09      	ble.n	80055fc <_dtoa_r+0x74c>
 80055e8:	42b3      	cmp	r3, r6
 80055ea:	9a00      	ldr	r2, [sp, #0]
 80055ec:	bfa8      	it	ge
 80055ee:	4633      	movge	r3, r6
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	9200      	str	r2, [sp, #0]
 80055f4:	9a06      	ldr	r2, [sp, #24]
 80055f6:	1af6      	subs	r6, r6, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	9306      	str	r3, [sp, #24]
 80055fc:	9b08      	ldr	r3, [sp, #32]
 80055fe:	b30b      	cbz	r3, 8005644 <_dtoa_r+0x794>
 8005600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80c6 	beq.w	8005794 <_dtoa_r+0x8e4>
 8005608:	2c00      	cmp	r4, #0
 800560a:	f000 80c0 	beq.w	800578e <_dtoa_r+0x8de>
 800560e:	4629      	mov	r1, r5
 8005610:	4622      	mov	r2, r4
 8005612:	4648      	mov	r0, r9
 8005614:	f000 fcc8 	bl	8005fa8 <__pow5mult>
 8005618:	9a02      	ldr	r2, [sp, #8]
 800561a:	4601      	mov	r1, r0
 800561c:	4605      	mov	r5, r0
 800561e:	4648      	mov	r0, r9
 8005620:	f000 fc20 	bl	8005e64 <__multiply>
 8005624:	9902      	ldr	r1, [sp, #8]
 8005626:	4680      	mov	r8, r0
 8005628:	4648      	mov	r0, r9
 800562a:	f000 fb51 	bl	8005cd0 <_Bfree>
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	1b1b      	subs	r3, r3, r4
 8005632:	9308      	str	r3, [sp, #32]
 8005634:	f000 80b1 	beq.w	800579a <_dtoa_r+0x8ea>
 8005638:	9a08      	ldr	r2, [sp, #32]
 800563a:	4641      	mov	r1, r8
 800563c:	4648      	mov	r0, r9
 800563e:	f000 fcb3 	bl	8005fa8 <__pow5mult>
 8005642:	9002      	str	r0, [sp, #8]
 8005644:	2101      	movs	r1, #1
 8005646:	4648      	mov	r0, r9
 8005648:	f000 fbf6 	bl	8005e38 <__i2b>
 800564c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800564e:	4604      	mov	r4, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 81d8 	beq.w	8005a06 <_dtoa_r+0xb56>
 8005656:	461a      	mov	r2, r3
 8005658:	4601      	mov	r1, r0
 800565a:	4648      	mov	r0, r9
 800565c:	f000 fca4 	bl	8005fa8 <__pow5mult>
 8005660:	9b07      	ldr	r3, [sp, #28]
 8005662:	2b01      	cmp	r3, #1
 8005664:	4604      	mov	r4, r0
 8005666:	f300 809f 	bgt.w	80057a8 <_dtoa_r+0x8f8>
 800566a:	9b04      	ldr	r3, [sp, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f040 8097 	bne.w	80057a0 <_dtoa_r+0x8f0>
 8005672:	9b05      	ldr	r3, [sp, #20]
 8005674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 8093 	bne.w	80057a4 <_dtoa_r+0x8f4>
 800567e:	9b05      	ldr	r3, [sp, #20]
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005684:	0d1b      	lsrs	r3, r3, #20
 8005686:	051b      	lsls	r3, r3, #20
 8005688:	b133      	cbz	r3, 8005698 <_dtoa_r+0x7e8>
 800568a:	9b00      	ldr	r3, [sp, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	9b06      	ldr	r3, [sp, #24]
 8005692:	3301      	adds	r3, #1
 8005694:	9306      	str	r3, [sp, #24]
 8005696:	2301      	movs	r3, #1
 8005698:	9308      	str	r3, [sp, #32]
 800569a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 81b8 	beq.w	8005a12 <_dtoa_r+0xb62>
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056a8:	6918      	ldr	r0, [r3, #16]
 80056aa:	f000 fb79 	bl	8005da0 <__hi0bits>
 80056ae:	f1c0 0020 	rsb	r0, r0, #32
 80056b2:	9b06      	ldr	r3, [sp, #24]
 80056b4:	4418      	add	r0, r3
 80056b6:	f010 001f 	ands.w	r0, r0, #31
 80056ba:	f000 8082 	beq.w	80057c2 <_dtoa_r+0x912>
 80056be:	f1c0 0320 	rsb	r3, r0, #32
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	dd73      	ble.n	80057ae <_dtoa_r+0x8fe>
 80056c6:	9b00      	ldr	r3, [sp, #0]
 80056c8:	f1c0 001c 	rsb	r0, r0, #28
 80056cc:	4403      	add	r3, r0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9b06      	ldr	r3, [sp, #24]
 80056d2:	4403      	add	r3, r0
 80056d4:	4406      	add	r6, r0
 80056d6:	9306      	str	r3, [sp, #24]
 80056d8:	9b00      	ldr	r3, [sp, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dd05      	ble.n	80056ea <_dtoa_r+0x83a>
 80056de:	9902      	ldr	r1, [sp, #8]
 80056e0:	461a      	mov	r2, r3
 80056e2:	4648      	mov	r0, r9
 80056e4:	f000 fcba 	bl	800605c <__lshift>
 80056e8:	9002      	str	r0, [sp, #8]
 80056ea:	9b06      	ldr	r3, [sp, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd05      	ble.n	80056fc <_dtoa_r+0x84c>
 80056f0:	4621      	mov	r1, r4
 80056f2:	461a      	mov	r2, r3
 80056f4:	4648      	mov	r0, r9
 80056f6:	f000 fcb1 	bl	800605c <__lshift>
 80056fa:	4604      	mov	r4, r0
 80056fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d061      	beq.n	80057c6 <_dtoa_r+0x916>
 8005702:	9802      	ldr	r0, [sp, #8]
 8005704:	4621      	mov	r1, r4
 8005706:	f000 fd15 	bl	8006134 <__mcmp>
 800570a:	2800      	cmp	r0, #0
 800570c:	da5b      	bge.n	80057c6 <_dtoa_r+0x916>
 800570e:	2300      	movs	r3, #0
 8005710:	9902      	ldr	r1, [sp, #8]
 8005712:	220a      	movs	r2, #10
 8005714:	4648      	mov	r0, r9
 8005716:	f000 fafd 	bl	8005d14 <__multadd>
 800571a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571c:	9002      	str	r0, [sp, #8]
 800571e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8177 	beq.w	8005a16 <_dtoa_r+0xb66>
 8005728:	4629      	mov	r1, r5
 800572a:	2300      	movs	r3, #0
 800572c:	220a      	movs	r2, #10
 800572e:	4648      	mov	r0, r9
 8005730:	f000 faf0 	bl	8005d14 <__multadd>
 8005734:	f1bb 0f00 	cmp.w	fp, #0
 8005738:	4605      	mov	r5, r0
 800573a:	dc6f      	bgt.n	800581c <_dtoa_r+0x96c>
 800573c:	9b07      	ldr	r3, [sp, #28]
 800573e:	2b02      	cmp	r3, #2
 8005740:	dc49      	bgt.n	80057d6 <_dtoa_r+0x926>
 8005742:	e06b      	b.n	800581c <_dtoa_r+0x96c>
 8005744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800574a:	e73c      	b.n	80055c6 <_dtoa_r+0x716>
 800574c:	3fe00000 	.word	0x3fe00000
 8005750:	40240000 	.word	0x40240000
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	1e5c      	subs	r4, r3, #1
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	42a3      	cmp	r3, r4
 800575c:	db09      	blt.n	8005772 <_dtoa_r+0x8c2>
 800575e:	1b1c      	subs	r4, r3, r4
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f6bf af30 	bge.w	80055c8 <_dtoa_r+0x718>
 8005768:	9b00      	ldr	r3, [sp, #0]
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	1a9e      	subs	r6, r3, r2
 800576e:	2300      	movs	r3, #0
 8005770:	e72b      	b.n	80055ca <_dtoa_r+0x71a>
 8005772:	9b08      	ldr	r3, [sp, #32]
 8005774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005776:	9408      	str	r4, [sp, #32]
 8005778:	1ae3      	subs	r3, r4, r3
 800577a:	441a      	add	r2, r3
 800577c:	9e00      	ldr	r6, [sp, #0]
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	920d      	str	r2, [sp, #52]	@ 0x34
 8005782:	2400      	movs	r4, #0
 8005784:	e721      	b.n	80055ca <_dtoa_r+0x71a>
 8005786:	9c08      	ldr	r4, [sp, #32]
 8005788:	9e00      	ldr	r6, [sp, #0]
 800578a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800578c:	e728      	b.n	80055e0 <_dtoa_r+0x730>
 800578e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005792:	e751      	b.n	8005638 <_dtoa_r+0x788>
 8005794:	9a08      	ldr	r2, [sp, #32]
 8005796:	9902      	ldr	r1, [sp, #8]
 8005798:	e750      	b.n	800563c <_dtoa_r+0x78c>
 800579a:	f8cd 8008 	str.w	r8, [sp, #8]
 800579e:	e751      	b.n	8005644 <_dtoa_r+0x794>
 80057a0:	2300      	movs	r3, #0
 80057a2:	e779      	b.n	8005698 <_dtoa_r+0x7e8>
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	e777      	b.n	8005698 <_dtoa_r+0x7e8>
 80057a8:	2300      	movs	r3, #0
 80057aa:	9308      	str	r3, [sp, #32]
 80057ac:	e779      	b.n	80056a2 <_dtoa_r+0x7f2>
 80057ae:	d093      	beq.n	80056d8 <_dtoa_r+0x828>
 80057b0:	9a00      	ldr	r2, [sp, #0]
 80057b2:	331c      	adds	r3, #28
 80057b4:	441a      	add	r2, r3
 80057b6:	9200      	str	r2, [sp, #0]
 80057b8:	9a06      	ldr	r2, [sp, #24]
 80057ba:	441a      	add	r2, r3
 80057bc:	441e      	add	r6, r3
 80057be:	9206      	str	r2, [sp, #24]
 80057c0:	e78a      	b.n	80056d8 <_dtoa_r+0x828>
 80057c2:	4603      	mov	r3, r0
 80057c4:	e7f4      	b.n	80057b0 <_dtoa_r+0x900>
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	46b8      	mov	r8, r7
 80057cc:	dc20      	bgt.n	8005810 <_dtoa_r+0x960>
 80057ce:	469b      	mov	fp, r3
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	dd1e      	ble.n	8005814 <_dtoa_r+0x964>
 80057d6:	f1bb 0f00 	cmp.w	fp, #0
 80057da:	f47f adb1 	bne.w	8005340 <_dtoa_r+0x490>
 80057de:	4621      	mov	r1, r4
 80057e0:	465b      	mov	r3, fp
 80057e2:	2205      	movs	r2, #5
 80057e4:	4648      	mov	r0, r9
 80057e6:	f000 fa95 	bl	8005d14 <__multadd>
 80057ea:	4601      	mov	r1, r0
 80057ec:	4604      	mov	r4, r0
 80057ee:	9802      	ldr	r0, [sp, #8]
 80057f0:	f000 fca0 	bl	8006134 <__mcmp>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	f77f ada3 	ble.w	8005340 <_dtoa_r+0x490>
 80057fa:	4656      	mov	r6, sl
 80057fc:	2331      	movs	r3, #49	@ 0x31
 80057fe:	f806 3b01 	strb.w	r3, [r6], #1
 8005802:	f108 0801 	add.w	r8, r8, #1
 8005806:	e59f      	b.n	8005348 <_dtoa_r+0x498>
 8005808:	9c03      	ldr	r4, [sp, #12]
 800580a:	46b8      	mov	r8, r7
 800580c:	4625      	mov	r5, r4
 800580e:	e7f4      	b.n	80057fa <_dtoa_r+0x94a>
 8005810:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8101 	beq.w	8005a1e <_dtoa_r+0xb6e>
 800581c:	2e00      	cmp	r6, #0
 800581e:	dd05      	ble.n	800582c <_dtoa_r+0x97c>
 8005820:	4629      	mov	r1, r5
 8005822:	4632      	mov	r2, r6
 8005824:	4648      	mov	r0, r9
 8005826:	f000 fc19 	bl	800605c <__lshift>
 800582a:	4605      	mov	r5, r0
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d05c      	beq.n	80058ec <_dtoa_r+0xa3c>
 8005832:	6869      	ldr	r1, [r5, #4]
 8005834:	4648      	mov	r0, r9
 8005836:	f000 fa0b 	bl	8005c50 <_Balloc>
 800583a:	4606      	mov	r6, r0
 800583c:	b928      	cbnz	r0, 800584a <_dtoa_r+0x99a>
 800583e:	4b82      	ldr	r3, [pc, #520]	@ (8005a48 <_dtoa_r+0xb98>)
 8005840:	4602      	mov	r2, r0
 8005842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005846:	f7ff bb4a 	b.w	8004ede <_dtoa_r+0x2e>
 800584a:	692a      	ldr	r2, [r5, #16]
 800584c:	3202      	adds	r2, #2
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	f105 010c 	add.w	r1, r5, #12
 8005854:	300c      	adds	r0, #12
 8005856:	f000 fff7 	bl	8006848 <memcpy>
 800585a:	2201      	movs	r2, #1
 800585c:	4631      	mov	r1, r6
 800585e:	4648      	mov	r0, r9
 8005860:	f000 fbfc 	bl	800605c <__lshift>
 8005864:	f10a 0301 	add.w	r3, sl, #1
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	eb0a 030b 	add.w	r3, sl, fp
 800586e:	9308      	str	r3, [sp, #32]
 8005870:	9b04      	ldr	r3, [sp, #16]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	462f      	mov	r7, r5
 8005878:	9306      	str	r3, [sp, #24]
 800587a:	4605      	mov	r5, r0
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	9802      	ldr	r0, [sp, #8]
 8005880:	4621      	mov	r1, r4
 8005882:	f103 3bff 	add.w	fp, r3, #4294967295
 8005886:	f7ff fa88 	bl	8004d9a <quorem>
 800588a:	4603      	mov	r3, r0
 800588c:	3330      	adds	r3, #48	@ 0x30
 800588e:	9003      	str	r0, [sp, #12]
 8005890:	4639      	mov	r1, r7
 8005892:	9802      	ldr	r0, [sp, #8]
 8005894:	9309      	str	r3, [sp, #36]	@ 0x24
 8005896:	f000 fc4d 	bl	8006134 <__mcmp>
 800589a:	462a      	mov	r2, r5
 800589c:	9004      	str	r0, [sp, #16]
 800589e:	4621      	mov	r1, r4
 80058a0:	4648      	mov	r0, r9
 80058a2:	f000 fc63 	bl	800616c <__mdiff>
 80058a6:	68c2      	ldr	r2, [r0, #12]
 80058a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058aa:	4606      	mov	r6, r0
 80058ac:	bb02      	cbnz	r2, 80058f0 <_dtoa_r+0xa40>
 80058ae:	4601      	mov	r1, r0
 80058b0:	9802      	ldr	r0, [sp, #8]
 80058b2:	f000 fc3f 	bl	8006134 <__mcmp>
 80058b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b8:	4602      	mov	r2, r0
 80058ba:	4631      	mov	r1, r6
 80058bc:	4648      	mov	r0, r9
 80058be:	920c      	str	r2, [sp, #48]	@ 0x30
 80058c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c2:	f000 fa05 	bl	8005cd0 <_Bfree>
 80058c6:	9b07      	ldr	r3, [sp, #28]
 80058c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058ca:	9e00      	ldr	r6, [sp, #0]
 80058cc:	ea42 0103 	orr.w	r1, r2, r3
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	4319      	orrs	r1, r3
 80058d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d6:	d10d      	bne.n	80058f4 <_dtoa_r+0xa44>
 80058d8:	2b39      	cmp	r3, #57	@ 0x39
 80058da:	d027      	beq.n	800592c <_dtoa_r+0xa7c>
 80058dc:	9a04      	ldr	r2, [sp, #16]
 80058de:	2a00      	cmp	r2, #0
 80058e0:	dd01      	ble.n	80058e6 <_dtoa_r+0xa36>
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	3331      	adds	r3, #49	@ 0x31
 80058e6:	f88b 3000 	strb.w	r3, [fp]
 80058ea:	e52e      	b.n	800534a <_dtoa_r+0x49a>
 80058ec:	4628      	mov	r0, r5
 80058ee:	e7b9      	b.n	8005864 <_dtoa_r+0x9b4>
 80058f0:	2201      	movs	r2, #1
 80058f2:	e7e2      	b.n	80058ba <_dtoa_r+0xa0a>
 80058f4:	9904      	ldr	r1, [sp, #16]
 80058f6:	2900      	cmp	r1, #0
 80058f8:	db04      	blt.n	8005904 <_dtoa_r+0xa54>
 80058fa:	9807      	ldr	r0, [sp, #28]
 80058fc:	4301      	orrs	r1, r0
 80058fe:	9806      	ldr	r0, [sp, #24]
 8005900:	4301      	orrs	r1, r0
 8005902:	d120      	bne.n	8005946 <_dtoa_r+0xa96>
 8005904:	2a00      	cmp	r2, #0
 8005906:	ddee      	ble.n	80058e6 <_dtoa_r+0xa36>
 8005908:	9902      	ldr	r1, [sp, #8]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2201      	movs	r2, #1
 800590e:	4648      	mov	r0, r9
 8005910:	f000 fba4 	bl	800605c <__lshift>
 8005914:	4621      	mov	r1, r4
 8005916:	9002      	str	r0, [sp, #8]
 8005918:	f000 fc0c 	bl	8006134 <__mcmp>
 800591c:	2800      	cmp	r0, #0
 800591e:	9b00      	ldr	r3, [sp, #0]
 8005920:	dc02      	bgt.n	8005928 <_dtoa_r+0xa78>
 8005922:	d1e0      	bne.n	80058e6 <_dtoa_r+0xa36>
 8005924:	07da      	lsls	r2, r3, #31
 8005926:	d5de      	bpl.n	80058e6 <_dtoa_r+0xa36>
 8005928:	2b39      	cmp	r3, #57	@ 0x39
 800592a:	d1da      	bne.n	80058e2 <_dtoa_r+0xa32>
 800592c:	2339      	movs	r3, #57	@ 0x39
 800592e:	f88b 3000 	strb.w	r3, [fp]
 8005932:	4633      	mov	r3, r6
 8005934:	461e      	mov	r6, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800593c:	2a39      	cmp	r2, #57	@ 0x39
 800593e:	d04e      	beq.n	80059de <_dtoa_r+0xb2e>
 8005940:	3201      	adds	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e501      	b.n	800534a <_dtoa_r+0x49a>
 8005946:	2a00      	cmp	r2, #0
 8005948:	dd03      	ble.n	8005952 <_dtoa_r+0xaa2>
 800594a:	2b39      	cmp	r3, #57	@ 0x39
 800594c:	d0ee      	beq.n	800592c <_dtoa_r+0xa7c>
 800594e:	3301      	adds	r3, #1
 8005950:	e7c9      	b.n	80058e6 <_dtoa_r+0xa36>
 8005952:	9a00      	ldr	r2, [sp, #0]
 8005954:	9908      	ldr	r1, [sp, #32]
 8005956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800595a:	428a      	cmp	r2, r1
 800595c:	d028      	beq.n	80059b0 <_dtoa_r+0xb00>
 800595e:	9902      	ldr	r1, [sp, #8]
 8005960:	2300      	movs	r3, #0
 8005962:	220a      	movs	r2, #10
 8005964:	4648      	mov	r0, r9
 8005966:	f000 f9d5 	bl	8005d14 <__multadd>
 800596a:	42af      	cmp	r7, r5
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	f04f 020a 	mov.w	r2, #10
 8005976:	4639      	mov	r1, r7
 8005978:	4648      	mov	r0, r9
 800597a:	d107      	bne.n	800598c <_dtoa_r+0xadc>
 800597c:	f000 f9ca 	bl	8005d14 <__multadd>
 8005980:	4607      	mov	r7, r0
 8005982:	4605      	mov	r5, r0
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	e777      	b.n	800587c <_dtoa_r+0x9cc>
 800598c:	f000 f9c2 	bl	8005d14 <__multadd>
 8005990:	4629      	mov	r1, r5
 8005992:	4607      	mov	r7, r0
 8005994:	2300      	movs	r3, #0
 8005996:	220a      	movs	r2, #10
 8005998:	4648      	mov	r0, r9
 800599a:	f000 f9bb 	bl	8005d14 <__multadd>
 800599e:	4605      	mov	r5, r0
 80059a0:	e7f0      	b.n	8005984 <_dtoa_r+0xad4>
 80059a2:	f1bb 0f00 	cmp.w	fp, #0
 80059a6:	bfcc      	ite	gt
 80059a8:	465e      	movgt	r6, fp
 80059aa:	2601      	movle	r6, #1
 80059ac:	4456      	add	r6, sl
 80059ae:	2700      	movs	r7, #0
 80059b0:	9902      	ldr	r1, [sp, #8]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	4648      	mov	r0, r9
 80059b8:	f000 fb50 	bl	800605c <__lshift>
 80059bc:	4621      	mov	r1, r4
 80059be:	9002      	str	r0, [sp, #8]
 80059c0:	f000 fbb8 	bl	8006134 <__mcmp>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dcb4      	bgt.n	8005932 <_dtoa_r+0xa82>
 80059c8:	d102      	bne.n	80059d0 <_dtoa_r+0xb20>
 80059ca:	9b00      	ldr	r3, [sp, #0]
 80059cc:	07db      	lsls	r3, r3, #31
 80059ce:	d4b0      	bmi.n	8005932 <_dtoa_r+0xa82>
 80059d0:	4633      	mov	r3, r6
 80059d2:	461e      	mov	r6, r3
 80059d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059d8:	2a30      	cmp	r2, #48	@ 0x30
 80059da:	d0fa      	beq.n	80059d2 <_dtoa_r+0xb22>
 80059dc:	e4b5      	b.n	800534a <_dtoa_r+0x49a>
 80059de:	459a      	cmp	sl, r3
 80059e0:	d1a8      	bne.n	8005934 <_dtoa_r+0xa84>
 80059e2:	2331      	movs	r3, #49	@ 0x31
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	f88a 3000 	strb.w	r3, [sl]
 80059ec:	e4ad      	b.n	800534a <_dtoa_r+0x49a>
 80059ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005a4c <_dtoa_r+0xb9c>
 80059f4:	b11b      	cbz	r3, 80059fe <_dtoa_r+0xb4e>
 80059f6:	f10a 0308 	add.w	r3, sl, #8
 80059fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4650      	mov	r0, sl
 8005a00:	b017      	add	sp, #92	@ 0x5c
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	9b07      	ldr	r3, [sp, #28]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f77f ae2e 	ble.w	800566a <_dtoa_r+0x7ba>
 8005a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a10:	9308      	str	r3, [sp, #32]
 8005a12:	2001      	movs	r0, #1
 8005a14:	e64d      	b.n	80056b2 <_dtoa_r+0x802>
 8005a16:	f1bb 0f00 	cmp.w	fp, #0
 8005a1a:	f77f aed9 	ble.w	80057d0 <_dtoa_r+0x920>
 8005a1e:	4656      	mov	r6, sl
 8005a20:	9802      	ldr	r0, [sp, #8]
 8005a22:	4621      	mov	r1, r4
 8005a24:	f7ff f9b9 	bl	8004d9a <quorem>
 8005a28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005a2c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a30:	eba6 020a 	sub.w	r2, r6, sl
 8005a34:	4593      	cmp	fp, r2
 8005a36:	ddb4      	ble.n	80059a2 <_dtoa_r+0xaf2>
 8005a38:	9902      	ldr	r1, [sp, #8]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	4648      	mov	r0, r9
 8005a40:	f000 f968 	bl	8005d14 <__multadd>
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	e7eb      	b.n	8005a20 <_dtoa_r+0xb70>
 8005a48:	08008d14 	.word	0x08008d14
 8005a4c:	08008c98 	.word	0x08008c98

08005a50 <_free_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4605      	mov	r5, r0
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d041      	beq.n	8005adc <_free_r+0x8c>
 8005a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a5c:	1f0c      	subs	r4, r1, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfb8      	it	lt
 8005a62:	18e4      	addlt	r4, r4, r3
 8005a64:	f000 f8e8 	bl	8005c38 <__malloc_lock>
 8005a68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <_free_r+0x90>)
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	b933      	cbnz	r3, 8005a7c <_free_r+0x2c>
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	6014      	str	r4, [r2, #0]
 8005a72:	4628      	mov	r0, r5
 8005a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a78:	f000 b8e4 	b.w	8005c44 <__malloc_unlock>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d908      	bls.n	8005a92 <_free_r+0x42>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	e7ed      	b.n	8005a6e <_free_r+0x1e>
 8005a92:	461a      	mov	r2, r3
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	b10b      	cbz	r3, 8005a9c <_free_r+0x4c>
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x42>
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	1850      	adds	r0, r2, r1
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x6c>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	1850      	adds	r0, r2, r1
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	d1e0      	bne.n	8005a72 <_free_r+0x22>
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	4408      	add	r0, r1
 8005ab8:	6010      	str	r0, [r2, #0]
 8005aba:	e7da      	b.n	8005a72 <_free_r+0x22>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x74>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	e7d6      	b.n	8005a72 <_free_r+0x22>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	1821      	adds	r1, r4, r0
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	bf04      	itt	eq
 8005acc:	6819      	ldreq	r1, [r3, #0]
 8005ace:	685b      	ldreq	r3, [r3, #4]
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	bf04      	itt	eq
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	6054      	str	r4, [r2, #4]
 8005ada:	e7ca      	b.n	8005a72 <_free_r+0x22>
 8005adc:	bd38      	pop	{r3, r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000404 	.word	0x20000404

08005ae4 <malloc>:
 8005ae4:	4b02      	ldr	r3, [pc, #8]	@ (8005af0 <malloc+0xc>)
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	f000 b825 	b.w	8005b38 <_malloc_r>
 8005aee:	bf00      	nop
 8005af0:	20000018 	.word	0x20000018

08005af4 <sbrk_aligned>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4e0f      	ldr	r6, [pc, #60]	@ (8005b34 <sbrk_aligned+0x40>)
 8005af8:	460c      	mov	r4, r1
 8005afa:	6831      	ldr	r1, [r6, #0]
 8005afc:	4605      	mov	r5, r0
 8005afe:	b911      	cbnz	r1, 8005b06 <sbrk_aligned+0x12>
 8005b00:	f000 fe92 	bl	8006828 <_sbrk_r>
 8005b04:	6030      	str	r0, [r6, #0]
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 fe8d 	bl	8006828 <_sbrk_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d103      	bne.n	8005b1a <sbrk_aligned+0x26>
 8005b12:	f04f 34ff 	mov.w	r4, #4294967295
 8005b16:	4620      	mov	r0, r4
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d0f8      	beq.n	8005b16 <sbrk_aligned+0x22>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fe7e 	bl	8006828 <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1f2      	bne.n	8005b16 <sbrk_aligned+0x22>
 8005b30:	e7ef      	b.n	8005b12 <sbrk_aligned+0x1e>
 8005b32:	bf00      	nop
 8005b34:	20000400 	.word	0x20000400

08005b38 <_malloc_r>:
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b3c:	1ccd      	adds	r5, r1, #3
 8005b3e:	f025 0503 	bic.w	r5, r5, #3
 8005b42:	3508      	adds	r5, #8
 8005b44:	2d0c      	cmp	r5, #12
 8005b46:	bf38      	it	cc
 8005b48:	250c      	movcc	r5, #12
 8005b4a:	2d00      	cmp	r5, #0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	db01      	blt.n	8005b54 <_malloc_r+0x1c>
 8005b50:	42a9      	cmp	r1, r5
 8005b52:	d904      	bls.n	8005b5e <_malloc_r+0x26>
 8005b54:	230c      	movs	r3, #12
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c34 <_malloc_r+0xfc>
 8005b62:	f000 f869 	bl	8005c38 <__malloc_lock>
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	461c      	mov	r4, r3
 8005b6c:	bb44      	cbnz	r4, 8005bc0 <_malloc_r+0x88>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff ffbf 	bl	8005af4 <sbrk_aligned>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d158      	bne.n	8005c2e <_malloc_r+0xf6>
 8005b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b80:	4627      	mov	r7, r4
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d143      	bne.n	8005c0e <_malloc_r+0xd6>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d04b      	beq.n	8005c22 <_malloc_r+0xea>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	eb04 0903 	add.w	r9, r4, r3
 8005b94:	f000 fe48 	bl	8006828 <_sbrk_r>
 8005b98:	4581      	cmp	r9, r0
 8005b9a:	d142      	bne.n	8005c22 <_malloc_r+0xea>
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	1a6d      	subs	r5, r5, r1
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7ff ffa6 	bl	8005af4 <sbrk_aligned>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d03a      	beq.n	8005c22 <_malloc_r+0xea>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	442b      	add	r3, r5
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	bb62      	cbnz	r2, 8005c14 <_malloc_r+0xdc>
 8005bba:	f8c8 7000 	str.w	r7, [r8]
 8005bbe:	e00f      	b.n	8005be0 <_malloc_r+0xa8>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	1b52      	subs	r2, r2, r5
 8005bc4:	d420      	bmi.n	8005c08 <_malloc_r+0xd0>
 8005bc6:	2a0b      	cmp	r2, #11
 8005bc8:	d917      	bls.n	8005bfa <_malloc_r+0xc2>
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	6025      	str	r5, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	6059      	strne	r1, [r3, #4]
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	bf08      	it	eq
 8005bd8:	f8c8 1000 	streq.w	r1, [r8]
 8005bdc:	5162      	str	r2, [r4, r5]
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	4630      	mov	r0, r6
 8005be2:	f000 f82f 	bl	8005c44 <__malloc_unlock>
 8005be6:	f104 000b 	add.w	r0, r4, #11
 8005bea:	1d23      	adds	r3, r4, #4
 8005bec:	f020 0007 	bic.w	r0, r0, #7
 8005bf0:	1ac2      	subs	r2, r0, r3
 8005bf2:	bf1c      	itt	ne
 8005bf4:	1a1b      	subne	r3, r3, r0
 8005bf6:	50a3      	strne	r3, [r4, r2]
 8005bf8:	e7af      	b.n	8005b5a <_malloc_r+0x22>
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	bf0c      	ite	eq
 8005c00:	f8c8 2000 	streq.w	r2, [r8]
 8005c04:	605a      	strne	r2, [r3, #4]
 8005c06:	e7eb      	b.n	8005be0 <_malloc_r+0xa8>
 8005c08:	4623      	mov	r3, r4
 8005c0a:	6864      	ldr	r4, [r4, #4]
 8005c0c:	e7ae      	b.n	8005b6c <_malloc_r+0x34>
 8005c0e:	463c      	mov	r4, r7
 8005c10:	687f      	ldr	r7, [r7, #4]
 8005c12:	e7b6      	b.n	8005b82 <_malloc_r+0x4a>
 8005c14:	461a      	mov	r2, r3
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d1fb      	bne.n	8005c14 <_malloc_r+0xdc>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6053      	str	r3, [r2, #4]
 8005c20:	e7de      	b.n	8005be0 <_malloc_r+0xa8>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f80c 	bl	8005c44 <__malloc_unlock>
 8005c2c:	e794      	b.n	8005b58 <_malloc_r+0x20>
 8005c2e:	6005      	str	r5, [r0, #0]
 8005c30:	e7d6      	b.n	8005be0 <_malloc_r+0xa8>
 8005c32:	bf00      	nop
 8005c34:	20000404 	.word	0x20000404

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	@ (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff b8ac 	b.w	8004d96 <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	200003fc 	.word	0x200003fc

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff b8a7 	b.w	8004d98 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	200003fc 	.word	0x200003fc

08005c50 <_Balloc>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	69c6      	ldr	r6, [r0, #28]
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	b976      	cbnz	r6, 8005c78 <_Balloc+0x28>
 8005c5a:	2010      	movs	r0, #16
 8005c5c:	f7ff ff42 	bl	8005ae4 <malloc>
 8005c60:	4602      	mov	r2, r0
 8005c62:	61e0      	str	r0, [r4, #28]
 8005c64:	b920      	cbnz	r0, 8005c70 <_Balloc+0x20>
 8005c66:	4b18      	ldr	r3, [pc, #96]	@ (8005cc8 <_Balloc+0x78>)
 8005c68:	4818      	ldr	r0, [pc, #96]	@ (8005ccc <_Balloc+0x7c>)
 8005c6a:	216b      	movs	r1, #107	@ 0x6b
 8005c6c:	f000 fdfa 	bl	8006864 <__assert_func>
 8005c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c74:	6006      	str	r6, [r0, #0]
 8005c76:	60c6      	str	r6, [r0, #12]
 8005c78:	69e6      	ldr	r6, [r4, #28]
 8005c7a:	68f3      	ldr	r3, [r6, #12]
 8005c7c:	b183      	cbz	r3, 8005ca0 <_Balloc+0x50>
 8005c7e:	69e3      	ldr	r3, [r4, #28]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c86:	b9b8      	cbnz	r0, 8005cb8 <_Balloc+0x68>
 8005c88:	2101      	movs	r1, #1
 8005c8a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c8e:	1d72      	adds	r2, r6, #5
 8005c90:	0092      	lsls	r2, r2, #2
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fe04 	bl	80068a0 <_calloc_r>
 8005c98:	b160      	cbz	r0, 8005cb4 <_Balloc+0x64>
 8005c9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c9e:	e00e      	b.n	8005cbe <_Balloc+0x6e>
 8005ca0:	2221      	movs	r2, #33	@ 0x21
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 fdfb 	bl	80068a0 <_calloc_r>
 8005caa:	69e3      	ldr	r3, [r4, #28]
 8005cac:	60f0      	str	r0, [r6, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e4      	bne.n	8005c7e <_Balloc+0x2e>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	6802      	ldr	r2, [r0, #0]
 8005cba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cc4:	e7f7      	b.n	8005cb6 <_Balloc+0x66>
 8005cc6:	bf00      	nop
 8005cc8:	08008ca5 	.word	0x08008ca5
 8005ccc:	08008d25 	.word	0x08008d25

08005cd0 <_Bfree>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	69c6      	ldr	r6, [r0, #28]
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b976      	cbnz	r6, 8005cf8 <_Bfree+0x28>
 8005cda:	2010      	movs	r0, #16
 8005cdc:	f7ff ff02 	bl	8005ae4 <malloc>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	61e8      	str	r0, [r5, #28]
 8005ce4:	b920      	cbnz	r0, 8005cf0 <_Bfree+0x20>
 8005ce6:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <_Bfree+0x3c>)
 8005ce8:	4809      	ldr	r0, [pc, #36]	@ (8005d10 <_Bfree+0x40>)
 8005cea:	218f      	movs	r1, #143	@ 0x8f
 8005cec:	f000 fdba 	bl	8006864 <__assert_func>
 8005cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf4:	6006      	str	r6, [r0, #0]
 8005cf6:	60c6      	str	r6, [r0, #12]
 8005cf8:	b13c      	cbz	r4, 8005d0a <_Bfree+0x3a>
 8005cfa:	69eb      	ldr	r3, [r5, #28]
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d04:	6021      	str	r1, [r4, #0]
 8005d06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	08008ca5 	.word	0x08008ca5
 8005d10:	08008d25 	.word	0x08008d25

08005d14 <__multadd>:
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	690d      	ldr	r5, [r1, #16]
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	461e      	mov	r6, r3
 8005d20:	f101 0c14 	add.w	ip, r1, #20
 8005d24:	2000      	movs	r0, #0
 8005d26:	f8dc 3000 	ldr.w	r3, [ip]
 8005d2a:	b299      	uxth	r1, r3
 8005d2c:	fb02 6101 	mla	r1, r2, r1, r6
 8005d30:	0c1e      	lsrs	r6, r3, #16
 8005d32:	0c0b      	lsrs	r3, r1, #16
 8005d34:	fb02 3306 	mla	r3, r2, r6, r3
 8005d38:	b289      	uxth	r1, r1
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d40:	4285      	cmp	r5, r0
 8005d42:	f84c 1b04 	str.w	r1, [ip], #4
 8005d46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d4a:	dcec      	bgt.n	8005d26 <__multadd+0x12>
 8005d4c:	b30e      	cbz	r6, 8005d92 <__multadd+0x7e>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc19      	bgt.n	8005d88 <__multadd+0x74>
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4638      	mov	r0, r7
 8005d58:	3101      	adds	r1, #1
 8005d5a:	f7ff ff79 	bl	8005c50 <_Balloc>
 8005d5e:	4680      	mov	r8, r0
 8005d60:	b928      	cbnz	r0, 8005d6e <__multadd+0x5a>
 8005d62:	4602      	mov	r2, r0
 8005d64:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <__multadd+0x84>)
 8005d66:	480d      	ldr	r0, [pc, #52]	@ (8005d9c <__multadd+0x88>)
 8005d68:	21ba      	movs	r1, #186	@ 0xba
 8005d6a:	f000 fd7b 	bl	8006864 <__assert_func>
 8005d6e:	6922      	ldr	r2, [r4, #16]
 8005d70:	3202      	adds	r2, #2
 8005d72:	f104 010c 	add.w	r1, r4, #12
 8005d76:	0092      	lsls	r2, r2, #2
 8005d78:	300c      	adds	r0, #12
 8005d7a:	f000 fd65 	bl	8006848 <memcpy>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff ffa5 	bl	8005cd0 <_Bfree>
 8005d86:	4644      	mov	r4, r8
 8005d88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	615e      	str	r6, [r3, #20]
 8005d90:	6125      	str	r5, [r4, #16]
 8005d92:	4620      	mov	r0, r4
 8005d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d98:	08008d14 	.word	0x08008d14
 8005d9c:	08008d25 	.word	0x08008d25

08005da0 <__hi0bits>:
 8005da0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005da4:	4603      	mov	r3, r0
 8005da6:	bf36      	itet	cc
 8005da8:	0403      	lslcc	r3, r0, #16
 8005daa:	2000      	movcs	r0, #0
 8005dac:	2010      	movcc	r0, #16
 8005dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db2:	bf3c      	itt	cc
 8005db4:	021b      	lslcc	r3, r3, #8
 8005db6:	3008      	addcc	r0, #8
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dbc:	bf3c      	itt	cc
 8005dbe:	011b      	lslcc	r3, r3, #4
 8005dc0:	3004      	addcc	r0, #4
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc6:	bf3c      	itt	cc
 8005dc8:	009b      	lslcc	r3, r3, #2
 8005dca:	3002      	addcc	r0, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	db05      	blt.n	8005ddc <__hi0bits+0x3c>
 8005dd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005dd4:	f100 0001 	add.w	r0, r0, #1
 8005dd8:	bf08      	it	eq
 8005dda:	2020      	moveq	r0, #32
 8005ddc:	4770      	bx	lr

08005dde <__lo0bits>:
 8005dde:	6803      	ldr	r3, [r0, #0]
 8005de0:	4602      	mov	r2, r0
 8005de2:	f013 0007 	ands.w	r0, r3, #7
 8005de6:	d00b      	beq.n	8005e00 <__lo0bits+0x22>
 8005de8:	07d9      	lsls	r1, r3, #31
 8005dea:	d421      	bmi.n	8005e30 <__lo0bits+0x52>
 8005dec:	0798      	lsls	r0, r3, #30
 8005dee:	bf49      	itett	mi
 8005df0:	085b      	lsrmi	r3, r3, #1
 8005df2:	089b      	lsrpl	r3, r3, #2
 8005df4:	2001      	movmi	r0, #1
 8005df6:	6013      	strmi	r3, [r2, #0]
 8005df8:	bf5c      	itt	pl
 8005dfa:	6013      	strpl	r3, [r2, #0]
 8005dfc:	2002      	movpl	r0, #2
 8005dfe:	4770      	bx	lr
 8005e00:	b299      	uxth	r1, r3
 8005e02:	b909      	cbnz	r1, 8005e08 <__lo0bits+0x2a>
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	2010      	movs	r0, #16
 8005e08:	b2d9      	uxtb	r1, r3
 8005e0a:	b909      	cbnz	r1, 8005e10 <__lo0bits+0x32>
 8005e0c:	3008      	adds	r0, #8
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	0719      	lsls	r1, r3, #28
 8005e12:	bf04      	itt	eq
 8005e14:	091b      	lsreq	r3, r3, #4
 8005e16:	3004      	addeq	r0, #4
 8005e18:	0799      	lsls	r1, r3, #30
 8005e1a:	bf04      	itt	eq
 8005e1c:	089b      	lsreq	r3, r3, #2
 8005e1e:	3002      	addeq	r0, #2
 8005e20:	07d9      	lsls	r1, r3, #31
 8005e22:	d403      	bmi.n	8005e2c <__lo0bits+0x4e>
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	f100 0001 	add.w	r0, r0, #1
 8005e2a:	d003      	beq.n	8005e34 <__lo0bits+0x56>
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4770      	bx	lr
 8005e30:	2000      	movs	r0, #0
 8005e32:	4770      	bx	lr
 8005e34:	2020      	movs	r0, #32
 8005e36:	4770      	bx	lr

08005e38 <__i2b>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	f7ff ff07 	bl	8005c50 <_Balloc>
 8005e42:	4602      	mov	r2, r0
 8005e44:	b928      	cbnz	r0, 8005e52 <__i2b+0x1a>
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <__i2b+0x24>)
 8005e48:	4805      	ldr	r0, [pc, #20]	@ (8005e60 <__i2b+0x28>)
 8005e4a:	f240 1145 	movw	r1, #325	@ 0x145
 8005e4e:	f000 fd09 	bl	8006864 <__assert_func>
 8005e52:	2301      	movs	r3, #1
 8005e54:	6144      	str	r4, [r0, #20]
 8005e56:	6103      	str	r3, [r0, #16]
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08008d14 	.word	0x08008d14
 8005e60:	08008d25 	.word	0x08008d25

08005e64 <__multiply>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4617      	mov	r7, r2
 8005e6a:	690a      	ldr	r2, [r1, #16]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bfa8      	it	ge
 8005e72:	463b      	movge	r3, r7
 8005e74:	4689      	mov	r9, r1
 8005e76:	bfa4      	itt	ge
 8005e78:	460f      	movge	r7, r1
 8005e7a:	4699      	movge	r9, r3
 8005e7c:	693d      	ldr	r5, [r7, #16]
 8005e7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	eb05 060a 	add.w	r6, r5, sl
 8005e8a:	42b3      	cmp	r3, r6
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	bfb8      	it	lt
 8005e90:	3101      	addlt	r1, #1
 8005e92:	f7ff fedd 	bl	8005c50 <_Balloc>
 8005e96:	b930      	cbnz	r0, 8005ea6 <__multiply+0x42>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <__multiply+0x13c>)
 8005e9c:	4841      	ldr	r0, [pc, #260]	@ (8005fa4 <__multiply+0x140>)
 8005e9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ea2:	f000 fcdf 	bl	8006864 <__assert_func>
 8005ea6:	f100 0414 	add.w	r4, r0, #20
 8005eaa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005eae:	4623      	mov	r3, r4
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4573      	cmp	r3, lr
 8005eb4:	d320      	bcc.n	8005ef8 <__multiply+0x94>
 8005eb6:	f107 0814 	add.w	r8, r7, #20
 8005eba:	f109 0114 	add.w	r1, r9, #20
 8005ebe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005ec2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	1beb      	subs	r3, r5, r7
 8005eca:	3b15      	subs	r3, #21
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	3715      	adds	r7, #21
 8005ed4:	42bd      	cmp	r5, r7
 8005ed6:	bf38      	it	cc
 8005ed8:	2304      	movcc	r3, #4
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	9b02      	ldr	r3, [sp, #8]
 8005ede:	9103      	str	r1, [sp, #12]
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	d80c      	bhi.n	8005efe <__multiply+0x9a>
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	dd03      	ble.n	8005ef0 <__multiply+0x8c>
 8005ee8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d055      	beq.n	8005f9c <__multiply+0x138>
 8005ef0:	6106      	str	r6, [r0, #16]
 8005ef2:	b005      	add	sp, #20
 8005ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef8:	f843 2b04 	str.w	r2, [r3], #4
 8005efc:	e7d9      	b.n	8005eb2 <__multiply+0x4e>
 8005efe:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f02:	f1ba 0f00 	cmp.w	sl, #0
 8005f06:	d01f      	beq.n	8005f48 <__multiply+0xe4>
 8005f08:	46c4      	mov	ip, r8
 8005f0a:	46a1      	mov	r9, r4
 8005f0c:	2700      	movs	r7, #0
 8005f0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f12:	f8d9 3000 	ldr.w	r3, [r9]
 8005f16:	fa1f fb82 	uxth.w	fp, r2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f20:	443b      	add	r3, r7
 8005f22:	f8d9 7000 	ldr.w	r7, [r9]
 8005f26:	0c12      	lsrs	r2, r2, #16
 8005f28:	0c3f      	lsrs	r7, r7, #16
 8005f2a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f38:	4565      	cmp	r5, ip
 8005f3a:	f849 3b04 	str.w	r3, [r9], #4
 8005f3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005f42:	d8e4      	bhi.n	8005f0e <__multiply+0xaa>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	50e7      	str	r7, [r4, r3]
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f4e:	3104      	adds	r1, #4
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	d020      	beq.n	8005f98 <__multiply+0x134>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	4647      	mov	r7, r8
 8005f5a:	46a4      	mov	ip, r4
 8005f5c:	f04f 0a00 	mov.w	sl, #0
 8005f60:	f8b7 b000 	ldrh.w	fp, [r7]
 8005f64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005f68:	fb09 220b 	mla	r2, r9, fp, r2
 8005f6c:	4452      	add	r2, sl
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f74:	f84c 3b04 	str.w	r3, [ip], #4
 8005f78:	f857 3b04 	ldr.w	r3, [r7], #4
 8005f7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f80:	f8bc 3000 	ldrh.w	r3, [ip]
 8005f84:	fb09 330a 	mla	r3, r9, sl, r3
 8005f88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005f8c:	42bd      	cmp	r5, r7
 8005f8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f92:	d8e5      	bhi.n	8005f60 <__multiply+0xfc>
 8005f94:	9a01      	ldr	r2, [sp, #4]
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	3404      	adds	r4, #4
 8005f9a:	e79f      	b.n	8005edc <__multiply+0x78>
 8005f9c:	3e01      	subs	r6, #1
 8005f9e:	e7a1      	b.n	8005ee4 <__multiply+0x80>
 8005fa0:	08008d14 	.word	0x08008d14
 8005fa4:	08008d25 	.word	0x08008d25

08005fa8 <__pow5mult>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	4615      	mov	r5, r2
 8005fae:	f012 0203 	ands.w	r2, r2, #3
 8005fb2:	4607      	mov	r7, r0
 8005fb4:	460e      	mov	r6, r1
 8005fb6:	d007      	beq.n	8005fc8 <__pow5mult+0x20>
 8005fb8:	4c25      	ldr	r4, [pc, #148]	@ (8006050 <__pow5mult+0xa8>)
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fc2:	f7ff fea7 	bl	8005d14 <__multadd>
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	10ad      	asrs	r5, r5, #2
 8005fca:	d03d      	beq.n	8006048 <__pow5mult+0xa0>
 8005fcc:	69fc      	ldr	r4, [r7, #28]
 8005fce:	b97c      	cbnz	r4, 8005ff0 <__pow5mult+0x48>
 8005fd0:	2010      	movs	r0, #16
 8005fd2:	f7ff fd87 	bl	8005ae4 <malloc>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	61f8      	str	r0, [r7, #28]
 8005fda:	b928      	cbnz	r0, 8005fe8 <__pow5mult+0x40>
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006054 <__pow5mult+0xac>)
 8005fde:	481e      	ldr	r0, [pc, #120]	@ (8006058 <__pow5mult+0xb0>)
 8005fe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005fe4:	f000 fc3e 	bl	8006864 <__assert_func>
 8005fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fec:	6004      	str	r4, [r0, #0]
 8005fee:	60c4      	str	r4, [r0, #12]
 8005ff0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ff8:	b94c      	cbnz	r4, 800600e <__pow5mult+0x66>
 8005ffa:	f240 2171 	movw	r1, #625	@ 0x271
 8005ffe:	4638      	mov	r0, r7
 8006000:	f7ff ff1a 	bl	8005e38 <__i2b>
 8006004:	2300      	movs	r3, #0
 8006006:	f8c8 0008 	str.w	r0, [r8, #8]
 800600a:	4604      	mov	r4, r0
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	f04f 0900 	mov.w	r9, #0
 8006012:	07eb      	lsls	r3, r5, #31
 8006014:	d50a      	bpl.n	800602c <__pow5mult+0x84>
 8006016:	4631      	mov	r1, r6
 8006018:	4622      	mov	r2, r4
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ff22 	bl	8005e64 <__multiply>
 8006020:	4631      	mov	r1, r6
 8006022:	4680      	mov	r8, r0
 8006024:	4638      	mov	r0, r7
 8006026:	f7ff fe53 	bl	8005cd0 <_Bfree>
 800602a:	4646      	mov	r6, r8
 800602c:	106d      	asrs	r5, r5, #1
 800602e:	d00b      	beq.n	8006048 <__pow5mult+0xa0>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	b938      	cbnz	r0, 8006044 <__pow5mult+0x9c>
 8006034:	4622      	mov	r2, r4
 8006036:	4621      	mov	r1, r4
 8006038:	4638      	mov	r0, r7
 800603a:	f7ff ff13 	bl	8005e64 <__multiply>
 800603e:	6020      	str	r0, [r4, #0]
 8006040:	f8c0 9000 	str.w	r9, [r0]
 8006044:	4604      	mov	r4, r0
 8006046:	e7e4      	b.n	8006012 <__pow5mult+0x6a>
 8006048:	4630      	mov	r0, r6
 800604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604e:	bf00      	nop
 8006050:	08008dd8 	.word	0x08008dd8
 8006054:	08008ca5 	.word	0x08008ca5
 8006058:	08008d25 	.word	0x08008d25

0800605c <__lshift>:
 800605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006060:	460c      	mov	r4, r1
 8006062:	6849      	ldr	r1, [r1, #4]
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	4607      	mov	r7, r0
 800606e:	4691      	mov	r9, r2
 8006070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006074:	f108 0601 	add.w	r6, r8, #1
 8006078:	42b3      	cmp	r3, r6
 800607a:	db0b      	blt.n	8006094 <__lshift+0x38>
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff fde7 	bl	8005c50 <_Balloc>
 8006082:	4605      	mov	r5, r0
 8006084:	b948      	cbnz	r0, 800609a <__lshift+0x3e>
 8006086:	4602      	mov	r2, r0
 8006088:	4b28      	ldr	r3, [pc, #160]	@ (800612c <__lshift+0xd0>)
 800608a:	4829      	ldr	r0, [pc, #164]	@ (8006130 <__lshift+0xd4>)
 800608c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006090:	f000 fbe8 	bl	8006864 <__assert_func>
 8006094:	3101      	adds	r1, #1
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	e7ee      	b.n	8006078 <__lshift+0x1c>
 800609a:	2300      	movs	r3, #0
 800609c:	f100 0114 	add.w	r1, r0, #20
 80060a0:	f100 0210 	add.w	r2, r0, #16
 80060a4:	4618      	mov	r0, r3
 80060a6:	4553      	cmp	r3, sl
 80060a8:	db33      	blt.n	8006112 <__lshift+0xb6>
 80060aa:	6920      	ldr	r0, [r4, #16]
 80060ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060b0:	f104 0314 	add.w	r3, r4, #20
 80060b4:	f019 091f 	ands.w	r9, r9, #31
 80060b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060c0:	d02b      	beq.n	800611a <__lshift+0xbe>
 80060c2:	f1c9 0e20 	rsb	lr, r9, #32
 80060c6:	468a      	mov	sl, r1
 80060c8:	2200      	movs	r2, #0
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	fa00 f009 	lsl.w	r0, r0, r9
 80060d0:	4310      	orrs	r0, r2
 80060d2:	f84a 0b04 	str.w	r0, [sl], #4
 80060d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060da:	459c      	cmp	ip, r3
 80060dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80060e0:	d8f3      	bhi.n	80060ca <__lshift+0x6e>
 80060e2:	ebac 0304 	sub.w	r3, ip, r4
 80060e6:	3b15      	subs	r3, #21
 80060e8:	f023 0303 	bic.w	r3, r3, #3
 80060ec:	3304      	adds	r3, #4
 80060ee:	f104 0015 	add.w	r0, r4, #21
 80060f2:	4560      	cmp	r0, ip
 80060f4:	bf88      	it	hi
 80060f6:	2304      	movhi	r3, #4
 80060f8:	50ca      	str	r2, [r1, r3]
 80060fa:	b10a      	cbz	r2, 8006100 <__lshift+0xa4>
 80060fc:	f108 0602 	add.w	r6, r8, #2
 8006100:	3e01      	subs	r6, #1
 8006102:	4638      	mov	r0, r7
 8006104:	612e      	str	r6, [r5, #16]
 8006106:	4621      	mov	r1, r4
 8006108:	f7ff fde2 	bl	8005cd0 <_Bfree>
 800610c:	4628      	mov	r0, r5
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	f842 0f04 	str.w	r0, [r2, #4]!
 8006116:	3301      	adds	r3, #1
 8006118:	e7c5      	b.n	80060a6 <__lshift+0x4a>
 800611a:	3904      	subs	r1, #4
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	f841 2f04 	str.w	r2, [r1, #4]!
 8006124:	459c      	cmp	ip, r3
 8006126:	d8f9      	bhi.n	800611c <__lshift+0xc0>
 8006128:	e7ea      	b.n	8006100 <__lshift+0xa4>
 800612a:	bf00      	nop
 800612c:	08008d14 	.word	0x08008d14
 8006130:	08008d25 	.word	0x08008d25

08006134 <__mcmp>:
 8006134:	690a      	ldr	r2, [r1, #16]
 8006136:	4603      	mov	r3, r0
 8006138:	6900      	ldr	r0, [r0, #16]
 800613a:	1a80      	subs	r0, r0, r2
 800613c:	b530      	push	{r4, r5, lr}
 800613e:	d10e      	bne.n	800615e <__mcmp+0x2a>
 8006140:	3314      	adds	r3, #20
 8006142:	3114      	adds	r1, #20
 8006144:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006148:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800614c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006154:	4295      	cmp	r5, r2
 8006156:	d003      	beq.n	8006160 <__mcmp+0x2c>
 8006158:	d205      	bcs.n	8006166 <__mcmp+0x32>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	42a3      	cmp	r3, r4
 8006162:	d3f3      	bcc.n	800614c <__mcmp+0x18>
 8006164:	e7fb      	b.n	800615e <__mcmp+0x2a>
 8006166:	2001      	movs	r0, #1
 8006168:	e7f9      	b.n	800615e <__mcmp+0x2a>
	...

0800616c <__mdiff>:
 800616c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	4689      	mov	r9, r1
 8006172:	4606      	mov	r6, r0
 8006174:	4611      	mov	r1, r2
 8006176:	4648      	mov	r0, r9
 8006178:	4614      	mov	r4, r2
 800617a:	f7ff ffdb 	bl	8006134 <__mcmp>
 800617e:	1e05      	subs	r5, r0, #0
 8006180:	d112      	bne.n	80061a8 <__mdiff+0x3c>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff fd63 	bl	8005c50 <_Balloc>
 800618a:	4602      	mov	r2, r0
 800618c:	b928      	cbnz	r0, 800619a <__mdiff+0x2e>
 800618e:	4b3f      	ldr	r3, [pc, #252]	@ (800628c <__mdiff+0x120>)
 8006190:	f240 2137 	movw	r1, #567	@ 0x237
 8006194:	483e      	ldr	r0, [pc, #248]	@ (8006290 <__mdiff+0x124>)
 8006196:	f000 fb65 	bl	8006864 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061a0:	4610      	mov	r0, r2
 80061a2:	b003      	add	sp, #12
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	bfbc      	itt	lt
 80061aa:	464b      	movlt	r3, r9
 80061ac:	46a1      	movlt	r9, r4
 80061ae:	4630      	mov	r0, r6
 80061b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061b4:	bfba      	itte	lt
 80061b6:	461c      	movlt	r4, r3
 80061b8:	2501      	movlt	r5, #1
 80061ba:	2500      	movge	r5, #0
 80061bc:	f7ff fd48 	bl	8005c50 <_Balloc>
 80061c0:	4602      	mov	r2, r0
 80061c2:	b918      	cbnz	r0, 80061cc <__mdiff+0x60>
 80061c4:	4b31      	ldr	r3, [pc, #196]	@ (800628c <__mdiff+0x120>)
 80061c6:	f240 2145 	movw	r1, #581	@ 0x245
 80061ca:	e7e3      	b.n	8006194 <__mdiff+0x28>
 80061cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061d0:	6926      	ldr	r6, [r4, #16]
 80061d2:	60c5      	str	r5, [r0, #12]
 80061d4:	f109 0310 	add.w	r3, r9, #16
 80061d8:	f109 0514 	add.w	r5, r9, #20
 80061dc:	f104 0e14 	add.w	lr, r4, #20
 80061e0:	f100 0b14 	add.w	fp, r0, #20
 80061e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80061e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	46d9      	mov	r9, fp
 80061f0:	f04f 0c00 	mov.w	ip, #0
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	fa1f f38a 	uxth.w	r3, sl
 8006204:	4619      	mov	r1, r3
 8006206:	b283      	uxth	r3, r0
 8006208:	1acb      	subs	r3, r1, r3
 800620a:	0c00      	lsrs	r0, r0, #16
 800620c:	4463      	add	r3, ip
 800620e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006212:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800621c:	4576      	cmp	r6, lr
 800621e:	f849 3b04 	str.w	r3, [r9], #4
 8006222:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006226:	d8e5      	bhi.n	80061f4 <__mdiff+0x88>
 8006228:	1b33      	subs	r3, r6, r4
 800622a:	3b15      	subs	r3, #21
 800622c:	f023 0303 	bic.w	r3, r3, #3
 8006230:	3415      	adds	r4, #21
 8006232:	3304      	adds	r3, #4
 8006234:	42a6      	cmp	r6, r4
 8006236:	bf38      	it	cc
 8006238:	2304      	movcc	r3, #4
 800623a:	441d      	add	r5, r3
 800623c:	445b      	add	r3, fp
 800623e:	461e      	mov	r6, r3
 8006240:	462c      	mov	r4, r5
 8006242:	4544      	cmp	r4, r8
 8006244:	d30e      	bcc.n	8006264 <__mdiff+0xf8>
 8006246:	f108 0103 	add.w	r1, r8, #3
 800624a:	1b49      	subs	r1, r1, r5
 800624c:	f021 0103 	bic.w	r1, r1, #3
 8006250:	3d03      	subs	r5, #3
 8006252:	45a8      	cmp	r8, r5
 8006254:	bf38      	it	cc
 8006256:	2100      	movcc	r1, #0
 8006258:	440b      	add	r3, r1
 800625a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800625e:	b191      	cbz	r1, 8006286 <__mdiff+0x11a>
 8006260:	6117      	str	r7, [r2, #16]
 8006262:	e79d      	b.n	80061a0 <__mdiff+0x34>
 8006264:	f854 1b04 	ldr.w	r1, [r4], #4
 8006268:	46e6      	mov	lr, ip
 800626a:	0c08      	lsrs	r0, r1, #16
 800626c:	fa1c fc81 	uxtah	ip, ip, r1
 8006270:	4471      	add	r1, lr
 8006272:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006276:	b289      	uxth	r1, r1
 8006278:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800627c:	f846 1b04 	str.w	r1, [r6], #4
 8006280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006284:	e7dd      	b.n	8006242 <__mdiff+0xd6>
 8006286:	3f01      	subs	r7, #1
 8006288:	e7e7      	b.n	800625a <__mdiff+0xee>
 800628a:	bf00      	nop
 800628c:	08008d14 	.word	0x08008d14
 8006290:	08008d25 	.word	0x08008d25

08006294 <__d2b>:
 8006294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006298:	460f      	mov	r7, r1
 800629a:	2101      	movs	r1, #1
 800629c:	ec59 8b10 	vmov	r8, r9, d0
 80062a0:	4616      	mov	r6, r2
 80062a2:	f7ff fcd5 	bl	8005c50 <_Balloc>
 80062a6:	4604      	mov	r4, r0
 80062a8:	b930      	cbnz	r0, 80062b8 <__d2b+0x24>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b23      	ldr	r3, [pc, #140]	@ (800633c <__d2b+0xa8>)
 80062ae:	4824      	ldr	r0, [pc, #144]	@ (8006340 <__d2b+0xac>)
 80062b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80062b4:	f000 fad6 	bl	8006864 <__assert_func>
 80062b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062c0:	b10d      	cbz	r5, 80062c6 <__d2b+0x32>
 80062c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	f1b8 0300 	subs.w	r3, r8, #0
 80062cc:	d023      	beq.n	8006316 <__d2b+0x82>
 80062ce:	4668      	mov	r0, sp
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	f7ff fd84 	bl	8005dde <__lo0bits>
 80062d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80062da:	b1d0      	cbz	r0, 8006312 <__d2b+0x7e>
 80062dc:	f1c0 0320 	rsb	r3, r0, #32
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	430b      	orrs	r3, r1
 80062e6:	40c2      	lsrs	r2, r0
 80062e8:	6163      	str	r3, [r4, #20]
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	61a3      	str	r3, [r4, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2201      	moveq	r2, #1
 80062f6:	2202      	movne	r2, #2
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	b1a5      	cbz	r5, 8006326 <__d2b+0x92>
 80062fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006300:	4405      	add	r5, r0
 8006302:	603d      	str	r5, [r7, #0]
 8006304:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4620      	mov	r0, r4
 800630c:	b003      	add	sp, #12
 800630e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006312:	6161      	str	r1, [r4, #20]
 8006314:	e7ea      	b.n	80062ec <__d2b+0x58>
 8006316:	a801      	add	r0, sp, #4
 8006318:	f7ff fd61 	bl	8005dde <__lo0bits>
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	3020      	adds	r0, #32
 8006322:	2201      	movs	r2, #1
 8006324:	e7e8      	b.n	80062f8 <__d2b+0x64>
 8006326:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800632a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800632e:	6038      	str	r0, [r7, #0]
 8006330:	6918      	ldr	r0, [r3, #16]
 8006332:	f7ff fd35 	bl	8005da0 <__hi0bits>
 8006336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800633a:	e7e5      	b.n	8006308 <__d2b+0x74>
 800633c:	08008d14 	.word	0x08008d14
 8006340:	08008d25 	.word	0x08008d25

08006344 <__sfputc_r>:
 8006344:	6893      	ldr	r3, [r2, #8]
 8006346:	3b01      	subs	r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	b410      	push	{r4}
 800634c:	6093      	str	r3, [r2, #8]
 800634e:	da08      	bge.n	8006362 <__sfputc_r+0x1e>
 8006350:	6994      	ldr	r4, [r2, #24]
 8006352:	42a3      	cmp	r3, r4
 8006354:	db01      	blt.n	800635a <__sfputc_r+0x16>
 8006356:	290a      	cmp	r1, #10
 8006358:	d103      	bne.n	8006362 <__sfputc_r+0x1e>
 800635a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800635e:	f7fe bc08 	b.w	8004b72 <__swbuf_r>
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	1c58      	adds	r0, r3, #1
 8006366:	6010      	str	r0, [r2, #0]
 8006368:	7019      	strb	r1, [r3, #0]
 800636a:	4608      	mov	r0, r1
 800636c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006370:	4770      	bx	lr

08006372 <__sfputs_r>:
 8006372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	4614      	mov	r4, r2
 800637a:	18d5      	adds	r5, r2, r3
 800637c:	42ac      	cmp	r4, r5
 800637e:	d101      	bne.n	8006384 <__sfputs_r+0x12>
 8006380:	2000      	movs	r0, #0
 8006382:	e007      	b.n	8006394 <__sfputs_r+0x22>
 8006384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006388:	463a      	mov	r2, r7
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff ffda 	bl	8006344 <__sfputc_r>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d1f3      	bne.n	800637c <__sfputs_r+0xa>
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006398 <_vfiprintf_r>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	460d      	mov	r5, r1
 800639e:	b09d      	sub	sp, #116	@ 0x74
 80063a0:	4614      	mov	r4, r2
 80063a2:	4698      	mov	r8, r3
 80063a4:	4606      	mov	r6, r0
 80063a6:	b118      	cbz	r0, 80063b0 <_vfiprintf_r+0x18>
 80063a8:	6a03      	ldr	r3, [r0, #32]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_vfiprintf_r+0x18>
 80063ac:	f7fe fa9a 	bl	80048e4 <__sinit>
 80063b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b2:	07d9      	lsls	r1, r3, #31
 80063b4:	d405      	bmi.n	80063c2 <_vfiprintf_r+0x2a>
 80063b6:	89ab      	ldrh	r3, [r5, #12]
 80063b8:	059a      	lsls	r2, r3, #22
 80063ba:	d402      	bmi.n	80063c2 <_vfiprintf_r+0x2a>
 80063bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063be:	f7fe fcea 	bl	8004d96 <__retarget_lock_acquire_recursive>
 80063c2:	89ab      	ldrh	r3, [r5, #12]
 80063c4:	071b      	lsls	r3, r3, #28
 80063c6:	d501      	bpl.n	80063cc <_vfiprintf_r+0x34>
 80063c8:	692b      	ldr	r3, [r5, #16]
 80063ca:	b99b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x5c>
 80063cc:	4629      	mov	r1, r5
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7fe fc0e 	bl	8004bf0 <__swsetup_r>
 80063d4:	b170      	cbz	r0, 80063f4 <_vfiprintf_r+0x5c>
 80063d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063d8:	07dc      	lsls	r4, r3, #31
 80063da:	d504      	bpl.n	80063e6 <_vfiprintf_r+0x4e>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	b01d      	add	sp, #116	@ 0x74
 80063e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	0598      	lsls	r0, r3, #22
 80063ea:	d4f7      	bmi.n	80063dc <_vfiprintf_r+0x44>
 80063ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ee:	f7fe fcd3 	bl	8004d98 <__retarget_lock_release_recursive>
 80063f2:	e7f3      	b.n	80063dc <_vfiprintf_r+0x44>
 80063f4:	2300      	movs	r3, #0
 80063f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f8:	2320      	movs	r3, #32
 80063fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006402:	2330      	movs	r3, #48	@ 0x30
 8006404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065b4 <_vfiprintf_r+0x21c>
 8006408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800640c:	f04f 0901 	mov.w	r9, #1
 8006410:	4623      	mov	r3, r4
 8006412:	469a      	mov	sl, r3
 8006414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006418:	b10a      	cbz	r2, 800641e <_vfiprintf_r+0x86>
 800641a:	2a25      	cmp	r2, #37	@ 0x25
 800641c:	d1f9      	bne.n	8006412 <_vfiprintf_r+0x7a>
 800641e:	ebba 0b04 	subs.w	fp, sl, r4
 8006422:	d00b      	beq.n	800643c <_vfiprintf_r+0xa4>
 8006424:	465b      	mov	r3, fp
 8006426:	4622      	mov	r2, r4
 8006428:	4629      	mov	r1, r5
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ffa1 	bl	8006372 <__sfputs_r>
 8006430:	3001      	adds	r0, #1
 8006432:	f000 80a7 	beq.w	8006584 <_vfiprintf_r+0x1ec>
 8006436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006438:	445a      	add	r2, fp
 800643a:	9209      	str	r2, [sp, #36]	@ 0x24
 800643c:	f89a 3000 	ldrb.w	r3, [sl]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 809f 	beq.w	8006584 <_vfiprintf_r+0x1ec>
 8006446:	2300      	movs	r3, #0
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006450:	f10a 0a01 	add.w	sl, sl, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800645c:	931a      	str	r3, [sp, #104]	@ 0x68
 800645e:	4654      	mov	r4, sl
 8006460:	2205      	movs	r2, #5
 8006462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006466:	4853      	ldr	r0, [pc, #332]	@ (80065b4 <_vfiprintf_r+0x21c>)
 8006468:	f7f9 fed2 	bl	8000210 <memchr>
 800646c:	9a04      	ldr	r2, [sp, #16]
 800646e:	b9d8      	cbnz	r0, 80064a8 <_vfiprintf_r+0x110>
 8006470:	06d1      	lsls	r1, r2, #27
 8006472:	bf44      	itt	mi
 8006474:	2320      	movmi	r3, #32
 8006476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800647a:	0713      	lsls	r3, r2, #28
 800647c:	bf44      	itt	mi
 800647e:	232b      	movmi	r3, #43	@ 0x2b
 8006480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006484:	f89a 3000 	ldrb.w	r3, [sl]
 8006488:	2b2a      	cmp	r3, #42	@ 0x2a
 800648a:	d015      	beq.n	80064b8 <_vfiprintf_r+0x120>
 800648c:	9a07      	ldr	r2, [sp, #28]
 800648e:	4654      	mov	r4, sl
 8006490:	2000      	movs	r0, #0
 8006492:	f04f 0c0a 	mov.w	ip, #10
 8006496:	4621      	mov	r1, r4
 8006498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649c:	3b30      	subs	r3, #48	@ 0x30
 800649e:	2b09      	cmp	r3, #9
 80064a0:	d94b      	bls.n	800653a <_vfiprintf_r+0x1a2>
 80064a2:	b1b0      	cbz	r0, 80064d2 <_vfiprintf_r+0x13a>
 80064a4:	9207      	str	r2, [sp, #28]
 80064a6:	e014      	b.n	80064d2 <_vfiprintf_r+0x13a>
 80064a8:	eba0 0308 	sub.w	r3, r0, r8
 80064ac:	fa09 f303 	lsl.w	r3, r9, r3
 80064b0:	4313      	orrs	r3, r2
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	46a2      	mov	sl, r4
 80064b6:	e7d2      	b.n	800645e <_vfiprintf_r+0xc6>
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	1d19      	adds	r1, r3, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	9103      	str	r1, [sp, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bfbb      	ittet	lt
 80064c4:	425b      	neglt	r3, r3
 80064c6:	f042 0202 	orrlt.w	r2, r2, #2
 80064ca:	9307      	strge	r3, [sp, #28]
 80064cc:	9307      	strlt	r3, [sp, #28]
 80064ce:	bfb8      	it	lt
 80064d0:	9204      	strlt	r2, [sp, #16]
 80064d2:	7823      	ldrb	r3, [r4, #0]
 80064d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d6:	d10a      	bne.n	80064ee <_vfiprintf_r+0x156>
 80064d8:	7863      	ldrb	r3, [r4, #1]
 80064da:	2b2a      	cmp	r3, #42	@ 0x2a
 80064dc:	d132      	bne.n	8006544 <_vfiprintf_r+0x1ac>
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ea:	3402      	adds	r4, #2
 80064ec:	9305      	str	r3, [sp, #20]
 80064ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065c4 <_vfiprintf_r+0x22c>
 80064f2:	7821      	ldrb	r1, [r4, #0]
 80064f4:	2203      	movs	r2, #3
 80064f6:	4650      	mov	r0, sl
 80064f8:	f7f9 fe8a 	bl	8000210 <memchr>
 80064fc:	b138      	cbz	r0, 800650e <_vfiprintf_r+0x176>
 80064fe:	9b04      	ldr	r3, [sp, #16]
 8006500:	eba0 000a 	sub.w	r0, r0, sl
 8006504:	2240      	movs	r2, #64	@ 0x40
 8006506:	4082      	lsls	r2, r0
 8006508:	4313      	orrs	r3, r2
 800650a:	3401      	adds	r4, #1
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006512:	4829      	ldr	r0, [pc, #164]	@ (80065b8 <_vfiprintf_r+0x220>)
 8006514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006518:	2206      	movs	r2, #6
 800651a:	f7f9 fe79 	bl	8000210 <memchr>
 800651e:	2800      	cmp	r0, #0
 8006520:	d03f      	beq.n	80065a2 <_vfiprintf_r+0x20a>
 8006522:	4b26      	ldr	r3, [pc, #152]	@ (80065bc <_vfiprintf_r+0x224>)
 8006524:	bb1b      	cbnz	r3, 800656e <_vfiprintf_r+0x1d6>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	3307      	adds	r3, #7
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	3308      	adds	r3, #8
 8006530:	9303      	str	r3, [sp, #12]
 8006532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006534:	443b      	add	r3, r7
 8006536:	9309      	str	r3, [sp, #36]	@ 0x24
 8006538:	e76a      	b.n	8006410 <_vfiprintf_r+0x78>
 800653a:	fb0c 3202 	mla	r2, ip, r2, r3
 800653e:	460c      	mov	r4, r1
 8006540:	2001      	movs	r0, #1
 8006542:	e7a8      	b.n	8006496 <_vfiprintf_r+0xfe>
 8006544:	2300      	movs	r3, #0
 8006546:	3401      	adds	r4, #1
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	4619      	mov	r1, r3
 800654c:	f04f 0c0a 	mov.w	ip, #10
 8006550:	4620      	mov	r0, r4
 8006552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006556:	3a30      	subs	r2, #48	@ 0x30
 8006558:	2a09      	cmp	r2, #9
 800655a:	d903      	bls.n	8006564 <_vfiprintf_r+0x1cc>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0c6      	beq.n	80064ee <_vfiprintf_r+0x156>
 8006560:	9105      	str	r1, [sp, #20]
 8006562:	e7c4      	b.n	80064ee <_vfiprintf_r+0x156>
 8006564:	fb0c 2101 	mla	r1, ip, r1, r2
 8006568:	4604      	mov	r4, r0
 800656a:	2301      	movs	r3, #1
 800656c:	e7f0      	b.n	8006550 <_vfiprintf_r+0x1b8>
 800656e:	ab03      	add	r3, sp, #12
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	462a      	mov	r2, r5
 8006574:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <_vfiprintf_r+0x228>)
 8006576:	a904      	add	r1, sp, #16
 8006578:	4630      	mov	r0, r6
 800657a:	f7fd fd71 	bl	8004060 <_printf_float>
 800657e:	4607      	mov	r7, r0
 8006580:	1c78      	adds	r0, r7, #1
 8006582:	d1d6      	bne.n	8006532 <_vfiprintf_r+0x19a>
 8006584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d405      	bmi.n	8006596 <_vfiprintf_r+0x1fe>
 800658a:	89ab      	ldrh	r3, [r5, #12]
 800658c:	059a      	lsls	r2, r3, #22
 800658e:	d402      	bmi.n	8006596 <_vfiprintf_r+0x1fe>
 8006590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006592:	f7fe fc01 	bl	8004d98 <__retarget_lock_release_recursive>
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	065b      	lsls	r3, r3, #25
 800659a:	f53f af1f 	bmi.w	80063dc <_vfiprintf_r+0x44>
 800659e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065a0:	e71e      	b.n	80063e0 <_vfiprintf_r+0x48>
 80065a2:	ab03      	add	r3, sp, #12
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	462a      	mov	r2, r5
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <_vfiprintf_r+0x228>)
 80065aa:	a904      	add	r1, sp, #16
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7fd ffef 	bl	8004590 <_printf_i>
 80065b2:	e7e4      	b.n	800657e <_vfiprintf_r+0x1e6>
 80065b4:	08008d7e 	.word	0x08008d7e
 80065b8:	08008d88 	.word	0x08008d88
 80065bc:	08004061 	.word	0x08004061
 80065c0:	08006373 	.word	0x08006373
 80065c4:	08008d84 	.word	0x08008d84

080065c8 <__sflush_r>:
 80065c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	0716      	lsls	r6, r2, #28
 80065d2:	4605      	mov	r5, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d454      	bmi.n	8006682 <__sflush_r+0xba>
 80065d8:	684b      	ldr	r3, [r1, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x1c>
 80065de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd48      	ble.n	8006676 <__sflush_r+0xae>
 80065e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d045      	beq.n	8006676 <__sflush_r+0xae>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d030      	beq.n	800665a <__sflush_r+0x92>
 80065f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0759      	lsls	r1, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x44>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x44>
 8006608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006610:	6a21      	ldr	r1, [r4, #32]
 8006612:	4628      	mov	r0, r5
 8006614:	47b0      	blx	r6
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	d106      	bne.n	800662a <__sflush_r+0x62>
 800661c:	6829      	ldr	r1, [r5, #0]
 800661e:	291d      	cmp	r1, #29
 8006620:	d82b      	bhi.n	800667a <__sflush_r+0xb2>
 8006622:	4a2a      	ldr	r2, [pc, #168]	@ (80066cc <__sflush_r+0x104>)
 8006624:	40ca      	lsrs	r2, r1
 8006626:	07d6      	lsls	r6, r2, #31
 8006628:	d527      	bpl.n	800667a <__sflush_r+0xb2>
 800662a:	2200      	movs	r2, #0
 800662c:	6062      	str	r2, [r4, #4]
 800662e:	04d9      	lsls	r1, r3, #19
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	d504      	bpl.n	8006640 <__sflush_r+0x78>
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	d101      	bne.n	800663e <__sflush_r+0x76>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	b903      	cbnz	r3, 8006640 <__sflush_r+0x78>
 800663e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006642:	602f      	str	r7, [r5, #0]
 8006644:	b1b9      	cbz	r1, 8006676 <__sflush_r+0xae>
 8006646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <__sflush_r+0x8c>
 800664e:	4628      	mov	r0, r5
 8006650:	f7ff f9fe 	bl	8005a50 <_free_r>
 8006654:	2300      	movs	r3, #0
 8006656:	6363      	str	r3, [r4, #52]	@ 0x34
 8006658:	e00d      	b.n	8006676 <__sflush_r+0xae>
 800665a:	2301      	movs	r3, #1
 800665c:	4628      	mov	r0, r5
 800665e:	47b0      	blx	r6
 8006660:	4602      	mov	r2, r0
 8006662:	1c50      	adds	r0, r2, #1
 8006664:	d1c9      	bne.n	80065fa <__sflush_r+0x32>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0c6      	beq.n	80065fa <__sflush_r+0x32>
 800666c:	2b1d      	cmp	r3, #29
 800666e:	d001      	beq.n	8006674 <__sflush_r+0xac>
 8006670:	2b16      	cmp	r3, #22
 8006672:	d11e      	bne.n	80066b2 <__sflush_r+0xea>
 8006674:	602f      	str	r7, [r5, #0]
 8006676:	2000      	movs	r0, #0
 8006678:	e022      	b.n	80066c0 <__sflush_r+0xf8>
 800667a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667e:	b21b      	sxth	r3, r3
 8006680:	e01b      	b.n	80066ba <__sflush_r+0xf2>
 8006682:	690f      	ldr	r7, [r1, #16]
 8006684:	2f00      	cmp	r7, #0
 8006686:	d0f6      	beq.n	8006676 <__sflush_r+0xae>
 8006688:	0793      	lsls	r3, r2, #30
 800668a:	680e      	ldr	r6, [r1, #0]
 800668c:	bf08      	it	eq
 800668e:	694b      	ldreq	r3, [r1, #20]
 8006690:	600f      	str	r7, [r1, #0]
 8006692:	bf18      	it	ne
 8006694:	2300      	movne	r3, #0
 8006696:	eba6 0807 	sub.w	r8, r6, r7
 800669a:	608b      	str	r3, [r1, #8]
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	dde9      	ble.n	8006676 <__sflush_r+0xae>
 80066a2:	6a21      	ldr	r1, [r4, #32]
 80066a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066a6:	4643      	mov	r3, r8
 80066a8:	463a      	mov	r2, r7
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b0      	blx	r6
 80066ae:	2800      	cmp	r0, #0
 80066b0:	dc08      	bgt.n	80066c4 <__sflush_r+0xfc>
 80066b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	4407      	add	r7, r0
 80066c6:	eba8 0800 	sub.w	r8, r8, r0
 80066ca:	e7e7      	b.n	800669c <__sflush_r+0xd4>
 80066cc:	20400001 	.word	0x20400001

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b913      	cbnz	r3, 80066e0 <_fflush_r+0x10>
 80066da:	2500      	movs	r5, #0
 80066dc:	4628      	mov	r0, r5
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	b118      	cbz	r0, 80066ea <_fflush_r+0x1a>
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	b90b      	cbnz	r3, 80066ea <_fflush_r+0x1a>
 80066e6:	f7fe f8fd 	bl	80048e4 <__sinit>
 80066ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f3      	beq.n	80066da <_fflush_r+0xa>
 80066f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d404      	bmi.n	8006702 <_fflush_r+0x32>
 80066f8:	0599      	lsls	r1, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_fflush_r+0x32>
 80066fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066fe:	f7fe fb4a 	bl	8004d96 <__retarget_lock_acquire_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff5f 	bl	80065c8 <__sflush_r>
 800670a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	4605      	mov	r5, r0
 8006710:	d4e4      	bmi.n	80066dc <_fflush_r+0xc>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4e1      	bmi.n	80066dc <_fflush_r+0xc>
 8006718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671a:	f7fe fb3d 	bl	8004d98 <__retarget_lock_release_recursive>
 800671e:	e7dd      	b.n	80066dc <_fflush_r+0xc>

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2900      	cmp	r1, #0
 800672a:	b096      	sub	sp, #88	@ 0x58
 800672c:	4615      	mov	r5, r2
 800672e:	461e      	mov	r6, r3
 8006730:	da0d      	bge.n	800674e <__swhatbuf_r+0x2e>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	bf14      	ite	ne
 800673e:	2340      	movne	r3, #64	@ 0x40
 8006740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006744:	2000      	movs	r0, #0
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	b016      	add	sp, #88	@ 0x58
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	466a      	mov	r2, sp
 8006750:	f000 f848 	bl	80067e4 <_fstat_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	dbec      	blt.n	8006732 <__swhatbuf_r+0x12>
 8006758:	9901      	ldr	r1, [sp, #4]
 800675a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800675e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006762:	4259      	negs	r1, r3
 8006764:	4159      	adcs	r1, r3
 8006766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800676a:	e7eb      	b.n	8006744 <__swhatbuf_r+0x24>

0800676c <__smakebuf_r>:
 800676c:	898b      	ldrh	r3, [r1, #12]
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	079d      	lsls	r5, r3, #30
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	d507      	bpl.n	8006788 <__smakebuf_r+0x1c>
 8006778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2301      	movs	r3, #1
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	ab01      	add	r3, sp, #4
 800678a:	466a      	mov	r2, sp
 800678c:	f7ff ffc8 	bl	8006720 <__swhatbuf_r>
 8006790:	9f00      	ldr	r7, [sp, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff f9ce 	bl	8005b38 <_malloc_r>
 800679c:	b948      	cbnz	r0, 80067b2 <__smakebuf_r+0x46>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	059a      	lsls	r2, r3, #22
 80067a4:	d4ee      	bmi.n	8006784 <__smakebuf_r+0x18>
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	e7e2      	b.n	8006778 <__smakebuf_r+0xc>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	6020      	str	r0, [r4, #0]
 80067b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067c2:	b15b      	cbz	r3, 80067dc <__smakebuf_r+0x70>
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f81d 	bl	8006808 <_isatty_r>
 80067ce:	b128      	cbz	r0, 80067dc <__smakebuf_r+0x70>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	431d      	orrs	r5, r3
 80067e0:	81a5      	strh	r5, [r4, #12]
 80067e2:	e7cf      	b.n	8006784 <__smakebuf_r+0x18>

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	@ (8006804 <_fstat_r+0x20>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fb f999 	bl	8001b28 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	200003f8 	.word	0x200003f8

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_isatty_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fb f998 	bl	8001b48 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200003f8 	.word	0x200003f8

08006828 <_sbrk_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	@ (8006844 <_sbrk_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fb f9a0 	bl	8001b78 <_sbrk>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_sbrk_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_sbrk_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	200003f8 	.word	0x200003f8

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <__assert_func>:
 8006864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006866:	4614      	mov	r4, r2
 8006868:	461a      	mov	r2, r3
 800686a:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <__assert_func+0x2c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4605      	mov	r5, r0
 8006870:	68d8      	ldr	r0, [r3, #12]
 8006872:	b14c      	cbz	r4, 8006888 <__assert_func+0x24>
 8006874:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <__assert_func+0x30>)
 8006876:	9100      	str	r1, [sp, #0]
 8006878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800687c:	4906      	ldr	r1, [pc, #24]	@ (8006898 <__assert_func+0x34>)
 800687e:	462b      	mov	r3, r5
 8006880:	f000 f842 	bl	8006908 <fiprintf>
 8006884:	f000 f852 	bl	800692c <abort>
 8006888:	4b04      	ldr	r3, [pc, #16]	@ (800689c <__assert_func+0x38>)
 800688a:	461c      	mov	r4, r3
 800688c:	e7f3      	b.n	8006876 <__assert_func+0x12>
 800688e:	bf00      	nop
 8006890:	20000018 	.word	0x20000018
 8006894:	08008d99 	.word	0x08008d99
 8006898:	08008da6 	.word	0x08008da6
 800689c:	08008dd4 	.word	0x08008dd4

080068a0 <_calloc_r>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	fba1 5402 	umull	r5, r4, r1, r2
 80068a6:	b934      	cbnz	r4, 80068b6 <_calloc_r+0x16>
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7ff f945 	bl	8005b38 <_malloc_r>
 80068ae:	4606      	mov	r6, r0
 80068b0:	b928      	cbnz	r0, 80068be <_calloc_r+0x1e>
 80068b2:	4630      	mov	r0, r6
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
 80068b6:	220c      	movs	r2, #12
 80068b8:	6002      	str	r2, [r0, #0]
 80068ba:	2600      	movs	r6, #0
 80068bc:	e7f9      	b.n	80068b2 <_calloc_r+0x12>
 80068be:	462a      	mov	r2, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7fe f9eb 	bl	8004c9c <memset>
 80068c6:	e7f4      	b.n	80068b2 <_calloc_r+0x12>

080068c8 <__ascii_mbtowc>:
 80068c8:	b082      	sub	sp, #8
 80068ca:	b901      	cbnz	r1, 80068ce <__ascii_mbtowc+0x6>
 80068cc:	a901      	add	r1, sp, #4
 80068ce:	b142      	cbz	r2, 80068e2 <__ascii_mbtowc+0x1a>
 80068d0:	b14b      	cbz	r3, 80068e6 <__ascii_mbtowc+0x1e>
 80068d2:	7813      	ldrb	r3, [r2, #0]
 80068d4:	600b      	str	r3, [r1, #0]
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	1e10      	subs	r0, r2, #0
 80068da:	bf18      	it	ne
 80068dc:	2001      	movne	r0, #1
 80068de:	b002      	add	sp, #8
 80068e0:	4770      	bx	lr
 80068e2:	4610      	mov	r0, r2
 80068e4:	e7fb      	b.n	80068de <__ascii_mbtowc+0x16>
 80068e6:	f06f 0001 	mvn.w	r0, #1
 80068ea:	e7f8      	b.n	80068de <__ascii_mbtowc+0x16>

080068ec <__ascii_wctomb>:
 80068ec:	4603      	mov	r3, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	b141      	cbz	r1, 8006904 <__ascii_wctomb+0x18>
 80068f2:	2aff      	cmp	r2, #255	@ 0xff
 80068f4:	d904      	bls.n	8006900 <__ascii_wctomb+0x14>
 80068f6:	228a      	movs	r2, #138	@ 0x8a
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	4770      	bx	lr
 8006900:	700a      	strb	r2, [r1, #0]
 8006902:	2001      	movs	r0, #1
 8006904:	4770      	bx	lr
	...

08006908 <fiprintf>:
 8006908:	b40e      	push	{r1, r2, r3}
 800690a:	b503      	push	{r0, r1, lr}
 800690c:	4601      	mov	r1, r0
 800690e:	ab03      	add	r3, sp, #12
 8006910:	4805      	ldr	r0, [pc, #20]	@ (8006928 <fiprintf+0x20>)
 8006912:	f853 2b04 	ldr.w	r2, [r3], #4
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	f7ff fd3d 	bl	8006398 <_vfiprintf_r>
 800691e:	b002      	add	sp, #8
 8006920:	f85d eb04 	ldr.w	lr, [sp], #4
 8006924:	b003      	add	sp, #12
 8006926:	4770      	bx	lr
 8006928:	20000018 	.word	0x20000018

0800692c <abort>:
 800692c:	b508      	push	{r3, lr}
 800692e:	2006      	movs	r0, #6
 8006930:	f000 f82c 	bl	800698c <raise>
 8006934:	2001      	movs	r0, #1
 8006936:	f7fb f8c3 	bl	8001ac0 <_exit>

0800693a <_raise_r>:
 800693a:	291f      	cmp	r1, #31
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4605      	mov	r5, r0
 8006940:	460c      	mov	r4, r1
 8006942:	d904      	bls.n	800694e <_raise_r+0x14>
 8006944:	2316      	movs	r3, #22
 8006946:	6003      	str	r3, [r0, #0]
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	bd38      	pop	{r3, r4, r5, pc}
 800694e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006950:	b112      	cbz	r2, 8006958 <_raise_r+0x1e>
 8006952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006956:	b94b      	cbnz	r3, 800696c <_raise_r+0x32>
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f831 	bl	80069c0 <_getpid_r>
 800695e:	4622      	mov	r2, r4
 8006960:	4601      	mov	r1, r0
 8006962:	4628      	mov	r0, r5
 8006964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006968:	f000 b818 	b.w	800699c <_kill_r>
 800696c:	2b01      	cmp	r3, #1
 800696e:	d00a      	beq.n	8006986 <_raise_r+0x4c>
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	d103      	bne.n	800697c <_raise_r+0x42>
 8006974:	2316      	movs	r3, #22
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	2001      	movs	r0, #1
 800697a:	e7e7      	b.n	800694c <_raise_r+0x12>
 800697c:	2100      	movs	r1, #0
 800697e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006982:	4620      	mov	r0, r4
 8006984:	4798      	blx	r3
 8006986:	2000      	movs	r0, #0
 8006988:	e7e0      	b.n	800694c <_raise_r+0x12>
	...

0800698c <raise>:
 800698c:	4b02      	ldr	r3, [pc, #8]	@ (8006998 <raise+0xc>)
 800698e:	4601      	mov	r1, r0
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f7ff bfd2 	b.w	800693a <_raise_r>
 8006996:	bf00      	nop
 8006998:	20000018 	.word	0x20000018

0800699c <_kill_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_kill_r+0x20>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	f7fb f879 	bl	8001aa0 <_kill>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d102      	bne.n	80069b8 <_kill_r+0x1c>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	b103      	cbz	r3, 80069b8 <_kill_r+0x1c>
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	bd38      	pop	{r3, r4, r5, pc}
 80069ba:	bf00      	nop
 80069bc:	200003f8 	.word	0x200003f8

080069c0 <_getpid_r>:
 80069c0:	f7fb b866 	b.w	8001a90 <_getpid>

080069c4 <pow>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	ed2d 8b02 	vpush	{d8}
 80069ca:	eeb0 8a40 	vmov.f32	s16, s0
 80069ce:	eef0 8a60 	vmov.f32	s17, s1
 80069d2:	ec55 4b11 	vmov	r4, r5, d1
 80069d6:	f000 fd43 	bl	8007460 <__ieee754_pow>
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	ec57 6b10 	vmov	r6, r7, d0
 80069e6:	f7fa f8c1 	bl	8000b6c <__aeabi_dcmpun>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d13b      	bne.n	8006a66 <pow+0xa2>
 80069ee:	ec51 0b18 	vmov	r0, r1, d8
 80069f2:	2200      	movs	r2, #0
 80069f4:	2300      	movs	r3, #0
 80069f6:	f7fa f887 	bl	8000b08 <__aeabi_dcmpeq>
 80069fa:	b1b8      	cbz	r0, 8006a2c <pow+0x68>
 80069fc:	2200      	movs	r2, #0
 80069fe:	2300      	movs	r3, #0
 8006a00:	4620      	mov	r0, r4
 8006a02:	4629      	mov	r1, r5
 8006a04:	f7fa f880 	bl	8000b08 <__aeabi_dcmpeq>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d146      	bne.n	8006a9a <pow+0xd6>
 8006a0c:	ec45 4b10 	vmov	d0, r4, r5
 8006a10:	f000 fabe 	bl	8006f90 <finite>
 8006a14:	b338      	cbz	r0, 8006a66 <pow+0xa2>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7fa f87d 	bl	8000b1c <__aeabi_dcmplt>
 8006a22:	b300      	cbz	r0, 8006a66 <pow+0xa2>
 8006a24:	f7fe f98c 	bl	8004d40 <__errno>
 8006a28:	2322      	movs	r3, #34	@ 0x22
 8006a2a:	e01b      	b.n	8006a64 <pow+0xa0>
 8006a2c:	ec47 6b10 	vmov	d0, r6, r7
 8006a30:	f000 faae 	bl	8006f90 <finite>
 8006a34:	b9e0      	cbnz	r0, 8006a70 <pow+0xac>
 8006a36:	eeb0 0a48 	vmov.f32	s0, s16
 8006a3a:	eef0 0a68 	vmov.f32	s1, s17
 8006a3e:	f000 faa7 	bl	8006f90 <finite>
 8006a42:	b1a8      	cbz	r0, 8006a70 <pow+0xac>
 8006a44:	ec45 4b10 	vmov	d0, r4, r5
 8006a48:	f000 faa2 	bl	8006f90 <finite>
 8006a4c:	b180      	cbz	r0, 8006a70 <pow+0xac>
 8006a4e:	4632      	mov	r2, r6
 8006a50:	463b      	mov	r3, r7
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7fa f889 	bl	8000b6c <__aeabi_dcmpun>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d0e2      	beq.n	8006a24 <pow+0x60>
 8006a5e:	f7fe f96f 	bl	8004d40 <__errno>
 8006a62:	2321      	movs	r3, #33	@ 0x21
 8006a64:	6003      	str	r3, [r0, #0]
 8006a66:	ecbd 8b02 	vpop	{d8}
 8006a6a:	ec47 6b10 	vmov	d0, r6, r7
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	2200      	movs	r2, #0
 8006a72:	2300      	movs	r3, #0
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7fa f846 	bl	8000b08 <__aeabi_dcmpeq>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d0f2      	beq.n	8006a66 <pow+0xa2>
 8006a80:	eeb0 0a48 	vmov.f32	s0, s16
 8006a84:	eef0 0a68 	vmov.f32	s1, s17
 8006a88:	f000 fa82 	bl	8006f90 <finite>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d0ea      	beq.n	8006a66 <pow+0xa2>
 8006a90:	ec45 4b10 	vmov	d0, r4, r5
 8006a94:	f000 fa7c 	bl	8006f90 <finite>
 8006a98:	e7c3      	b.n	8006a22 <pow+0x5e>
 8006a9a:	4f01      	ldr	r7, [pc, #4]	@ (8006aa0 <pow+0xdc>)
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	e7e2      	b.n	8006a66 <pow+0xa2>
 8006aa0:	3ff00000 	.word	0x3ff00000

08006aa4 <sqrt>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	ed2d 8b02 	vpush	{d8}
 8006aaa:	ec55 4b10 	vmov	r4, r5, d0
 8006aae:	f000 fa7b 	bl	8006fa8 <__ieee754_sqrt>
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	eeb0 8a40 	vmov.f32	s16, s0
 8006abe:	eef0 8a60 	vmov.f32	s17, s1
 8006ac2:	f7fa f853 	bl	8000b6c <__aeabi_dcmpun>
 8006ac6:	b990      	cbnz	r0, 8006aee <sqrt+0x4a>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7fa f824 	bl	8000b1c <__aeabi_dcmplt>
 8006ad4:	b158      	cbz	r0, 8006aee <sqrt+0x4a>
 8006ad6:	f7fe f933 	bl	8004d40 <__errno>
 8006ada:	2321      	movs	r3, #33	@ 0x21
 8006adc:	6003      	str	r3, [r0, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f7f9 fed1 	bl	800088c <__aeabi_ddiv>
 8006aea:	ec41 0b18 	vmov	d8, r0, r1
 8006aee:	eeb0 0a48 	vmov.f32	s0, s16
 8006af2:	eef0 0a68 	vmov.f32	s1, s17
 8006af6:	ecbd 8b02 	vpop	{d8}
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	0000      	movs	r0, r0
	...

08006b00 <atan>:
 8006b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	ec55 4b10 	vmov	r4, r5, d0
 8006b08:	4bbf      	ldr	r3, [pc, #764]	@ (8006e08 <atan+0x308>)
 8006b0a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	46ab      	mov	fp, r5
 8006b12:	d918      	bls.n	8006b46 <atan+0x46>
 8006b14:	4bbd      	ldr	r3, [pc, #756]	@ (8006e0c <atan+0x30c>)
 8006b16:	429e      	cmp	r6, r3
 8006b18:	d801      	bhi.n	8006b1e <atan+0x1e>
 8006b1a:	d109      	bne.n	8006b30 <atan+0x30>
 8006b1c:	b144      	cbz	r4, 8006b30 <atan+0x30>
 8006b1e:	4622      	mov	r2, r4
 8006b20:	462b      	mov	r3, r5
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fbd1 	bl	80002cc <__adddf3>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	e006      	b.n	8006b3e <atan+0x3e>
 8006b30:	f1bb 0f00 	cmp.w	fp, #0
 8006b34:	f340 812b 	ble.w	8006d8e <atan+0x28e>
 8006b38:	a597      	add	r5, pc, #604	@ (adr r5, 8006d98 <atan+0x298>)
 8006b3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b3e:	ec45 4b10 	vmov	d0, r4, r5
 8006b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	4bb2      	ldr	r3, [pc, #712]	@ (8006e10 <atan+0x310>)
 8006b48:	429e      	cmp	r6, r3
 8006b4a:	d813      	bhi.n	8006b74 <atan+0x74>
 8006b4c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006b50:	429e      	cmp	r6, r3
 8006b52:	d80c      	bhi.n	8006b6e <atan+0x6e>
 8006b54:	a392      	add	r3, pc, #584	@ (adr r3, 8006da0 <atan+0x2a0>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fbb5 	bl	80002cc <__adddf3>
 8006b62:	4bac      	ldr	r3, [pc, #688]	@ (8006e14 <atan+0x314>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	f7f9 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d1e7      	bne.n	8006b3e <atan+0x3e>
 8006b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8006b72:	e029      	b.n	8006bc8 <atan+0xc8>
 8006b74:	f000 f9b0 	bl	8006ed8 <fabs>
 8006b78:	4ba7      	ldr	r3, [pc, #668]	@ (8006e18 <atan+0x318>)
 8006b7a:	429e      	cmp	r6, r3
 8006b7c:	ec55 4b10 	vmov	r4, r5, d0
 8006b80:	f200 80bc 	bhi.w	8006cfc <atan+0x1fc>
 8006b84:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006b88:	429e      	cmp	r6, r3
 8006b8a:	f200 809e 	bhi.w	8006cca <atan+0x1ca>
 8006b8e:	4622      	mov	r2, r4
 8006b90:	462b      	mov	r3, r5
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fb99 	bl	80002cc <__adddf3>
 8006b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8006e14 <atan+0x314>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f7f9 fb93 	bl	80002c8 <__aeabi_dsub>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fb8c 	bl	80002cc <__adddf3>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fe66 	bl	800088c <__aeabi_ddiv>
 8006bc0:	f04f 0a00 	mov.w	sl, #0
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	4622      	mov	r2, r4
 8006bca:	462b      	mov	r3, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fd32 	bl	8000638 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4680      	mov	r8, r0
 8006bda:	4689      	mov	r9, r1
 8006bdc:	f7f9 fd2c 	bl	8000638 <__aeabi_dmul>
 8006be0:	a371      	add	r3, pc, #452	@ (adr r3, 8006da8 <atan+0x2a8>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	f7f9 fd25 	bl	8000638 <__aeabi_dmul>
 8006bee:	a370      	add	r3, pc, #448	@ (adr r3, 8006db0 <atan+0x2b0>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f7f9 fb6a 	bl	80002cc <__adddf3>
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	f7f9 fd1c 	bl	8000638 <__aeabi_dmul>
 8006c00:	a36d      	add	r3, pc, #436	@ (adr r3, 8006db8 <atan+0x2b8>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fb61 	bl	80002cc <__adddf3>
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	f7f9 fd13 	bl	8000638 <__aeabi_dmul>
 8006c12:	a36b      	add	r3, pc, #428	@ (adr r3, 8006dc0 <atan+0x2c0>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fb58 	bl	80002cc <__adddf3>
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	463b      	mov	r3, r7
 8006c20:	f7f9 fd0a 	bl	8000638 <__aeabi_dmul>
 8006c24:	a368      	add	r3, pc, #416	@ (adr r3, 8006dc8 <atan+0x2c8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fb4f 	bl	80002cc <__adddf3>
 8006c2e:	4632      	mov	r2, r6
 8006c30:	463b      	mov	r3, r7
 8006c32:	f7f9 fd01 	bl	8000638 <__aeabi_dmul>
 8006c36:	a366      	add	r3, pc, #408	@ (adr r3, 8006dd0 <atan+0x2d0>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fb46 	bl	80002cc <__adddf3>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	f7f9 fcf8 	bl	8000638 <__aeabi_dmul>
 8006c48:	a363      	add	r3, pc, #396	@ (adr r3, 8006dd8 <atan+0x2d8>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	4680      	mov	r8, r0
 8006c50:	4689      	mov	r9, r1
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fcef 	bl	8000638 <__aeabi_dmul>
 8006c5a:	a361      	add	r3, pc, #388	@ (adr r3, 8006de0 <atan+0x2e0>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fb32 	bl	80002c8 <__aeabi_dsub>
 8006c64:	4632      	mov	r2, r6
 8006c66:	463b      	mov	r3, r7
 8006c68:	f7f9 fce6 	bl	8000638 <__aeabi_dmul>
 8006c6c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006de8 <atan+0x2e8>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f7f9 fb29 	bl	80002c8 <__aeabi_dsub>
 8006c76:	4632      	mov	r2, r6
 8006c78:	463b      	mov	r3, r7
 8006c7a:	f7f9 fcdd 	bl	8000638 <__aeabi_dmul>
 8006c7e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006df0 <atan+0x2f0>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fb20 	bl	80002c8 <__aeabi_dsub>
 8006c88:	4632      	mov	r2, r6
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	f7f9 fcd4 	bl	8000638 <__aeabi_dmul>
 8006c90:	a359      	add	r3, pc, #356	@ (adr r3, 8006df8 <atan+0x2f8>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fb17 	bl	80002c8 <__aeabi_dsub>
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	f7f9 fccb 	bl	8000638 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 fb0f 	bl	80002cc <__adddf3>
 8006cae:	4622      	mov	r2, r4
 8006cb0:	462b      	mov	r3, r5
 8006cb2:	f7f9 fcc1 	bl	8000638 <__aeabi_dmul>
 8006cb6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	d148      	bne.n	8006d52 <atan+0x252>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	f7f9 fb00 	bl	80002c8 <__aeabi_dsub>
 8006cc8:	e72f      	b.n	8006b2a <atan+0x2a>
 8006cca:	4b52      	ldr	r3, [pc, #328]	@ (8006e14 <atan+0x314>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 faf9 	bl	80002c8 <__aeabi_dsub>
 8006cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8006e14 <atan+0x314>)
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 faf3 	bl	80002cc <__adddf3>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4630      	mov	r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	f7f9 fdcd 	bl	800088c <__aeabi_ddiv>
 8006cf2:	f04f 0a01 	mov.w	sl, #1
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	e765      	b.n	8006bc8 <atan+0xc8>
 8006cfc:	4b47      	ldr	r3, [pc, #284]	@ (8006e1c <atan+0x31c>)
 8006cfe:	429e      	cmp	r6, r3
 8006d00:	d21c      	bcs.n	8006d3c <atan+0x23c>
 8006d02:	4b47      	ldr	r3, [pc, #284]	@ (8006e20 <atan+0x320>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fadd 	bl	80002c8 <__aeabi_dsub>
 8006d0e:	4b44      	ldr	r3, [pc, #272]	@ (8006e20 <atan+0x320>)
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	2200      	movs	r2, #0
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fc8d 	bl	8000638 <__aeabi_dmul>
 8006d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e14 <atan+0x314>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	f7f9 fad3 	bl	80002cc <__adddf3>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fdad 	bl	800088c <__aeabi_ddiv>
 8006d32:	f04f 0a02 	mov.w	sl, #2
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	e745      	b.n	8006bc8 <atan+0xc8>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	462b      	mov	r3, r5
 8006d40:	4938      	ldr	r1, [pc, #224]	@ (8006e24 <atan+0x324>)
 8006d42:	2000      	movs	r0, #0
 8006d44:	f7f9 fda2 	bl	800088c <__aeabi_ddiv>
 8006d48:	f04f 0a03 	mov.w	sl, #3
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	e73a      	b.n	8006bc8 <atan+0xc8>
 8006d52:	4b35      	ldr	r3, [pc, #212]	@ (8006e28 <atan+0x328>)
 8006d54:	4e35      	ldr	r6, [pc, #212]	@ (8006e2c <atan+0x32c>)
 8006d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fab3 	bl	80002c8 <__aeabi_dsub>
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	f7f9 faaf 	bl	80002c8 <__aeabi_dsub>
 8006d6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006d76:	f7f9 faa7 	bl	80002c8 <__aeabi_dsub>
 8006d7a:	f1bb 0f00 	cmp.w	fp, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	f6bf aedc 	bge.w	8006b3e <atan+0x3e>
 8006d86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	e6d7      	b.n	8006b3e <atan+0x3e>
 8006d8e:	a51c      	add	r5, pc, #112	@ (adr r5, 8006e00 <atan+0x300>)
 8006d90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d94:	e6d3      	b.n	8006b3e <atan+0x3e>
 8006d96:	bf00      	nop
 8006d98:	54442d18 	.word	0x54442d18
 8006d9c:	3ff921fb 	.word	0x3ff921fb
 8006da0:	8800759c 	.word	0x8800759c
 8006da4:	7e37e43c 	.word	0x7e37e43c
 8006da8:	e322da11 	.word	0xe322da11
 8006dac:	3f90ad3a 	.word	0x3f90ad3a
 8006db0:	24760deb 	.word	0x24760deb
 8006db4:	3fa97b4b 	.word	0x3fa97b4b
 8006db8:	a0d03d51 	.word	0xa0d03d51
 8006dbc:	3fb10d66 	.word	0x3fb10d66
 8006dc0:	c54c206e 	.word	0xc54c206e
 8006dc4:	3fb745cd 	.word	0x3fb745cd
 8006dc8:	920083ff 	.word	0x920083ff
 8006dcc:	3fc24924 	.word	0x3fc24924
 8006dd0:	5555550d 	.word	0x5555550d
 8006dd4:	3fd55555 	.word	0x3fd55555
 8006dd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006ddc:	bfa2b444 	.word	0xbfa2b444
 8006de0:	52defd9a 	.word	0x52defd9a
 8006de4:	3fadde2d 	.word	0x3fadde2d
 8006de8:	af749a6d 	.word	0xaf749a6d
 8006dec:	3fb3b0f2 	.word	0x3fb3b0f2
 8006df0:	fe231671 	.word	0xfe231671
 8006df4:	3fbc71c6 	.word	0x3fbc71c6
 8006df8:	9998ebc4 	.word	0x9998ebc4
 8006dfc:	3fc99999 	.word	0x3fc99999
 8006e00:	54442d18 	.word	0x54442d18
 8006e04:	bff921fb 	.word	0xbff921fb
 8006e08:	440fffff 	.word	0x440fffff
 8006e0c:	7ff00000 	.word	0x7ff00000
 8006e10:	3fdbffff 	.word	0x3fdbffff
 8006e14:	3ff00000 	.word	0x3ff00000
 8006e18:	3ff2ffff 	.word	0x3ff2ffff
 8006e1c:	40038000 	.word	0x40038000
 8006e20:	3ff80000 	.word	0x3ff80000
 8006e24:	bff00000 	.word	0xbff00000
 8006e28:	08008fe0 	.word	0x08008fe0
 8006e2c:	08009000 	.word	0x08009000

08006e30 <cos>:
 8006e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e32:	ec53 2b10 	vmov	r2, r3, d0
 8006e36:	4826      	ldr	r0, [pc, #152]	@ (8006ed0 <cos+0xa0>)
 8006e38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e3c:	4281      	cmp	r1, r0
 8006e3e:	d806      	bhi.n	8006e4e <cos+0x1e>
 8006e40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006ec8 <cos+0x98>
 8006e44:	b005      	add	sp, #20
 8006e46:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4a:	f000 b985 	b.w	8007158 <__kernel_cos>
 8006e4e:	4821      	ldr	r0, [pc, #132]	@ (8006ed4 <cos+0xa4>)
 8006e50:	4281      	cmp	r1, r0
 8006e52:	d908      	bls.n	8006e66 <cos+0x36>
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	f7f9 fa36 	bl	80002c8 <__aeabi_dsub>
 8006e5c:	ec41 0b10 	vmov	d0, r0, r1
 8006e60:	b005      	add	sp, #20
 8006e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e66:	4668      	mov	r0, sp
 8006e68:	f001 f846 	bl	8007ef8 <__ieee754_rem_pio2>
 8006e6c:	f000 0003 	and.w	r0, r0, #3
 8006e70:	2801      	cmp	r0, #1
 8006e72:	d00b      	beq.n	8006e8c <cos+0x5c>
 8006e74:	2802      	cmp	r0, #2
 8006e76:	d015      	beq.n	8006ea4 <cos+0x74>
 8006e78:	b9d8      	cbnz	r0, 8006eb2 <cos+0x82>
 8006e7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e7e:	ed9d 0b00 	vldr	d0, [sp]
 8006e82:	f000 f969 	bl	8007158 <__kernel_cos>
 8006e86:	ec51 0b10 	vmov	r0, r1, d0
 8006e8a:	e7e7      	b.n	8006e5c <cos+0x2c>
 8006e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e90:	ed9d 0b00 	vldr	d0, [sp]
 8006e94:	f000 fa28 	bl	80072e8 <__kernel_sin>
 8006e98:	ec53 2b10 	vmov	r2, r3, d0
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006ea2:	e7db      	b.n	8006e5c <cos+0x2c>
 8006ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ea8:	ed9d 0b00 	vldr	d0, [sp]
 8006eac:	f000 f954 	bl	8007158 <__kernel_cos>
 8006eb0:	e7f2      	b.n	8006e98 <cos+0x68>
 8006eb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eb6:	ed9d 0b00 	vldr	d0, [sp]
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f000 fa14 	bl	80072e8 <__kernel_sin>
 8006ec0:	e7e1      	b.n	8006e86 <cos+0x56>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
	...
 8006ed0:	3fe921fb 	.word	0x3fe921fb
 8006ed4:	7fefffff 	.word	0x7fefffff

08006ed8 <fabs>:
 8006ed8:	ec51 0b10 	vmov	r0, r1, d0
 8006edc:	4602      	mov	r2, r0
 8006ede:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ee2:	ec43 2b10 	vmov	d0, r2, r3
 8006ee6:	4770      	bx	lr

08006ee8 <sin>:
 8006ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eea:	ec53 2b10 	vmov	r2, r3, d0
 8006eee:	4826      	ldr	r0, [pc, #152]	@ (8006f88 <sin+0xa0>)
 8006ef0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ef4:	4281      	cmp	r1, r0
 8006ef6:	d807      	bhi.n	8006f08 <sin+0x20>
 8006ef8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006f80 <sin+0x98>
 8006efc:	2000      	movs	r0, #0
 8006efe:	b005      	add	sp, #20
 8006f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f04:	f000 b9f0 	b.w	80072e8 <__kernel_sin>
 8006f08:	4820      	ldr	r0, [pc, #128]	@ (8006f8c <sin+0xa4>)
 8006f0a:	4281      	cmp	r1, r0
 8006f0c:	d908      	bls.n	8006f20 <sin+0x38>
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	f7f9 f9d9 	bl	80002c8 <__aeabi_dsub>
 8006f16:	ec41 0b10 	vmov	d0, r0, r1
 8006f1a:	b005      	add	sp, #20
 8006f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f20:	4668      	mov	r0, sp
 8006f22:	f000 ffe9 	bl	8007ef8 <__ieee754_rem_pio2>
 8006f26:	f000 0003 	and.w	r0, r0, #3
 8006f2a:	2801      	cmp	r0, #1
 8006f2c:	d00c      	beq.n	8006f48 <sin+0x60>
 8006f2e:	2802      	cmp	r0, #2
 8006f30:	d011      	beq.n	8006f56 <sin+0x6e>
 8006f32:	b9e8      	cbnz	r0, 8006f70 <sin+0x88>
 8006f34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f38:	ed9d 0b00 	vldr	d0, [sp]
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f000 f9d3 	bl	80072e8 <__kernel_sin>
 8006f42:	ec51 0b10 	vmov	r0, r1, d0
 8006f46:	e7e6      	b.n	8006f16 <sin+0x2e>
 8006f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f4c:	ed9d 0b00 	vldr	d0, [sp]
 8006f50:	f000 f902 	bl	8007158 <__kernel_cos>
 8006f54:	e7f5      	b.n	8006f42 <sin+0x5a>
 8006f56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f5a:	ed9d 0b00 	vldr	d0, [sp]
 8006f5e:	2001      	movs	r0, #1
 8006f60:	f000 f9c2 	bl	80072e8 <__kernel_sin>
 8006f64:	ec53 2b10 	vmov	r2, r3, d0
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006f6e:	e7d2      	b.n	8006f16 <sin+0x2e>
 8006f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f74:	ed9d 0b00 	vldr	d0, [sp]
 8006f78:	f000 f8ee 	bl	8007158 <__kernel_cos>
 8006f7c:	e7f2      	b.n	8006f64 <sin+0x7c>
 8006f7e:	bf00      	nop
	...
 8006f88:	3fe921fb 	.word	0x3fe921fb
 8006f8c:	7fefffff 	.word	0x7fefffff

08006f90 <finite>:
 8006f90:	b082      	sub	sp, #8
 8006f92:	ed8d 0b00 	vstr	d0, [sp]
 8006f96:	9801      	ldr	r0, [sp, #4]
 8006f98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006f9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006fa0:	0fc0      	lsrs	r0, r0, #31
 8006fa2:	b002      	add	sp, #8
 8006fa4:	4770      	bx	lr
	...

08006fa8 <__ieee754_sqrt>:
 8006fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4a66      	ldr	r2, [pc, #408]	@ (8007148 <__ieee754_sqrt+0x1a0>)
 8006fae:	ec55 4b10 	vmov	r4, r5, d0
 8006fb2:	43aa      	bics	r2, r5
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	d110      	bne.n	8006fdc <__ieee754_sqrt+0x34>
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 fb3a 	bl	8000638 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f97e 	bl	80002cc <__adddf3>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	ec45 4b10 	vmov	d0, r4, r5
 8006fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	dc0e      	bgt.n	8006ffe <__ieee754_sqrt+0x56>
 8006fe0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006fe4:	4322      	orrs	r2, r4
 8006fe6:	d0f5      	beq.n	8006fd4 <__ieee754_sqrt+0x2c>
 8006fe8:	b19d      	cbz	r5, 8007012 <__ieee754_sqrt+0x6a>
 8006fea:	4622      	mov	r2, r4
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 f96a 	bl	80002c8 <__aeabi_dsub>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	f7f9 fc48 	bl	800088c <__aeabi_ddiv>
 8006ffc:	e7e8      	b.n	8006fd0 <__ieee754_sqrt+0x28>
 8006ffe:	152a      	asrs	r2, r5, #20
 8007000:	d115      	bne.n	800702e <__ieee754_sqrt+0x86>
 8007002:	2000      	movs	r0, #0
 8007004:	e009      	b.n	800701a <__ieee754_sqrt+0x72>
 8007006:	0acb      	lsrs	r3, r1, #11
 8007008:	3a15      	subs	r2, #21
 800700a:	0549      	lsls	r1, r1, #21
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0fa      	beq.n	8007006 <__ieee754_sqrt+0x5e>
 8007010:	e7f7      	b.n	8007002 <__ieee754_sqrt+0x5a>
 8007012:	462a      	mov	r2, r5
 8007014:	e7fa      	b.n	800700c <__ieee754_sqrt+0x64>
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	3001      	adds	r0, #1
 800701a:	02dc      	lsls	r4, r3, #11
 800701c:	d5fb      	bpl.n	8007016 <__ieee754_sqrt+0x6e>
 800701e:	1e44      	subs	r4, r0, #1
 8007020:	1b12      	subs	r2, r2, r4
 8007022:	f1c0 0420 	rsb	r4, r0, #32
 8007026:	fa21 f404 	lsr.w	r4, r1, r4
 800702a:	4323      	orrs	r3, r4
 800702c:	4081      	lsls	r1, r0
 800702e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007032:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703a:	07d2      	lsls	r2, r2, #31
 800703c:	bf5c      	itt	pl
 800703e:	005b      	lslpl	r3, r3, #1
 8007040:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007048:	bf58      	it	pl
 800704a:	0049      	lslpl	r1, r1, #1
 800704c:	2600      	movs	r6, #0
 800704e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007052:	107f      	asrs	r7, r7, #1
 8007054:	0049      	lsls	r1, r1, #1
 8007056:	2016      	movs	r0, #22
 8007058:	4632      	mov	r2, r6
 800705a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800705e:	1915      	adds	r5, r2, r4
 8007060:	429d      	cmp	r5, r3
 8007062:	bfde      	ittt	le
 8007064:	192a      	addle	r2, r5, r4
 8007066:	1b5b      	suble	r3, r3, r5
 8007068:	1936      	addle	r6, r6, r4
 800706a:	0fcd      	lsrs	r5, r1, #31
 800706c:	3801      	subs	r0, #1
 800706e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007072:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007076:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800707a:	d1f0      	bne.n	800705e <__ieee754_sqrt+0xb6>
 800707c:	4605      	mov	r5, r0
 800707e:	2420      	movs	r4, #32
 8007080:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007084:	4293      	cmp	r3, r2
 8007086:	eb0c 0e00 	add.w	lr, ip, r0
 800708a:	dc02      	bgt.n	8007092 <__ieee754_sqrt+0xea>
 800708c:	d113      	bne.n	80070b6 <__ieee754_sqrt+0x10e>
 800708e:	458e      	cmp	lr, r1
 8007090:	d811      	bhi.n	80070b6 <__ieee754_sqrt+0x10e>
 8007092:	f1be 0f00 	cmp.w	lr, #0
 8007096:	eb0e 000c 	add.w	r0, lr, ip
 800709a:	da3f      	bge.n	800711c <__ieee754_sqrt+0x174>
 800709c:	2800      	cmp	r0, #0
 800709e:	db3d      	blt.n	800711c <__ieee754_sqrt+0x174>
 80070a0:	f102 0801 	add.w	r8, r2, #1
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	458e      	cmp	lr, r1
 80070a8:	bf88      	it	hi
 80070aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80070ae:	eba1 010e 	sub.w	r1, r1, lr
 80070b2:	4465      	add	r5, ip
 80070b4:	4642      	mov	r2, r8
 80070b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80070ba:	3c01      	subs	r4, #1
 80070bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80070c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80070c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80070c8:	d1dc      	bne.n	8007084 <__ieee754_sqrt+0xdc>
 80070ca:	4319      	orrs	r1, r3
 80070cc:	d01b      	beq.n	8007106 <__ieee754_sqrt+0x15e>
 80070ce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800714c <__ieee754_sqrt+0x1a4>
 80070d2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007150 <__ieee754_sqrt+0x1a8>
 80070d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80070da:	e9db 2300 	ldrd	r2, r3, [fp]
 80070de:	f7f9 f8f3 	bl	80002c8 <__aeabi_dsub>
 80070e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 fd1f 	bl	8000b30 <__aeabi_dcmple>
 80070f2:	b140      	cbz	r0, 8007106 <__ieee754_sqrt+0x15e>
 80070f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80070f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80070fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8007100:	d10e      	bne.n	8007120 <__ieee754_sqrt+0x178>
 8007102:	3601      	adds	r6, #1
 8007104:	4625      	mov	r5, r4
 8007106:	1073      	asrs	r3, r6, #1
 8007108:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800710c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007110:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007114:	086b      	lsrs	r3, r5, #1
 8007116:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800711a:	e759      	b.n	8006fd0 <__ieee754_sqrt+0x28>
 800711c:	4690      	mov	r8, r2
 800711e:	e7c1      	b.n	80070a4 <__ieee754_sqrt+0xfc>
 8007120:	f7f9 f8d4 	bl	80002cc <__adddf3>
 8007124:	e9da 8900 	ldrd	r8, r9, [sl]
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4640      	mov	r0, r8
 800712e:	4649      	mov	r1, r9
 8007130:	f7f9 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8007134:	b120      	cbz	r0, 8007140 <__ieee754_sqrt+0x198>
 8007136:	1cab      	adds	r3, r5, #2
 8007138:	bf08      	it	eq
 800713a:	3601      	addeq	r6, #1
 800713c:	3502      	adds	r5, #2
 800713e:	e7e2      	b.n	8007106 <__ieee754_sqrt+0x15e>
 8007140:	1c6b      	adds	r3, r5, #1
 8007142:	f023 0501 	bic.w	r5, r3, #1
 8007146:	e7de      	b.n	8007106 <__ieee754_sqrt+0x15e>
 8007148:	7ff00000 	.word	0x7ff00000
 800714c:	08009028 	.word	0x08009028
 8007150:	08009020 	.word	0x08009020
 8007154:	00000000 	.word	0x00000000

08007158 <__kernel_cos>:
 8007158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	ec57 6b10 	vmov	r6, r7, d0
 8007160:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007164:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007168:	ed8d 1b00 	vstr	d1, [sp]
 800716c:	d206      	bcs.n	800717c <__kernel_cos+0x24>
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fd11 	bl	8000b98 <__aeabi_d2iz>
 8007176:	2800      	cmp	r0, #0
 8007178:	f000 8088 	beq.w	800728c <__kernel_cos+0x134>
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	4b51      	ldr	r3, [pc, #324]	@ (80072d0 <__kernel_cos+0x178>)
 800718a:	2200      	movs	r2, #0
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	f7f9 fa52 	bl	8000638 <__aeabi_dmul>
 8007194:	a340      	add	r3, pc, #256	@ (adr r3, 8007298 <__kernel_cos+0x140>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	4682      	mov	sl, r0
 800719c:	468b      	mov	fp, r1
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 fa49 	bl	8000638 <__aeabi_dmul>
 80071a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80072a0 <__kernel_cos+0x148>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f7f9 f88e 	bl	80002cc <__adddf3>
 80071b0:	4622      	mov	r2, r4
 80071b2:	462b      	mov	r3, r5
 80071b4:	f7f9 fa40 	bl	8000638 <__aeabi_dmul>
 80071b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80072a8 <__kernel_cos+0x150>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 f883 	bl	80002c8 <__aeabi_dsub>
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	f7f9 fa37 	bl	8000638 <__aeabi_dmul>
 80071ca:	a339      	add	r3, pc, #228	@ (adr r3, 80072b0 <__kernel_cos+0x158>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f87c 	bl	80002cc <__adddf3>
 80071d4:	4622      	mov	r2, r4
 80071d6:	462b      	mov	r3, r5
 80071d8:	f7f9 fa2e 	bl	8000638 <__aeabi_dmul>
 80071dc:	a336      	add	r3, pc, #216	@ (adr r3, 80072b8 <__kernel_cos+0x160>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f871 	bl	80002c8 <__aeabi_dsub>
 80071e6:	4622      	mov	r2, r4
 80071e8:	462b      	mov	r3, r5
 80071ea:	f7f9 fa25 	bl	8000638 <__aeabi_dmul>
 80071ee:	a334      	add	r3, pc, #208	@ (adr r3, 80072c0 <__kernel_cos+0x168>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f7f9 f86a 	bl	80002cc <__adddf3>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f7f9 fa1c 	bl	8000638 <__aeabi_dmul>
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	f7f9 fa18 	bl	8000638 <__aeabi_dmul>
 8007208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fa10 	bl	8000638 <__aeabi_dmul>
 8007218:	460b      	mov	r3, r1
 800721a:	4602      	mov	r2, r0
 800721c:	4629      	mov	r1, r5
 800721e:	4620      	mov	r0, r4
 8007220:	f7f9 f852 	bl	80002c8 <__aeabi_dsub>
 8007224:	4b2b      	ldr	r3, [pc, #172]	@ (80072d4 <__kernel_cos+0x17c>)
 8007226:	4598      	cmp	r8, r3
 8007228:	4606      	mov	r6, r0
 800722a:	460f      	mov	r7, r1
 800722c:	d810      	bhi.n	8007250 <__kernel_cos+0xf8>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4650      	mov	r0, sl
 8007234:	4659      	mov	r1, fp
 8007236:	f7f9 f847 	bl	80002c8 <__aeabi_dsub>
 800723a:	460b      	mov	r3, r1
 800723c:	4926      	ldr	r1, [pc, #152]	@ (80072d8 <__kernel_cos+0x180>)
 800723e:	4602      	mov	r2, r0
 8007240:	2000      	movs	r0, #0
 8007242:	f7f9 f841 	bl	80002c8 <__aeabi_dsub>
 8007246:	ec41 0b10 	vmov	d0, r0, r1
 800724a:	b003      	add	sp, #12
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	4b22      	ldr	r3, [pc, #136]	@ (80072dc <__kernel_cos+0x184>)
 8007252:	4921      	ldr	r1, [pc, #132]	@ (80072d8 <__kernel_cos+0x180>)
 8007254:	4598      	cmp	r8, r3
 8007256:	bf8c      	ite	hi
 8007258:	4d21      	ldrhi	r5, [pc, #132]	@ (80072e0 <__kernel_cos+0x188>)
 800725a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800725e:	2400      	movs	r4, #0
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	2000      	movs	r0, #0
 8007266:	f7f9 f82f 	bl	80002c8 <__aeabi_dsub>
 800726a:	4622      	mov	r2, r4
 800726c:	4680      	mov	r8, r0
 800726e:	4689      	mov	r9, r1
 8007270:	462b      	mov	r3, r5
 8007272:	4650      	mov	r0, sl
 8007274:	4659      	mov	r1, fp
 8007276:	f7f9 f827 	bl	80002c8 <__aeabi_dsub>
 800727a:	4632      	mov	r2, r6
 800727c:	463b      	mov	r3, r7
 800727e:	f7f9 f823 	bl	80002c8 <__aeabi_dsub>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	e7da      	b.n	8007242 <__kernel_cos+0xea>
 800728c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80072c8 <__kernel_cos+0x170>
 8007290:	e7db      	b.n	800724a <__kernel_cos+0xf2>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	be8838d4 	.word	0xbe8838d4
 800729c:	bda8fae9 	.word	0xbda8fae9
 80072a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80072a4:	3e21ee9e 	.word	0x3e21ee9e
 80072a8:	809c52ad 	.word	0x809c52ad
 80072ac:	3e927e4f 	.word	0x3e927e4f
 80072b0:	19cb1590 	.word	0x19cb1590
 80072b4:	3efa01a0 	.word	0x3efa01a0
 80072b8:	16c15177 	.word	0x16c15177
 80072bc:	3f56c16c 	.word	0x3f56c16c
 80072c0:	5555554c 	.word	0x5555554c
 80072c4:	3fa55555 	.word	0x3fa55555
 80072c8:	00000000 	.word	0x00000000
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	3fe00000 	.word	0x3fe00000
 80072d4:	3fd33332 	.word	0x3fd33332
 80072d8:	3ff00000 	.word	0x3ff00000
 80072dc:	3fe90000 	.word	0x3fe90000
 80072e0:	3fd20000 	.word	0x3fd20000
 80072e4:	00000000 	.word	0x00000000

080072e8 <__kernel_sin>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	ec55 4b10 	vmov	r4, r5, d0
 80072f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80072f4:	b085      	sub	sp, #20
 80072f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80072fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80072fe:	4680      	mov	r8, r0
 8007300:	d205      	bcs.n	800730e <__kernel_sin+0x26>
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 fc47 	bl	8000b98 <__aeabi_d2iz>
 800730a:	2800      	cmp	r0, #0
 800730c:	d052      	beq.n	80073b4 <__kernel_sin+0xcc>
 800730e:	4622      	mov	r2, r4
 8007310:	462b      	mov	r3, r5
 8007312:	4620      	mov	r0, r4
 8007314:	4629      	mov	r1, r5
 8007316:	f7f9 f98f 	bl	8000638 <__aeabi_dmul>
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7f9 f987 	bl	8000638 <__aeabi_dmul>
 800732a:	a342      	add	r3, pc, #264	@ (adr r3, 8007434 <__kernel_sin+0x14c>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	e9cd 0100 	strd	r0, r1, [sp]
 8007334:	4650      	mov	r0, sl
 8007336:	4659      	mov	r1, fp
 8007338:	f7f9 f97e 	bl	8000638 <__aeabi_dmul>
 800733c:	a33f      	add	r3, pc, #252	@ (adr r3, 800743c <__kernel_sin+0x154>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ffc1 	bl	80002c8 <__aeabi_dsub>
 8007346:	4652      	mov	r2, sl
 8007348:	465b      	mov	r3, fp
 800734a:	f7f9 f975 	bl	8000638 <__aeabi_dmul>
 800734e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007444 <__kernel_sin+0x15c>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f8 ffba 	bl	80002cc <__adddf3>
 8007358:	4652      	mov	r2, sl
 800735a:	465b      	mov	r3, fp
 800735c:	f7f9 f96c 	bl	8000638 <__aeabi_dmul>
 8007360:	a33a      	add	r3, pc, #232	@ (adr r3, 800744c <__kernel_sin+0x164>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f8 ffaf 	bl	80002c8 <__aeabi_dsub>
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	f7f9 f963 	bl	8000638 <__aeabi_dmul>
 8007372:	a338      	add	r3, pc, #224	@ (adr r3, 8007454 <__kernel_sin+0x16c>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ffa8 	bl	80002cc <__adddf3>
 800737c:	4606      	mov	r6, r0
 800737e:	460f      	mov	r7, r1
 8007380:	f1b8 0f00 	cmp.w	r8, #0
 8007384:	d11b      	bne.n	80073be <__kernel_sin+0xd6>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	f7f9 f953 	bl	8000638 <__aeabi_dmul>
 8007392:	a325      	add	r3, pc, #148	@ (adr r3, 8007428 <__kernel_sin+0x140>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f8 ff96 	bl	80002c8 <__aeabi_dsub>
 800739c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073a0:	f7f9 f94a 	bl	8000638 <__aeabi_dmul>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4620      	mov	r0, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7f8 ff8e 	bl	80002cc <__adddf3>
 80073b0:	4604      	mov	r4, r0
 80073b2:	460d      	mov	r5, r1
 80073b4:	ec45 4b10 	vmov	d0, r4, r5
 80073b8:	b005      	add	sp, #20
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007430 <__kernel_sin+0x148>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	f7f9 f937 	bl	8000638 <__aeabi_dmul>
 80073ca:	4632      	mov	r2, r6
 80073cc:	4680      	mov	r8, r0
 80073ce:	4689      	mov	r9, r1
 80073d0:	463b      	mov	r3, r7
 80073d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d6:	f7f9 f92f 	bl	8000638 <__aeabi_dmul>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f8 ff71 	bl	80002c8 <__aeabi_dsub>
 80073e6:	4652      	mov	r2, sl
 80073e8:	465b      	mov	r3, fp
 80073ea:	f7f9 f925 	bl	8000638 <__aeabi_dmul>
 80073ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f2:	f7f8 ff69 	bl	80002c8 <__aeabi_dsub>
 80073f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007428 <__kernel_sin+0x140>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1
 8007400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007404:	f7f9 f918 	bl	8000638 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f7f8 ff5c 	bl	80002cc <__adddf3>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 ff54 	bl	80002c8 <__aeabi_dsub>
 8007420:	e7c6      	b.n	80073b0 <__kernel_sin+0xc8>
 8007422:	bf00      	nop
 8007424:	f3af 8000 	nop.w
 8007428:	55555549 	.word	0x55555549
 800742c:	3fc55555 	.word	0x3fc55555
 8007430:	3fe00000 	.word	0x3fe00000
 8007434:	5acfd57c 	.word	0x5acfd57c
 8007438:	3de5d93a 	.word	0x3de5d93a
 800743c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007440:	3e5ae5e6 	.word	0x3e5ae5e6
 8007444:	57b1fe7d 	.word	0x57b1fe7d
 8007448:	3ec71de3 	.word	0x3ec71de3
 800744c:	19c161d5 	.word	0x19c161d5
 8007450:	3f2a01a0 	.word	0x3f2a01a0
 8007454:	1110f8a6 	.word	0x1110f8a6
 8007458:	3f811111 	.word	0x3f811111
 800745c:	00000000 	.word	0x00000000

08007460 <__ieee754_pow>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	b091      	sub	sp, #68	@ 0x44
 8007466:	ed8d 1b00 	vstr	d1, [sp]
 800746a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800746e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007472:	ea5a 0001 	orrs.w	r0, sl, r1
 8007476:	ec57 6b10 	vmov	r6, r7, d0
 800747a:	d113      	bne.n	80074a4 <__ieee754_pow+0x44>
 800747c:	19b3      	adds	r3, r6, r6
 800747e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007482:	4152      	adcs	r2, r2
 8007484:	4298      	cmp	r0, r3
 8007486:	4b9a      	ldr	r3, [pc, #616]	@ (80076f0 <__ieee754_pow+0x290>)
 8007488:	4193      	sbcs	r3, r2
 800748a:	f080 84ee 	bcs.w	8007e6a <__ieee754_pow+0xa0a>
 800748e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f8 ff19 	bl	80002cc <__adddf3>
 800749a:	ec41 0b10 	vmov	d0, r0, r1
 800749e:	b011      	add	sp, #68	@ 0x44
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	4a93      	ldr	r2, [pc, #588]	@ (80076f4 <__ieee754_pow+0x294>)
 80074a6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80074aa:	4295      	cmp	r5, r2
 80074ac:	46b8      	mov	r8, r7
 80074ae:	4633      	mov	r3, r6
 80074b0:	d80a      	bhi.n	80074c8 <__ieee754_pow+0x68>
 80074b2:	d104      	bne.n	80074be <__ieee754_pow+0x5e>
 80074b4:	2e00      	cmp	r6, #0
 80074b6:	d1ea      	bne.n	800748e <__ieee754_pow+0x2e>
 80074b8:	45aa      	cmp	sl, r5
 80074ba:	d8e8      	bhi.n	800748e <__ieee754_pow+0x2e>
 80074bc:	e001      	b.n	80074c2 <__ieee754_pow+0x62>
 80074be:	4592      	cmp	sl, r2
 80074c0:	d802      	bhi.n	80074c8 <__ieee754_pow+0x68>
 80074c2:	4592      	cmp	sl, r2
 80074c4:	d10f      	bne.n	80074e6 <__ieee754_pow+0x86>
 80074c6:	b171      	cbz	r1, 80074e6 <__ieee754_pow+0x86>
 80074c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80074cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80074d0:	ea58 0803 	orrs.w	r8, r8, r3
 80074d4:	d1db      	bne.n	800748e <__ieee754_pow+0x2e>
 80074d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80074da:	18db      	adds	r3, r3, r3
 80074dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80074e0:	4152      	adcs	r2, r2
 80074e2:	4598      	cmp	r8, r3
 80074e4:	e7cf      	b.n	8007486 <__ieee754_pow+0x26>
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	46ab      	mov	fp, r5
 80074ec:	da43      	bge.n	8007576 <__ieee754_pow+0x116>
 80074ee:	4a82      	ldr	r2, [pc, #520]	@ (80076f8 <__ieee754_pow+0x298>)
 80074f0:	4592      	cmp	sl, r2
 80074f2:	d856      	bhi.n	80075a2 <__ieee754_pow+0x142>
 80074f4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80074f8:	4592      	cmp	sl, r2
 80074fa:	f240 84c5 	bls.w	8007e88 <__ieee754_pow+0xa28>
 80074fe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007502:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007506:	2a14      	cmp	r2, #20
 8007508:	dd18      	ble.n	800753c <__ieee754_pow+0xdc>
 800750a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800750e:	fa21 f402 	lsr.w	r4, r1, r2
 8007512:	fa04 f202 	lsl.w	r2, r4, r2
 8007516:	428a      	cmp	r2, r1
 8007518:	f040 84b6 	bne.w	8007e88 <__ieee754_pow+0xa28>
 800751c:	f004 0401 	and.w	r4, r4, #1
 8007520:	f1c4 0402 	rsb	r4, r4, #2
 8007524:	2900      	cmp	r1, #0
 8007526:	d159      	bne.n	80075dc <__ieee754_pow+0x17c>
 8007528:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800752c:	d148      	bne.n	80075c0 <__ieee754_pow+0x160>
 800752e:	4632      	mov	r2, r6
 8007530:	463b      	mov	r3, r7
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f9 f87f 	bl	8000638 <__aeabi_dmul>
 800753a:	e7ae      	b.n	800749a <__ieee754_pow+0x3a>
 800753c:	2900      	cmp	r1, #0
 800753e:	d14c      	bne.n	80075da <__ieee754_pow+0x17a>
 8007540:	f1c2 0214 	rsb	r2, r2, #20
 8007544:	fa4a f402 	asr.w	r4, sl, r2
 8007548:	fa04 f202 	lsl.w	r2, r4, r2
 800754c:	4552      	cmp	r2, sl
 800754e:	f040 8498 	bne.w	8007e82 <__ieee754_pow+0xa22>
 8007552:	f004 0401 	and.w	r4, r4, #1
 8007556:	f1c4 0402 	rsb	r4, r4, #2
 800755a:	4a68      	ldr	r2, [pc, #416]	@ (80076fc <__ieee754_pow+0x29c>)
 800755c:	4592      	cmp	sl, r2
 800755e:	d1e3      	bne.n	8007528 <__ieee754_pow+0xc8>
 8007560:	f1b9 0f00 	cmp.w	r9, #0
 8007564:	f280 8489 	bge.w	8007e7a <__ieee754_pow+0xa1a>
 8007568:	4964      	ldr	r1, [pc, #400]	@ (80076fc <__ieee754_pow+0x29c>)
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	2000      	movs	r0, #0
 8007570:	f7f9 f98c 	bl	800088c <__aeabi_ddiv>
 8007574:	e791      	b.n	800749a <__ieee754_pow+0x3a>
 8007576:	2400      	movs	r4, #0
 8007578:	bb81      	cbnz	r1, 80075dc <__ieee754_pow+0x17c>
 800757a:	4a5e      	ldr	r2, [pc, #376]	@ (80076f4 <__ieee754_pow+0x294>)
 800757c:	4592      	cmp	sl, r2
 800757e:	d1ec      	bne.n	800755a <__ieee754_pow+0xfa>
 8007580:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007584:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007588:	431a      	orrs	r2, r3
 800758a:	f000 846e 	beq.w	8007e6a <__ieee754_pow+0xa0a>
 800758e:	4b5c      	ldr	r3, [pc, #368]	@ (8007700 <__ieee754_pow+0x2a0>)
 8007590:	429d      	cmp	r5, r3
 8007592:	d908      	bls.n	80075a6 <__ieee754_pow+0x146>
 8007594:	f1b9 0f00 	cmp.w	r9, #0
 8007598:	f280 846b 	bge.w	8007e72 <__ieee754_pow+0xa12>
 800759c:	2000      	movs	r0, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	e77b      	b.n	800749a <__ieee754_pow+0x3a>
 80075a2:	2402      	movs	r4, #2
 80075a4:	e7e8      	b.n	8007578 <__ieee754_pow+0x118>
 80075a6:	f1b9 0f00 	cmp.w	r9, #0
 80075aa:	f04f 0000 	mov.w	r0, #0
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	f6bf af72 	bge.w	800749a <__ieee754_pow+0x3a>
 80075b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80075ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80075be:	e76c      	b.n	800749a <__ieee754_pow+0x3a>
 80075c0:	4a50      	ldr	r2, [pc, #320]	@ (8007704 <__ieee754_pow+0x2a4>)
 80075c2:	4591      	cmp	r9, r2
 80075c4:	d10a      	bne.n	80075dc <__ieee754_pow+0x17c>
 80075c6:	f1b8 0f00 	cmp.w	r8, #0
 80075ca:	db07      	blt.n	80075dc <__ieee754_pow+0x17c>
 80075cc:	ec47 6b10 	vmov	d0, r6, r7
 80075d0:	b011      	add	sp, #68	@ 0x44
 80075d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d6:	f7ff bce7 	b.w	8006fa8 <__ieee754_sqrt>
 80075da:	2400      	movs	r4, #0
 80075dc:	ec47 6b10 	vmov	d0, r6, r7
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	f7ff fc79 	bl	8006ed8 <fabs>
 80075e6:	9b02      	ldr	r3, [sp, #8]
 80075e8:	ec51 0b10 	vmov	r0, r1, d0
 80075ec:	bb43      	cbnz	r3, 8007640 <__ieee754_pow+0x1e0>
 80075ee:	4b43      	ldr	r3, [pc, #268]	@ (80076fc <__ieee754_pow+0x29c>)
 80075f0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d000      	beq.n	80075fa <__ieee754_pow+0x19a>
 80075f8:	bb15      	cbnz	r5, 8007640 <__ieee754_pow+0x1e0>
 80075fa:	f1b9 0f00 	cmp.w	r9, #0
 80075fe:	da05      	bge.n	800760c <__ieee754_pow+0x1ac>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	2000      	movs	r0, #0
 8007606:	493d      	ldr	r1, [pc, #244]	@ (80076fc <__ieee754_pow+0x29c>)
 8007608:	f7f9 f940 	bl	800088c <__aeabi_ddiv>
 800760c:	f1b8 0f00 	cmp.w	r8, #0
 8007610:	f6bf af43 	bge.w	800749a <__ieee754_pow+0x3a>
 8007614:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007618:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800761c:	4325      	orrs	r5, r4
 800761e:	d108      	bne.n	8007632 <__ieee754_pow+0x1d2>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	f7f8 fe4e 	bl	80002c8 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	e79e      	b.n	8007570 <__ieee754_pow+0x110>
 8007632:	2c01      	cmp	r4, #1
 8007634:	f47f af31 	bne.w	800749a <__ieee754_pow+0x3a>
 8007638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800763c:	4619      	mov	r1, r3
 800763e:	e72c      	b.n	800749a <__ieee754_pow+0x3a>
 8007640:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007644:	3b01      	subs	r3, #1
 8007646:	ea53 0204 	orrs.w	r2, r3, r4
 800764a:	d102      	bne.n	8007652 <__ieee754_pow+0x1f2>
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	e7e8      	b.n	8007624 <__ieee754_pow+0x1c4>
 8007652:	3c01      	subs	r4, #1
 8007654:	431c      	orrs	r4, r3
 8007656:	d016      	beq.n	8007686 <__ieee754_pow+0x226>
 8007658:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80076e0 <__ieee754_pow+0x280>
 800765c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007664:	f240 8110 	bls.w	8007888 <__ieee754_pow+0x428>
 8007668:	4b27      	ldr	r3, [pc, #156]	@ (8007708 <__ieee754_pow+0x2a8>)
 800766a:	459a      	cmp	sl, r3
 800766c:	4b24      	ldr	r3, [pc, #144]	@ (8007700 <__ieee754_pow+0x2a0>)
 800766e:	d916      	bls.n	800769e <__ieee754_pow+0x23e>
 8007670:	429d      	cmp	r5, r3
 8007672:	d80b      	bhi.n	800768c <__ieee754_pow+0x22c>
 8007674:	f1b9 0f00 	cmp.w	r9, #0
 8007678:	da0b      	bge.n	8007692 <__ieee754_pow+0x232>
 800767a:	2000      	movs	r0, #0
 800767c:	b011      	add	sp, #68	@ 0x44
 800767e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007682:	f000 bee5 	b.w	8008450 <__math_oflow>
 8007686:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80076e8 <__ieee754_pow+0x288>
 800768a:	e7e7      	b.n	800765c <__ieee754_pow+0x1fc>
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	dcf3      	bgt.n	800767a <__ieee754_pow+0x21a>
 8007692:	2000      	movs	r0, #0
 8007694:	b011      	add	sp, #68	@ 0x44
 8007696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	f000 bed1 	b.w	8008440 <__math_uflow>
 800769e:	429d      	cmp	r5, r3
 80076a0:	d20c      	bcs.n	80076bc <__ieee754_pow+0x25c>
 80076a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	f7f9 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80076ae:	3800      	subs	r0, #0
 80076b0:	bf18      	it	ne
 80076b2:	2001      	movne	r0, #1
 80076b4:	f1b9 0f00 	cmp.w	r9, #0
 80076b8:	daec      	bge.n	8007694 <__ieee754_pow+0x234>
 80076ba:	e7df      	b.n	800767c <__ieee754_pow+0x21c>
 80076bc:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <__ieee754_pow+0x29c>)
 80076be:	429d      	cmp	r5, r3
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	d922      	bls.n	800770c <__ieee754_pow+0x2ac>
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 fa26 	bl	8000b1c <__aeabi_dcmplt>
 80076d0:	3800      	subs	r0, #0
 80076d2:	bf18      	it	ne
 80076d4:	2001      	movne	r0, #1
 80076d6:	f1b9 0f00 	cmp.w	r9, #0
 80076da:	dccf      	bgt.n	800767c <__ieee754_pow+0x21c>
 80076dc:	e7da      	b.n	8007694 <__ieee754_pow+0x234>
 80076de:	bf00      	nop
 80076e0:	00000000 	.word	0x00000000
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	00000000 	.word	0x00000000
 80076ec:	bff00000 	.word	0xbff00000
 80076f0:	fff00000 	.word	0xfff00000
 80076f4:	7ff00000 	.word	0x7ff00000
 80076f8:	433fffff 	.word	0x433fffff
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	3fefffff 	.word	0x3fefffff
 8007704:	3fe00000 	.word	0x3fe00000
 8007708:	43f00000 	.word	0x43f00000
 800770c:	4b5a      	ldr	r3, [pc, #360]	@ (8007878 <__ieee754_pow+0x418>)
 800770e:	f7f8 fddb 	bl	80002c8 <__aeabi_dsub>
 8007712:	a351      	add	r3, pc, #324	@ (adr r3, 8007858 <__ieee754_pow+0x3f8>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	f7f8 ff8c 	bl	8000638 <__aeabi_dmul>
 8007720:	a34f      	add	r3, pc, #316	@ (adr r3, 8007860 <__ieee754_pow+0x400>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff83 	bl	8000638 <__aeabi_dmul>
 8007732:	4b52      	ldr	r3, [pc, #328]	@ (800787c <__ieee754_pow+0x41c>)
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	2200      	movs	r2, #0
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f8 ff7b 	bl	8000638 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	a148      	add	r1, pc, #288	@ (adr r1, 8007868 <__ieee754_pow+0x408>)
 8007748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774c:	f7f8 fdbc 	bl	80002c8 <__aeabi_dsub>
 8007750:	4622      	mov	r2, r4
 8007752:	462b      	mov	r3, r5
 8007754:	f7f8 ff70 	bl	8000638 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	2000      	movs	r0, #0
 800775e:	4948      	ldr	r1, [pc, #288]	@ (8007880 <__ieee754_pow+0x420>)
 8007760:	f7f8 fdb2 	bl	80002c8 <__aeabi_dsub>
 8007764:	4622      	mov	r2, r4
 8007766:	4680      	mov	r8, r0
 8007768:	4689      	mov	r9, r1
 800776a:	462b      	mov	r3, r5
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 ff62 	bl	8000638 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f8 ff5c 	bl	8000638 <__aeabi_dmul>
 8007780:	a33b      	add	r3, pc, #236	@ (adr r3, 8007870 <__ieee754_pow+0x410>)
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f7f8 ff57 	bl	8000638 <__aeabi_dmul>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4650      	mov	r0, sl
 8007790:	4659      	mov	r1, fp
 8007792:	f7f8 fd99 	bl	80002c8 <__aeabi_dsub>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4680      	mov	r8, r0
 800779c:	4689      	mov	r9, r1
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f8 fd93 	bl	80002cc <__adddf3>
 80077a6:	2400      	movs	r4, #0
 80077a8:	4632      	mov	r2, r6
 80077aa:	463b      	mov	r3, r7
 80077ac:	4620      	mov	r0, r4
 80077ae:	460d      	mov	r5, r1
 80077b0:	f7f8 fd8a 	bl	80002c8 <__aeabi_dsub>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	f7f8 fd84 	bl	80002c8 <__aeabi_dsub>
 80077c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077c8:	2300      	movs	r3, #0
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	465b      	mov	r3, fp
 80077d6:	4652      	mov	r2, sl
 80077d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077dc:	f7f8 fd74 	bl	80002c8 <__aeabi_dsub>
 80077e0:	4622      	mov	r2, r4
 80077e2:	462b      	mov	r3, r5
 80077e4:	f7f8 ff28 	bl	8000638 <__aeabi_dmul>
 80077e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ec:	4680      	mov	r8, r0
 80077ee:	4689      	mov	r9, r1
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f8 ff20 	bl	8000638 <__aeabi_dmul>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4640      	mov	r0, r8
 80077fe:	4649      	mov	r1, r9
 8007800:	f7f8 fd64 	bl	80002cc <__adddf3>
 8007804:	465b      	mov	r3, fp
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	4652      	mov	r2, sl
 800780c:	4620      	mov	r0, r4
 800780e:	4629      	mov	r1, r5
 8007810:	f7f8 ff12 	bl	8000638 <__aeabi_dmul>
 8007814:	460b      	mov	r3, r1
 8007816:	4602      	mov	r2, r0
 8007818:	4680      	mov	r8, r0
 800781a:	4689      	mov	r9, r1
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f8 fd54 	bl	80002cc <__adddf3>
 8007824:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <__ieee754_pow+0x424>)
 8007826:	4299      	cmp	r1, r3
 8007828:	4604      	mov	r4, r0
 800782a:	460d      	mov	r5, r1
 800782c:	468b      	mov	fp, r1
 800782e:	f340 820b 	ble.w	8007c48 <__ieee754_pow+0x7e8>
 8007832:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007836:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800783a:	4303      	orrs	r3, r0
 800783c:	f000 81ea 	beq.w	8007c14 <__ieee754_pow+0x7b4>
 8007840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	2300      	movs	r3, #0
 8007848:	f7f9 f968 	bl	8000b1c <__aeabi_dcmplt>
 800784c:	3800      	subs	r0, #0
 800784e:	bf18      	it	ne
 8007850:	2001      	movne	r0, #1
 8007852:	e713      	b.n	800767c <__ieee754_pow+0x21c>
 8007854:	f3af 8000 	nop.w
 8007858:	60000000 	.word	0x60000000
 800785c:	3ff71547 	.word	0x3ff71547
 8007860:	f85ddf44 	.word	0xf85ddf44
 8007864:	3e54ae0b 	.word	0x3e54ae0b
 8007868:	55555555 	.word	0x55555555
 800786c:	3fd55555 	.word	0x3fd55555
 8007870:	652b82fe 	.word	0x652b82fe
 8007874:	3ff71547 	.word	0x3ff71547
 8007878:	3ff00000 	.word	0x3ff00000
 800787c:	3fd00000 	.word	0x3fd00000
 8007880:	3fe00000 	.word	0x3fe00000
 8007884:	408fffff 	.word	0x408fffff
 8007888:	4bd5      	ldr	r3, [pc, #852]	@ (8007be0 <__ieee754_pow+0x780>)
 800788a:	ea08 0303 	and.w	r3, r8, r3
 800788e:	2200      	movs	r2, #0
 8007890:	b92b      	cbnz	r3, 800789e <__ieee754_pow+0x43e>
 8007892:	4bd4      	ldr	r3, [pc, #848]	@ (8007be4 <__ieee754_pow+0x784>)
 8007894:	f7f8 fed0 	bl	8000638 <__aeabi_dmul>
 8007898:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800789c:	468b      	mov	fp, r1
 800789e:	ea4f 532b 	mov.w	r3, fp, asr #20
 80078a2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80078a6:	4413      	add	r3, r2
 80078a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078aa:	4bcf      	ldr	r3, [pc, #828]	@ (8007be8 <__ieee754_pow+0x788>)
 80078ac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80078b0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80078b4:	459b      	cmp	fp, r3
 80078b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80078ba:	dd08      	ble.n	80078ce <__ieee754_pow+0x46e>
 80078bc:	4bcb      	ldr	r3, [pc, #812]	@ (8007bec <__ieee754_pow+0x78c>)
 80078be:	459b      	cmp	fp, r3
 80078c0:	f340 81a5 	ble.w	8007c0e <__ieee754_pow+0x7ae>
 80078c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c6:	3301      	adds	r3, #1
 80078c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80078ce:	f04f 0a00 	mov.w	sl, #0
 80078d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80078d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d8:	4bc5      	ldr	r3, [pc, #788]	@ (8007bf0 <__ieee754_pow+0x790>)
 80078da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078de:	ed93 7b00 	vldr	d7, [r3]
 80078e2:	4629      	mov	r1, r5
 80078e4:	ec53 2b17 	vmov	r2, r3, d7
 80078e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078f0:	f7f8 fcea 	bl	80002c8 <__aeabi_dsub>
 80078f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078f8:	4606      	mov	r6, r0
 80078fa:	460f      	mov	r7, r1
 80078fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007900:	f7f8 fce4 	bl	80002cc <__adddf3>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	2000      	movs	r0, #0
 800790a:	49ba      	ldr	r1, [pc, #744]	@ (8007bf4 <__ieee754_pow+0x794>)
 800790c:	f7f8 ffbe 	bl	800088c <__aeabi_ddiv>
 8007910:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f7f8 fe8c 	bl	8000638 <__aeabi_dmul>
 8007920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007924:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007928:	106d      	asrs	r5, r5, #1
 800792a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800792e:	f04f 0b00 	mov.w	fp, #0
 8007932:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007936:	4661      	mov	r1, ip
 8007938:	2200      	movs	r2, #0
 800793a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800793e:	4658      	mov	r0, fp
 8007940:	46e1      	mov	r9, ip
 8007942:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007946:	4614      	mov	r4, r2
 8007948:	461d      	mov	r5, r3
 800794a:	f7f8 fe75 	bl	8000638 <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7f8 fcb7 	bl	80002c8 <__aeabi_dsub>
 800795a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800795e:	4606      	mov	r6, r0
 8007960:	460f      	mov	r7, r1
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f8 fcaf 	bl	80002c8 <__aeabi_dsub>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007972:	f7f8 fca9 	bl	80002c8 <__aeabi_dsub>
 8007976:	465a      	mov	r2, fp
 8007978:	464b      	mov	r3, r9
 800797a:	f7f8 fe5d 	bl	8000638 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fc9f 	bl	80002c8 <__aeabi_dsub>
 800798a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800798e:	f7f8 fe53 	bl	8000638 <__aeabi_dmul>
 8007992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007996:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	f7f8 fe4b 	bl	8000638 <__aeabi_dmul>
 80079a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8007b98 <__ieee754_pow+0x738>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	f7f8 fe44 	bl	8000638 <__aeabi_dmul>
 80079b0:	a37b      	add	r3, pc, #492	@ (adr r3, 8007ba0 <__ieee754_pow+0x740>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fc89 	bl	80002cc <__adddf3>
 80079ba:	4622      	mov	r2, r4
 80079bc:	462b      	mov	r3, r5
 80079be:	f7f8 fe3b 	bl	8000638 <__aeabi_dmul>
 80079c2:	a379      	add	r3, pc, #484	@ (adr r3, 8007ba8 <__ieee754_pow+0x748>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fc80 	bl	80002cc <__adddf3>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f8 fe32 	bl	8000638 <__aeabi_dmul>
 80079d4:	a376      	add	r3, pc, #472	@ (adr r3, 8007bb0 <__ieee754_pow+0x750>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fc77 	bl	80002cc <__adddf3>
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	f7f8 fe29 	bl	8000638 <__aeabi_dmul>
 80079e6:	a374      	add	r3, pc, #464	@ (adr r3, 8007bb8 <__ieee754_pow+0x758>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fc6e 	bl	80002cc <__adddf3>
 80079f0:	4622      	mov	r2, r4
 80079f2:	462b      	mov	r3, r5
 80079f4:	f7f8 fe20 	bl	8000638 <__aeabi_dmul>
 80079f8:	a371      	add	r3, pc, #452	@ (adr r3, 8007bc0 <__ieee754_pow+0x760>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f7f8 fc65 	bl	80002cc <__adddf3>
 8007a02:	4622      	mov	r2, r4
 8007a04:	4606      	mov	r6, r0
 8007a06:	460f      	mov	r7, r1
 8007a08:	462b      	mov	r3, r5
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7f8 fe13 	bl	8000638 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4630      	mov	r0, r6
 8007a18:	4639      	mov	r1, r7
 8007a1a:	f7f8 fe0d 	bl	8000638 <__aeabi_dmul>
 8007a1e:	465a      	mov	r2, fp
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	464b      	mov	r3, r9
 8007a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a2a:	f7f8 fc4f 	bl	80002cc <__adddf3>
 8007a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a32:	f7f8 fe01 	bl	8000638 <__aeabi_dmul>
 8007a36:	4622      	mov	r2, r4
 8007a38:	462b      	mov	r3, r5
 8007a3a:	f7f8 fc47 	bl	80002cc <__adddf3>
 8007a3e:	465a      	mov	r2, fp
 8007a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a44:	464b      	mov	r3, r9
 8007a46:	4658      	mov	r0, fp
 8007a48:	4649      	mov	r1, r9
 8007a4a:	f7f8 fdf5 	bl	8000638 <__aeabi_dmul>
 8007a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bf8 <__ieee754_pow+0x798>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	f7f8 fc39 	bl	80002cc <__adddf3>
 8007a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a5e:	f7f8 fc35 	bl	80002cc <__adddf3>
 8007a62:	46d8      	mov	r8, fp
 8007a64:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007a68:	460d      	mov	r5, r1
 8007a6a:	465a      	mov	r2, fp
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007a76:	f7f8 fddf 	bl	8000638 <__aeabi_dmul>
 8007a7a:	465c      	mov	r4, fp
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4689      	mov	r9, r1
 8007a80:	4b5d      	ldr	r3, [pc, #372]	@ (8007bf8 <__ieee754_pow+0x798>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fc1e 	bl	80002c8 <__aeabi_dsub>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	f7f8 fc1a 	bl	80002c8 <__aeabi_dsub>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a9c:	f7f8 fc14 	bl	80002c8 <__aeabi_dsub>
 8007aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aa4:	f7f8 fdc8 	bl	8000638 <__aeabi_dmul>
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	462b      	mov	r3, r5
 8007ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab4:	f7f8 fdc0 	bl	8000638 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f8 fc04 	bl	80002cc <__adddf3>
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 fbfc 	bl	80002cc <__adddf3>
 8007ad4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007ad8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007bc8 <__ieee754_pow+0x768>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	4658      	mov	r0, fp
 8007ae0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	f7f8 fda7 	bl	8000638 <__aeabi_dmul>
 8007aea:	465c      	mov	r4, fp
 8007aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fbe6 	bl	80002c8 <__aeabi_dsub>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 fbe0 	bl	80002c8 <__aeabi_dsub>
 8007b08:	a331      	add	r3, pc, #196	@ (adr r3, 8007bd0 <__ieee754_pow+0x770>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fd93 	bl	8000638 <__aeabi_dmul>
 8007b12:	a331      	add	r3, pc, #196	@ (adr r3, 8007bd8 <__ieee754_pow+0x778>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fd8a 	bl	8000638 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fbce 	bl	80002cc <__adddf3>
 8007b30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b32:	4b32      	ldr	r3, [pc, #200]	@ (8007bfc <__ieee754_pow+0x79c>)
 8007b34:	4413      	add	r3, r2
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f7f8 fbc7 	bl	80002cc <__adddf3>
 8007b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b44:	f7f8 fd0e 	bl	8000564 <__aeabi_i2d>
 8007b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c00 <__ieee754_pow+0x7a0>)
 8007b4c:	4413      	add	r3, r2
 8007b4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b52:	4606      	mov	r6, r0
 8007b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b58:	460f      	mov	r7, r1
 8007b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b5e:	f7f8 fbb5 	bl	80002cc <__adddf3>
 8007b62:	4642      	mov	r2, r8
 8007b64:	464b      	mov	r3, r9
 8007b66:	f7f8 fbb1 	bl	80002cc <__adddf3>
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	f7f8 fbad 	bl	80002cc <__adddf3>
 8007b72:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007b76:	4632      	mov	r2, r6
 8007b78:	463b      	mov	r3, r7
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	460d      	mov	r5, r1
 8007b7e:	f7f8 fba3 	bl	80002c8 <__aeabi_dsub>
 8007b82:	4642      	mov	r2, r8
 8007b84:	464b      	mov	r3, r9
 8007b86:	f7f8 fb9f 	bl	80002c8 <__aeabi_dsub>
 8007b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8e:	f7f8 fb9b 	bl	80002c8 <__aeabi_dsub>
 8007b92:	465c      	mov	r4, fp
 8007b94:	e036      	b.n	8007c04 <__ieee754_pow+0x7a4>
 8007b96:	bf00      	nop
 8007b98:	4a454eef 	.word	0x4a454eef
 8007b9c:	3fca7e28 	.word	0x3fca7e28
 8007ba0:	93c9db65 	.word	0x93c9db65
 8007ba4:	3fcd864a 	.word	0x3fcd864a
 8007ba8:	a91d4101 	.word	0xa91d4101
 8007bac:	3fd17460 	.word	0x3fd17460
 8007bb0:	518f264d 	.word	0x518f264d
 8007bb4:	3fd55555 	.word	0x3fd55555
 8007bb8:	db6fabff 	.word	0xdb6fabff
 8007bbc:	3fdb6db6 	.word	0x3fdb6db6
 8007bc0:	33333303 	.word	0x33333303
 8007bc4:	3fe33333 	.word	0x3fe33333
 8007bc8:	e0000000 	.word	0xe0000000
 8007bcc:	3feec709 	.word	0x3feec709
 8007bd0:	dc3a03fd 	.word	0xdc3a03fd
 8007bd4:	3feec709 	.word	0x3feec709
 8007bd8:	145b01f5 	.word	0x145b01f5
 8007bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8007be0:	7ff00000 	.word	0x7ff00000
 8007be4:	43400000 	.word	0x43400000
 8007be8:	0003988e 	.word	0x0003988e
 8007bec:	000bb679 	.word	0x000bb679
 8007bf0:	08009050 	.word	0x08009050
 8007bf4:	3ff00000 	.word	0x3ff00000
 8007bf8:	40080000 	.word	0x40080000
 8007bfc:	08009030 	.word	0x08009030
 8007c00:	08009040 	.word	0x08009040
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c0c:	e5d6      	b.n	80077bc <__ieee754_pow+0x35c>
 8007c0e:	f04f 0a01 	mov.w	sl, #1
 8007c12:	e65e      	b.n	80078d2 <__ieee754_pow+0x472>
 8007c14:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007eec <__ieee754_pow+0xa8c>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 fb55 	bl	80002cc <__adddf3>
 8007c22:	4642      	mov	r2, r8
 8007c24:	e9cd 0100 	strd	r0, r1, [sp]
 8007c28:	464b      	mov	r3, r9
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f7f8 fb4b 	bl	80002c8 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3a:	f7f8 ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	f47f adfe 	bne.w	8007840 <__ieee754_pow+0x3e0>
 8007c44:	4ba2      	ldr	r3, [pc, #648]	@ (8007ed0 <__ieee754_pow+0xa70>)
 8007c46:	e022      	b.n	8007c8e <__ieee754_pow+0x82e>
 8007c48:	4ca2      	ldr	r4, [pc, #648]	@ (8007ed4 <__ieee754_pow+0xa74>)
 8007c4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	d919      	bls.n	8007c86 <__ieee754_pow+0x826>
 8007c52:	4ba1      	ldr	r3, [pc, #644]	@ (8007ed8 <__ieee754_pow+0xa78>)
 8007c54:	440b      	add	r3, r1
 8007c56:	4303      	orrs	r3, r0
 8007c58:	d009      	beq.n	8007c6e <__ieee754_pow+0x80e>
 8007c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	f7f8 ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8007c66:	3800      	subs	r0, #0
 8007c68:	bf18      	it	ne
 8007c6a:	2001      	movne	r0, #1
 8007c6c:	e512      	b.n	8007694 <__ieee754_pow+0x234>
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	f7f8 fb29 	bl	80002c8 <__aeabi_dsub>
 8007c76:	4632      	mov	r2, r6
 8007c78:	463b      	mov	r3, r7
 8007c7a:	f7f8 ff63 	bl	8000b44 <__aeabi_dcmpge>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d1eb      	bne.n	8007c5a <__ieee754_pow+0x7fa>
 8007c82:	4b96      	ldr	r3, [pc, #600]	@ (8007edc <__ieee754_pow+0xa7c>)
 8007c84:	e003      	b.n	8007c8e <__ieee754_pow+0x82e>
 8007c86:	4a96      	ldr	r2, [pc, #600]	@ (8007ee0 <__ieee754_pow+0xa80>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f240 80e7 	bls.w	8007e5c <__ieee754_pow+0x9fc>
 8007c8e:	151b      	asrs	r3, r3, #20
 8007c90:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007c94:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007c98:	fa4a fa03 	asr.w	sl, sl, r3
 8007c9c:	44da      	add	sl, fp
 8007c9e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ca2:	4890      	ldr	r0, [pc, #576]	@ (8007ee4 <__ieee754_pow+0xa84>)
 8007ca4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007ca8:	4108      	asrs	r0, r1
 8007caa:	ea00 030a 	and.w	r3, r0, sl
 8007cae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007cb2:	f1c1 0114 	rsb	r1, r1, #20
 8007cb6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007cba:	fa4a fa01 	asr.w	sl, sl, r1
 8007cbe:	f1bb 0f00 	cmp.w	fp, #0
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	bfb8      	it	lt
 8007ccc:	f1ca 0a00 	rsblt	sl, sl, #0
 8007cd0:	f7f8 fafa 	bl	80002c8 <__aeabi_dsub>
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	4632      	mov	r2, r6
 8007cda:	463b      	mov	r3, r7
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f8 faf4 	bl	80002cc <__adddf3>
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	a36a      	add	r3, pc, #424	@ (adr r3, 8007e90 <__ieee754_pow+0xa30>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	4620      	mov	r0, r4
 8007cee:	460d      	mov	r5, r1
 8007cf0:	f7f8 fca2 	bl	8000638 <__aeabi_dmul>
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7f8 fae2 	bl	80002c8 <__aeabi_dsub>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fadc 	bl	80002c8 <__aeabi_dsub>
 8007d10:	a361      	add	r3, pc, #388	@ (adr r3, 8007e98 <__ieee754_pow+0xa38>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fc8f 	bl	8000638 <__aeabi_dmul>
 8007d1a:	a361      	add	r3, pc, #388	@ (adr r3, 8007ea0 <__ieee754_pow+0xa40>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	4680      	mov	r8, r0
 8007d22:	4689      	mov	r9, r1
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fc86 	bl	8000638 <__aeabi_dmul>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	f7f8 faca 	bl	80002cc <__adddf3>
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d44:	f7f8 fac2 	bl	80002cc <__adddf3>
 8007d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	4689      	mov	r9, r1
 8007d50:	f7f8 faba 	bl	80002c8 <__aeabi_dsub>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4620      	mov	r0, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7f8 fab4 	bl	80002c8 <__aeabi_dsub>
 8007d60:	4642      	mov	r2, r8
 8007d62:	4606      	mov	r6, r0
 8007d64:	460f      	mov	r7, r1
 8007d66:	464b      	mov	r3, r9
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fc64 	bl	8000638 <__aeabi_dmul>
 8007d70:	a34d      	add	r3, pc, #308	@ (adr r3, 8007ea8 <__ieee754_pow+0xa48>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	4604      	mov	r4, r0
 8007d78:	460d      	mov	r5, r1
 8007d7a:	f7f8 fc5d 	bl	8000638 <__aeabi_dmul>
 8007d7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007eb0 <__ieee754_pow+0xa50>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 faa0 	bl	80002c8 <__aeabi_dsub>
 8007d88:	4622      	mov	r2, r4
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	f7f8 fc54 	bl	8000638 <__aeabi_dmul>
 8007d90:	a349      	add	r3, pc, #292	@ (adr r3, 8007eb8 <__ieee754_pow+0xa58>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fa99 	bl	80002cc <__adddf3>
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	f7f8 fc4b 	bl	8000638 <__aeabi_dmul>
 8007da2:	a347      	add	r3, pc, #284	@ (adr r3, 8007ec0 <__ieee754_pow+0xa60>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fa8e 	bl	80002c8 <__aeabi_dsub>
 8007dac:	4622      	mov	r2, r4
 8007dae:	462b      	mov	r3, r5
 8007db0:	f7f8 fc42 	bl	8000638 <__aeabi_dmul>
 8007db4:	a344      	add	r3, pc, #272	@ (adr r3, 8007ec8 <__ieee754_pow+0xa68>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f7f8 fa87 	bl	80002cc <__adddf3>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	f7f8 fc39 	bl	8000638 <__aeabi_dmul>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 fa7b 	bl	80002c8 <__aeabi_dsub>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fc2b 	bl	8000638 <__aeabi_dmul>
 8007de2:	2200      	movs	r2, #0
 8007de4:	e9cd 0100 	strd	r0, r1, [sp]
 8007de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007dec:	4620      	mov	r0, r4
 8007dee:	4629      	mov	r1, r5
 8007df0:	f7f8 fa6a 	bl	80002c8 <__aeabi_dsub>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dfc:	f7f8 fd46 	bl	800088c <__aeabi_ddiv>
 8007e00:	4632      	mov	r2, r6
 8007e02:	4604      	mov	r4, r0
 8007e04:	460d      	mov	r5, r1
 8007e06:	463b      	mov	r3, r7
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 fc14 	bl	8000638 <__aeabi_dmul>
 8007e10:	4632      	mov	r2, r6
 8007e12:	463b      	mov	r3, r7
 8007e14:	f7f8 fa5a 	bl	80002cc <__adddf3>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4629      	mov	r1, r5
 8007e20:	f7f8 fa52 	bl	80002c8 <__aeabi_dsub>
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	f7f8 fa4e 	bl	80002c8 <__aeabi_dsub>
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4602      	mov	r2, r0
 8007e30:	492d      	ldr	r1, [pc, #180]	@ (8007ee8 <__ieee754_pow+0xa88>)
 8007e32:	2000      	movs	r0, #0
 8007e34:	f7f8 fa48 	bl	80002c8 <__aeabi_dsub>
 8007e38:	ec41 0b10 	vmov	d0, r0, r1
 8007e3c:	ee10 3a90 	vmov	r3, s1
 8007e40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e48:	da0b      	bge.n	8007e62 <__ieee754_pow+0xa02>
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	f000 fa50 	bl	80082f0 <scalbn>
 8007e50:	ec51 0b10 	vmov	r0, r1, d0
 8007e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e58:	f7ff bb6d 	b.w	8007536 <__ieee754_pow+0xd6>
 8007e5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007e60:	e73a      	b.n	8007cd8 <__ieee754_pow+0x878>
 8007e62:	ec51 0b10 	vmov	r0, r1, d0
 8007e66:	4619      	mov	r1, r3
 8007e68:	e7f4      	b.n	8007e54 <__ieee754_pow+0x9f4>
 8007e6a:	491f      	ldr	r1, [pc, #124]	@ (8007ee8 <__ieee754_pow+0xa88>)
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7ff bb14 	b.w	800749a <__ieee754_pow+0x3a>
 8007e72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e76:	f7ff bb10 	b.w	800749a <__ieee754_pow+0x3a>
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7ff bb0c 	b.w	800749a <__ieee754_pow+0x3a>
 8007e82:	460c      	mov	r4, r1
 8007e84:	f7ff bb69 	b.w	800755a <__ieee754_pow+0xfa>
 8007e88:	2400      	movs	r4, #0
 8007e8a:	f7ff bb4b 	b.w	8007524 <__ieee754_pow+0xc4>
 8007e8e:	bf00      	nop
 8007e90:	00000000 	.word	0x00000000
 8007e94:	3fe62e43 	.word	0x3fe62e43
 8007e98:	fefa39ef 	.word	0xfefa39ef
 8007e9c:	3fe62e42 	.word	0x3fe62e42
 8007ea0:	0ca86c39 	.word	0x0ca86c39
 8007ea4:	be205c61 	.word	0xbe205c61
 8007ea8:	72bea4d0 	.word	0x72bea4d0
 8007eac:	3e663769 	.word	0x3e663769
 8007eb0:	c5d26bf1 	.word	0xc5d26bf1
 8007eb4:	3ebbbd41 	.word	0x3ebbbd41
 8007eb8:	af25de2c 	.word	0xaf25de2c
 8007ebc:	3f11566a 	.word	0x3f11566a
 8007ec0:	16bebd93 	.word	0x16bebd93
 8007ec4:	3f66c16c 	.word	0x3f66c16c
 8007ec8:	5555553e 	.word	0x5555553e
 8007ecc:	3fc55555 	.word	0x3fc55555
 8007ed0:	40900000 	.word	0x40900000
 8007ed4:	4090cbff 	.word	0x4090cbff
 8007ed8:	3f6f3400 	.word	0x3f6f3400
 8007edc:	4090cc00 	.word	0x4090cc00
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	fff00000 	.word	0xfff00000
 8007ee8:	3ff00000 	.word	0x3ff00000
 8007eec:	652b82fe 	.word	0x652b82fe
 8007ef0:	3c971547 	.word	0x3c971547
 8007ef4:	00000000 	.word	0x00000000

08007ef8 <__ieee754_rem_pio2>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	ec57 6b10 	vmov	r6, r7, d0
 8007f00:	4bc5      	ldr	r3, [pc, #788]	@ (8008218 <__ieee754_rem_pio2+0x320>)
 8007f02:	b08d      	sub	sp, #52	@ 0x34
 8007f04:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007f08:	4598      	cmp	r8, r3
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	9704      	str	r7, [sp, #16]
 8007f0e:	d807      	bhi.n	8007f20 <__ieee754_rem_pio2+0x28>
 8007f10:	2200      	movs	r2, #0
 8007f12:	2300      	movs	r3, #0
 8007f14:	ed80 0b00 	vstr	d0, [r0]
 8007f18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	e028      	b.n	8007f72 <__ieee754_rem_pio2+0x7a>
 8007f20:	4bbe      	ldr	r3, [pc, #760]	@ (800821c <__ieee754_rem_pio2+0x324>)
 8007f22:	4598      	cmp	r8, r3
 8007f24:	d878      	bhi.n	8008018 <__ieee754_rem_pio2+0x120>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	4dbd      	ldr	r5, [pc, #756]	@ (8008220 <__ieee754_rem_pio2+0x328>)
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80081e0 <__ieee754_rem_pio2+0x2e8>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	4639      	mov	r1, r7
 8007f36:	dd38      	ble.n	8007faa <__ieee754_rem_pio2+0xb2>
 8007f38:	f7f8 f9c6 	bl	80002c8 <__aeabi_dsub>
 8007f3c:	45a8      	cmp	r8, r5
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	d01a      	beq.n	8007f7a <__ieee754_rem_pio2+0x82>
 8007f44:	a3a8      	add	r3, pc, #672	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x2f0>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 f9bd 	bl	80002c8 <__aeabi_dsub>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4680      	mov	r8, r0
 8007f54:	4689      	mov	r9, r1
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 f9b5 	bl	80002c8 <__aeabi_dsub>
 8007f5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x2f0>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 f9b0 	bl	80002c8 <__aeabi_dsub>
 8007f68:	e9c4 8900 	strd	r8, r9, [r4]
 8007f6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f70:	2501      	movs	r5, #1
 8007f72:	4628      	mov	r0, r5
 8007f74:	b00d      	add	sp, #52	@ 0x34
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	a39d      	add	r3, pc, #628	@ (adr r3, 80081f0 <__ieee754_rem_pio2+0x2f8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 f9a2 	bl	80002c8 <__aeabi_dsub>
 8007f84:	a39c      	add	r3, pc, #624	@ (adr r3, 80081f8 <__ieee754_rem_pio2+0x300>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	f7f8 f99b 	bl	80002c8 <__aeabi_dsub>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4680      	mov	r8, r0
 8007f98:	4689      	mov	r9, r1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	f7f8 f993 	bl	80002c8 <__aeabi_dsub>
 8007fa2:	a395      	add	r3, pc, #596	@ (adr r3, 80081f8 <__ieee754_rem_pio2+0x300>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	e7dc      	b.n	8007f64 <__ieee754_rem_pio2+0x6c>
 8007faa:	f7f8 f98f 	bl	80002cc <__adddf3>
 8007fae:	45a8      	cmp	r8, r5
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	460f      	mov	r7, r1
 8007fb4:	d018      	beq.n	8007fe8 <__ieee754_rem_pio2+0xf0>
 8007fb6:	a38c      	add	r3, pc, #560	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x2f0>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f986 	bl	80002cc <__adddf3>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 f97c 	bl	80002c8 <__aeabi_dsub>
 8007fd0:	a385      	add	r3, pc, #532	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x2f0>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 f979 	bl	80002cc <__adddf3>
 8007fda:	f04f 35ff 	mov.w	r5, #4294967295
 8007fde:	e9c4 8900 	strd	r8, r9, [r4]
 8007fe2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fe6:	e7c4      	b.n	8007f72 <__ieee754_rem_pio2+0x7a>
 8007fe8:	a381      	add	r3, pc, #516	@ (adr r3, 80081f0 <__ieee754_rem_pio2+0x2f8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 f96d 	bl	80002cc <__adddf3>
 8007ff2:	a381      	add	r3, pc, #516	@ (adr r3, 80081f8 <__ieee754_rem_pio2+0x300>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	f7f8 f966 	bl	80002cc <__adddf3>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 f95c 	bl	80002c8 <__aeabi_dsub>
 8008010:	a379      	add	r3, pc, #484	@ (adr r3, 80081f8 <__ieee754_rem_pio2+0x300>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	e7de      	b.n	8007fd6 <__ieee754_rem_pio2+0xde>
 8008018:	4b82      	ldr	r3, [pc, #520]	@ (8008224 <__ieee754_rem_pio2+0x32c>)
 800801a:	4598      	cmp	r8, r3
 800801c:	f200 80d1 	bhi.w	80081c2 <__ieee754_rem_pio2+0x2ca>
 8008020:	f7fe ff5a 	bl	8006ed8 <fabs>
 8008024:	ec57 6b10 	vmov	r6, r7, d0
 8008028:	a375      	add	r3, pc, #468	@ (adr r3, 8008200 <__ieee754_rem_pio2+0x308>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 fb01 	bl	8000638 <__aeabi_dmul>
 8008036:	4b7c      	ldr	r3, [pc, #496]	@ (8008228 <__ieee754_rem_pio2+0x330>)
 8008038:	2200      	movs	r2, #0
 800803a:	f7f8 f947 	bl	80002cc <__adddf3>
 800803e:	f7f8 fdab 	bl	8000b98 <__aeabi_d2iz>
 8008042:	4605      	mov	r5, r0
 8008044:	f7f8 fa8e 	bl	8000564 <__aeabi_i2d>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008050:	a363      	add	r3, pc, #396	@ (adr r3, 80081e0 <__ieee754_rem_pio2+0x2e8>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 faef 	bl	8000638 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 f931 	bl	80002c8 <__aeabi_dsub>
 8008066:	a360      	add	r3, pc, #384	@ (adr r3, 80081e8 <__ieee754_rem_pio2+0x2f0>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	2d1f      	cmp	r5, #31
 800807a:	4606      	mov	r6, r0
 800807c:	460f      	mov	r7, r1
 800807e:	dc0c      	bgt.n	800809a <__ieee754_rem_pio2+0x1a2>
 8008080:	4b6a      	ldr	r3, [pc, #424]	@ (800822c <__ieee754_rem_pio2+0x334>)
 8008082:	1e6a      	subs	r2, r5, #1
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	4543      	cmp	r3, r8
 800808a:	d006      	beq.n	800809a <__ieee754_rem_pio2+0x1a2>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	f7f8 f918 	bl	80002c8 <__aeabi_dsub>
 8008098:	e00e      	b.n	80080b8 <__ieee754_rem_pio2+0x1c0>
 800809a:	463b      	mov	r3, r7
 800809c:	4632      	mov	r2, r6
 800809e:	4650      	mov	r0, sl
 80080a0:	4659      	mov	r1, fp
 80080a2:	f7f8 f911 	bl	80002c8 <__aeabi_dsub>
 80080a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080aa:	9305      	str	r3, [sp, #20]
 80080ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	dc02      	bgt.n	80080be <__ieee754_rem_pio2+0x1c6>
 80080b8:	e9c4 0100 	strd	r0, r1, [r4]
 80080bc:	e039      	b.n	8008132 <__ieee754_rem_pio2+0x23a>
 80080be:	a34c      	add	r3, pc, #304	@ (adr r3, 80081f0 <__ieee754_rem_pio2+0x2f8>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4650      	mov	r0, sl
 80080d6:	4659      	mov	r1, fp
 80080d8:	f7f8 f8f6 	bl	80002c8 <__aeabi_dsub>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	4650      	mov	r0, sl
 80080e6:	4659      	mov	r1, fp
 80080e8:	f7f8 f8ee 	bl	80002c8 <__aeabi_dsub>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 f8ea 	bl	80002c8 <__aeabi_dsub>
 80080f4:	a340      	add	r3, pc, #256	@ (adr r3, 80081f8 <__ieee754_rem_pio2+0x300>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	4606      	mov	r6, r0
 80080fc:	460f      	mov	r7, r1
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fa99 	bl	8000638 <__aeabi_dmul>
 8008106:	4632      	mov	r2, r6
 8008108:	463b      	mov	r3, r7
 800810a:	f7f8 f8dd 	bl	80002c8 <__aeabi_dsub>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 f8d5 	bl	80002c8 <__aeabi_dsub>
 800811e:	9a05      	ldr	r2, [sp, #20]
 8008120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b31      	cmp	r3, #49	@ 0x31
 8008128:	dc20      	bgt.n	800816c <__ieee754_rem_pio2+0x274>
 800812a:	e9c4 0100 	strd	r0, r1, [r4]
 800812e:	46c2      	mov	sl, r8
 8008130:	46cb      	mov	fp, r9
 8008132:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008136:	4650      	mov	r0, sl
 8008138:	4642      	mov	r2, r8
 800813a:	464b      	mov	r3, r9
 800813c:	4659      	mov	r1, fp
 800813e:	f7f8 f8c3 	bl	80002c8 <__aeabi_dsub>
 8008142:	463b      	mov	r3, r7
 8008144:	4632      	mov	r2, r6
 8008146:	f7f8 f8bf 	bl	80002c8 <__aeabi_dsub>
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008152:	f6bf af0e 	bge.w	8007f72 <__ieee754_rem_pio2+0x7a>
 8008156:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008160:	f8c4 8000 	str.w	r8, [r4]
 8008164:	60a0      	str	r0, [r4, #8]
 8008166:	60e3      	str	r3, [r4, #12]
 8008168:	426d      	negs	r5, r5
 800816a:	e702      	b.n	8007f72 <__ieee754_rem_pio2+0x7a>
 800816c:	a326      	add	r3, pc, #152	@ (adr r3, 8008208 <__ieee754_rem_pio2+0x310>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008176:	f7f8 fa5f 	bl	8000638 <__aeabi_dmul>
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4640      	mov	r0, r8
 8008184:	4649      	mov	r1, r9
 8008186:	f7f8 f89f 	bl	80002c8 <__aeabi_dsub>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4682      	mov	sl, r0
 8008190:	468b      	mov	fp, r1
 8008192:	4640      	mov	r0, r8
 8008194:	4649      	mov	r1, r9
 8008196:	f7f8 f897 	bl	80002c8 <__aeabi_dsub>
 800819a:	4632      	mov	r2, r6
 800819c:	463b      	mov	r3, r7
 800819e:	f7f8 f893 	bl	80002c8 <__aeabi_dsub>
 80081a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8008210 <__ieee754_rem_pio2+0x318>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	4606      	mov	r6, r0
 80081aa:	460f      	mov	r7, r1
 80081ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 f886 	bl	80002c8 <__aeabi_dsub>
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	e764      	b.n	800808c <__ieee754_rem_pio2+0x194>
 80081c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008230 <__ieee754_rem_pio2+0x338>)
 80081c4:	4598      	cmp	r8, r3
 80081c6:	d935      	bls.n	8008234 <__ieee754_rem_pio2+0x33c>
 80081c8:	4632      	mov	r2, r6
 80081ca:	463b      	mov	r3, r7
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 f87a 	bl	80002c8 <__aeabi_dsub>
 80081d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081d8:	e9c4 0100 	strd	r0, r1, [r4]
 80081dc:	e69e      	b.n	8007f1c <__ieee754_rem_pio2+0x24>
 80081de:	bf00      	nop
 80081e0:	54400000 	.word	0x54400000
 80081e4:	3ff921fb 	.word	0x3ff921fb
 80081e8:	1a626331 	.word	0x1a626331
 80081ec:	3dd0b461 	.word	0x3dd0b461
 80081f0:	1a600000 	.word	0x1a600000
 80081f4:	3dd0b461 	.word	0x3dd0b461
 80081f8:	2e037073 	.word	0x2e037073
 80081fc:	3ba3198a 	.word	0x3ba3198a
 8008200:	6dc9c883 	.word	0x6dc9c883
 8008204:	3fe45f30 	.word	0x3fe45f30
 8008208:	2e000000 	.word	0x2e000000
 800820c:	3ba3198a 	.word	0x3ba3198a
 8008210:	252049c1 	.word	0x252049c1
 8008214:	397b839a 	.word	0x397b839a
 8008218:	3fe921fb 	.word	0x3fe921fb
 800821c:	4002d97b 	.word	0x4002d97b
 8008220:	3ff921fb 	.word	0x3ff921fb
 8008224:	413921fb 	.word	0x413921fb
 8008228:	3fe00000 	.word	0x3fe00000
 800822c:	08009060 	.word	0x08009060
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008238:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800823c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008240:	4630      	mov	r0, r6
 8008242:	460f      	mov	r7, r1
 8008244:	f7f8 fca8 	bl	8000b98 <__aeabi_d2iz>
 8008248:	f7f8 f98c 	bl	8000564 <__aeabi_i2d>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008258:	f7f8 f836 	bl	80002c8 <__aeabi_dsub>
 800825c:	4b22      	ldr	r3, [pc, #136]	@ (80082e8 <__ieee754_rem_pio2+0x3f0>)
 800825e:	2200      	movs	r2, #0
 8008260:	f7f8 f9ea 	bl	8000638 <__aeabi_dmul>
 8008264:	460f      	mov	r7, r1
 8008266:	4606      	mov	r6, r0
 8008268:	f7f8 fc96 	bl	8000b98 <__aeabi_d2iz>
 800826c:	f7f8 f97a 	bl	8000564 <__aeabi_i2d>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800827c:	f7f8 f824 	bl	80002c8 <__aeabi_dsub>
 8008280:	4b19      	ldr	r3, [pc, #100]	@ (80082e8 <__ieee754_rem_pio2+0x3f0>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 f9d8 	bl	8000638 <__aeabi_dmul>
 8008288:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800828c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008290:	f04f 0803 	mov.w	r8, #3
 8008294:	2600      	movs	r6, #0
 8008296:	2700      	movs	r7, #0
 8008298:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800829c:	4632      	mov	r2, r6
 800829e:	463b      	mov	r3, r7
 80082a0:	46c2      	mov	sl, r8
 80082a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80082a6:	f7f8 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d1f4      	bne.n	8008298 <__ieee754_rem_pio2+0x3a0>
 80082ae:	4b0f      	ldr	r3, [pc, #60]	@ (80082ec <__ieee754_rem_pio2+0x3f4>)
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	2302      	movs	r3, #2
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4653      	mov	r3, sl
 80082ba:	4621      	mov	r1, r4
 80082bc:	a806      	add	r0, sp, #24
 80082be:	f000 f8cf 	bl	8008460 <__kernel_rem_pio2>
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4605      	mov	r5, r0
 80082c8:	f6bf ae53 	bge.w	8007f72 <__ieee754_rem_pio2+0x7a>
 80082cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80082d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082d4:	e9c4 2300 	strd	r2, r3, [r4]
 80082d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80082dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80082e4:	e740      	b.n	8008168 <__ieee754_rem_pio2+0x270>
 80082e6:	bf00      	nop
 80082e8:	41700000 	.word	0x41700000
 80082ec:	080090e0 	.word	0x080090e0

080082f0 <scalbn>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	ec55 4b10 	vmov	r4, r5, d0
 80082f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80082fa:	4606      	mov	r6, r0
 80082fc:	462b      	mov	r3, r5
 80082fe:	b991      	cbnz	r1, 8008326 <scalbn+0x36>
 8008300:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008304:	4323      	orrs	r3, r4
 8008306:	d03b      	beq.n	8008380 <scalbn+0x90>
 8008308:	4b33      	ldr	r3, [pc, #204]	@ (80083d8 <scalbn+0xe8>)
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	2200      	movs	r2, #0
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <scalbn+0xec>)
 8008316:	429e      	cmp	r6, r3
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	da0f      	bge.n	800833e <scalbn+0x4e>
 800831e:	a326      	add	r3, pc, #152	@ (adr r3, 80083b8 <scalbn+0xc8>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	e01e      	b.n	8008364 <scalbn+0x74>
 8008326:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800832a:	4291      	cmp	r1, r2
 800832c:	d10b      	bne.n	8008346 <scalbn+0x56>
 800832e:	4622      	mov	r2, r4
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f7 ffca 	bl	80002cc <__adddf3>
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	e020      	b.n	8008380 <scalbn+0x90>
 800833e:	460b      	mov	r3, r1
 8008340:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008344:	3936      	subs	r1, #54	@ 0x36
 8008346:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800834a:	4296      	cmp	r6, r2
 800834c:	dd0d      	ble.n	800836a <scalbn+0x7a>
 800834e:	2d00      	cmp	r5, #0
 8008350:	a11b      	add	r1, pc, #108	@ (adr r1, 80083c0 <scalbn+0xd0>)
 8008352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008356:	da02      	bge.n	800835e <scalbn+0x6e>
 8008358:	a11b      	add	r1, pc, #108	@ (adr r1, 80083c8 <scalbn+0xd8>)
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	a318      	add	r3, pc, #96	@ (adr r3, 80083c0 <scalbn+0xd0>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f8 f968 	bl	8000638 <__aeabi_dmul>
 8008368:	e7e6      	b.n	8008338 <scalbn+0x48>
 800836a:	1872      	adds	r2, r6, r1
 800836c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008370:	428a      	cmp	r2, r1
 8008372:	dcec      	bgt.n	800834e <scalbn+0x5e>
 8008374:	2a00      	cmp	r2, #0
 8008376:	dd06      	ble.n	8008386 <scalbn+0x96>
 8008378:	f36f 531e 	bfc	r3, #20, #11
 800837c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008380:	ec45 4b10 	vmov	d0, r4, r5
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800838a:	da08      	bge.n	800839e <scalbn+0xae>
 800838c:	2d00      	cmp	r5, #0
 800838e:	a10a      	add	r1, pc, #40	@ (adr r1, 80083b8 <scalbn+0xc8>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	dac3      	bge.n	800831e <scalbn+0x2e>
 8008396:	a10e      	add	r1, pc, #56	@ (adr r1, 80083d0 <scalbn+0xe0>)
 8008398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839c:	e7bf      	b.n	800831e <scalbn+0x2e>
 800839e:	3236      	adds	r2, #54	@ 0x36
 80083a0:	f36f 531e 	bfc	r3, #20, #11
 80083a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083a8:	4620      	mov	r0, r4
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <scalbn+0xf0>)
 80083ac:	4629      	mov	r1, r5
 80083ae:	2200      	movs	r2, #0
 80083b0:	e7d8      	b.n	8008364 <scalbn+0x74>
 80083b2:	bf00      	nop
 80083b4:	f3af 8000 	nop.w
 80083b8:	c2f8f359 	.word	0xc2f8f359
 80083bc:	01a56e1f 	.word	0x01a56e1f
 80083c0:	8800759c 	.word	0x8800759c
 80083c4:	7e37e43c 	.word	0x7e37e43c
 80083c8:	8800759c 	.word	0x8800759c
 80083cc:	fe37e43c 	.word	0xfe37e43c
 80083d0:	c2f8f359 	.word	0xc2f8f359
 80083d4:	81a56e1f 	.word	0x81a56e1f
 80083d8:	43500000 	.word	0x43500000
 80083dc:	ffff3cb0 	.word	0xffff3cb0
 80083e0:	3c900000 	.word	0x3c900000

080083e4 <with_errno>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	ed2d 8b02 	vpush	{d8}
 80083ea:	eeb0 8a40 	vmov.f32	s16, s0
 80083ee:	eef0 8a60 	vmov.f32	s17, s1
 80083f2:	4604      	mov	r4, r0
 80083f4:	f7fc fca4 	bl	8004d40 <__errno>
 80083f8:	eeb0 0a48 	vmov.f32	s0, s16
 80083fc:	eef0 0a68 	vmov.f32	s1, s17
 8008400:	ecbd 8b02 	vpop	{d8}
 8008404:	6004      	str	r4, [r0, #0]
 8008406:	bd10      	pop	{r4, pc}

08008408 <xflow>:
 8008408:	4603      	mov	r3, r0
 800840a:	b507      	push	{r0, r1, r2, lr}
 800840c:	ec51 0b10 	vmov	r0, r1, d0
 8008410:	b183      	cbz	r3, 8008434 <xflow+0x2c>
 8008412:	4602      	mov	r2, r0
 8008414:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008418:	e9cd 2300 	strd	r2, r3, [sp]
 800841c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008420:	f7f8 f90a 	bl	8000638 <__aeabi_dmul>
 8008424:	ec41 0b10 	vmov	d0, r0, r1
 8008428:	2022      	movs	r0, #34	@ 0x22
 800842a:	b003      	add	sp, #12
 800842c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008430:	f7ff bfd8 	b.w	80083e4 <with_errno>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	e7ee      	b.n	8008418 <xflow+0x10>
 800843a:	0000      	movs	r0, r0
 800843c:	0000      	movs	r0, r0
	...

08008440 <__math_uflow>:
 8008440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008448 <__math_uflow+0x8>
 8008444:	f7ff bfe0 	b.w	8008408 <xflow>
 8008448:	00000000 	.word	0x00000000
 800844c:	10000000 	.word	0x10000000

08008450 <__math_oflow>:
 8008450:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008458 <__math_oflow+0x8>
 8008454:	f7ff bfd8 	b.w	8008408 <xflow>
 8008458:	00000000 	.word	0x00000000
 800845c:	70000000 	.word	0x70000000

08008460 <__kernel_rem_pio2>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	ed2d 8b02 	vpush	{d8}
 8008468:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800846c:	f112 0f14 	cmn.w	r2, #20
 8008470:	9306      	str	r3, [sp, #24]
 8008472:	9104      	str	r1, [sp, #16]
 8008474:	4bc2      	ldr	r3, [pc, #776]	@ (8008780 <__kernel_rem_pio2+0x320>)
 8008476:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008478:	9008      	str	r0, [sp, #32]
 800847a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	f103 33ff 	add.w	r3, r3, #4294967295
 8008486:	bfa8      	it	ge
 8008488:	1ed4      	subge	r4, r2, #3
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	bfb2      	itee	lt
 800848e:	2400      	movlt	r4, #0
 8008490:	2318      	movge	r3, #24
 8008492:	fb94 f4f3 	sdivge	r4, r4, r3
 8008496:	f06f 0317 	mvn.w	r3, #23
 800849a:	fb04 3303 	mla	r3, r4, r3, r3
 800849e:	eb03 0b02 	add.w	fp, r3, r2
 80084a2:	9b00      	ldr	r3, [sp, #0]
 80084a4:	9a05      	ldr	r2, [sp, #20]
 80084a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8008770 <__kernel_rem_pio2+0x310>
 80084aa:	eb03 0802 	add.w	r8, r3, r2
 80084ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80084b0:	1aa7      	subs	r7, r4, r2
 80084b2:	ae20      	add	r6, sp, #128	@ 0x80
 80084b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80084b8:	2500      	movs	r5, #0
 80084ba:	4545      	cmp	r5, r8
 80084bc:	dd12      	ble.n	80084e4 <__kernel_rem_pio2+0x84>
 80084be:	9b06      	ldr	r3, [sp, #24]
 80084c0:	aa20      	add	r2, sp, #128	@ 0x80
 80084c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80084c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80084ca:	2700      	movs	r7, #0
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	429f      	cmp	r7, r3
 80084d0:	dc2e      	bgt.n	8008530 <__kernel_rem_pio2+0xd0>
 80084d2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8008770 <__kernel_rem_pio2+0x310>
 80084d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084de:	46a8      	mov	r8, r5
 80084e0:	2600      	movs	r6, #0
 80084e2:	e01b      	b.n	800851c <__kernel_rem_pio2+0xbc>
 80084e4:	42ef      	cmn	r7, r5
 80084e6:	d407      	bmi.n	80084f8 <__kernel_rem_pio2+0x98>
 80084e8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80084ec:	f7f8 f83a 	bl	8000564 <__aeabi_i2d>
 80084f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80084f4:	3501      	adds	r5, #1
 80084f6:	e7e0      	b.n	80084ba <__kernel_rem_pio2+0x5a>
 80084f8:	ec51 0b18 	vmov	r0, r1, d8
 80084fc:	e7f8      	b.n	80084f0 <__kernel_rem_pio2+0x90>
 80084fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8008502:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008506:	f7f8 f897 	bl	8000638 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008512:	f7f7 fedb 	bl	80002cc <__adddf3>
 8008516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800851a:	3601      	adds	r6, #1
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	429e      	cmp	r6, r3
 8008520:	dded      	ble.n	80084fe <__kernel_rem_pio2+0x9e>
 8008522:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008526:	3701      	adds	r7, #1
 8008528:	ecaa 7b02 	vstmia	sl!, {d7}
 800852c:	3508      	adds	r5, #8
 800852e:	e7cd      	b.n	80084cc <__kernel_rem_pio2+0x6c>
 8008530:	9b00      	ldr	r3, [sp, #0]
 8008532:	f8dd 8000 	ldr.w	r8, [sp]
 8008536:	aa0c      	add	r2, sp, #48	@ 0x30
 8008538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800853c:	930a      	str	r3, [sp, #40]	@ 0x28
 800853e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008540:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008544:	9309      	str	r3, [sp, #36]	@ 0x24
 8008546:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800854a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800854c:	ab98      	add	r3, sp, #608	@ 0x260
 800854e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008552:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008556:	ed8d 7b02 	vstr	d7, [sp, #8]
 800855a:	ac0c      	add	r4, sp, #48	@ 0x30
 800855c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800855e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008562:	46a1      	mov	r9, r4
 8008564:	46c2      	mov	sl, r8
 8008566:	f1ba 0f00 	cmp.w	sl, #0
 800856a:	dc77      	bgt.n	800865c <__kernel_rem_pio2+0x1fc>
 800856c:	4658      	mov	r0, fp
 800856e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008572:	f7ff febd 	bl	80082f0 <scalbn>
 8008576:	ec57 6b10 	vmov	r6, r7, d0
 800857a:	2200      	movs	r2, #0
 800857c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f8 f858 	bl	8000638 <__aeabi_dmul>
 8008588:	ec41 0b10 	vmov	d0, r0, r1
 800858c:	f000 fab8 	bl	8008b00 <floor>
 8008590:	4b7c      	ldr	r3, [pc, #496]	@ (8008784 <__kernel_rem_pio2+0x324>)
 8008592:	ec51 0b10 	vmov	r0, r1, d0
 8008596:	2200      	movs	r2, #0
 8008598:	f7f8 f84e 	bl	8000638 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f7 fe90 	bl	80002c8 <__aeabi_dsub>
 80085a8:	460f      	mov	r7, r1
 80085aa:	4606      	mov	r6, r0
 80085ac:	f7f8 faf4 	bl	8000b98 <__aeabi_d2iz>
 80085b0:	9002      	str	r0, [sp, #8]
 80085b2:	f7f7 ffd7 	bl	8000564 <__aeabi_i2d>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f7 fe83 	bl	80002c8 <__aeabi_dsub>
 80085c2:	f1bb 0f00 	cmp.w	fp, #0
 80085c6:	4606      	mov	r6, r0
 80085c8:	460f      	mov	r7, r1
 80085ca:	dd6c      	ble.n	80086a6 <__kernel_rem_pio2+0x246>
 80085cc:	f108 31ff 	add.w	r1, r8, #4294967295
 80085d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80085d2:	9d02      	ldr	r5, [sp, #8]
 80085d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085d8:	f1cb 0018 	rsb	r0, fp, #24
 80085dc:	fa43 f200 	asr.w	r2, r3, r0
 80085e0:	4415      	add	r5, r2
 80085e2:	4082      	lsls	r2, r0
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80085e8:	9502      	str	r5, [sp, #8]
 80085ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80085ee:	f1cb 0217 	rsb	r2, fp, #23
 80085f2:	fa43 f902 	asr.w	r9, r3, r2
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	dd64      	ble.n	80086c6 <__kernel_rem_pio2+0x266>
 80085fc:	9b02      	ldr	r3, [sp, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	3301      	adds	r3, #1
 8008602:	9302      	str	r3, [sp, #8]
 8008604:	4615      	mov	r5, r2
 8008606:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800860a:	4590      	cmp	r8, r2
 800860c:	f300 80a1 	bgt.w	8008752 <__kernel_rem_pio2+0x2f2>
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	dd07      	ble.n	8008626 <__kernel_rem_pio2+0x1c6>
 8008616:	f1bb 0f01 	cmp.w	fp, #1
 800861a:	f000 80c1 	beq.w	80087a0 <__kernel_rem_pio2+0x340>
 800861e:	f1bb 0f02 	cmp.w	fp, #2
 8008622:	f000 80c8 	beq.w	80087b6 <__kernel_rem_pio2+0x356>
 8008626:	f1b9 0f02 	cmp.w	r9, #2
 800862a:	d14c      	bne.n	80086c6 <__kernel_rem_pio2+0x266>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	4955      	ldr	r1, [pc, #340]	@ (8008788 <__kernel_rem_pio2+0x328>)
 8008632:	2000      	movs	r0, #0
 8008634:	f7f7 fe48 	bl	80002c8 <__aeabi_dsub>
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	2d00      	cmp	r5, #0
 800863e:	d042      	beq.n	80086c6 <__kernel_rem_pio2+0x266>
 8008640:	4658      	mov	r0, fp
 8008642:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8008778 <__kernel_rem_pio2+0x318>
 8008646:	f7ff fe53 	bl	80082f0 <scalbn>
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	ec53 2b10 	vmov	r2, r3, d0
 8008652:	f7f7 fe39 	bl	80002c8 <__aeabi_dsub>
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	e034      	b.n	80086c6 <__kernel_rem_pio2+0x266>
 800865c:	4b4b      	ldr	r3, [pc, #300]	@ (800878c <__kernel_rem_pio2+0x32c>)
 800865e:	2200      	movs	r2, #0
 8008660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008664:	f7f7 ffe8 	bl	8000638 <__aeabi_dmul>
 8008668:	f7f8 fa96 	bl	8000b98 <__aeabi_d2iz>
 800866c:	f7f7 ff7a 	bl	8000564 <__aeabi_i2d>
 8008670:	4b47      	ldr	r3, [pc, #284]	@ (8008790 <__kernel_rem_pio2+0x330>)
 8008672:	2200      	movs	r2, #0
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	f7f7 ffde 	bl	8000638 <__aeabi_dmul>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008684:	f7f7 fe20 	bl	80002c8 <__aeabi_dsub>
 8008688:	f7f8 fa86 	bl	8000b98 <__aeabi_d2iz>
 800868c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008690:	f849 0b04 	str.w	r0, [r9], #4
 8008694:	4639      	mov	r1, r7
 8008696:	4630      	mov	r0, r6
 8008698:	f7f7 fe18 	bl	80002cc <__adddf3>
 800869c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a4:	e75f      	b.n	8008566 <__kernel_rem_pio2+0x106>
 80086a6:	d107      	bne.n	80086b8 <__kernel_rem_pio2+0x258>
 80086a8:	f108 33ff 	add.w	r3, r8, #4294967295
 80086ac:	aa0c      	add	r2, sp, #48	@ 0x30
 80086ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80086b6:	e79e      	b.n	80085f6 <__kernel_rem_pio2+0x196>
 80086b8:	4b36      	ldr	r3, [pc, #216]	@ (8008794 <__kernel_rem_pio2+0x334>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	f7f8 fa42 	bl	8000b44 <__aeabi_dcmpge>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d143      	bne.n	800874c <__kernel_rem_pio2+0x2ec>
 80086c4:	4681      	mov	r9, r0
 80086c6:	2200      	movs	r2, #0
 80086c8:	2300      	movs	r3, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	f7f8 fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f000 80c1 	beq.w	800885a <__kernel_rem_pio2+0x3fa>
 80086d8:	f108 33ff 	add.w	r3, r8, #4294967295
 80086dc:	2200      	movs	r2, #0
 80086de:	9900      	ldr	r1, [sp, #0]
 80086e0:	428b      	cmp	r3, r1
 80086e2:	da70      	bge.n	80087c6 <__kernel_rem_pio2+0x366>
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	f000 808b 	beq.w	8008800 <__kernel_rem_pio2+0x3a0>
 80086ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80086ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80086f0:	f1ab 0b18 	sub.w	fp, fp, #24
 80086f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f6      	beq.n	80086ea <__kernel_rem_pio2+0x28a>
 80086fc:	4658      	mov	r0, fp
 80086fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8008778 <__kernel_rem_pio2+0x318>
 8008702:	f7ff fdf5 	bl	80082f0 <scalbn>
 8008706:	f108 0301 	add.w	r3, r8, #1
 800870a:	00da      	lsls	r2, r3, #3
 800870c:	9205      	str	r2, [sp, #20]
 800870e:	ec55 4b10 	vmov	r4, r5, d0
 8008712:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008714:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800878c <__kernel_rem_pio2+0x32c>
 8008718:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800871c:	4646      	mov	r6, r8
 800871e:	f04f 0a00 	mov.w	sl, #0
 8008722:	2e00      	cmp	r6, #0
 8008724:	f280 80d1 	bge.w	80088ca <__kernel_rem_pio2+0x46a>
 8008728:	4644      	mov	r4, r8
 800872a:	2c00      	cmp	r4, #0
 800872c:	f2c0 80ff 	blt.w	800892e <__kernel_rem_pio2+0x4ce>
 8008730:	4b19      	ldr	r3, [pc, #100]	@ (8008798 <__kernel_rem_pio2+0x338>)
 8008732:	461f      	mov	r7, r3
 8008734:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	f04f 0a00 	mov.w	sl, #0
 8008740:	f04f 0b00 	mov.w	fp, #0
 8008744:	2600      	movs	r6, #0
 8008746:	eba8 0504 	sub.w	r5, r8, r4
 800874a:	e0e4      	b.n	8008916 <__kernel_rem_pio2+0x4b6>
 800874c:	f04f 0902 	mov.w	r9, #2
 8008750:	e754      	b.n	80085fc <__kernel_rem_pio2+0x19c>
 8008752:	f854 3b04 	ldr.w	r3, [r4], #4
 8008756:	bb0d      	cbnz	r5, 800879c <__kernel_rem_pio2+0x33c>
 8008758:	b123      	cbz	r3, 8008764 <__kernel_rem_pio2+0x304>
 800875a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800875e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008762:	2301      	movs	r3, #1
 8008764:	3201      	adds	r2, #1
 8008766:	461d      	mov	r5, r3
 8008768:	e74f      	b.n	800860a <__kernel_rem_pio2+0x1aa>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
	...
 800877c:	3ff00000 	.word	0x3ff00000
 8008780:	08009228 	.word	0x08009228
 8008784:	40200000 	.word	0x40200000
 8008788:	3ff00000 	.word	0x3ff00000
 800878c:	3e700000 	.word	0x3e700000
 8008790:	41700000 	.word	0x41700000
 8008794:	3fe00000 	.word	0x3fe00000
 8008798:	080091e8 	.word	0x080091e8
 800879c:	1acb      	subs	r3, r1, r3
 800879e:	e7de      	b.n	800875e <__kernel_rem_pio2+0x2fe>
 80087a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80087a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80087ae:	a90c      	add	r1, sp, #48	@ 0x30
 80087b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80087b4:	e737      	b.n	8008626 <__kernel_rem_pio2+0x1c6>
 80087b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80087ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80087c4:	e7f3      	b.n	80087ae <__kernel_rem_pio2+0x34e>
 80087c6:	a90c      	add	r1, sp, #48	@ 0x30
 80087c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	430a      	orrs	r2, r1
 80087d0:	e785      	b.n	80086de <__kernel_rem_pio2+0x27e>
 80087d2:	3401      	adds	r4, #1
 80087d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087d8:	2a00      	cmp	r2, #0
 80087da:	d0fa      	beq.n	80087d2 <__kernel_rem_pio2+0x372>
 80087dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087e2:	eb0d 0503 	add.w	r5, sp, r3
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	aa20      	add	r2, sp, #128	@ 0x80
 80087ea:	4443      	add	r3, r8
 80087ec:	f108 0701 	add.w	r7, r8, #1
 80087f0:	3d98      	subs	r5, #152	@ 0x98
 80087f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80087f6:	4444      	add	r4, r8
 80087f8:	42bc      	cmp	r4, r7
 80087fa:	da04      	bge.n	8008806 <__kernel_rem_pio2+0x3a6>
 80087fc:	46a0      	mov	r8, r4
 80087fe:	e6a2      	b.n	8008546 <__kernel_rem_pio2+0xe6>
 8008800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008802:	2401      	movs	r4, #1
 8008804:	e7e6      	b.n	80087d4 <__kernel_rem_pio2+0x374>
 8008806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008808:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800880c:	f7f7 feaa 	bl	8000564 <__aeabi_i2d>
 8008810:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8008ad0 <__kernel_rem_pio2+0x670>
 8008814:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800881c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008820:	46b2      	mov	sl, r6
 8008822:	f04f 0800 	mov.w	r8, #0
 8008826:	9b05      	ldr	r3, [sp, #20]
 8008828:	4598      	cmp	r8, r3
 800882a:	dd05      	ble.n	8008838 <__kernel_rem_pio2+0x3d8>
 800882c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008830:	3701      	adds	r7, #1
 8008832:	eca5 7b02 	vstmia	r5!, {d7}
 8008836:	e7df      	b.n	80087f8 <__kernel_rem_pio2+0x398>
 8008838:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800883c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008840:	f7f7 fefa 	bl	8000638 <__aeabi_dmul>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884c:	f7f7 fd3e 	bl	80002cc <__adddf3>
 8008850:	f108 0801 	add.w	r8, r8, #1
 8008854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008858:	e7e5      	b.n	8008826 <__kernel_rem_pio2+0x3c6>
 800885a:	f1cb 0000 	rsb	r0, fp, #0
 800885e:	ec47 6b10 	vmov	d0, r6, r7
 8008862:	f7ff fd45 	bl	80082f0 <scalbn>
 8008866:	ec55 4b10 	vmov	r4, r5, d0
 800886a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ad8 <__kernel_rem_pio2+0x678>)
 800886c:	2200      	movs	r2, #0
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f8 f967 	bl	8000b44 <__aeabi_dcmpge>
 8008876:	b300      	cbz	r0, 80088ba <__kernel_rem_pio2+0x45a>
 8008878:	4b98      	ldr	r3, [pc, #608]	@ (8008adc <__kernel_rem_pio2+0x67c>)
 800887a:	2200      	movs	r2, #0
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 feda 	bl	8000638 <__aeabi_dmul>
 8008884:	f7f8 f988 	bl	8000b98 <__aeabi_d2iz>
 8008888:	4606      	mov	r6, r0
 800888a:	f7f7 fe6b 	bl	8000564 <__aeabi_i2d>
 800888e:	4b92      	ldr	r3, [pc, #584]	@ (8008ad8 <__kernel_rem_pio2+0x678>)
 8008890:	2200      	movs	r2, #0
 8008892:	f7f7 fed1 	bl	8000638 <__aeabi_dmul>
 8008896:	460b      	mov	r3, r1
 8008898:	4602      	mov	r2, r0
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	f7f7 fd13 	bl	80002c8 <__aeabi_dsub>
 80088a2:	f7f8 f979 	bl	8000b98 <__aeabi_d2iz>
 80088a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80088a8:	f10b 0b18 	add.w	fp, fp, #24
 80088ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80088b0:	f108 0801 	add.w	r8, r8, #1
 80088b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80088b8:	e720      	b.n	80086fc <__kernel_rem_pio2+0x29c>
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f8 f96b 	bl	8000b98 <__aeabi_d2iz>
 80088c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80088c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80088c8:	e718      	b.n	80086fc <__kernel_rem_pio2+0x29c>
 80088ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80088cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80088d0:	f7f7 fe48 	bl	8000564 <__aeabi_i2d>
 80088d4:	4622      	mov	r2, r4
 80088d6:	462b      	mov	r3, r5
 80088d8:	f7f7 feae 	bl	8000638 <__aeabi_dmul>
 80088dc:	4652      	mov	r2, sl
 80088de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80088e2:	465b      	mov	r3, fp
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fea6 	bl	8000638 <__aeabi_dmul>
 80088ec:	3e01      	subs	r6, #1
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	e716      	b.n	8008722 <__kernel_rem_pio2+0x2c2>
 80088f4:	9906      	ldr	r1, [sp, #24]
 80088f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80088fa:	9106      	str	r1, [sp, #24]
 80088fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008900:	f7f7 fe9a 	bl	8000638 <__aeabi_dmul>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4650      	mov	r0, sl
 800890a:	4659      	mov	r1, fp
 800890c:	f7f7 fcde 	bl	80002cc <__adddf3>
 8008910:	3601      	adds	r6, #1
 8008912:	4682      	mov	sl, r0
 8008914:	468b      	mov	fp, r1
 8008916:	9b00      	ldr	r3, [sp, #0]
 8008918:	429e      	cmp	r6, r3
 800891a:	dc01      	bgt.n	8008920 <__kernel_rem_pio2+0x4c0>
 800891c:	42ae      	cmp	r6, r5
 800891e:	dde9      	ble.n	80088f4 <__kernel_rem_pio2+0x494>
 8008920:	ab48      	add	r3, sp, #288	@ 0x120
 8008922:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008926:	e9c5 ab00 	strd	sl, fp, [r5]
 800892a:	3c01      	subs	r4, #1
 800892c:	e6fd      	b.n	800872a <__kernel_rem_pio2+0x2ca>
 800892e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008930:	2b02      	cmp	r3, #2
 8008932:	dc0b      	bgt.n	800894c <__kernel_rem_pio2+0x4ec>
 8008934:	2b00      	cmp	r3, #0
 8008936:	dc35      	bgt.n	80089a4 <__kernel_rem_pio2+0x544>
 8008938:	d059      	beq.n	80089ee <__kernel_rem_pio2+0x58e>
 800893a:	9b02      	ldr	r3, [sp, #8]
 800893c:	f003 0007 	and.w	r0, r3, #7
 8008940:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008944:	ecbd 8b02 	vpop	{d8}
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800894e:	2b03      	cmp	r3, #3
 8008950:	d1f3      	bne.n	800893a <__kernel_rem_pio2+0x4da>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008958:	eb0d 0403 	add.w	r4, sp, r3
 800895c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008960:	4625      	mov	r5, r4
 8008962:	46c2      	mov	sl, r8
 8008964:	f1ba 0f00 	cmp.w	sl, #0
 8008968:	dc69      	bgt.n	8008a3e <__kernel_rem_pio2+0x5de>
 800896a:	4645      	mov	r5, r8
 800896c:	2d01      	cmp	r5, #1
 800896e:	f300 8087 	bgt.w	8008a80 <__kernel_rem_pio2+0x620>
 8008972:	9c05      	ldr	r4, [sp, #20]
 8008974:	ab48      	add	r3, sp, #288	@ 0x120
 8008976:	441c      	add	r4, r3
 8008978:	2000      	movs	r0, #0
 800897a:	2100      	movs	r1, #0
 800897c:	f1b8 0f01 	cmp.w	r8, #1
 8008980:	f300 809c 	bgt.w	8008abc <__kernel_rem_pio2+0x65c>
 8008984:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8008988:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800898c:	f1b9 0f00 	cmp.w	r9, #0
 8008990:	f040 80a6 	bne.w	8008ae0 <__kernel_rem_pio2+0x680>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	e9c3 5600 	strd	r5, r6, [r3]
 800899a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800899e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80089a2:	e7ca      	b.n	800893a <__kernel_rem_pio2+0x4da>
 80089a4:	9d05      	ldr	r5, [sp, #20]
 80089a6:	ab48      	add	r3, sp, #288	@ 0x120
 80089a8:	441d      	add	r5, r3
 80089aa:	4644      	mov	r4, r8
 80089ac:	2000      	movs	r0, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	2c00      	cmp	r4, #0
 80089b2:	da35      	bge.n	8008a20 <__kernel_rem_pio2+0x5c0>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	d038      	beq.n	8008a2c <__kernel_rem_pio2+0x5cc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089c0:	9c04      	ldr	r4, [sp, #16]
 80089c2:	e9c4 2300 	strd	r2, r3, [r4]
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80089ce:	f7f7 fc7b 	bl	80002c8 <__aeabi_dsub>
 80089d2:	ad4a      	add	r5, sp, #296	@ 0x128
 80089d4:	2401      	movs	r4, #1
 80089d6:	45a0      	cmp	r8, r4
 80089d8:	da2b      	bge.n	8008a32 <__kernel_rem_pio2+0x5d2>
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d002      	beq.n	80089e6 <__kernel_rem_pio2+0x586>
 80089e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089e4:	4619      	mov	r1, r3
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80089ec:	e7a5      	b.n	800893a <__kernel_rem_pio2+0x4da>
 80089ee:	9c05      	ldr	r4, [sp, #20]
 80089f0:	ab48      	add	r3, sp, #288	@ 0x120
 80089f2:	441c      	add	r4, r3
 80089f4:	2000      	movs	r0, #0
 80089f6:	2100      	movs	r1, #0
 80089f8:	f1b8 0f00 	cmp.w	r8, #0
 80089fc:	da09      	bge.n	8008a12 <__kernel_rem_pio2+0x5b2>
 80089fe:	f1b9 0f00 	cmp.w	r9, #0
 8008a02:	d002      	beq.n	8008a0a <__kernel_rem_pio2+0x5aa>
 8008a04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a08:	4619      	mov	r1, r3
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	e9c3 0100 	strd	r0, r1, [r3]
 8008a10:	e793      	b.n	800893a <__kernel_rem_pio2+0x4da>
 8008a12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a16:	f7f7 fc59 	bl	80002cc <__adddf3>
 8008a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a1e:	e7eb      	b.n	80089f8 <__kernel_rem_pio2+0x598>
 8008a20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008a24:	f7f7 fc52 	bl	80002cc <__adddf3>
 8008a28:	3c01      	subs	r4, #1
 8008a2a:	e7c1      	b.n	80089b0 <__kernel_rem_pio2+0x550>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	e7c6      	b.n	80089c0 <__kernel_rem_pio2+0x560>
 8008a32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008a36:	f7f7 fc49 	bl	80002cc <__adddf3>
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	e7cb      	b.n	80089d6 <__kernel_rem_pio2+0x576>
 8008a3e:	ed35 7b02 	vldmdb	r5!, {d7}
 8008a42:	ed8d 7b00 	vstr	d7, [sp]
 8008a46:	ed95 7b02 	vldr	d7, [r5, #8]
 8008a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a4e:	ec53 2b17 	vmov	r2, r3, d7
 8008a52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a56:	f7f7 fc39 	bl	80002cc <__adddf3>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a66:	f7f7 fc2f 	bl	80002c8 <__aeabi_dsub>
 8008a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a6e:	f7f7 fc2d 	bl	80002cc <__adddf3>
 8008a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008a7a:	e9c5 6700 	strd	r6, r7, [r5]
 8008a7e:	e771      	b.n	8008964 <__kernel_rem_pio2+0x504>
 8008a80:	ed34 7b02 	vldmdb	r4!, {d7}
 8008a84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008a88:	ec51 0b17 	vmov	r0, r1, d7
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	465b      	mov	r3, fp
 8008a90:	ed8d 7b00 	vstr	d7, [sp]
 8008a94:	f7f7 fc1a 	bl	80002cc <__adddf3>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	460f      	mov	r7, r1
 8008aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aa4:	f7f7 fc10 	bl	80002c8 <__aeabi_dsub>
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	465b      	mov	r3, fp
 8008aac:	f7f7 fc0e 	bl	80002cc <__adddf3>
 8008ab0:	3d01      	subs	r5, #1
 8008ab2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ab6:	e9c4 6700 	strd	r6, r7, [r4]
 8008aba:	e757      	b.n	800896c <__kernel_rem_pio2+0x50c>
 8008abc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ac0:	f7f7 fc04 	bl	80002cc <__adddf3>
 8008ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ac8:	e758      	b.n	800897c <__kernel_rem_pio2+0x51c>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
	...
 8008ad8:	41700000 	.word	0x41700000
 8008adc:	3e700000 	.word	0x3e700000
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	9a04      	ldr	r2, [sp, #16]
 8008ae4:	601d      	str	r5, [r3, #0]
 8008ae6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8008aea:	605c      	str	r4, [r3, #4]
 8008aec:	609f      	str	r7, [r3, #8]
 8008aee:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8008af2:	60d3      	str	r3, [r2, #12]
 8008af4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008af8:	6110      	str	r0, [r2, #16]
 8008afa:	6153      	str	r3, [r2, #20]
 8008afc:	e71d      	b.n	800893a <__kernel_rem_pio2+0x4da>
 8008afe:	bf00      	nop

08008b00 <floor>:
 8008b00:	ec51 0b10 	vmov	r0, r1, d0
 8008b04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008b10:	2e13      	cmp	r6, #19
 8008b12:	460c      	mov	r4, r1
 8008b14:	4605      	mov	r5, r0
 8008b16:	4680      	mov	r8, r0
 8008b18:	dc34      	bgt.n	8008b84 <floor+0x84>
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	da17      	bge.n	8008b4e <floor+0x4e>
 8008b1e:	a332      	add	r3, pc, #200	@ (adr r3, 8008be8 <floor+0xe8>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fbd2 	bl	80002cc <__adddf3>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f7f8 f814 	bl	8000b58 <__aeabi_dcmpgt>
 8008b30:	b150      	cbz	r0, 8008b48 <floor+0x48>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	da55      	bge.n	8008be2 <floor+0xe2>
 8008b36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008b3a:	432c      	orrs	r4, r5
 8008b3c:	2500      	movs	r5, #0
 8008b3e:	42ac      	cmp	r4, r5
 8008b40:	4c2b      	ldr	r4, [pc, #172]	@ (8008bf0 <floor+0xf0>)
 8008b42:	bf08      	it	eq
 8008b44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	e023      	b.n	8008b96 <floor+0x96>
 8008b4e:	4f29      	ldr	r7, [pc, #164]	@ (8008bf4 <floor+0xf4>)
 8008b50:	4137      	asrs	r7, r6
 8008b52:	ea01 0307 	and.w	r3, r1, r7
 8008b56:	4303      	orrs	r3, r0
 8008b58:	d01d      	beq.n	8008b96 <floor+0x96>
 8008b5a:	a323      	add	r3, pc, #140	@ (adr r3, 8008be8 <floor+0xe8>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fbb4 	bl	80002cc <__adddf3>
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 fff6 	bl	8000b58 <__aeabi_dcmpgt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d0eb      	beq.n	8008b48 <floor+0x48>
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	bfbe      	ittt	lt
 8008b74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008b78:	4133      	asrlt	r3, r6
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	ea24 0407 	bic.w	r4, r4, r7
 8008b80:	2500      	movs	r5, #0
 8008b82:	e7e1      	b.n	8008b48 <floor+0x48>
 8008b84:	2e33      	cmp	r6, #51	@ 0x33
 8008b86:	dd0a      	ble.n	8008b9e <floor+0x9e>
 8008b88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008b8c:	d103      	bne.n	8008b96 <floor+0x96>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	f7f7 fb9b 	bl	80002cc <__adddf3>
 8008b96:	ec41 0b10 	vmov	d0, r0, r1
 8008b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ba6:	40df      	lsrs	r7, r3
 8008ba8:	4207      	tst	r7, r0
 8008baa:	d0f4      	beq.n	8008b96 <floor+0x96>
 8008bac:	a30e      	add	r3, pc, #56	@ (adr r3, 8008be8 <floor+0xe8>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fb8b 	bl	80002cc <__adddf3>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f7f7 ffcd 	bl	8000b58 <__aeabi_dcmpgt>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d0c2      	beq.n	8008b48 <floor+0x48>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	da0a      	bge.n	8008bdc <floor+0xdc>
 8008bc6:	2e14      	cmp	r6, #20
 8008bc8:	d101      	bne.n	8008bce <floor+0xce>
 8008bca:	3401      	adds	r4, #1
 8008bcc:	e006      	b.n	8008bdc <floor+0xdc>
 8008bce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	40b3      	lsls	r3, r6
 8008bd6:	441d      	add	r5, r3
 8008bd8:	4545      	cmp	r5, r8
 8008bda:	d3f6      	bcc.n	8008bca <floor+0xca>
 8008bdc:	ea25 0507 	bic.w	r5, r5, r7
 8008be0:	e7b2      	b.n	8008b48 <floor+0x48>
 8008be2:	2500      	movs	r5, #0
 8008be4:	462c      	mov	r4, r5
 8008be6:	e7af      	b.n	8008b48 <floor+0x48>
 8008be8:	8800759c 	.word	0x8800759c
 8008bec:	7e37e43c 	.word	0x7e37e43c
 8008bf0:	bff00000 	.word	0xbff00000
 8008bf4:	000fffff 	.word	0x000fffff

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
