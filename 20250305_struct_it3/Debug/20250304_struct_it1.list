
20250304_struct_it1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800453c  0800453c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004544  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  080045ac  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080045ac  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a469  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d27  00000000  00000000  00010501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00012228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  00012a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022090  00000000  00000000  000130e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5cd  00000000  00000000  00035172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca810  00000000  00000000  0004073f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010af4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  0010af94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0010d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004368 	.word	0x08004368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004368 	.word	0x08004368

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getData>:
static uint8_t Adata[REV_SIZE] = {};
static uint8_t Gdata = 0;
static bool DF = 0;
bool AFF = 0;

int getData(UART_HandleTypeDef* huart,getdata* revdata){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
//	printf("getData\r\n");
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	490a      	ldr	r1, [pc, #40]	@ (8000614 <getData+0x38>)
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f001 fef1 	bl	80023d2 <HAL_UART_Receive_IT>
	if(DF == 1){
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <getData+0x3c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <getData+0x2c>
		AddStruct(revdata);
 80005f8:	6838      	ldr	r0, [r7, #0]
 80005fa:	f000 f88f 	bl	800071c <AddStruct>
		DF = 0;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <getData+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
		return 0;
 8000604:	2300      	movs	r3, #0
 8000606:	e001      	b.n	800060c <getData+0x30>
	}
//	printf("snct\r\n");
	return -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000008f 	.word	0x2000008f
 8000618:	20000090 	.word	0x20000090

0800061c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	static int Gcount;
	static int timeout;
	if(Gdata == 0xaf){
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <HAL_UART_RxCpltCallback+0x94>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2baf      	cmp	r3, #175	@ 0xaf
 800062a:	d106      	bne.n	800063a <HAL_UART_RxCpltCallback+0x1e>
		AFF = true;
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <HAL_UART_RxCpltCallback+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
		Gcount = 0;
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e00b      	b.n	8000652 <HAL_UART_RxCpltCallback+0x36>
	}else{
		timeout++;
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <HAL_UART_RxCpltCallback+0xa0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <HAL_UART_RxCpltCallback+0xa0>)
 8000642:	6013      	str	r3, [r2, #0]
		if(timeout >= TIMEOUT_MAX){
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <HAL_UART_RxCpltCallback+0xa0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b09      	cmp	r3, #9
 800064a:	dd02      	ble.n	8000652 <HAL_UART_RxCpltCallback+0x36>
			timeout = 0;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <HAL_UART_RxCpltCallback+0xa0>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
		}
	}
	if(AFF == true){
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <HAL_UART_RxCpltCallback+0x98>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d020      	beq.n	800069c <HAL_UART_RxCpltCallback+0x80>
		Adata[Gcount] = Gdata;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <HAL_UART_RxCpltCallback+0x94>)
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000664:	54d1      	strb	r1, [r2, r3]
		Gcount++;
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 800066e:	6013      	str	r3, [r2, #0]
		if(Gcount == REV_SIZE){
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b0b      	cmp	r3, #11
 8000676:	d111      	bne.n	800069c <HAL_UART_RxCpltCallback+0x80>
			AFF = 0;
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <HAL_UART_RxCpltCallback+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			if(ChSUM() == 0){
 800067e:	f000 f823 	bl	80006c8 <ChSUM>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <HAL_UART_RxCpltCallback+0x74>
				DF = 1;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_UART_RxCpltCallback+0xa8>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e002      	b.n	8000696 <HAL_UART_RxCpltCallback+0x7a>
			}else{
				DF = 0;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_UART_RxCpltCallback+0xa8>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
			}
			Gcount = 0;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &Gdata, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <HAL_UART_RxCpltCallback+0x94>)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f001 fe96 	bl	80023d2 <HAL_UART_Receive_IT>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000008f 	.word	0x2000008f
 80006b4:	20000091 	.word	0x20000091
 80006b8:	20000094 	.word	0x20000094
 80006bc:	20000098 	.word	0x20000098
 80006c0:	20000084 	.word	0x20000084
 80006c4:	20000090 	.word	0x20000090

080006c8 <ChSUM>:

int ChSUM(void){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	if(Adata[10] = 0xed){
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <ChSUM+0x50>)
 80006d0:	22ed      	movs	r2, #237	@ 0xed
 80006d2:	729a      	strb	r2, [r3, #10]
		uint8_t revsum = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006d8:	2301      	movs	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	e009      	b.n	80006f2 <ChSUM+0x2a>
			revsum += Adata[i];
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <ChSUM+0x50>)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4413      	add	r3, r2
 80006ea:	71fb      	strb	r3, [r7, #7]
		for(int i = 1;i < REV_SIZE - 2;i++){
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	ddf2      	ble.n	80006de <ChSUM+0x16>
		}
		if(revsum == Adata[9]){
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <ChSUM+0x50>)
 80006fa:	7a5b      	ldrb	r3, [r3, #9]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d101      	bne.n	8000706 <ChSUM+0x3e>
			return 0;
 8000702:	2300      	movs	r3, #0
 8000704:	e001      	b.n	800070a <ChSUM+0x42>
		}else{
			return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
		}
	}else {
		return 1;
	}
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084

0800071c <AddStruct>:

void AddStruct(getdata* Udata){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	StructInit(Udata);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f8ad 	bl	8000884 <StructInit>
	Udata->LX = Adata[1];
 800072a:	4b55      	ldr	r3, [pc, #340]	@ (8000880 <AddStruct+0x164>)
 800072c:	785a      	ldrb	r2, [r3, #1]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	701a      	strb	r2, [r3, #0]
	Udata->LY = Adata[2];
 8000732:	4b53      	ldr	r3, [pc, #332]	@ (8000880 <AddStruct+0x164>)
 8000734:	789a      	ldrb	r2, [r3, #2]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	705a      	strb	r2, [r3, #1]
	Udata->L2 = Adata[5];
 800073a:	4b51      	ldr	r3, [pc, #324]	@ (8000880 <AddStruct+0x164>)
 800073c:	795a      	ldrb	r2, [r3, #5]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	709a      	strb	r2, [r3, #2]
	Udata->RX = Adata[3];
 8000742:	4b4f      	ldr	r3, [pc, #316]	@ (8000880 <AddStruct+0x164>)
 8000744:	78da      	ldrb	r2, [r3, #3]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	70da      	strb	r2, [r3, #3]
	Udata->RY = Adata[4];
 800074a:	4b4d      	ldr	r3, [pc, #308]	@ (8000880 <AddStruct+0x164>)
 800074c:	791a      	ldrb	r2, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	711a      	strb	r2, [r3, #4]
	Udata->R2 = Adata[6];
 8000752:	4b4b      	ldr	r3, [pc, #300]	@ (8000880 <AddStruct+0x164>)
 8000754:	799a      	ldrb	r2, [r3, #6]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	715a      	strb	r2, [r3, #5]

	if(Adata[7] & 0x01)	Udata->TRIANGLE = 1;
 800075a:	4b49      	ldr	r3, [pc, #292]	@ (8000880 <AddStruct+0x164>)
 800075c:	79db      	ldrb	r3, [r3, #7]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <AddStruct+0x50>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	719a      	strb	r2, [r3, #6]
	if(Adata[7] & 0x02)	Udata->CIRCLE 	= 1;
 800076c:	4b44      	ldr	r3, [pc, #272]	@ (8000880 <AddStruct+0x164>)
 800076e:	79db      	ldrb	r3, [r3, #7]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <AddStruct+0x62>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	71da      	strb	r2, [r3, #7]
	if(Adata[7] & 0x04)	Udata->CROSS 	= 1;
 800077e:	4b40      	ldr	r3, [pc, #256]	@ (8000880 <AddStruct+0x164>)
 8000780:	79db      	ldrb	r3, [r3, #7]
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <AddStruct+0x74>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	721a      	strb	r2, [r3, #8]
	if(Adata[7] & 0x08)	Udata->SQUARE 	= 1;
 8000790:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <AddStruct+0x164>)
 8000792:	79db      	ldrb	r3, [r3, #7]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <AddStruct+0x86>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	725a      	strb	r2, [r3, #9]
	if(Adata[7] & 0x10)	Udata->UP 		= 1;
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <AddStruct+0x164>)
 80007a4:	79db      	ldrb	r3, [r3, #7]
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <AddStruct+0x98>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	729a      	strb	r2, [r3, #10]
	if(Adata[7] & 0x20)	Udata->RIGHT 	= 1;
 80007b4:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <AddStruct+0x164>)
 80007b6:	79db      	ldrb	r3, [r3, #7]
 80007b8:	f003 0320 	and.w	r3, r3, #32
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <AddStruct+0xaa>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	72da      	strb	r2, [r3, #11]
	if(Adata[7] & 0x40)	Udata->DOWN 	= 1;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <AddStruct+0x164>)
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <AddStruct+0xbc>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	731a      	strb	r2, [r3, #12]
	if(Adata[7] & 0x80)	Udata->LEFT		= 1;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <AddStruct+0x164>)
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da02      	bge.n	80007e8 <AddStruct+0xcc>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2201      	movs	r2, #1
 80007e6:	735a      	strb	r2, [r3, #13]

	if(Adata[8] & 0x01)	Udata->L1 		= 1;
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <AddStruct+0x164>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <AddStruct+0xde>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	739a      	strb	r2, [r3, #14]
	if(Adata[8] & 0x02)	Udata->L3		= 1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <AddStruct+0x164>)
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <AddStruct+0xf0>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2201      	movs	r2, #1
 800080a:	73da      	strb	r2, [r3, #15]
	if(Adata[8] & 0x04)	Udata->R1		= 1;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <AddStruct+0x164>)
 800080e:	7a1b      	ldrb	r3, [r3, #8]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <AddStruct+0x102>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2201      	movs	r2, #1
 800081c:	741a      	strb	r2, [r3, #16]
	if(Adata[8] & 0x08)	Udata->R3		= 1;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <AddStruct+0x164>)
 8000820:	7a1b      	ldrb	r3, [r3, #8]
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <AddStruct+0x114>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	745a      	strb	r2, [r3, #17]
	if(Adata[8] & 0x10)	Udata->SHARE 	= 1;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <AddStruct+0x164>)
 8000832:	7a1b      	ldrb	r3, [r3, #8]
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <AddStruct+0x126>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	749a      	strb	r2, [r3, #18]
	if(Adata[8] & 0x20)	Udata->OPTION 	= 1;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <AddStruct+0x164>)
 8000844:	7a1b      	ldrb	r3, [r3, #8]
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <AddStruct+0x138>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2201      	movs	r2, #1
 8000852:	74da      	strb	r2, [r3, #19]
	if(Adata[8] & 0x40)	Udata->PS 		= 1;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <AddStruct+0x164>)
 8000856:	7a1b      	ldrb	r3, [r3, #8]
 8000858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <AddStruct+0x14a>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	751a      	strb	r2, [r3, #20]
	if(Adata[8] & 0x80)	Udata->TOUCHPAD = 1;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <AddStruct+0x164>)
 8000868:	7a1b      	ldrb	r3, [r3, #8]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	da03      	bge.n	8000878 <AddStruct+0x15c>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	755a      	strb	r2, [r3, #21]

	return;
 8000876:	bf00      	nop
 8000878:	bf00      	nop
}
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000084 	.word	0x20000084

08000884 <StructInit>:

void StructInit(getdata* Udata){
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	Udata->LX = 0x80;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	701a      	strb	r2, [r3, #0]
	Udata->LY = 0x80;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	705a      	strb	r2, [r3, #1]
	Udata->L2 = 0x00;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	709a      	strb	r2, [r3, #2]
	Udata->RX = 0x80;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	70da      	strb	r2, [r3, #3]
	Udata->RY = 0x80;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	711a      	strb	r2, [r3, #4]
	Udata->R2 = 0x00;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	715a      	strb	r2, [r3, #5]

	Udata->TRIANGLE = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	719a      	strb	r2, [r3, #6]
	Udata->CIRCLE = 0;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	71da      	strb	r2, [r3, #7]
	Udata->CROSS = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	721a      	strb	r2, [r3, #8]
	Udata->SQUARE = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	725a      	strb	r2, [r3, #9]
	Udata->UP = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	729a      	strb	r2, [r3, #10]
	Udata->RIGHT = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	72da      	strb	r2, [r3, #11]
	Udata->DOWN = 0;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	731a      	strb	r2, [r3, #12]
	Udata->LEFT = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	735a      	strb	r2, [r3, #13]
	Udata->L1 = 0;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	739a      	strb	r2, [r3, #14]
	Udata->L3 = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	73da      	strb	r2, [r3, #15]
	Udata->R1 = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	741a      	strb	r2, [r3, #16]
	Udata->R3 = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	745a      	strb	r2, [r3, #17]
	Udata->SHARE = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	749a      	strb	r2, [r3, #18]
	Udata->OPTION = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	74da      	strb	r2, [r3, #19]
	Udata->PS = 0;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	751a      	strb	r2, [r3, #20]
	Udata->TOUCHPAD = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	755a      	strb	r2, [r3, #21]

	return;
 8000910:	bf00      	nop
}
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <AllShowP>:
			,Udata.PS
			,Udata.TOUCHPAD
			);
}

void AllShowP(getdata Udata){
 800091c:	b084      	sub	sp, #16
 800091e:	b5b0      	push	{r4, r5, r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af04      	add	r7, sp, #16
 8000924:	f107 0410 	add.w	r4, r7, #16
 8000928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"RX:%3d "
			"RY:%3d "
			"L2:%3d "
			"R2:%3d "
			"Pressed Button: "
			,Udata.LX
 800092c:	7c3b      	ldrb	r3, [r7, #16]
	printf(
 800092e:	4618      	mov	r0, r3
			,Udata.LY
 8000930:	7c7b      	ldrb	r3, [r7, #17]
	printf(
 8000932:	461c      	mov	r4, r3
			,Udata.RX
 8000934:	7cfb      	ldrb	r3, [r7, #19]
	printf(
 8000936:	461d      	mov	r5, r3
			,Udata.RY
 8000938:	7d3b      	ldrb	r3, [r7, #20]
			,Udata.L2
 800093a:	7cba      	ldrb	r2, [r7, #18]
			,Udata.R2
 800093c:	7d79      	ldrb	r1, [r7, #21]
	printf(
 800093e:	9102      	str	r1, [sp, #8]
 8000940:	9201      	str	r2, [sp, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	462b      	mov	r3, r5
 8000946:	4622      	mov	r2, r4
 8000948:	4601      	mov	r1, r0
 800094a:	4839      	ldr	r0, [pc, #228]	@ (8000a30 <AllShowP+0x114>)
 800094c:	f002 fd7e 	bl	800344c <iprintf>
			);

	if(Udata.TRIANGLE	== 1) printf("TRIANGLE ");
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <AllShowP+0x40>
 8000956:	4837      	ldr	r0, [pc, #220]	@ (8000a34 <AllShowP+0x118>)
 8000958:	f002 fd78 	bl	800344c <iprintf>
	if(Udata.CIRCLE		== 1) printf("CIRCLE ");
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <AllShowP+0x4c>
 8000962:	4835      	ldr	r0, [pc, #212]	@ (8000a38 <AllShowP+0x11c>)
 8000964:	f002 fd72 	bl	800344c <iprintf>
	if(Udata.CROSS		== 1) printf("CROSS ");
 8000968:	7e3b      	ldrb	r3, [r7, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <AllShowP+0x58>
 800096e:	4833      	ldr	r0, [pc, #204]	@ (8000a3c <AllShowP+0x120>)
 8000970:	f002 fd6c 	bl	800344c <iprintf>
	if(Udata.SQUARE 	== 1) printf("SQUARE ");
 8000974:	7e7b      	ldrb	r3, [r7, #25]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <AllShowP+0x64>
 800097a:	4831      	ldr	r0, [pc, #196]	@ (8000a40 <AllShowP+0x124>)
 800097c:	f002 fd66 	bl	800344c <iprintf>
	if(Udata.UP 		== 1) printf("UP ");
 8000980:	7ebb      	ldrb	r3, [r7, #26]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <AllShowP+0x70>
 8000986:	482f      	ldr	r0, [pc, #188]	@ (8000a44 <AllShowP+0x128>)
 8000988:	f002 fd60 	bl	800344c <iprintf>
	if(Udata.RIGHT 		== 1) printf("RIGHT ");
 800098c:	7efb      	ldrb	r3, [r7, #27]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <AllShowP+0x7c>
 8000992:	482d      	ldr	r0, [pc, #180]	@ (8000a48 <AllShowP+0x12c>)
 8000994:	f002 fd5a 	bl	800344c <iprintf>
	if(Udata.DOWN 		== 1) printf("DOWN ");
 8000998:	7f3b      	ldrb	r3, [r7, #28]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <AllShowP+0x88>
 800099e:	482b      	ldr	r0, [pc, #172]	@ (8000a4c <AllShowP+0x130>)
 80009a0:	f002 fd54 	bl	800344c <iprintf>
	if(Udata.LEFT 		== 1) printf("LEFT ");
 80009a4:	7f7b      	ldrb	r3, [r7, #29]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <AllShowP+0x94>
 80009aa:	4829      	ldr	r0, [pc, #164]	@ (8000a50 <AllShowP+0x134>)
 80009ac:	f002 fd4e 	bl	800344c <iprintf>
	if(Udata.L1 		== 1) printf("L1 ");
 80009b0:	7fbb      	ldrb	r3, [r7, #30]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <AllShowP+0xa0>
 80009b6:	4827      	ldr	r0, [pc, #156]	@ (8000a54 <AllShowP+0x138>)
 80009b8:	f002 fd48 	bl	800344c <iprintf>
	if(Udata.L3 		== 1) printf("L3 ");
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <AllShowP+0xac>
 80009c2:	4825      	ldr	r0, [pc, #148]	@ (8000a58 <AllShowP+0x13c>)
 80009c4:	f002 fd42 	bl	800344c <iprintf>
	if(Udata.R1 		== 1) printf("R1 ");
 80009c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <AllShowP+0xba>
 80009d0:	4822      	ldr	r0, [pc, #136]	@ (8000a5c <AllShowP+0x140>)
 80009d2:	f002 fd3b 	bl	800344c <iprintf>
	if(Udata.R3 		== 1) printf("R3 ");
 80009d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <AllShowP+0xc8>
 80009de:	4820      	ldr	r0, [pc, #128]	@ (8000a60 <AllShowP+0x144>)
 80009e0:	f002 fd34 	bl	800344c <iprintf>
	if(Udata.SHARE 		== 1) printf("SHARE ");
 80009e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <AllShowP+0xd6>
 80009ec:	481d      	ldr	r0, [pc, #116]	@ (8000a64 <AllShowP+0x148>)
 80009ee:	f002 fd2d 	bl	800344c <iprintf>
	if(Udata.OPTION 	== 1) printf("OPTION ");
 80009f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <AllShowP+0xe4>
 80009fa:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <AllShowP+0x14c>)
 80009fc:	f002 fd26 	bl	800344c <iprintf>
	if(Udata.PS 		== 1) printf("PS ");
 8000a00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <AllShowP+0xf2>
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <AllShowP+0x150>)
 8000a0a:	f002 fd1f 	bl	800344c <iprintf>
	if(Udata.TOUCHPAD 	== 1) printf("TOUOCHPAD ");
 8000a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <AllShowP+0x100>
 8000a16:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <AllShowP+0x154>)
 8000a18:	f002 fd18 	bl	800344c <iprintf>

	printf("\r\n");
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <AllShowP+0x158>)
 8000a1e:	f002 fd7d 	bl	800351c <puts>
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a2a:	b004      	add	sp, #16
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	08004434 	.word	0x08004434
 8000a34:	08004470 	.word	0x08004470
 8000a38:	0800447c 	.word	0x0800447c
 8000a3c:	08004484 	.word	0x08004484
 8000a40:	0800448c 	.word	0x0800448c
 8000a44:	08004494 	.word	0x08004494
 8000a48:	08004498 	.word	0x08004498
 8000a4c:	080044a0 	.word	0x080044a0
 8000a50:	080044a8 	.word	0x080044a8
 8000a54:	080044b0 	.word	0x080044b0
 8000a58:	080044b4 	.word	0x080044b4
 8000a5c:	080044b8 	.word	0x080044b8
 8000a60:	080044bc 	.word	0x080044bc
 8000a64:	080044c0 	.word	0x080044c0
 8000a68:	080044c8 	.word	0x080044c8
 8000a6c:	080044d0 	.word	0x080044d0
 8000a70:	080044d4 	.word	0x080044d4
 8000a74:	080044e0 	.word	0x080044e0

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout,NULL);
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <main+0x5c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fd50 	bl	800352c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 faba 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f826 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f8d8 	bl	8000c48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 f882 	bl	8000ba0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 f8aa 	bl	8000bf4 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  getData(&huart1,&data);
	  if(getData(&huart1,&data) == 0){
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <main+0x60>)
 8000aa6:	f7ff fd99 	bl	80005dc <getData>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10c      	bne.n	8000aca <main+0x52>
		  AllShowP(data);
 8000ab0:	466b      	mov	r3, sp
 8000ab2:	f107 0210 	add.w	r2, r7, #16
 8000ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aba:	6018      	str	r0, [r3, #0]
 8000abc:	3304      	adds	r3, #4
 8000abe:	8019      	strh	r1, [r3, #0]
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	f7ff ff2a 	bl	800091c <AllShowP>
 8000ac8:	e7ea      	b.n	8000aa0 <main+0x28>
	  }else{
		  printf("\r\n");
 8000aca:	4804      	ldr	r0, [pc, #16]	@ (8000adc <main+0x64>)
 8000acc:	f002 fd26 	bl	800351c <puts>
	  if(getData(&huart1,&data) == 0){
 8000ad0:	e7e6      	b.n	8000aa0 <main+0x28>
 8000ad2:	bf00      	nop
 8000ad4:	20000018 	.word	0x20000018
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	080044e4 	.word	0x080044e4

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	@ 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2234      	movs	r2, #52	@ 0x34
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 feb0 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <SystemClock_Config+0xb8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <SystemClock_Config+0xb8>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b14:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <SystemClock_Config+0xb8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <SystemClock_Config+0xbc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <SystemClock_Config+0xbc>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <SystemClock_Config+0xbc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 f8c3 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b60:	f000 f8a0 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fdea 	bl	8001758 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b8a:	f000 f88b 	bl	8000ca4 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	@ 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_USART1_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bd8:	f001 fb20 	bl	800221c <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f85f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000009c 	.word	0x2000009c
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <MX_USART2_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f001 faf6 	bl	800221c <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f835 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_GPIO_Init+0x30>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <MX_GPIO_Init+0x30>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_GPIO_Init+0x30>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char* ptr,int len){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <_write+0x24>)
 8000c92:	f001 fb13 	bl	80022bc <HAL_UART_Transmit>
	return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000e4 	.word	0x200000e4

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	@ 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a36      	ldr	r2, [pc, #216]	@ (8000df8 <HAL_UART_MspInit+0xf8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d135      	bne.n	8000d8e <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	4a34      	ldr	r2, [pc, #208]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d32:	4b32      	ldr	r3, [pc, #200]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	4b2e      	ldr	r3, [pc, #184]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a2d      	ldr	r2, [pc, #180]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4822      	ldr	r0, [pc, #136]	@ (8000e00 <HAL_UART_MspInit+0x100>)
 8000d78:	f000 fb5a 	bl	8001430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2025      	movs	r0, #37	@ 0x25
 8000d82:	f000 fa8c 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d86:	2025      	movs	r0, #37	@ 0x25
 8000d88:	f000 faa5 	bl	80012d6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8c:	e030      	b.n	8000df0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0x104>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d12b      	bne.n	8000df0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_UART_MspInit+0xfc>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de0:	2307      	movs	r3, #7
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0x100>)
 8000dec:	f000 fb20 	bl	8001430 <HAL_GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	3730      	adds	r7, #48	@ 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40004400 	.word	0x40004400

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5e:	f000 f923 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <USART1_IRQHandler+0x10>)
 8000e6e:	f001 fad5 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000009c 	.word	0x2000009c

08000e7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
  }

  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f002 fcce 	bl	80038f0 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20020000 	.word	0x20020000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	2000012c 	.word	0x2000012c
 8000f88:	20000280 	.word	0x20000280

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb4:	f7ff ffea 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 fc8d 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fd49 	bl	8000a78 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ff4:	08004544 	.word	0x08004544
  ldr r2, =_sbss
 8000ff8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ffc:	20000280 	.word	0x20000280

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f92b 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f808 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe3a 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f943 	bl	80012f2 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 f90b 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000130 	.word	0x20000130

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000130 	.word	0x20000130

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	@ (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff3e 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff31 	bl	800114c <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff feda 	bl	80010d0 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d008      	beq.n	800133c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e052      	b.n	80013e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0216 	bic.w	r2, r2, #22
 800134a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800135a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_DMA_Abort+0x62>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0208 	bic.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138c:	e013      	b.n	80013b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138e:	f7ff fe9f 	bl	80010d0 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b05      	cmp	r3, #5
 800139a:	d90c      	bls.n	80013b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e015      	b.n	80013e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e4      	bne.n	800138e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c8:	223f      	movs	r2, #63	@ 0x3f
 80013ca:	409a      	lsls	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d004      	beq.n	8001408 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2280      	movs	r2, #128	@ 0x80
 8001402:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e00c      	b.n	8001422 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2205      	movs	r2, #5
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e165      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8154 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	2b02      	cmp	r3, #2
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80ae 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a5c      	ldr	r2, [pc, #368]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_GPIO_Init+0x304>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x308>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_GPIO_Init+0x30c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_GPIO_Init+0x310>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_GPIO_Init+0x314>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	@ (8001748 <HAL_GPIO_Init+0x318>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x20a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <HAL_GPIO_Init+0x31c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x206>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <HAL_GPIO_Init+0x320>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x202>
 800162e:	2306      	movs	r3, #6
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001632:	2307      	movs	r3, #7
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	@ (8001734 <HAL_GPIO_Init+0x304>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <HAL_GPIO_Init+0x324>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a31      	ldr	r2, [pc, #196]	@ (8001754 <HAL_GPIO_Init+0x324>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x324>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_GPIO_Init+0x324>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae96 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0cc      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b68      	ldr	r3, [pc, #416]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d90c      	bls.n	8001794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b65      	ldr	r3, [pc, #404]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a58      	ldr	r2, [pc, #352]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d044      	beq.n	8001878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	2b03      	cmp	r3, #3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b3f      	ldr	r3, [pc, #252]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e067      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4934      	ldr	r1, [pc, #208]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff fc42 	bl	80010d0 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	e00a      	b.n	8001866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff fc3e 	bl	80010d0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1eb      	bne.n	8001850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20c      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f855 	bl	800198c <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490a      	ldr	r1, [pc, #40]	@ (8001918 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	@ (800191c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fba2 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	080044e8 	.word	0x080044e8
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_RCC_GetHCLKFreq+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001940:	f7ff fff0 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	080044f8 	.word	0x080044f8

08001964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001968:	f7ff ffdc 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0b5b      	lsrs	r3, r3, #13
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	080044f8 	.word	0x080044f8

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b0a6      	sub	sp, #152	@ 0x98
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b2:	4bc8      	ldr	r3, [pc, #800]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	f200 817e 	bhi.w	8001cbc <HAL_RCC_GetSysClockFreq+0x330>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019fd 	.word	0x080019fd
 80019cc:	08001cbd 	.word	0x08001cbd
 80019d0:	08001cbd 	.word	0x08001cbd
 80019d4:	08001cbd 	.word	0x08001cbd
 80019d8:	08001a05 	.word	0x08001a05
 80019dc:	08001cbd 	.word	0x08001cbd
 80019e0:	08001cbd 	.word	0x08001cbd
 80019e4:	08001cbd 	.word	0x08001cbd
 80019e8:	08001a0d 	.word	0x08001a0d
 80019ec:	08001cbd 	.word	0x08001cbd
 80019f0:	08001cbd 	.word	0x08001cbd
 80019f4:	08001cbd 	.word	0x08001cbd
 80019f8:	08001b77 	.word	0x08001b77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a02:	e15f      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a04:	4bb5      	ldr	r3, [pc, #724]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a0a:	e15b      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a18:	4bae      	ldr	r3, [pc, #696]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d031      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4bab      	ldr	r3, [pc, #684]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a38:	2300      	movs	r3, #0
 8001a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb03 f202 	mul.w	r2, r3, r2
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	4aa2      	ldr	r2, [pc, #648]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a54:	4621      	mov	r1, r4
 8001a56:	fba1 1202 	umull	r1, r2, r1, r2
 8001a5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a62:	4413      	add	r3, r2
 8001a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a78:	f7fe fc1a 	bl	80002b0 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a86:	e064      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a88:	4b92      	ldr	r3, [pc, #584]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	2200      	movs	r2, #0
 8001a90:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a92:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0159      	lsls	r1, r3, #5
 8001ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab6:	0150      	lsls	r0, r2, #5
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4621      	mov	r1, r4
 8001abe:	1a51      	subs	r1, r2, r1
 8001ac0:	6139      	str	r1, [r7, #16]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad6:	4659      	mov	r1, fp
 8001ad8:	018b      	lsls	r3, r1, #6
 8001ada:	4651      	mov	r1, sl
 8001adc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	018a      	lsls	r2, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ebb2 0801 	subs.w	r8, r2, r1
 8001aea:	4659      	mov	r1, fp
 8001aec:	eb63 0901 	sbc.w	r9, r3, r1
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b04:	4690      	mov	r8, r2
 8001b06:	4699      	mov	r9, r3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	eb18 0303 	adds.w	r3, r8, r3
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	462b      	mov	r3, r5
 8001b12:	eb49 0303 	adc.w	r3, r9, r3
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b24:	4629      	mov	r1, r5
 8001b26:	028b      	lsls	r3, r1, #10
 8001b28:	4621      	mov	r1, r4
 8001b2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2e:	4621      	mov	r1, r4
 8001b30:	028a      	lsls	r2, r1, #10
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b44:	f7fe fbb4 	bl	80002b0 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b52:	4b60      	ldr	r3, [pc, #384]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b74:	e0a6      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b76:	4b57      	ldr	r3, [pc, #348]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4b54      	ldr	r3, [pc, #336]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d02a      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b51      	ldr	r3, [pc, #324]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba4:	fb03 f201 	mul.w	r2, r3, r1
 8001ba8:	2300      	movs	r3, #0
 8001baa:	fb00 f303 	mul.w	r3, r0, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x350>)
 8001bb2:	fba0 1202 	umull	r1, r2, r0, r2
 8001bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bb8:	460a      	mov	r2, r1
 8001bba:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bbc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bbe:	4413      	add	r3, r2
 8001bc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bca:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bd4:	f7fe fb6c 	bl	80002b0 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001be2:	e05b      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c00:	4642      	mov	r2, r8
 8001c02:	464b      	mov	r3, r9
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c38:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	00eb      	lsls	r3, r5, #3
 8001c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4e:	00e2      	lsls	r2, r4, #3
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	18e3      	adds	r3, r4, r3
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	eb45 0303 	adc.w	r3, r5, r3
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c84:	2200      	movs	r2, #0
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	61fa      	str	r2, [r7, #28]
 8001c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8e:	f7fe fb0f 	bl	80002b0 <__aeabi_uldivmod>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4613      	mov	r3, r2
 8001c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0f1b      	lsrs	r3, r3, #28
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cba:	e003      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3798      	adds	r7, #152	@ 0x98
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	017d7840 	.word	0x017d7840

08001ce0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e28d      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8083 	beq.w	8001e06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d00:	4b94      	ldr	r3, [pc, #592]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d019      	beq.n	8001d40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d0c:	4b91      	ldr	r3, [pc, #580]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d18:	4b8e      	ldr	r3, [pc, #568]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d24:	d00c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b8b      	ldr	r3, [pc, #556]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4b84      	ldr	r3, [pc, #528]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x124>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d157      	bne.n	8001e04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e25a      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x90>
 8001d62:	4b7c      	ldr	r3, [pc, #496]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7b      	ldr	r2, [pc, #492]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xcc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0xb4>
 8001d7a:	4b76      	ldr	r3, [pc, #472]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a75      	ldr	r2, [pc, #468]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b73      	ldr	r3, [pc, #460]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a72      	ldr	r2, [pc, #456]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xcc>
 8001d94:	4b6f      	ldr	r3, [pc, #444]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6e      	ldr	r2, [pc, #440]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f98c 	bl	80010d0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f988 	bl	80010d0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	@ 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e21f      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xdc>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f978 	bl	80010d0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff f974 	bl	80010d0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	@ 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e20b      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	4b57      	ldr	r3, [pc, #348]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x104>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06f      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e12:	4b50      	ldr	r3, [pc, #320]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d017      	beq.n	8001e4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b44      	ldr	r3, [pc, #272]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x186>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1d3      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x278>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f921 	bl	80010d0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff f91d 	bl	80010d0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1b4      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b28      	ldr	r3, [pc, #160]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4925      	ldr	r1, [pc, #148]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_RCC_OscConfig+0x278>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f900 	bl	80010d0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f8fc 	bl	80010d0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e193      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d036      	beq.n	8001f6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f8e0 	bl	80010d0 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff f8dc 	bl	80010d0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e173      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x234>
 8001f32:	e01b      	b.n	8001f6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f8c9 	bl	80010d0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff f8c5 	bl	80010d0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e15c      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	42470000 	.word	0x42470000
 8001f5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b8a      	ldr	r3, [pc, #552]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8097 	beq.w	80020a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b83      	ldr	r3, [pc, #524]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4a7e      	ldr	r2, [pc, #504]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b79      	ldr	r3, [pc, #484]	@ (8002190 <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCC_OscConfig+0x4b0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a75      	ldr	r2, [pc, #468]	@ (8002190 <HAL_RCC_OscConfig+0x4b0>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f885 	bl	80010d0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff f881 	bl	80010d0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e118      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002190 <HAL_RCC_OscConfig+0x4b0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x31e>
 8001ff0:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x358>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x340>
 8002006:	4b61      	ldr	r3, [pc, #388]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x358>
 8002020:	4b5a      	ldr	r3, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a59      	ldr	r2, [pc, #356]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	4b57      	ldr	r3, [pc, #348]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a56      	ldr	r2, [pc, #344]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff f846 	bl	80010d0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff f842 	bl	80010d0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0d7      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCC_OscConfig+0x368>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff f830 	bl	80010d0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff f82c 	bl	80010d0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0c1      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	4a3a      	ldr	r2, [pc, #232]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80ad 	beq.w	800220c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d060      	beq.n	8002180 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d145      	bne.n	8002152 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCC_OscConfig+0x4b4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f800 	bl	80010d0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fffc 	bl	80010d0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e093      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b29      	ldr	r3, [pc, #164]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	491b      	ldr	r1, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x4b4>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe ffd1 	bl	80010d0 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe ffcd 	bl	80010d0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e064      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x452>
 8002150:	e05c      	b.n	800220c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_RCC_OscConfig+0x4b4>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe ffba 	bl	80010d0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe ffb6 	bl	80010d0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e04d      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x4ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x480>
 800217e:	e045      	b.n	800220c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e040      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000
 8002194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_RCC_OscConfig+0x538>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d030      	beq.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d129      	bne.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d122      	bne.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d119      	bne.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	3b01      	subs	r3, #1
 80021e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10f      	bne.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e042      	b.n	80022b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fd5c 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800225e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fdbd 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d175      	bne.n	80023c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_UART_Transmit+0x2c>
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e06e      	b.n	80023ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	@ 0x21
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fee9 	bl	80010d0 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002314:	d108      	bne.n	8002328 <HAL_UART_Transmit+0x6c>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e003      	b.n	8002330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002330:	e02e      	b.n	8002390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fb1f 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e03a      	b.n	80023ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3302      	adds	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e007      	b.n	8002382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1cb      	bne.n	8002332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 faeb 	bl	8002980 <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e006      	b.n	80023ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d112      	bne.n	8002412 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Receive_IT+0x26>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00b      	b.n	8002414 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	461a      	mov	r2, r3
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fb12 	bl	8002a32 <UART_Start_Receive_IT>
 800240e:	4603      	mov	r3, r0
 8002410:	e000      	b.n	8002414 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ba      	sub	sp, #232	@ 0xe8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
 800246e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fbf2 	bl	8002c64 <UART_Receive_IT>
      return;
 8002480:	e25b      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80de 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
 800248c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800249c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80d1 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 81f2 	beq.w	8002930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb7d 	bl	8002c64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_UART_IRQHandler+0x17a>
 800258e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04f      	beq.n	8002636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa85 	bl	8002aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a6:	2b40      	cmp	r3, #64	@ 0x40
 80025a8:	d141      	bne.n	800262e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3314      	adds	r3, #20
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d9      	bne.n	80025aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	4a7e      	ldr	r2, [pc, #504]	@ (80027fc <HAL_UART_IRQHandler+0x3e0>)
 8002604:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe feed 	bl	80013ea <HAL_DMA_Abort_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	e00e      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f994 	bl	8002954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00a      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f990 	bl	8002954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e006      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f98c 	bl	8002954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002642:	e175      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	bf00      	nop
    return;
 8002646:	e173      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 814f 	bne.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8148 	beq.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8141 	beq.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	f040 80b6 	bne.w	8002800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8145 	beq.w	8002934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f080 813e 	bcs.w	8002934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ca:	f000 8088 	beq.w	80027de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026dc:	e853 3f00 	ldrex	r3, [r3]
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002706:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800270a:	e841 2300 	strex	r3, r2, [r1]
 800270e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1d9      	bne.n	80026ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3314      	adds	r3, #20
 8002720:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800272a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800273e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002742:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002746:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e1      	bne.n	800271a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3314      	adds	r3, #20
 8002776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800277a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800277c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002780:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e3      	bne.n	8002756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e3      	bne.n	800279c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fd96 	bl	800130a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8b7 	bl	8002968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027fa:	e09b      	b.n	8002934 <HAL_UART_IRQHandler+0x518>
 80027fc:	08002b6d 	.word	0x08002b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 808e 	beq.w	8002938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800281c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8089 	beq.w	8002938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800284a:	647a      	str	r2, [r7, #68]	@ 0x44
 800284c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	623b      	str	r3, [r7, #32]
   return(result);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002882:	633a      	str	r2, [r7, #48]	@ 0x30
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e3      	bne.n	800285e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0310 	bic.w	r3, r3, #16
 80028ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	e841 2300 	strex	r3, r2, [r1]
 80028d4:	617b      	str	r3, [r7, #20]
   return(result);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e3      	bne.n	80028a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f83d 	bl	8002968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ee:	e023      	b.n	8002938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_UART_IRQHandler+0x4f4>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f943 	bl	8002b94 <UART_Transmit_IT>
    return;
 800290e:	e014      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <HAL_UART_IRQHandler+0x51e>
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f983 	bl	8002c34 <UART_EndTransmit_IT>
    return;
 800292e:	e004      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
    return;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
      return;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
      return;
 8002938:	bf00      	nop
  }
}
 800293a:	37e8      	adds	r7, #232	@ 0xe8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002990:	e03b      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d037      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fb99 	bl	80010d0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e03a      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d023      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b80      	cmp	r3, #128	@ 0x80
 80029c6:	d020      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d01d      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d116      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f857 	bl	8002aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2208      	movs	r2, #8
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d0b4      	beq.n	8002992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2222      	movs	r2, #34	@ 0x22
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b095      	sub	sp, #84	@ 0x54
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ace:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d119      	bne.n	8002b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f023 0310 	bic.w	r3, r3, #16
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e5      	bne.n	8002b1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b60:	bf00      	nop
 8002b62:	3754      	adds	r7, #84	@ 0x54
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fee4 	bl	8002954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b21      	cmp	r3, #33	@ 0x21
 8002ba6:	d13e      	bne.n	8002c26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb0:	d114      	bne.n	8002bdc <UART_Transmit_IT+0x48>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d110      	bne.n	8002bdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	621a      	str	r2, [r3, #32]
 8002bda:	e008      	b.n	8002bee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	1c59      	adds	r1, r3, #1
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6211      	str	r1, [r2, #32]
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe73 	bl	8002940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b22      	cmp	r3, #34	@ 0x22
 8002c76:	f040 80ae 	bne.w	8002dd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	d117      	bne.n	8002cb4 <UART_Receive_IT+0x50>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d113      	bne.n	8002cb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cb2:	e026      	b.n	8002d02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc6:	d007      	beq.n	8002cd8 <UART_Receive_IT+0x74>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <UART_Receive_IT+0x82>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d106      	bne.n	8002ce6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e008      	b.n	8002cf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d15d      	bne.n	8002dd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0220 	bic.w	r2, r2, #32
 8002d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d135      	bne.n	8002dc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	613b      	str	r3, [r7, #16]
   return(result);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f023 0310 	bic.w	r3, r3, #16
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d82:	623a      	str	r2, [r7, #32]
 8002d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	69f9      	ldr	r1, [r7, #28]
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d10a      	bne.n	8002dba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fdd1 	bl	8002968 <HAL_UARTEx_RxEventCallback>
 8002dc6:	e002      	b.n	8002dce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fc27 	bl	800061c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e002      	b.n	8002dd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3730      	adds	r7, #48	@ 0x30
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b0c0      	sub	sp, #256	@ 0x100
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	68d9      	ldr	r1, [r3, #12]
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	ea40 0301 	orr.w	r3, r0, r1
 8002e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e38:	f021 010c 	bic.w	r1, r1, #12
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e46:	430b      	orrs	r3, r1
 8002e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5a:	6999      	ldr	r1, [r3, #24]
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	ea40 0301 	orr.w	r3, r0, r1
 8002e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d005      	beq.n	8002e80 <UART_SetConfig+0xa0>
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80030b0 <UART_SetConfig+0x2d0>)
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d104      	bne.n	8002e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7fe fd70 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8002e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e88:	e003      	b.n	8002e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f7fe fd57 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 8002e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9c:	f040 810c 	bne.w	80030b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	1891      	adds	r1, r2, r2
 8002eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eba:	415b      	adcs	r3, r3
 8002ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	eb12 0801 	adds.w	r8, r2, r1
 8002ec8:	4629      	mov	r1, r5
 8002eca:	eb43 0901 	adc.w	r9, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ee2:	4690      	mov	r8, r2
 8002ee4:	4699      	mov	r9, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb18 0303 	adds.w	r3, r8, r3
 8002eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	eb49 0303 	adc.w	r3, r9, r3
 8002ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f0e:	460b      	mov	r3, r1
 8002f10:	18db      	adds	r3, r3, r3
 8002f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f14:	4613      	mov	r3, r2
 8002f16:	eb42 0303 	adc.w	r3, r2, r3
 8002f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f24:	f7fd f9c4 	bl	80002b0 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b61      	ldr	r3, [pc, #388]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8002f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	011c      	lsls	r4, r3, #4
 8002f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	1891      	adds	r1, r2, r2
 8002f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f50:	415b      	adcs	r3, r3
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f58:	4641      	mov	r1, r8
 8002f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f5e:	4649      	mov	r1, r9
 8002f60:	eb43 0b01 	adc.w	fp, r3, r1
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f78:	4692      	mov	sl, r2
 8002f7a:	469b      	mov	fp, r3
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f86:	464b      	mov	r3, r9
 8002f88:	eb4b 0303 	adc.w	r3, fp, r3
 8002f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	18db      	adds	r3, r3, r3
 8002fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002faa:	4613      	mov	r3, r2
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fba:	f7fd f979 	bl	80002b0 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8002fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2264      	movs	r2, #100	@ 0x64
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fda:	4b36      	ldr	r3, [pc, #216]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8002fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fe8:	441c      	add	r4, r3
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003004:	415b      	adcs	r3, r3
 8003006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	6339      	str	r1, [r7, #48]	@ 0x30
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003040:	464b      	mov	r3, r9
 8003042:	460a      	mov	r2, r1
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800305c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003060:	460b      	mov	r3, r1
 8003062:	18db      	adds	r3, r3, r3
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003066:	4613      	mov	r3, r2
 8003068:	eb42 0303 	adc.w	r3, r2, r3
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003076:	f7fd f91b 	bl	80002b0 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8003080:	fba3 1302 	umull	r1, r3, r3, r2
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	2164      	movs	r1, #100	@ 0x64
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3332      	adds	r3, #50	@ 0x32
 8003092:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	f003 0207 	and.w	r2, r3, #7
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4422      	add	r2, r4
 80030a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030a8:	e106      	b.n	80032b8 <UART_SetConfig+0x4d8>
 80030aa:	bf00      	nop
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40011400 	.word	0x40011400
 80030b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030ca:	4642      	mov	r2, r8
 80030cc:	464b      	mov	r3, r9
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	6239      	str	r1, [r7, #32]
 80030d2:	415b      	adcs	r3, r3
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030da:	4641      	mov	r1, r8
 80030dc:	1854      	adds	r4, r2, r1
 80030de:	4649      	mov	r1, r9
 80030e0:	eb43 0501 	adc.w	r5, r3, r1
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	00eb      	lsls	r3, r5, #3
 80030ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f2:	00e2      	lsls	r2, r4, #3
 80030f4:	4614      	mov	r4, r2
 80030f6:	461d      	mov	r5, r3
 80030f8:	4643      	mov	r3, r8
 80030fa:	18e3      	adds	r3, r4, r3
 80030fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003100:	464b      	mov	r3, r9
 8003102:	eb45 0303 	adc.w	r3, r5, r3
 8003106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003126:	4629      	mov	r1, r5
 8003128:	008b      	lsls	r3, r1, #2
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003130:	4621      	mov	r1, r4
 8003132:	008a      	lsls	r2, r1, #2
 8003134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003138:	f7fd f8ba 	bl	80002b0 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4b60      	ldr	r3, [pc, #384]	@ (80032c4 <UART_SetConfig+0x4e4>)
 8003142:	fba3 2302 	umull	r2, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	011c      	lsls	r4, r3, #4
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	1891      	adds	r1, r2, r2
 8003162:	61b9      	str	r1, [r7, #24]
 8003164:	415b      	adcs	r3, r3
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800316c:	4641      	mov	r1, r8
 800316e:	1851      	adds	r1, r2, r1
 8003170:	6139      	str	r1, [r7, #16]
 8003172:	4649      	mov	r1, r9
 8003174:	414b      	adcs	r3, r1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003184:	4659      	mov	r1, fp
 8003186:	00cb      	lsls	r3, r1, #3
 8003188:	4651      	mov	r1, sl
 800318a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318e:	4651      	mov	r1, sl
 8003190:	00ca      	lsls	r2, r1, #3
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4603      	mov	r3, r0
 8003198:	4642      	mov	r2, r8
 800319a:	189b      	adds	r3, r3, r2
 800319c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031a0:	464b      	mov	r3, r9
 80031a2:	460a      	mov	r2, r1
 80031a4:	eb42 0303 	adc.w	r3, r2, r3
 80031a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031c4:	4649      	mov	r1, r9
 80031c6:	008b      	lsls	r3, r1, #2
 80031c8:	4641      	mov	r1, r8
 80031ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ce:	4641      	mov	r1, r8
 80031d0:	008a      	lsls	r2, r1, #2
 80031d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031d6:	f7fd f86b 	bl	80002b0 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <UART_SetConfig+0x4e4>)
 80031e2:	fba3 2301 	umull	r2, r3, r3, r1
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2264      	movs	r2, #100	@ 0x64
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	1acb      	subs	r3, r1, r3
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	@ 0x32
 80031f4:	4a33      	ldr	r2, [pc, #204]	@ (80032c4 <UART_SetConfig+0x4e4>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003200:	441c      	add	r4, r3
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	673b      	str	r3, [r7, #112]	@ 0x70
 800320a:	677a      	str	r2, [r7, #116]	@ 0x74
 800320c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	415b      	adcs	r3, r3
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003220:	4641      	mov	r1, r8
 8003222:	1851      	adds	r1, r2, r1
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	4649      	mov	r1, r9
 8003228:	414b      	adcs	r3, r1
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003238:	4659      	mov	r1, fp
 800323a:	00cb      	lsls	r3, r1, #3
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003242:	4651      	mov	r1, sl
 8003244:	00ca      	lsls	r2, r1, #3
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	4603      	mov	r3, r0
 800324c:	4642      	mov	r2, r8
 800324e:	189b      	adds	r3, r3, r2
 8003250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003252:	464b      	mov	r3, r9
 8003254:	460a      	mov	r2, r1
 8003256:	eb42 0303 	adc.w	r3, r2, r3
 800325a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	663b      	str	r3, [r7, #96]	@ 0x60
 8003266:	667a      	str	r2, [r7, #100]	@ 0x64
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003274:	4649      	mov	r1, r9
 8003276:	008b      	lsls	r3, r1, #2
 8003278:	4641      	mov	r1, r8
 800327a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327e:	4641      	mov	r1, r8
 8003280:	008a      	lsls	r2, r1, #2
 8003282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003286:	f7fd f813 	bl	80002b0 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <UART_SetConfig+0x4e4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	@ 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	3332      	adds	r3, #50	@ 0x32
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <UART_SetConfig+0x4e4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4422      	add	r2, r4
 80032b6:	609a      	str	r2, [r3, #8]
}
 80032b8:	bf00      	nop
 80032ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032be:	46bd      	mov	sp, r7
 80032c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c4:	51eb851f 	.word	0x51eb851f

080032c8 <std>:
 80032c8:	2300      	movs	r3, #0
 80032ca:	b510      	push	{r4, lr}
 80032cc:	4604      	mov	r4, r0
 80032ce:	e9c0 3300 	strd	r3, r3, [r0]
 80032d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032d6:	6083      	str	r3, [r0, #8]
 80032d8:	8181      	strh	r1, [r0, #12]
 80032da:	6643      	str	r3, [r0, #100]	@ 0x64
 80032dc:	81c2      	strh	r2, [r0, #14]
 80032de:	6183      	str	r3, [r0, #24]
 80032e0:	4619      	mov	r1, r3
 80032e2:	2208      	movs	r2, #8
 80032e4:	305c      	adds	r0, #92	@ 0x5c
 80032e6:	f000 fab5 	bl	8003854 <memset>
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <std+0x58>)
 80032ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <std+0x5c>)
 80032f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <std+0x60>)
 80032f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <std+0x64>)
 80032f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <std+0x68>)
 80032fc:	6224      	str	r4, [r4, #32]
 80032fe:	429c      	cmp	r4, r3
 8003300:	d006      	beq.n	8003310 <std+0x48>
 8003302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003306:	4294      	cmp	r4, r2
 8003308:	d002      	beq.n	8003310 <std+0x48>
 800330a:	33d0      	adds	r3, #208	@ 0xd0
 800330c:	429c      	cmp	r4, r3
 800330e:	d105      	bne.n	800331c <std+0x54>
 8003310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003318:	f000 bb14 	b.w	8003944 <__retarget_lock_init_recursive>
 800331c:	bd10      	pop	{r4, pc}
 800331e:	bf00      	nop
 8003320:	080036a5 	.word	0x080036a5
 8003324:	080036c7 	.word	0x080036c7
 8003328:	080036ff 	.word	0x080036ff
 800332c:	08003723 	.word	0x08003723
 8003330:	20000134 	.word	0x20000134

08003334 <stdio_exit_handler>:
 8003334:	4a02      	ldr	r2, [pc, #8]	@ (8003340 <stdio_exit_handler+0xc>)
 8003336:	4903      	ldr	r1, [pc, #12]	@ (8003344 <stdio_exit_handler+0x10>)
 8003338:	4803      	ldr	r0, [pc, #12]	@ (8003348 <stdio_exit_handler+0x14>)
 800333a:	f000 b869 	b.w	8003410 <_fwalk_sglue>
 800333e:	bf00      	nop
 8003340:	2000000c 	.word	0x2000000c
 8003344:	080041f1 	.word	0x080041f1
 8003348:	2000001c 	.word	0x2000001c

0800334c <cleanup_stdio>:
 800334c:	6841      	ldr	r1, [r0, #4]
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <cleanup_stdio+0x34>)
 8003350:	4299      	cmp	r1, r3
 8003352:	b510      	push	{r4, lr}
 8003354:	4604      	mov	r4, r0
 8003356:	d001      	beq.n	800335c <cleanup_stdio+0x10>
 8003358:	f000 ff4a 	bl	80041f0 <_fflush_r>
 800335c:	68a1      	ldr	r1, [r4, #8]
 800335e:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <cleanup_stdio+0x38>)
 8003360:	4299      	cmp	r1, r3
 8003362:	d002      	beq.n	800336a <cleanup_stdio+0x1e>
 8003364:	4620      	mov	r0, r4
 8003366:	f000 ff43 	bl	80041f0 <_fflush_r>
 800336a:	68e1      	ldr	r1, [r4, #12]
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <cleanup_stdio+0x3c>)
 800336e:	4299      	cmp	r1, r3
 8003370:	d004      	beq.n	800337c <cleanup_stdio+0x30>
 8003372:	4620      	mov	r0, r4
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003378:	f000 bf3a 	b.w	80041f0 <_fflush_r>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	20000134 	.word	0x20000134
 8003384:	2000019c 	.word	0x2000019c
 8003388:	20000204 	.word	0x20000204

0800338c <global_stdio_init.part.0>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <global_stdio_init.part.0+0x30>)
 8003390:	4c0b      	ldr	r4, [pc, #44]	@ (80033c0 <global_stdio_init.part.0+0x34>)
 8003392:	4a0c      	ldr	r2, [pc, #48]	@ (80033c4 <global_stdio_init.part.0+0x38>)
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4620      	mov	r0, r4
 8003398:	2200      	movs	r2, #0
 800339a:	2104      	movs	r1, #4
 800339c:	f7ff ff94 	bl	80032c8 <std>
 80033a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033a4:	2201      	movs	r2, #1
 80033a6:	2109      	movs	r1, #9
 80033a8:	f7ff ff8e 	bl	80032c8 <std>
 80033ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033b0:	2202      	movs	r2, #2
 80033b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b6:	2112      	movs	r1, #18
 80033b8:	f7ff bf86 	b.w	80032c8 <std>
 80033bc:	2000026c 	.word	0x2000026c
 80033c0:	20000134 	.word	0x20000134
 80033c4:	08003335 	.word	0x08003335

080033c8 <__sfp_lock_acquire>:
 80033c8:	4801      	ldr	r0, [pc, #4]	@ (80033d0 <__sfp_lock_acquire+0x8>)
 80033ca:	f000 babc 	b.w	8003946 <__retarget_lock_acquire_recursive>
 80033ce:	bf00      	nop
 80033d0:	20000275 	.word	0x20000275

080033d4 <__sfp_lock_release>:
 80033d4:	4801      	ldr	r0, [pc, #4]	@ (80033dc <__sfp_lock_release+0x8>)
 80033d6:	f000 bab7 	b.w	8003948 <__retarget_lock_release_recursive>
 80033da:	bf00      	nop
 80033dc:	20000275 	.word	0x20000275

080033e0 <__sinit>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4604      	mov	r4, r0
 80033e4:	f7ff fff0 	bl	80033c8 <__sfp_lock_acquire>
 80033e8:	6a23      	ldr	r3, [r4, #32]
 80033ea:	b11b      	cbz	r3, 80033f4 <__sinit+0x14>
 80033ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f0:	f7ff bff0 	b.w	80033d4 <__sfp_lock_release>
 80033f4:	4b04      	ldr	r3, [pc, #16]	@ (8003408 <__sinit+0x28>)
 80033f6:	6223      	str	r3, [r4, #32]
 80033f8:	4b04      	ldr	r3, [pc, #16]	@ (800340c <__sinit+0x2c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f5      	bne.n	80033ec <__sinit+0xc>
 8003400:	f7ff ffc4 	bl	800338c <global_stdio_init.part.0>
 8003404:	e7f2      	b.n	80033ec <__sinit+0xc>
 8003406:	bf00      	nop
 8003408:	0800334d 	.word	0x0800334d
 800340c:	2000026c 	.word	0x2000026c

08003410 <_fwalk_sglue>:
 8003410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003414:	4607      	mov	r7, r0
 8003416:	4688      	mov	r8, r1
 8003418:	4614      	mov	r4, r2
 800341a:	2600      	movs	r6, #0
 800341c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003420:	f1b9 0901 	subs.w	r9, r9, #1
 8003424:	d505      	bpl.n	8003432 <_fwalk_sglue+0x22>
 8003426:	6824      	ldr	r4, [r4, #0]
 8003428:	2c00      	cmp	r4, #0
 800342a:	d1f7      	bne.n	800341c <_fwalk_sglue+0xc>
 800342c:	4630      	mov	r0, r6
 800342e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003432:	89ab      	ldrh	r3, [r5, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d907      	bls.n	8003448 <_fwalk_sglue+0x38>
 8003438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800343c:	3301      	adds	r3, #1
 800343e:	d003      	beq.n	8003448 <_fwalk_sglue+0x38>
 8003440:	4629      	mov	r1, r5
 8003442:	4638      	mov	r0, r7
 8003444:	47c0      	blx	r8
 8003446:	4306      	orrs	r6, r0
 8003448:	3568      	adds	r5, #104	@ 0x68
 800344a:	e7e9      	b.n	8003420 <_fwalk_sglue+0x10>

0800344c <iprintf>:
 800344c:	b40f      	push	{r0, r1, r2, r3}
 800344e:	b507      	push	{r0, r1, r2, lr}
 8003450:	4906      	ldr	r1, [pc, #24]	@ (800346c <iprintf+0x20>)
 8003452:	ab04      	add	r3, sp, #16
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	f853 2b04 	ldr.w	r2, [r3], #4
 800345a:	6881      	ldr	r1, [r0, #8]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	f000 fb9f 	bl	8003ba0 <_vfiprintf_r>
 8003462:	b003      	add	sp, #12
 8003464:	f85d eb04 	ldr.w	lr, [sp], #4
 8003468:	b004      	add	sp, #16
 800346a:	4770      	bx	lr
 800346c:	20000018 	.word	0x20000018

08003470 <_puts_r>:
 8003470:	6a03      	ldr	r3, [r0, #32]
 8003472:	b570      	push	{r4, r5, r6, lr}
 8003474:	6884      	ldr	r4, [r0, #8]
 8003476:	4605      	mov	r5, r0
 8003478:	460e      	mov	r6, r1
 800347a:	b90b      	cbnz	r3, 8003480 <_puts_r+0x10>
 800347c:	f7ff ffb0 	bl	80033e0 <__sinit>
 8003480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003482:	07db      	lsls	r3, r3, #31
 8003484:	d405      	bmi.n	8003492 <_puts_r+0x22>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	0598      	lsls	r0, r3, #22
 800348a:	d402      	bmi.n	8003492 <_puts_r+0x22>
 800348c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800348e:	f000 fa5a 	bl	8003946 <__retarget_lock_acquire_recursive>
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	0719      	lsls	r1, r3, #28
 8003496:	d502      	bpl.n	800349e <_puts_r+0x2e>
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d135      	bne.n	800350a <_puts_r+0x9a>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f981 	bl	80037a8 <__swsetup_r>
 80034a6:	b380      	cbz	r0, 800350a <_puts_r+0x9a>
 80034a8:	f04f 35ff 	mov.w	r5, #4294967295
 80034ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034ae:	07da      	lsls	r2, r3, #31
 80034b0:	d405      	bmi.n	80034be <_puts_r+0x4e>
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d402      	bmi.n	80034be <_puts_r+0x4e>
 80034b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ba:	f000 fa45 	bl	8003948 <__retarget_lock_release_recursive>
 80034be:	4628      	mov	r0, r5
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da04      	bge.n	80034d0 <_puts_r+0x60>
 80034c6:	69a2      	ldr	r2, [r4, #24]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dc17      	bgt.n	80034fc <_puts_r+0x8c>
 80034cc:	290a      	cmp	r1, #10
 80034ce:	d015      	beq.n	80034fc <_puts_r+0x8c>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	6022      	str	r2, [r4, #0]
 80034d6:	7019      	strb	r1, [r3, #0]
 80034d8:	68a3      	ldr	r3, [r4, #8]
 80034da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034de:	3b01      	subs	r3, #1
 80034e0:	60a3      	str	r3, [r4, #8]
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d1ed      	bne.n	80034c2 <_puts_r+0x52>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da11      	bge.n	800350e <_puts_r+0x9e>
 80034ea:	4622      	mov	r2, r4
 80034ec:	210a      	movs	r1, #10
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f91b 	bl	800372a <__swbuf_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d0d7      	beq.n	80034a8 <_puts_r+0x38>
 80034f8:	250a      	movs	r5, #10
 80034fa:	e7d7      	b.n	80034ac <_puts_r+0x3c>
 80034fc:	4622      	mov	r2, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f913 	bl	800372a <__swbuf_r>
 8003504:	3001      	adds	r0, #1
 8003506:	d1e7      	bne.n	80034d8 <_puts_r+0x68>
 8003508:	e7ce      	b.n	80034a8 <_puts_r+0x38>
 800350a:	3e01      	subs	r6, #1
 800350c:	e7e4      	b.n	80034d8 <_puts_r+0x68>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	6022      	str	r2, [r4, #0]
 8003514:	220a      	movs	r2, #10
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e7ee      	b.n	80034f8 <_puts_r+0x88>
	...

0800351c <puts>:
 800351c:	4b02      	ldr	r3, [pc, #8]	@ (8003528 <puts+0xc>)
 800351e:	4601      	mov	r1, r0
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	f7ff bfa5 	b.w	8003470 <_puts_r>
 8003526:	bf00      	nop
 8003528:	20000018 	.word	0x20000018

0800352c <setbuf>:
 800352c:	fab1 f281 	clz	r2, r1
 8003530:	0952      	lsrs	r2, r2, #5
 8003532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003536:	0052      	lsls	r2, r2, #1
 8003538:	f000 b800 	b.w	800353c <setvbuf>

0800353c <setvbuf>:
 800353c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003540:	461d      	mov	r5, r3
 8003542:	4b57      	ldr	r3, [pc, #348]	@ (80036a0 <setvbuf+0x164>)
 8003544:	681f      	ldr	r7, [r3, #0]
 8003546:	4604      	mov	r4, r0
 8003548:	460e      	mov	r6, r1
 800354a:	4690      	mov	r8, r2
 800354c:	b127      	cbz	r7, 8003558 <setvbuf+0x1c>
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	b913      	cbnz	r3, 8003558 <setvbuf+0x1c>
 8003552:	4638      	mov	r0, r7
 8003554:	f7ff ff44 	bl	80033e0 <__sinit>
 8003558:	f1b8 0f02 	cmp.w	r8, #2
 800355c:	d006      	beq.n	800356c <setvbuf+0x30>
 800355e:	f1b8 0f01 	cmp.w	r8, #1
 8003562:	f200 809a 	bhi.w	800369a <setvbuf+0x15e>
 8003566:	2d00      	cmp	r5, #0
 8003568:	f2c0 8097 	blt.w	800369a <setvbuf+0x15e>
 800356c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800356e:	07d9      	lsls	r1, r3, #31
 8003570:	d405      	bmi.n	800357e <setvbuf+0x42>
 8003572:	89a3      	ldrh	r3, [r4, #12]
 8003574:	059a      	lsls	r2, r3, #22
 8003576:	d402      	bmi.n	800357e <setvbuf+0x42>
 8003578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800357a:	f000 f9e4 	bl	8003946 <__retarget_lock_acquire_recursive>
 800357e:	4621      	mov	r1, r4
 8003580:	4638      	mov	r0, r7
 8003582:	f000 fe35 	bl	80041f0 <_fflush_r>
 8003586:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003588:	b141      	cbz	r1, 800359c <setvbuf+0x60>
 800358a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800358e:	4299      	cmp	r1, r3
 8003590:	d002      	beq.n	8003598 <setvbuf+0x5c>
 8003592:	4638      	mov	r0, r7
 8003594:	f000 f9da 	bl	800394c <_free_r>
 8003598:	2300      	movs	r3, #0
 800359a:	6363      	str	r3, [r4, #52]	@ 0x34
 800359c:	2300      	movs	r3, #0
 800359e:	61a3      	str	r3, [r4, #24]
 80035a0:	6063      	str	r3, [r4, #4]
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	d503      	bpl.n	80035b0 <setvbuf+0x74>
 80035a8:	6921      	ldr	r1, [r4, #16]
 80035aa:	4638      	mov	r0, r7
 80035ac:	f000 f9ce 	bl	800394c <_free_r>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	f1b8 0f02 	cmp.w	r8, #2
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	d061      	beq.n	8003686 <setvbuf+0x14a>
 80035c2:	ab01      	add	r3, sp, #4
 80035c4:	466a      	mov	r2, sp
 80035c6:	4621      	mov	r1, r4
 80035c8:	4638      	mov	r0, r7
 80035ca:	f000 fe39 	bl	8004240 <__swhatbuf_r>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	4318      	orrs	r0, r3
 80035d2:	81a0      	strh	r0, [r4, #12]
 80035d4:	bb2d      	cbnz	r5, 8003622 <setvbuf+0xe6>
 80035d6:	9d00      	ldr	r5, [sp, #0]
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 fa01 	bl	80039e0 <malloc>
 80035de:	4606      	mov	r6, r0
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d152      	bne.n	800368a <setvbuf+0x14e>
 80035e4:	f8dd 9000 	ldr.w	r9, [sp]
 80035e8:	45a9      	cmp	r9, r5
 80035ea:	d140      	bne.n	800366e <setvbuf+0x132>
 80035ec:	f04f 35ff 	mov.w	r5, #4294967295
 80035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f4:	f043 0202 	orr.w	r2, r3, #2
 80035f8:	81a2      	strh	r2, [r4, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	60a2      	str	r2, [r4, #8]
 80035fe:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	6122      	str	r2, [r4, #16]
 8003606:	2201      	movs	r2, #1
 8003608:	6162      	str	r2, [r4, #20]
 800360a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800360c:	07d6      	lsls	r6, r2, #31
 800360e:	d404      	bmi.n	800361a <setvbuf+0xde>
 8003610:	0598      	lsls	r0, r3, #22
 8003612:	d402      	bmi.n	800361a <setvbuf+0xde>
 8003614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003616:	f000 f997 	bl	8003948 <__retarget_lock_release_recursive>
 800361a:	4628      	mov	r0, r5
 800361c:	b003      	add	sp, #12
 800361e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003622:	2e00      	cmp	r6, #0
 8003624:	d0d8      	beq.n	80035d8 <setvbuf+0x9c>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	b913      	cbnz	r3, 8003630 <setvbuf+0xf4>
 800362a:	4638      	mov	r0, r7
 800362c:	f7ff fed8 	bl	80033e0 <__sinit>
 8003630:	f1b8 0f01 	cmp.w	r8, #1
 8003634:	bf08      	it	eq
 8003636:	89a3      	ldrheq	r3, [r4, #12]
 8003638:	6026      	str	r6, [r4, #0]
 800363a:	bf04      	itt	eq
 800363c:	f043 0301 	orreq.w	r3, r3, #1
 8003640:	81a3      	strheq	r3, [r4, #12]
 8003642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003646:	f013 0208 	ands.w	r2, r3, #8
 800364a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800364e:	d01e      	beq.n	800368e <setvbuf+0x152>
 8003650:	07d9      	lsls	r1, r3, #31
 8003652:	bf41      	itttt	mi
 8003654:	2200      	movmi	r2, #0
 8003656:	426d      	negmi	r5, r5
 8003658:	60a2      	strmi	r2, [r4, #8]
 800365a:	61a5      	strmi	r5, [r4, #24]
 800365c:	bf58      	it	pl
 800365e:	60a5      	strpl	r5, [r4, #8]
 8003660:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003662:	07d2      	lsls	r2, r2, #31
 8003664:	d401      	bmi.n	800366a <setvbuf+0x12e>
 8003666:	059b      	lsls	r3, r3, #22
 8003668:	d513      	bpl.n	8003692 <setvbuf+0x156>
 800366a:	2500      	movs	r5, #0
 800366c:	e7d5      	b.n	800361a <setvbuf+0xde>
 800366e:	4648      	mov	r0, r9
 8003670:	f000 f9b6 	bl	80039e0 <malloc>
 8003674:	4606      	mov	r6, r0
 8003676:	2800      	cmp	r0, #0
 8003678:	d0b8      	beq.n	80035ec <setvbuf+0xb0>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	464d      	mov	r5, r9
 8003684:	e7cf      	b.n	8003626 <setvbuf+0xea>
 8003686:	2500      	movs	r5, #0
 8003688:	e7b2      	b.n	80035f0 <setvbuf+0xb4>
 800368a:	46a9      	mov	r9, r5
 800368c:	e7f5      	b.n	800367a <setvbuf+0x13e>
 800368e:	60a2      	str	r2, [r4, #8]
 8003690:	e7e6      	b.n	8003660 <setvbuf+0x124>
 8003692:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003694:	f000 f958 	bl	8003948 <__retarget_lock_release_recursive>
 8003698:	e7e7      	b.n	800366a <setvbuf+0x12e>
 800369a:	f04f 35ff 	mov.w	r5, #4294967295
 800369e:	e7bc      	b.n	800361a <setvbuf+0xde>
 80036a0:	20000018 	.word	0x20000018

080036a4 <__sread>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	460c      	mov	r4, r1
 80036a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ac:	f000 f8fc 	bl	80038a8 <_read_r>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	bfab      	itete	ge
 80036b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036b6:	89a3      	ldrhlt	r3, [r4, #12]
 80036b8:	181b      	addge	r3, r3, r0
 80036ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036be:	bfac      	ite	ge
 80036c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036c2:	81a3      	strhlt	r3, [r4, #12]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__swrite>:
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	461f      	mov	r7, r3
 80036cc:	898b      	ldrh	r3, [r1, #12]
 80036ce:	05db      	lsls	r3, r3, #23
 80036d0:	4605      	mov	r5, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4616      	mov	r6, r2
 80036d6:	d505      	bpl.n	80036e4 <__swrite+0x1e>
 80036d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036dc:	2302      	movs	r3, #2
 80036de:	2200      	movs	r2, #0
 80036e0:	f000 f8d0 	bl	8003884 <_lseek_r>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	4632      	mov	r2, r6
 80036f2:	463b      	mov	r3, r7
 80036f4:	4628      	mov	r0, r5
 80036f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fa:	f000 b8e7 	b.w	80038cc <_write_r>

080036fe <__sseek>:
 80036fe:	b510      	push	{r4, lr}
 8003700:	460c      	mov	r4, r1
 8003702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003706:	f000 f8bd 	bl	8003884 <_lseek_r>
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	bf15      	itete	ne
 8003710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800371a:	81a3      	strheq	r3, [r4, #12]
 800371c:	bf18      	it	ne
 800371e:	81a3      	strhne	r3, [r4, #12]
 8003720:	bd10      	pop	{r4, pc}

08003722 <__sclose>:
 8003722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003726:	f000 b89d 	b.w	8003864 <_close_r>

0800372a <__swbuf_r>:
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	460e      	mov	r6, r1
 800372e:	4614      	mov	r4, r2
 8003730:	4605      	mov	r5, r0
 8003732:	b118      	cbz	r0, 800373c <__swbuf_r+0x12>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	b90b      	cbnz	r3, 800373c <__swbuf_r+0x12>
 8003738:	f7ff fe52 	bl	80033e0 <__sinit>
 800373c:	69a3      	ldr	r3, [r4, #24]
 800373e:	60a3      	str	r3, [r4, #8]
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	071a      	lsls	r2, r3, #28
 8003744:	d501      	bpl.n	800374a <__swbuf_r+0x20>
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	b943      	cbnz	r3, 800375c <__swbuf_r+0x32>
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f82b 	bl	80037a8 <__swsetup_r>
 8003752:	b118      	cbz	r0, 800375c <__swbuf_r+0x32>
 8003754:	f04f 37ff 	mov.w	r7, #4294967295
 8003758:	4638      	mov	r0, r7
 800375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	6922      	ldr	r2, [r4, #16]
 8003760:	1a98      	subs	r0, r3, r2
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	b2f6      	uxtb	r6, r6
 8003766:	4283      	cmp	r3, r0
 8003768:	4637      	mov	r7, r6
 800376a:	dc05      	bgt.n	8003778 <__swbuf_r+0x4e>
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fd3e 	bl	80041f0 <_fflush_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	d1ed      	bne.n	8003754 <__swbuf_r+0x2a>
 8003778:	68a3      	ldr	r3, [r4, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	6022      	str	r2, [r4, #0]
 8003784:	701e      	strb	r6, [r3, #0]
 8003786:	6962      	ldr	r2, [r4, #20]
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	429a      	cmp	r2, r3
 800378c:	d004      	beq.n	8003798 <__swbuf_r+0x6e>
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	07db      	lsls	r3, r3, #31
 8003792:	d5e1      	bpl.n	8003758 <__swbuf_r+0x2e>
 8003794:	2e0a      	cmp	r6, #10
 8003796:	d1df      	bne.n	8003758 <__swbuf_r+0x2e>
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 fd28 	bl	80041f0 <_fflush_r>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d0d9      	beq.n	8003758 <__swbuf_r+0x2e>
 80037a4:	e7d6      	b.n	8003754 <__swbuf_r+0x2a>
	...

080037a8 <__swsetup_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <__swsetup_r+0xa8>)
 80037ac:	4605      	mov	r5, r0
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	460c      	mov	r4, r1
 80037b2:	b118      	cbz	r0, 80037bc <__swsetup_r+0x14>
 80037b4:	6a03      	ldr	r3, [r0, #32]
 80037b6:	b90b      	cbnz	r3, 80037bc <__swsetup_r+0x14>
 80037b8:	f7ff fe12 	bl	80033e0 <__sinit>
 80037bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c0:	0719      	lsls	r1, r3, #28
 80037c2:	d422      	bmi.n	800380a <__swsetup_r+0x62>
 80037c4:	06da      	lsls	r2, r3, #27
 80037c6:	d407      	bmi.n	80037d8 <__swsetup_r+0x30>
 80037c8:	2209      	movs	r2, #9
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	e033      	b.n	8003840 <__swsetup_r+0x98>
 80037d8:	0758      	lsls	r0, r3, #29
 80037da:	d512      	bpl.n	8003802 <__swsetup_r+0x5a>
 80037dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037de:	b141      	cbz	r1, 80037f2 <__swsetup_r+0x4a>
 80037e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037e4:	4299      	cmp	r1, r3
 80037e6:	d002      	beq.n	80037ee <__swsetup_r+0x46>
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 f8af 	bl	800394c <_free_r>
 80037ee:	2300      	movs	r3, #0
 80037f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037f8:	81a3      	strh	r3, [r4, #12]
 80037fa:	2300      	movs	r3, #0
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	b94b      	cbnz	r3, 8003822 <__swsetup_r+0x7a>
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003818:	d003      	beq.n	8003822 <__swsetup_r+0x7a>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fd35 	bl	800428c <__smakebuf_r>
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	f013 0201 	ands.w	r2, r3, #1
 800382a:	d00a      	beq.n	8003842 <__swsetup_r+0x9a>
 800382c:	2200      	movs	r2, #0
 800382e:	60a2      	str	r2, [r4, #8]
 8003830:	6962      	ldr	r2, [r4, #20]
 8003832:	4252      	negs	r2, r2
 8003834:	61a2      	str	r2, [r4, #24]
 8003836:	6922      	ldr	r2, [r4, #16]
 8003838:	b942      	cbnz	r2, 800384c <__swsetup_r+0xa4>
 800383a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800383e:	d1c5      	bne.n	80037cc <__swsetup_r+0x24>
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	0799      	lsls	r1, r3, #30
 8003844:	bf58      	it	pl
 8003846:	6962      	ldrpl	r2, [r4, #20]
 8003848:	60a2      	str	r2, [r4, #8]
 800384a:	e7f4      	b.n	8003836 <__swsetup_r+0x8e>
 800384c:	2000      	movs	r0, #0
 800384e:	e7f7      	b.n	8003840 <__swsetup_r+0x98>
 8003850:	20000018 	.word	0x20000018

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_close_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d06      	ldr	r5, [pc, #24]	@ (8003880 <_close_r+0x1c>)
 8003868:	2300      	movs	r3, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fd fb21 	bl	8000eb6 <_close>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_close_r+0x1a>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_close_r+0x1a>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000270 	.word	0x20000270

08003884 <_lseek_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d07      	ldr	r5, [pc, #28]	@ (80038a4 <_lseek_r+0x20>)
 8003888:	4604      	mov	r4, r0
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	2200      	movs	r2, #0
 8003890:	602a      	str	r2, [r5, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	f7fd fb36 	bl	8000f04 <_lseek>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_lseek_r+0x1e>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_lseek_r+0x1e>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	20000270 	.word	0x20000270

080038a8 <_read_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	@ (80038c8 <_read_r+0x20>)
 80038ac:	4604      	mov	r4, r0
 80038ae:	4608      	mov	r0, r1
 80038b0:	4611      	mov	r1, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f7fd fae0 	bl	8000e7c <_read>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_read_r+0x1e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_read_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	20000270 	.word	0x20000270

080038cc <_write_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d07      	ldr	r5, [pc, #28]	@ (80038ec <_write_r+0x20>)
 80038d0:	4604      	mov	r4, r0
 80038d2:	4608      	mov	r0, r1
 80038d4:	4611      	mov	r1, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fd f9ce 	bl	8000c7c <_write>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_write_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_write_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	20000270 	.word	0x20000270

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	@ (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000018 	.word	0x20000018

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	@ (8003938 <__libc_init_array+0x3c>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2600      	movs	r6, #0
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4d0b      	ldr	r5, [pc, #44]	@ (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	@ (8003940 <__libc_init_array+0x44>)
 8003910:	f000 fd2a 	bl	8004368 <_init>
 8003914:	1b64      	subs	r4, r4, r5
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2600      	movs	r6, #0
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	0800453c 	.word	0x0800453c
 8003938:	0800453c 	.word	0x0800453c
 800393c:	0800453c 	.word	0x0800453c
 8003940:	08004540 	.word	0x08004540

08003944 <__retarget_lock_init_recursive>:
 8003944:	4770      	bx	lr

08003946 <__retarget_lock_acquire_recursive>:
 8003946:	4770      	bx	lr

08003948 <__retarget_lock_release_recursive>:
 8003948:	4770      	bx	lr
	...

0800394c <_free_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4605      	mov	r5, r0
 8003950:	2900      	cmp	r1, #0
 8003952:	d041      	beq.n	80039d8 <_free_r+0x8c>
 8003954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003958:	1f0c      	subs	r4, r1, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfb8      	it	lt
 800395e:	18e4      	addlt	r4, r4, r3
 8003960:	f000 f8e8 	bl	8003b34 <__malloc_lock>
 8003964:	4a1d      	ldr	r2, [pc, #116]	@ (80039dc <_free_r+0x90>)
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	b933      	cbnz	r3, 8003978 <_free_r+0x2c>
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6014      	str	r4, [r2, #0]
 800396e:	4628      	mov	r0, r5
 8003970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003974:	f000 b8e4 	b.w	8003b40 <__malloc_unlock>
 8003978:	42a3      	cmp	r3, r4
 800397a:	d908      	bls.n	800398e <_free_r+0x42>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	1821      	adds	r1, r4, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	e7ed      	b.n	800396a <_free_r+0x1e>
 800398e:	461a      	mov	r2, r3
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b10b      	cbz	r3, 8003998 <_free_r+0x4c>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d9fa      	bls.n	800398e <_free_r+0x42>
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	1850      	adds	r0, r2, r1
 800399c:	42a0      	cmp	r0, r4
 800399e:	d10b      	bne.n	80039b8 <_free_r+0x6c>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	4401      	add	r1, r0
 80039a4:	1850      	adds	r0, r2, r1
 80039a6:	4283      	cmp	r3, r0
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	d1e0      	bne.n	800396e <_free_r+0x22>
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6053      	str	r3, [r2, #4]
 80039b2:	4408      	add	r0, r1
 80039b4:	6010      	str	r0, [r2, #0]
 80039b6:	e7da      	b.n	800396e <_free_r+0x22>
 80039b8:	d902      	bls.n	80039c0 <_free_r+0x74>
 80039ba:	230c      	movs	r3, #12
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	e7d6      	b.n	800396e <_free_r+0x22>
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	1821      	adds	r1, r4, r0
 80039c4:	428b      	cmp	r3, r1
 80039c6:	bf04      	itt	eq
 80039c8:	6819      	ldreq	r1, [r3, #0]
 80039ca:	685b      	ldreq	r3, [r3, #4]
 80039cc:	6063      	str	r3, [r4, #4]
 80039ce:	bf04      	itt	eq
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	6054      	str	r4, [r2, #4]
 80039d6:	e7ca      	b.n	800396e <_free_r+0x22>
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
 80039da:	bf00      	nop
 80039dc:	2000027c 	.word	0x2000027c

080039e0 <malloc>:
 80039e0:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <malloc+0xc>)
 80039e2:	4601      	mov	r1, r0
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	f000 b825 	b.w	8003a34 <_malloc_r>
 80039ea:	bf00      	nop
 80039ec:	20000018 	.word	0x20000018

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a30 <sbrk_aligned+0x40>)
 80039f4:	460c      	mov	r4, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	4605      	mov	r5, r0
 80039fa:	b911      	cbnz	r1, 8003a02 <sbrk_aligned+0x12>
 80039fc:	f000 fca4 	bl	8004348 <_sbrk_r>
 8003a00:	6030      	str	r0, [r6, #0]
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 fc9f 	bl	8004348 <_sbrk_r>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d103      	bne.n	8003a16 <sbrk_aligned+0x26>
 8003a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a12:	4620      	mov	r0, r4
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
 8003a16:	1cc4      	adds	r4, r0, #3
 8003a18:	f024 0403 	bic.w	r4, r4, #3
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d0f8      	beq.n	8003a12 <sbrk_aligned+0x22>
 8003a20:	1a21      	subs	r1, r4, r0
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fc90 	bl	8004348 <_sbrk_r>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d1f2      	bne.n	8003a12 <sbrk_aligned+0x22>
 8003a2c:	e7ef      	b.n	8003a0e <sbrk_aligned+0x1e>
 8003a2e:	bf00      	nop
 8003a30:	20000278 	.word	0x20000278

08003a34 <_malloc_r>:
 8003a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	1ccd      	adds	r5, r1, #3
 8003a3a:	f025 0503 	bic.w	r5, r5, #3
 8003a3e:	3508      	adds	r5, #8
 8003a40:	2d0c      	cmp	r5, #12
 8003a42:	bf38      	it	cc
 8003a44:	250c      	movcc	r5, #12
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	4606      	mov	r6, r0
 8003a4a:	db01      	blt.n	8003a50 <_malloc_r+0x1c>
 8003a4c:	42a9      	cmp	r1, r5
 8003a4e:	d904      	bls.n	8003a5a <_malloc_r+0x26>
 8003a50:	230c      	movs	r3, #12
 8003a52:	6033      	str	r3, [r6, #0]
 8003a54:	2000      	movs	r0, #0
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b30 <_malloc_r+0xfc>
 8003a5e:	f000 f869 	bl	8003b34 <__malloc_lock>
 8003a62:	f8d8 3000 	ldr.w	r3, [r8]
 8003a66:	461c      	mov	r4, r3
 8003a68:	bb44      	cbnz	r4, 8003abc <_malloc_r+0x88>
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7ff ffbf 	bl	80039f0 <sbrk_aligned>
 8003a72:	1c43      	adds	r3, r0, #1
 8003a74:	4604      	mov	r4, r0
 8003a76:	d158      	bne.n	8003b2a <_malloc_r+0xf6>
 8003a78:	f8d8 4000 	ldr.w	r4, [r8]
 8003a7c:	4627      	mov	r7, r4
 8003a7e:	2f00      	cmp	r7, #0
 8003a80:	d143      	bne.n	8003b0a <_malloc_r+0xd6>
 8003a82:	2c00      	cmp	r4, #0
 8003a84:	d04b      	beq.n	8003b1e <_malloc_r+0xea>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	4639      	mov	r1, r7
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	eb04 0903 	add.w	r9, r4, r3
 8003a90:	f000 fc5a 	bl	8004348 <_sbrk_r>
 8003a94:	4581      	cmp	r9, r0
 8003a96:	d142      	bne.n	8003b1e <_malloc_r+0xea>
 8003a98:	6821      	ldr	r1, [r4, #0]
 8003a9a:	1a6d      	subs	r5, r5, r1
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff ffa6 	bl	80039f0 <sbrk_aligned>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d03a      	beq.n	8003b1e <_malloc_r+0xea>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	442b      	add	r3, r5
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	bb62      	cbnz	r2, 8003b10 <_malloc_r+0xdc>
 8003ab6:	f8c8 7000 	str.w	r7, [r8]
 8003aba:	e00f      	b.n	8003adc <_malloc_r+0xa8>
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	1b52      	subs	r2, r2, r5
 8003ac0:	d420      	bmi.n	8003b04 <_malloc_r+0xd0>
 8003ac2:	2a0b      	cmp	r2, #11
 8003ac4:	d917      	bls.n	8003af6 <_malloc_r+0xc2>
 8003ac6:	1961      	adds	r1, r4, r5
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	6025      	str	r5, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	6059      	strne	r1, [r3, #4]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	bf08      	it	eq
 8003ad4:	f8c8 1000 	streq.w	r1, [r8]
 8003ad8:	5162      	str	r2, [r4, r5]
 8003ada:	604b      	str	r3, [r1, #4]
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f82f 	bl	8003b40 <__malloc_unlock>
 8003ae2:	f104 000b 	add.w	r0, r4, #11
 8003ae6:	1d23      	adds	r3, r4, #4
 8003ae8:	f020 0007 	bic.w	r0, r0, #7
 8003aec:	1ac2      	subs	r2, r0, r3
 8003aee:	bf1c      	itt	ne
 8003af0:	1a1b      	subne	r3, r3, r0
 8003af2:	50a3      	strne	r3, [r4, r2]
 8003af4:	e7af      	b.n	8003a56 <_malloc_r+0x22>
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	bf0c      	ite	eq
 8003afc:	f8c8 2000 	streq.w	r2, [r8]
 8003b00:	605a      	strne	r2, [r3, #4]
 8003b02:	e7eb      	b.n	8003adc <_malloc_r+0xa8>
 8003b04:	4623      	mov	r3, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7ae      	b.n	8003a68 <_malloc_r+0x34>
 8003b0a:	463c      	mov	r4, r7
 8003b0c:	687f      	ldr	r7, [r7, #4]
 8003b0e:	e7b6      	b.n	8003a7e <_malloc_r+0x4a>
 8003b10:	461a      	mov	r2, r3
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d1fb      	bne.n	8003b10 <_malloc_r+0xdc>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7de      	b.n	8003adc <_malloc_r+0xa8>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	6033      	str	r3, [r6, #0]
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f80c 	bl	8003b40 <__malloc_unlock>
 8003b28:	e794      	b.n	8003a54 <_malloc_r+0x20>
 8003b2a:	6005      	str	r5, [r0, #0]
 8003b2c:	e7d6      	b.n	8003adc <_malloc_r+0xa8>
 8003b2e:	bf00      	nop
 8003b30:	2000027c 	.word	0x2000027c

08003b34 <__malloc_lock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_lock+0x8>)
 8003b36:	f7ff bf06 	b.w	8003946 <__retarget_lock_acquire_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000274 	.word	0x20000274

08003b40 <__malloc_unlock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_unlock+0x8>)
 8003b42:	f7ff bf01 	b.w	8003948 <__retarget_lock_release_recursive>
 8003b46:	bf00      	nop
 8003b48:	20000274 	.word	0x20000274

08003b4c <__sfputc_r>:
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	b410      	push	{r4}
 8003b54:	6093      	str	r3, [r2, #8]
 8003b56:	da08      	bge.n	8003b6a <__sfputc_r+0x1e>
 8003b58:	6994      	ldr	r4, [r2, #24]
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	db01      	blt.n	8003b62 <__sfputc_r+0x16>
 8003b5e:	290a      	cmp	r1, #10
 8003b60:	d103      	bne.n	8003b6a <__sfputc_r+0x1e>
 8003b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b66:	f7ff bde0 	b.w	800372a <__swbuf_r>
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	1c58      	adds	r0, r3, #1
 8003b6e:	6010      	str	r0, [r2, #0]
 8003b70:	7019      	strb	r1, [r3, #0]
 8003b72:	4608      	mov	r0, r1
 8003b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <__sfputs_r>:
 8003b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	460f      	mov	r7, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	18d5      	adds	r5, r2, r3
 8003b84:	42ac      	cmp	r4, r5
 8003b86:	d101      	bne.n	8003b8c <__sfputs_r+0x12>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e007      	b.n	8003b9c <__sfputs_r+0x22>
 8003b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b90:	463a      	mov	r2, r7
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7ff ffda 	bl	8003b4c <__sfputc_r>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d1f3      	bne.n	8003b84 <__sfputs_r+0xa>
 8003b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ba0 <_vfiprintf_r>:
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	460d      	mov	r5, r1
 8003ba6:	b09d      	sub	sp, #116	@ 0x74
 8003ba8:	4614      	mov	r4, r2
 8003baa:	4698      	mov	r8, r3
 8003bac:	4606      	mov	r6, r0
 8003bae:	b118      	cbz	r0, 8003bb8 <_vfiprintf_r+0x18>
 8003bb0:	6a03      	ldr	r3, [r0, #32]
 8003bb2:	b90b      	cbnz	r3, 8003bb8 <_vfiprintf_r+0x18>
 8003bb4:	f7ff fc14 	bl	80033e0 <__sinit>
 8003bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bba:	07d9      	lsls	r1, r3, #31
 8003bbc:	d405      	bmi.n	8003bca <_vfiprintf_r+0x2a>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	059a      	lsls	r2, r3, #22
 8003bc2:	d402      	bmi.n	8003bca <_vfiprintf_r+0x2a>
 8003bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bc6:	f7ff febe 	bl	8003946 <__retarget_lock_acquire_recursive>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	d501      	bpl.n	8003bd4 <_vfiprintf_r+0x34>
 8003bd0:	692b      	ldr	r3, [r5, #16]
 8003bd2:	b99b      	cbnz	r3, 8003bfc <_vfiprintf_r+0x5c>
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f7ff fde6 	bl	80037a8 <__swsetup_r>
 8003bdc:	b170      	cbz	r0, 8003bfc <_vfiprintf_r+0x5c>
 8003bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003be0:	07dc      	lsls	r4, r3, #31
 8003be2:	d504      	bpl.n	8003bee <_vfiprintf_r+0x4e>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	b01d      	add	sp, #116	@ 0x74
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	89ab      	ldrh	r3, [r5, #12]
 8003bf0:	0598      	lsls	r0, r3, #22
 8003bf2:	d4f7      	bmi.n	8003be4 <_vfiprintf_r+0x44>
 8003bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bf6:	f7ff fea7 	bl	8003948 <__retarget_lock_release_recursive>
 8003bfa:	e7f3      	b.n	8003be4 <_vfiprintf_r+0x44>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c00:	2320      	movs	r3, #32
 8003c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c0a:	2330      	movs	r3, #48	@ 0x30
 8003c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003dbc <_vfiprintf_r+0x21c>
 8003c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c14:	f04f 0901 	mov.w	r9, #1
 8003c18:	4623      	mov	r3, r4
 8003c1a:	469a      	mov	sl, r3
 8003c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c20:	b10a      	cbz	r2, 8003c26 <_vfiprintf_r+0x86>
 8003c22:	2a25      	cmp	r2, #37	@ 0x25
 8003c24:	d1f9      	bne.n	8003c1a <_vfiprintf_r+0x7a>
 8003c26:	ebba 0b04 	subs.w	fp, sl, r4
 8003c2a:	d00b      	beq.n	8003c44 <_vfiprintf_r+0xa4>
 8003c2c:	465b      	mov	r3, fp
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7ff ffa1 	bl	8003b7a <__sfputs_r>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	f000 80a7 	beq.w	8003d8c <_vfiprintf_r+0x1ec>
 8003c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c40:	445a      	add	r2, fp
 8003c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c44:	f89a 3000 	ldrb.w	r3, [sl]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 809f 	beq.w	8003d8c <_vfiprintf_r+0x1ec>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c58:	f10a 0a01 	add.w	sl, sl, #1
 8003c5c:	9304      	str	r3, [sp, #16]
 8003c5e:	9307      	str	r3, [sp, #28]
 8003c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c66:	4654      	mov	r4, sl
 8003c68:	2205      	movs	r2, #5
 8003c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6e:	4853      	ldr	r0, [pc, #332]	@ (8003dbc <_vfiprintf_r+0x21c>)
 8003c70:	f7fc face 	bl	8000210 <memchr>
 8003c74:	9a04      	ldr	r2, [sp, #16]
 8003c76:	b9d8      	cbnz	r0, 8003cb0 <_vfiprintf_r+0x110>
 8003c78:	06d1      	lsls	r1, r2, #27
 8003c7a:	bf44      	itt	mi
 8003c7c:	2320      	movmi	r3, #32
 8003c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c82:	0713      	lsls	r3, r2, #28
 8003c84:	bf44      	itt	mi
 8003c86:	232b      	movmi	r3, #43	@ 0x2b
 8003c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c92:	d015      	beq.n	8003cc0 <_vfiprintf_r+0x120>
 8003c94:	9a07      	ldr	r2, [sp, #28]
 8003c96:	4654      	mov	r4, sl
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f04f 0c0a 	mov.w	ip, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ca4:	3b30      	subs	r3, #48	@ 0x30
 8003ca6:	2b09      	cmp	r3, #9
 8003ca8:	d94b      	bls.n	8003d42 <_vfiprintf_r+0x1a2>
 8003caa:	b1b0      	cbz	r0, 8003cda <_vfiprintf_r+0x13a>
 8003cac:	9207      	str	r2, [sp, #28]
 8003cae:	e014      	b.n	8003cda <_vfiprintf_r+0x13a>
 8003cb0:	eba0 0308 	sub.w	r3, r0, r8
 8003cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	9304      	str	r3, [sp, #16]
 8003cbc:	46a2      	mov	sl, r4
 8003cbe:	e7d2      	b.n	8003c66 <_vfiprintf_r+0xc6>
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	1d19      	adds	r1, r3, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	9103      	str	r1, [sp, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bfbb      	ittet	lt
 8003ccc:	425b      	neglt	r3, r3
 8003cce:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd2:	9307      	strge	r3, [sp, #28]
 8003cd4:	9307      	strlt	r3, [sp, #28]
 8003cd6:	bfb8      	it	lt
 8003cd8:	9204      	strlt	r2, [sp, #16]
 8003cda:	7823      	ldrb	r3, [r4, #0]
 8003cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cde:	d10a      	bne.n	8003cf6 <_vfiprintf_r+0x156>
 8003ce0:	7863      	ldrb	r3, [r4, #1]
 8003ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ce4:	d132      	bne.n	8003d4c <_vfiprintf_r+0x1ac>
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	9203      	str	r2, [sp, #12]
 8003cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cf2:	3402      	adds	r4, #2
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003dcc <_vfiprintf_r+0x22c>
 8003cfa:	7821      	ldrb	r1, [r4, #0]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4650      	mov	r0, sl
 8003d00:	f7fc fa86 	bl	8000210 <memchr>
 8003d04:	b138      	cbz	r0, 8003d16 <_vfiprintf_r+0x176>
 8003d06:	9b04      	ldr	r3, [sp, #16]
 8003d08:	eba0 000a 	sub.w	r0, r0, sl
 8003d0c:	2240      	movs	r2, #64	@ 0x40
 8003d0e:	4082      	lsls	r2, r0
 8003d10:	4313      	orrs	r3, r2
 8003d12:	3401      	adds	r4, #1
 8003d14:	9304      	str	r3, [sp, #16]
 8003d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d1a:	4829      	ldr	r0, [pc, #164]	@ (8003dc0 <_vfiprintf_r+0x220>)
 8003d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d20:	2206      	movs	r2, #6
 8003d22:	f7fc fa75 	bl	8000210 <memchr>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d03f      	beq.n	8003daa <_vfiprintf_r+0x20a>
 8003d2a:	4b26      	ldr	r3, [pc, #152]	@ (8003dc4 <_vfiprintf_r+0x224>)
 8003d2c:	bb1b      	cbnz	r3, 8003d76 <_vfiprintf_r+0x1d6>
 8003d2e:	9b03      	ldr	r3, [sp, #12]
 8003d30:	3307      	adds	r3, #7
 8003d32:	f023 0307 	bic.w	r3, r3, #7
 8003d36:	3308      	adds	r3, #8
 8003d38:	9303      	str	r3, [sp, #12]
 8003d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d3c:	443b      	add	r3, r7
 8003d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d40:	e76a      	b.n	8003c18 <_vfiprintf_r+0x78>
 8003d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d46:	460c      	mov	r4, r1
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e7a8      	b.n	8003c9e <_vfiprintf_r+0xfe>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	3401      	adds	r4, #1
 8003d50:	9305      	str	r3, [sp, #20]
 8003d52:	4619      	mov	r1, r3
 8003d54:	f04f 0c0a 	mov.w	ip, #10
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d5e:	3a30      	subs	r2, #48	@ 0x30
 8003d60:	2a09      	cmp	r2, #9
 8003d62:	d903      	bls.n	8003d6c <_vfiprintf_r+0x1cc>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0c6      	beq.n	8003cf6 <_vfiprintf_r+0x156>
 8003d68:	9105      	str	r1, [sp, #20]
 8003d6a:	e7c4      	b.n	8003cf6 <_vfiprintf_r+0x156>
 8003d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d70:	4604      	mov	r4, r0
 8003d72:	2301      	movs	r3, #1
 8003d74:	e7f0      	b.n	8003d58 <_vfiprintf_r+0x1b8>
 8003d76:	ab03      	add	r3, sp, #12
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	462a      	mov	r2, r5
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <_vfiprintf_r+0x228>)
 8003d7e:	a904      	add	r1, sp, #16
 8003d80:	4630      	mov	r0, r6
 8003d82:	f3af 8000 	nop.w
 8003d86:	4607      	mov	r7, r0
 8003d88:	1c78      	adds	r0, r7, #1
 8003d8a:	d1d6      	bne.n	8003d3a <_vfiprintf_r+0x19a>
 8003d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d8e:	07d9      	lsls	r1, r3, #31
 8003d90:	d405      	bmi.n	8003d9e <_vfiprintf_r+0x1fe>
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	059a      	lsls	r2, r3, #22
 8003d96:	d402      	bmi.n	8003d9e <_vfiprintf_r+0x1fe>
 8003d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d9a:	f7ff fdd5 	bl	8003948 <__retarget_lock_release_recursive>
 8003d9e:	89ab      	ldrh	r3, [r5, #12]
 8003da0:	065b      	lsls	r3, r3, #25
 8003da2:	f53f af1f 	bmi.w	8003be4 <_vfiprintf_r+0x44>
 8003da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003da8:	e71e      	b.n	8003be8 <_vfiprintf_r+0x48>
 8003daa:	ab03      	add	r3, sp, #12
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	462a      	mov	r2, r5
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <_vfiprintf_r+0x228>)
 8003db2:	a904      	add	r1, sp, #16
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 f879 	bl	8003eac <_printf_i>
 8003dba:	e7e4      	b.n	8003d86 <_vfiprintf_r+0x1e6>
 8003dbc:	08004500 	.word	0x08004500
 8003dc0:	0800450a 	.word	0x0800450a
 8003dc4:	00000000 	.word	0x00000000
 8003dc8:	08003b7b 	.word	0x08003b7b
 8003dcc:	08004506 	.word	0x08004506

08003dd0 <_printf_common>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	4698      	mov	r8, r3
 8003dd8:	688a      	ldr	r2, [r1, #8]
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	bfb8      	it	lt
 8003de4:	4613      	movlt	r3, r2
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dec:	4607      	mov	r7, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	b10a      	cbz	r2, 8003df6 <_printf_common+0x26>
 8003df2:	3301      	adds	r3, #1
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	0699      	lsls	r1, r3, #26
 8003dfa:	bf42      	ittt	mi
 8003dfc:	6833      	ldrmi	r3, [r6, #0]
 8003dfe:	3302      	addmi	r3, #2
 8003e00:	6033      	strmi	r3, [r6, #0]
 8003e02:	6825      	ldr	r5, [r4, #0]
 8003e04:	f015 0506 	ands.w	r5, r5, #6
 8003e08:	d106      	bne.n	8003e18 <_printf_common+0x48>
 8003e0a:	f104 0a19 	add.w	sl, r4, #25
 8003e0e:	68e3      	ldr	r3, [r4, #12]
 8003e10:	6832      	ldr	r2, [r6, #0]
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	42ab      	cmp	r3, r5
 8003e16:	dc26      	bgt.n	8003e66 <_printf_common+0x96>
 8003e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	3b00      	subs	r3, #0
 8003e20:	bf18      	it	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	0692      	lsls	r2, r2, #26
 8003e26:	d42b      	bmi.n	8003e80 <_printf_common+0xb0>
 8003e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	4638      	mov	r0, r7
 8003e30:	47c8      	blx	r9
 8003e32:	3001      	adds	r0, #1
 8003e34:	d01e      	beq.n	8003e74 <_printf_common+0xa4>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	bf02      	ittt	eq
 8003e42:	68e5      	ldreq	r5, [r4, #12]
 8003e44:	6833      	ldreq	r3, [r6, #0]
 8003e46:	1aed      	subeq	r5, r5, r3
 8003e48:	68a3      	ldr	r3, [r4, #8]
 8003e4a:	bf0c      	ite	eq
 8003e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e50:	2500      	movne	r5, #0
 8003e52:	4293      	cmp	r3, r2
 8003e54:	bfc4      	itt	gt
 8003e56:	1a9b      	subgt	r3, r3, r2
 8003e58:	18ed      	addgt	r5, r5, r3
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	341a      	adds	r4, #26
 8003e5e:	42b5      	cmp	r5, r6
 8003e60:	d11a      	bne.n	8003e98 <_printf_common+0xc8>
 8003e62:	2000      	movs	r0, #0
 8003e64:	e008      	b.n	8003e78 <_printf_common+0xa8>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	47c8      	blx	r9
 8003e70:	3001      	adds	r0, #1
 8003e72:	d103      	bne.n	8003e7c <_printf_common+0xac>
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7c:	3501      	adds	r5, #1
 8003e7e:	e7c6      	b.n	8003e0e <_printf_common+0x3e>
 8003e80:	18e1      	adds	r1, r4, r3
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	2030      	movs	r0, #48	@ 0x30
 8003e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e8a:	4422      	add	r2, r4
 8003e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e94:	3302      	adds	r3, #2
 8003e96:	e7c7      	b.n	8003e28 <_printf_common+0x58>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	47c8      	blx	r9
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0e6      	beq.n	8003e74 <_printf_common+0xa4>
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	e7d9      	b.n	8003e5e <_printf_common+0x8e>
	...

08003eac <_printf_i>:
 8003eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	7e0f      	ldrb	r7, [r1, #24]
 8003eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eb4:	2f78      	cmp	r7, #120	@ 0x78
 8003eb6:	4691      	mov	r9, r2
 8003eb8:	4680      	mov	r8, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	469a      	mov	sl, r3
 8003ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ec2:	d807      	bhi.n	8003ed4 <_printf_i+0x28>
 8003ec4:	2f62      	cmp	r7, #98	@ 0x62
 8003ec6:	d80a      	bhi.n	8003ede <_printf_i+0x32>
 8003ec8:	2f00      	cmp	r7, #0
 8003eca:	f000 80d1 	beq.w	8004070 <_printf_i+0x1c4>
 8003ece:	2f58      	cmp	r7, #88	@ 0x58
 8003ed0:	f000 80b8 	beq.w	8004044 <_printf_i+0x198>
 8003ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003edc:	e03a      	b.n	8003f54 <_printf_i+0xa8>
 8003ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ee2:	2b15      	cmp	r3, #21
 8003ee4:	d8f6      	bhi.n	8003ed4 <_printf_i+0x28>
 8003ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8003eec <_printf_i+0x40>)
 8003ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003ed5 	.word	0x08003ed5
 8003ef8:	08003ed5 	.word	0x08003ed5
 8003efc:	08003ed5 	.word	0x08003ed5
 8003f00:	08003ed5 	.word	0x08003ed5
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003ed5 	.word	0x08003ed5
 8003f0c:	08003ed5 	.word	0x08003ed5
 8003f10:	08003ed5 	.word	0x08003ed5
 8003f14:	08003ed5 	.word	0x08003ed5
 8003f18:	08004057 	.word	0x08004057
 8003f1c:	08003f83 	.word	0x08003f83
 8003f20:	08004011 	.word	0x08004011
 8003f24:	08003ed5 	.word	0x08003ed5
 8003f28:	08003ed5 	.word	0x08003ed5
 8003f2c:	08004079 	.word	0x08004079
 8003f30:	08003ed5 	.word	0x08003ed5
 8003f34:	08003f83 	.word	0x08003f83
 8003f38:	08003ed5 	.word	0x08003ed5
 8003f3c:	08003ed5 	.word	0x08003ed5
 8003f40:	08004019 	.word	0x08004019
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6032      	str	r2, [r6, #0]
 8003f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f54:	2301      	movs	r3, #1
 8003f56:	e09c      	b.n	8004092 <_printf_i+0x1e6>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	1d19      	adds	r1, r3, #4
 8003f5e:	6031      	str	r1, [r6, #0]
 8003f60:	0606      	lsls	r6, r0, #24
 8003f62:	d501      	bpl.n	8003f68 <_printf_i+0xbc>
 8003f64:	681d      	ldr	r5, [r3, #0]
 8003f66:	e003      	b.n	8003f70 <_printf_i+0xc4>
 8003f68:	0645      	lsls	r5, r0, #25
 8003f6a:	d5fb      	bpl.n	8003f64 <_printf_i+0xb8>
 8003f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f70:	2d00      	cmp	r5, #0
 8003f72:	da03      	bge.n	8003f7c <_printf_i+0xd0>
 8003f74:	232d      	movs	r3, #45	@ 0x2d
 8003f76:	426d      	negs	r5, r5
 8003f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7c:	4858      	ldr	r0, [pc, #352]	@ (80040e0 <_printf_i+0x234>)
 8003f7e:	230a      	movs	r3, #10
 8003f80:	e011      	b.n	8003fa6 <_printf_i+0xfa>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	6833      	ldr	r3, [r6, #0]
 8003f86:	0608      	lsls	r0, r1, #24
 8003f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f8c:	d402      	bmi.n	8003f94 <_printf_i+0xe8>
 8003f8e:	0649      	lsls	r1, r1, #25
 8003f90:	bf48      	it	mi
 8003f92:	b2ad      	uxthmi	r5, r5
 8003f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f96:	4852      	ldr	r0, [pc, #328]	@ (80040e0 <_printf_i+0x234>)
 8003f98:	6033      	str	r3, [r6, #0]
 8003f9a:	bf14      	ite	ne
 8003f9c:	230a      	movne	r3, #10
 8003f9e:	2308      	moveq	r3, #8
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fa6:	6866      	ldr	r6, [r4, #4]
 8003fa8:	60a6      	str	r6, [r4, #8]
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	db05      	blt.n	8003fba <_printf_i+0x10e>
 8003fae:	6821      	ldr	r1, [r4, #0]
 8003fb0:	432e      	orrs	r6, r5
 8003fb2:	f021 0104 	bic.w	r1, r1, #4
 8003fb6:	6021      	str	r1, [r4, #0]
 8003fb8:	d04b      	beq.n	8004052 <_printf_i+0x1a6>
 8003fba:	4616      	mov	r6, r2
 8003fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc4:	5dc7      	ldrb	r7, [r0, r7]
 8003fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fca:	462f      	mov	r7, r5
 8003fcc:	42bb      	cmp	r3, r7
 8003fce:	460d      	mov	r5, r1
 8003fd0:	d9f4      	bls.n	8003fbc <_printf_i+0x110>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d10b      	bne.n	8003fee <_printf_i+0x142>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	07df      	lsls	r7, r3, #31
 8003fda:	d508      	bpl.n	8003fee <_printf_i+0x142>
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	6861      	ldr	r1, [r4, #4]
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	bfde      	ittt	le
 8003fe4:	2330      	movle	r3, #48	@ 0x30
 8003fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fee:	1b92      	subs	r2, r2, r6
 8003ff0:	6122      	str	r2, [r4, #16]
 8003ff2:	f8cd a000 	str.w	sl, [sp]
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	aa03      	add	r2, sp, #12
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	f7ff fee7 	bl	8003dd0 <_printf_common>
 8004002:	3001      	adds	r0, #1
 8004004:	d14a      	bne.n	800409c <_printf_i+0x1f0>
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	b004      	add	sp, #16
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	4832      	ldr	r0, [pc, #200]	@ (80040e4 <_printf_i+0x238>)
 800401a:	2778      	movs	r7, #120	@ 0x78
 800401c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	6831      	ldr	r1, [r6, #0]
 8004024:	061f      	lsls	r7, r3, #24
 8004026:	f851 5b04 	ldr.w	r5, [r1], #4
 800402a:	d402      	bmi.n	8004032 <_printf_i+0x186>
 800402c:	065f      	lsls	r7, r3, #25
 800402e:	bf48      	it	mi
 8004030:	b2ad      	uxthmi	r5, r5
 8004032:	6031      	str	r1, [r6, #0]
 8004034:	07d9      	lsls	r1, r3, #31
 8004036:	bf44      	itt	mi
 8004038:	f043 0320 	orrmi.w	r3, r3, #32
 800403c:	6023      	strmi	r3, [r4, #0]
 800403e:	b11d      	cbz	r5, 8004048 <_printf_i+0x19c>
 8004040:	2310      	movs	r3, #16
 8004042:	e7ad      	b.n	8003fa0 <_printf_i+0xf4>
 8004044:	4826      	ldr	r0, [pc, #152]	@ (80040e0 <_printf_i+0x234>)
 8004046:	e7e9      	b.n	800401c <_printf_i+0x170>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f023 0320 	bic.w	r3, r3, #32
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	e7f6      	b.n	8004040 <_printf_i+0x194>
 8004052:	4616      	mov	r6, r2
 8004054:	e7bd      	b.n	8003fd2 <_printf_i+0x126>
 8004056:	6833      	ldr	r3, [r6, #0]
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	6961      	ldr	r1, [r4, #20]
 800405c:	1d18      	adds	r0, r3, #4
 800405e:	6030      	str	r0, [r6, #0]
 8004060:	062e      	lsls	r6, r5, #24
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	d501      	bpl.n	800406a <_printf_i+0x1be>
 8004066:	6019      	str	r1, [r3, #0]
 8004068:	e002      	b.n	8004070 <_printf_i+0x1c4>
 800406a:	0668      	lsls	r0, r5, #25
 800406c:	d5fb      	bpl.n	8004066 <_printf_i+0x1ba>
 800406e:	8019      	strh	r1, [r3, #0]
 8004070:	2300      	movs	r3, #0
 8004072:	6123      	str	r3, [r4, #16]
 8004074:	4616      	mov	r6, r2
 8004076:	e7bc      	b.n	8003ff2 <_printf_i+0x146>
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	6032      	str	r2, [r6, #0]
 800407e:	681e      	ldr	r6, [r3, #0]
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	2100      	movs	r1, #0
 8004084:	4630      	mov	r0, r6
 8004086:	f7fc f8c3 	bl	8000210 <memchr>
 800408a:	b108      	cbz	r0, 8004090 <_printf_i+0x1e4>
 800408c:	1b80      	subs	r0, r0, r6
 800408e:	6060      	str	r0, [r4, #4]
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800409a:	e7aa      	b.n	8003ff2 <_printf_i+0x146>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	4632      	mov	r2, r6
 80040a0:	4649      	mov	r1, r9
 80040a2:	4640      	mov	r0, r8
 80040a4:	47d0      	blx	sl
 80040a6:	3001      	adds	r0, #1
 80040a8:	d0ad      	beq.n	8004006 <_printf_i+0x15a>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	079b      	lsls	r3, r3, #30
 80040ae:	d413      	bmi.n	80040d8 <_printf_i+0x22c>
 80040b0:	68e0      	ldr	r0, [r4, #12]
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	4298      	cmp	r0, r3
 80040b6:	bfb8      	it	lt
 80040b8:	4618      	movlt	r0, r3
 80040ba:	e7a6      	b.n	800400a <_printf_i+0x15e>
 80040bc:	2301      	movs	r3, #1
 80040be:	4632      	mov	r2, r6
 80040c0:	4649      	mov	r1, r9
 80040c2:	4640      	mov	r0, r8
 80040c4:	47d0      	blx	sl
 80040c6:	3001      	adds	r0, #1
 80040c8:	d09d      	beq.n	8004006 <_printf_i+0x15a>
 80040ca:	3501      	adds	r5, #1
 80040cc:	68e3      	ldr	r3, [r4, #12]
 80040ce:	9903      	ldr	r1, [sp, #12]
 80040d0:	1a5b      	subs	r3, r3, r1
 80040d2:	42ab      	cmp	r3, r5
 80040d4:	dcf2      	bgt.n	80040bc <_printf_i+0x210>
 80040d6:	e7eb      	b.n	80040b0 <_printf_i+0x204>
 80040d8:	2500      	movs	r5, #0
 80040da:	f104 0619 	add.w	r6, r4, #25
 80040de:	e7f5      	b.n	80040cc <_printf_i+0x220>
 80040e0:	08004511 	.word	0x08004511
 80040e4:	08004522 	.word	0x08004522

080040e8 <__sflush_r>:
 80040e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	0716      	lsls	r6, r2, #28
 80040f2:	4605      	mov	r5, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	d454      	bmi.n	80041a2 <__sflush_r+0xba>
 80040f8:	684b      	ldr	r3, [r1, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dc02      	bgt.n	8004104 <__sflush_r+0x1c>
 80040fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	dd48      	ble.n	8004196 <__sflush_r+0xae>
 8004104:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004106:	2e00      	cmp	r6, #0
 8004108:	d045      	beq.n	8004196 <__sflush_r+0xae>
 800410a:	2300      	movs	r3, #0
 800410c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004110:	682f      	ldr	r7, [r5, #0]
 8004112:	6a21      	ldr	r1, [r4, #32]
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	d030      	beq.n	800417a <__sflush_r+0x92>
 8004118:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	0759      	lsls	r1, r3, #29
 800411e:	d505      	bpl.n	800412c <__sflush_r+0x44>
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004126:	b10b      	cbz	r3, 800412c <__sflush_r+0x44>
 8004128:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004130:	6a21      	ldr	r1, [r4, #32]
 8004132:	4628      	mov	r0, r5
 8004134:	47b0      	blx	r6
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	d106      	bne.n	800414a <__sflush_r+0x62>
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	291d      	cmp	r1, #29
 8004140:	d82b      	bhi.n	800419a <__sflush_r+0xb2>
 8004142:	4a2a      	ldr	r2, [pc, #168]	@ (80041ec <__sflush_r+0x104>)
 8004144:	40ca      	lsrs	r2, r1
 8004146:	07d6      	lsls	r6, r2, #31
 8004148:	d527      	bpl.n	800419a <__sflush_r+0xb2>
 800414a:	2200      	movs	r2, #0
 800414c:	6062      	str	r2, [r4, #4]
 800414e:	04d9      	lsls	r1, r3, #19
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	d504      	bpl.n	8004160 <__sflush_r+0x78>
 8004156:	1c42      	adds	r2, r0, #1
 8004158:	d101      	bne.n	800415e <__sflush_r+0x76>
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	b903      	cbnz	r3, 8004160 <__sflush_r+0x78>
 800415e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004162:	602f      	str	r7, [r5, #0]
 8004164:	b1b9      	cbz	r1, 8004196 <__sflush_r+0xae>
 8004166:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800416a:	4299      	cmp	r1, r3
 800416c:	d002      	beq.n	8004174 <__sflush_r+0x8c>
 800416e:	4628      	mov	r0, r5
 8004170:	f7ff fbec 	bl	800394c <_free_r>
 8004174:	2300      	movs	r3, #0
 8004176:	6363      	str	r3, [r4, #52]	@ 0x34
 8004178:	e00d      	b.n	8004196 <__sflush_r+0xae>
 800417a:	2301      	movs	r3, #1
 800417c:	4628      	mov	r0, r5
 800417e:	47b0      	blx	r6
 8004180:	4602      	mov	r2, r0
 8004182:	1c50      	adds	r0, r2, #1
 8004184:	d1c9      	bne.n	800411a <__sflush_r+0x32>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0c6      	beq.n	800411a <__sflush_r+0x32>
 800418c:	2b1d      	cmp	r3, #29
 800418e:	d001      	beq.n	8004194 <__sflush_r+0xac>
 8004190:	2b16      	cmp	r3, #22
 8004192:	d11e      	bne.n	80041d2 <__sflush_r+0xea>
 8004194:	602f      	str	r7, [r5, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	e022      	b.n	80041e0 <__sflush_r+0xf8>
 800419a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419e:	b21b      	sxth	r3, r3
 80041a0:	e01b      	b.n	80041da <__sflush_r+0xf2>
 80041a2:	690f      	ldr	r7, [r1, #16]
 80041a4:	2f00      	cmp	r7, #0
 80041a6:	d0f6      	beq.n	8004196 <__sflush_r+0xae>
 80041a8:	0793      	lsls	r3, r2, #30
 80041aa:	680e      	ldr	r6, [r1, #0]
 80041ac:	bf08      	it	eq
 80041ae:	694b      	ldreq	r3, [r1, #20]
 80041b0:	600f      	str	r7, [r1, #0]
 80041b2:	bf18      	it	ne
 80041b4:	2300      	movne	r3, #0
 80041b6:	eba6 0807 	sub.w	r8, r6, r7
 80041ba:	608b      	str	r3, [r1, #8]
 80041bc:	f1b8 0f00 	cmp.w	r8, #0
 80041c0:	dde9      	ble.n	8004196 <__sflush_r+0xae>
 80041c2:	6a21      	ldr	r1, [r4, #32]
 80041c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041c6:	4643      	mov	r3, r8
 80041c8:	463a      	mov	r2, r7
 80041ca:	4628      	mov	r0, r5
 80041cc:	47b0      	blx	r6
 80041ce:	2800      	cmp	r0, #0
 80041d0:	dc08      	bgt.n	80041e4 <__sflush_r+0xfc>
 80041d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e4:	4407      	add	r7, r0
 80041e6:	eba8 0800 	sub.w	r8, r8, r0
 80041ea:	e7e7      	b.n	80041bc <__sflush_r+0xd4>
 80041ec:	20400001 	.word	0x20400001

080041f0 <_fflush_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	4605      	mov	r5, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	b913      	cbnz	r3, 8004200 <_fflush_r+0x10>
 80041fa:	2500      	movs	r5, #0
 80041fc:	4628      	mov	r0, r5
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	b118      	cbz	r0, 800420a <_fflush_r+0x1a>
 8004202:	6a03      	ldr	r3, [r0, #32]
 8004204:	b90b      	cbnz	r3, 800420a <_fflush_r+0x1a>
 8004206:	f7ff f8eb 	bl	80033e0 <__sinit>
 800420a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f3      	beq.n	80041fa <_fflush_r+0xa>
 8004212:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004214:	07d0      	lsls	r0, r2, #31
 8004216:	d404      	bmi.n	8004222 <_fflush_r+0x32>
 8004218:	0599      	lsls	r1, r3, #22
 800421a:	d402      	bmi.n	8004222 <_fflush_r+0x32>
 800421c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800421e:	f7ff fb92 	bl	8003946 <__retarget_lock_acquire_recursive>
 8004222:	4628      	mov	r0, r5
 8004224:	4621      	mov	r1, r4
 8004226:	f7ff ff5f 	bl	80040e8 <__sflush_r>
 800422a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800422c:	07da      	lsls	r2, r3, #31
 800422e:	4605      	mov	r5, r0
 8004230:	d4e4      	bmi.n	80041fc <_fflush_r+0xc>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	059b      	lsls	r3, r3, #22
 8004236:	d4e1      	bmi.n	80041fc <_fflush_r+0xc>
 8004238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800423a:	f7ff fb85 	bl	8003948 <__retarget_lock_release_recursive>
 800423e:	e7dd      	b.n	80041fc <_fflush_r+0xc>

08004240 <__swhatbuf_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460c      	mov	r4, r1
 8004244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004248:	2900      	cmp	r1, #0
 800424a:	b096      	sub	sp, #88	@ 0x58
 800424c:	4615      	mov	r5, r2
 800424e:	461e      	mov	r6, r3
 8004250:	da0d      	bge.n	800426e <__swhatbuf_r+0x2e>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	bf14      	ite	ne
 800425e:	2340      	movne	r3, #64	@ 0x40
 8004260:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004264:	2000      	movs	r0, #0
 8004266:	6031      	str	r1, [r6, #0]
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	b016      	add	sp, #88	@ 0x58
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	466a      	mov	r2, sp
 8004270:	f000 f848 	bl	8004304 <_fstat_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	dbec      	blt.n	8004252 <__swhatbuf_r+0x12>
 8004278:	9901      	ldr	r1, [sp, #4]
 800427a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800427e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004282:	4259      	negs	r1, r3
 8004284:	4159      	adcs	r1, r3
 8004286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800428a:	e7eb      	b.n	8004264 <__swhatbuf_r+0x24>

0800428c <__smakebuf_r>:
 800428c:	898b      	ldrh	r3, [r1, #12]
 800428e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004290:	079d      	lsls	r5, r3, #30
 8004292:	4606      	mov	r6, r0
 8004294:	460c      	mov	r4, r1
 8004296:	d507      	bpl.n	80042a8 <__smakebuf_r+0x1c>
 8004298:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	6123      	str	r3, [r4, #16]
 80042a0:	2301      	movs	r3, #1
 80042a2:	6163      	str	r3, [r4, #20]
 80042a4:	b003      	add	sp, #12
 80042a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a8:	ab01      	add	r3, sp, #4
 80042aa:	466a      	mov	r2, sp
 80042ac:	f7ff ffc8 	bl	8004240 <__swhatbuf_r>
 80042b0:	9f00      	ldr	r7, [sp, #0]
 80042b2:	4605      	mov	r5, r0
 80042b4:	4639      	mov	r1, r7
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7ff fbbc 	bl	8003a34 <_malloc_r>
 80042bc:	b948      	cbnz	r0, 80042d2 <__smakebuf_r+0x46>
 80042be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c2:	059a      	lsls	r2, r3, #22
 80042c4:	d4ee      	bmi.n	80042a4 <__smakebuf_r+0x18>
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	e7e2      	b.n	8004298 <__smakebuf_r+0xc>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	6020      	str	r0, [r4, #0]
 80042d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	9b01      	ldr	r3, [sp, #4]
 80042de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042e2:	b15b      	cbz	r3, 80042fc <__smakebuf_r+0x70>
 80042e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 f81d 	bl	8004328 <_isatty_r>
 80042ee:	b128      	cbz	r0, 80042fc <__smakebuf_r+0x70>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	431d      	orrs	r5, r3
 8004300:	81a5      	strh	r5, [r4, #12]
 8004302:	e7cf      	b.n	80042a4 <__smakebuf_r+0x18>

08004304 <_fstat_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d07      	ldr	r5, [pc, #28]	@ (8004324 <_fstat_r+0x20>)
 8004308:	2300      	movs	r3, #0
 800430a:	4604      	mov	r4, r0
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	f7fc fddc 	bl	8000ece <_fstat>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	d102      	bne.n	8004320 <_fstat_r+0x1c>
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	b103      	cbz	r3, 8004320 <_fstat_r+0x1c>
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	bd38      	pop	{r3, r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	20000270 	.word	0x20000270

08004328 <_isatty_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d06      	ldr	r5, [pc, #24]	@ (8004344 <_isatty_r+0x1c>)
 800432c:	2300      	movs	r3, #0
 800432e:	4604      	mov	r4, r0
 8004330:	4608      	mov	r0, r1
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	f7fc fddb 	bl	8000eee <_isatty>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_isatty_r+0x1a>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_isatty_r+0x1a>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000270 	.word	0x20000270

08004348 <_sbrk_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	@ (8004364 <_sbrk_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fde4 	bl	8000f20 <_sbrk>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_sbrk_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_sbrk_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000270 	.word	0x20000270

08004368 <_init>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr

08004374 <_fini>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr
